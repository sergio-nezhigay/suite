import { RouteHandler } from 'gadget-server';
import { openAIResponseStream } from 'gadget-server/ai';

const route: RouteHandler<{
  Body: { message: string };
}> = async ({ request, reply, api, logger, connections }) => {
  const { message } = request.body;

  const embeddingResponse = await connections.openai.embeddings.create({
    input: message,
    model: 'text-embedding-3-small',
  });

  const rawProducts = await api.shopifyProduct.findMany({
    sort: {
      descriptionEmbedding: {
        cosineSimilarityTo: embeddingResponse.data[0].embedding,
      },
    },
    first: 10,
    filter: {
      variants: {
        some: {
          inventoryQuantity: {
            greaterThan: 0,
          },
        },
      },
    },
    select: {
      id: true,
      title: true,
      body: true,
      handle: true,
      shop: {
        domain: true,
      },

      images: {
        edges: {
          node: {
            alt: true,
            source: true,
          },
        },
      },
    },
  });
  const products = rawProducts.map((product) => ({
    ...product,
    images:
      product.images.edges.length > 0 ? [product.images.edges[0].node] : [],
  }));

  console.log(products);
  // capture products in Gadget's Logs
  logger.info(
    { products, message: request.body.message },
    'found products most similar to user input'
  );
  const titles = products.map(({ title }) => ({ title }));
  logger.info({ titles }, ' products names');

  const prompt = `–í–∏ ‚Äî –∫–æ—Ä–∏—Å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –ø–æ–∫—É–ø–æ–∫, —è–∫–∏–π –¥–æ–ø–æ–º–∞–≥–∞—î –∫–ª—ñ—î–Ω—Ç–∞–º –∑–Ω–∞–π—Ç–∏ –ø–æ—Ç—Ä—ñ–±–Ω—ñ —Ç–æ–≤–∞—Ä–∏. –í–∞–º –±—É–¥–µ –Ω–∞–¥–∞–Ω–æ –ø–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞ —Ç–∞ –∫—ñ–ª—å–∫–∞ JSON-–æ–±'—î–∫—Ç—ñ–≤ —ñ–∑ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–æ–º, –Ω–∞–∑–≤–æ—é, –æ–ø–∏—Å–æ–º (body) —ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º (handle) –Ω–∞ —Ç–æ–≤–∞—Ä–∏, —è–∫—ñ –ø—Ä–∏–±–ª–∏–∑–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –∑–∞–ø–∏—Ç—É –∫–ª—ñ—î–Ω—Ç–∞, –∞ —Ç–∞–∫–æ–∂ –¥–æ–º–µ–Ω –º–∞–≥–∞–∑–∏–Ω—É. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ —É —Ñ–æ—Ä–º–∞—Ç—ñ HTML, –¥–æ–¥–∞—é—á–∏ —Ç–µ–≥–∏ <a> –∑ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏ —Ç–æ–≤–∞—Ä—ñ–≤, —è–∫—ñ –≤–µ–¥—É—Ç—å –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤, —Ç–∞ <br /> –º—ñ–∂ —Ç–µ–∫—Å—Ç–æ–≤–æ—é –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é —ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è–º–∏. –ü–æ—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤–∏–Ω–Ω–æ –º–∞—Ç–∏ —Ñ–æ—Ä–º–∞—Ç: <a href={"https://" + {domain} + "/products/" + {handle}} target="_blank">{title}<img style={border: "1px solid #3b82f6"; border-radius: 8px; border-color: 8px; display: block; margin: 0 auto;} width="200px" src={product.images.edges[0].node.source} /></a>, –¥–µ {domain}, {handle} —Ç–∞ {title} –∑–∞–º—ñ–Ω—é—é—Ç—å—Å—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–º–∏ –∑–º—ñ–Ω–Ω–∏–º–∏. –Ø–∫—â–æ –≤–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É—î—Ç–µ —Ç–æ–≤–∞—Ä–∏, –∑–∞–≤–µ—Ä—à—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —Å–ª–æ–≤–∞–º–∏ "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ —Ç–æ–≤–∞—Ä, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ!". –Ø–∫—â–æ –≤–∏ –Ω–µ –≤–ø–µ–≤–Ω–µ–Ω—ñ –∞–±–æ –ø–∏—Ç–∞–Ω–Ω—è –∑–¥–∞—î—Ç—å—Å—è –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏–º, –Ω–∞–ø–∏—à—ñ—Ç—å "–í–∏–±–∞—á—Ç–µ, —è –Ω–µ –∑–Ω–∞—é, —è–∫ –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∑ —Ü–∏–º" —ñ –¥–æ–¥–∞–π—Ç–µ –∫—ñ–ª—å–∫–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π —â–æ–¥–æ —Ç–æ–≥–æ, —è–∫—ñ –∑–∞–ø–∏—Ç–∏ –º–æ–∂–Ω–∞ –∑–∞–¥–∞—Ç–∏. –û—Å—å —Ç–æ–≤–∞—Ä–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON, —è–∫—ñ –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: ${JSON.stringify(
    products
  )}`;

  // send prompt and similar products to OpenAI to generate a response
  // using GPT-4 Turbo model
  const chatResponse = await connections.openai.chat.completions.create({
    model: 'gpt-4o-mini',
    messages: [
      {
        role: 'system',
        content: prompt,
      },
      { role: 'user', content: message },
    ],
    stream: true,
  });
  console.log('üöÄ ~ chatResponse:', chatResponse);

  // function fired after the steam is finished
  const onComplete = async (content: string) => {
    try {
      // Log the beginning of the recommendation process
      logger.info('Starting to process recommended products...');

      const recommendedProducts = products.map((product) => ({
        create: {
          product: {
            _link: product.id,
          },
        },
      }));

      // Log the recommended products structure
      logger.info(
        { recommendedProducts },
        'Prepared recommendedProducts for chatLog creation.'
      );

      await api.chatLog.create({ response: content });

      // void api.internal.chatLog.create({
      //   response: content,
      //   recommendedProducts,
      // });

      logger.info('Successfully created chatLog with recommendedProducts.');
    } catch (error) {
      // Log any errors that occur
      logger.error(
        { error, content, products },
        'Error occurred while handling the recommendedProducts field.'
      );
    }
  };

  await reply.send(openAIResponseStream(chatResponse, { onComplete }));
};

export default route;
