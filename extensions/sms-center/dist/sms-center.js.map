{
  "version": 3,
  "sources": ["../../../../node_modules/react/cjs/react.production.min.js", "../../../../node_modules/react/index.js", "../../../../node_modules/scheduler/cjs/scheduler.production.min.js", "../../../../node_modules/scheduler/index.js", "../../../../node_modules/react-reconciler/cjs/react-reconciler.production.min.js", "../../../../node_modules/react-reconciler/index.js", "../../../../node_modules/react/cjs/react-jsx-runtime.production.min.js", "../../../../node_modules/react/jsx-runtime.js", "../../../../node_modules/cross-fetch/dist/browser-ponyfill.js", "../../../../node_modules/@n1ru4l/json-patch-plus/esm/lcs.js", "../../../../node_modules/@n1ru4l/json-patch-plus/esm/diff.js", "../../../../node_modules/@n1ru4l/json-patch-plus/esm/patch.js", "../../../../node_modules/@n1ru4l/json-patch-plus/esm/index.js", "../../../../node_modules/@gadgetinc/api-client-core/src/repeater/index.ts", "../../../../node_modules/@gadgetinc/api-client-core/src/graphql-live-query-utils/createApplyLiveQueryPatch.ts", "../../../../node_modules/@n1ru4l/push-pull-async-iterable-iterator/index.mjs", "../../../../node_modules/@gadgetinc/api-client-core/src/graphql-live-query-utils/index.ts", "../../../../extensions/sms-center/src/SmsCenter.tsx", "../../../../node_modules/@remote-ui/rpc/build/esm/memory.mjs", "../../../../node_modules/@remote-ui/core/build/esm/utilities.mjs", "../../../../node_modules/@remote-ui/core/build/esm/root.mjs", "../../../../node_modules/@shopify/ui-extensions/build/esm/utilities/registration.mjs", "../../../../node_modules/@shopify/ui-extensions/build/esm/surfaces/admin/extension.mjs", "../../../../node_modules/@shopify/ui-extensions/build/esm/surfaces/admin/components/Badge/Badge.mjs", "../../../../node_modules/@shopify/ui-extensions/build/esm/surfaces/admin/components/BlockStack/BlockStack.mjs", "../../../../node_modules/@shopify/ui-extensions/build/esm/surfaces/admin/components/Button/Button.mjs", "../../../../node_modules/@shopify/ui-extensions/build/esm/surfaces/admin/components/InlineStack/InlineStack.mjs", "../../../../node_modules/@shopify/ui-extensions/build/esm/surfaces/admin/components/Link/Link.mjs", "../../../../node_modules/@shopify/ui-extensions/build/esm/surfaces/admin/components/ProgressIndicator/ProgressIndicator.mjs", "../../../../node_modules/@shopify/ui-extensions/build/esm/surfaces/admin/components/Text/Text.mjs", "../../../../node_modules/@remote-ui/react/build/esm/render.mjs", "../../../../node_modules/@remote-ui/react/build/esm/reconciler.mjs", "../../../../node_modules/@remote-ui/react/build/esm/context.mjs", "../../../../node_modules/@remote-ui/react/build/esm/components.mjs", "../../../../node_modules/@remote-ui/react/build/esm/hooks/render.mjs", "../../../../node_modules/@shopify/ui-extensions-react/build/esm/surfaces/admin/context.mjs", "../../../../node_modules/@shopify/ui-extensions-react/build/esm/surfaces/admin/render.mjs", "../../../../node_modules/@shopify/ui-extensions-react/build/esm/surfaces/admin/components/Badge/Badge.mjs", "../../../../node_modules/@shopify/ui-extensions-react/build/esm/surfaces/admin/components/BlockStack/BlockStack.mjs", "../../../../node_modules/@shopify/ui-extensions-react/build/esm/surfaces/admin/components/Button/Button.mjs", "../../../../node_modules/@shopify/ui-extensions-react/build/esm/surfaces/admin/components/InlineStack/InlineStack.mjs", "../../../../node_modules/@shopify/ui-extensions-react/build/esm/surfaces/admin/components/Link/Link.mjs", "../../../../node_modules/@shopify/ui-extensions-react/build/esm/surfaces/admin/components/ProgressIndicator/ProgressIndicator.mjs", "../../../../node_modules/@shopify/ui-extensions-react/build/esm/surfaces/admin/components/Text/Text.mjs", "../../../../node_modules/@shopify/ui-extensions-react/build/esm/surfaces/admin/hooks/api.mjs", "../../../../node_modules/@shopify/ui-extensions-react/build/esm/surfaces/admin/errors.mjs", "../../../../extensions/shared/makeGraphQLQuery.ts", "../../../../extensions/shared/shopifyOperations.ts", "../../../../extensions/sms-center/src/utils/replacePlaceholders.ts", "../../../../extensions/shared/data.ts", "../../../../extensions/sms-center/src/utils/validateAndFormatPhoneNumber.ts", "../../../../extensions/sms-center/src/utils/sendSmsMessage.ts", "../../../../node_modules/@gadgetinc/api-client-core/src/AnyClient.ts", "../../../../node_modules/wonka/dist/wonka.mjs", "../../../../node_modules/@0no-co/graphql.web/src/kind.js", "../../../../node_modules/@0no-co/graphql.web/src/error.ts", "../../../../node_modules/@0no-co/graphql.web/src/parser.ts", "../../../../node_modules/@0no-co/graphql.web/src/visitor.ts", "../../../../node_modules/@0no-co/graphql.web/src/printer.ts", "../../../../node_modules/@0no-co/graphql.web/src/values.ts", "../../../../node_modules/@urql/core/src/utils/error.ts", "../../../../node_modules/@urql/core/src/utils/hash.ts", "../../../../node_modules/@urql/core/src/utils/variables.ts", "../../../../node_modules/@urql/core/src/utils/request.ts", "../../../../node_modules/@urql/core/src/utils/result.ts", "../../../../node_modules/@urql/core/src/internal/fetchOptions.ts", "../../../../node_modules/@urql/core/src/internal/fetchSource.ts", "../../../../node_modules/@urql/core/src/utils/collectTypenames.ts", "../../../../node_modules/@urql/core/src/utils/formatDocument.ts", "../../../../node_modules/@urql/core/src/utils/maskTypename.ts", "../../../../node_modules/@urql/core/src/utils/streamUtils.ts", "../../../../node_modules/@urql/core/src/utils/operation.ts", "../../../../node_modules/@urql/core/src/utils/index.ts", "../../../../node_modules/@urql/core/src/gql.ts", "../../../../node_modules/@urql/core/src/exchanges/cache.ts", "../../../../node_modules/@urql/core/src/exchanges/ssr.ts", "../../../../node_modules/@urql/core/src/exchanges/subscription.ts", "../../../../node_modules/@urql/core/src/exchanges/debug.ts", "../../../../node_modules/@urql/core/src/exchanges/dedup.ts", "../../../../node_modules/@urql/core/src/exchanges/fetch.ts", "../../../../node_modules/@urql/core/src/exchanges/compose.ts", "../../../../node_modules/@urql/core/src/exchanges/map.ts", "../../../../node_modules/@urql/core/src/exchanges/fallback.ts", "../../../../node_modules/@urql/core/src/client.ts", "../../../../node_modules/tiny-graphql-query-compiler/src/index.ts", "../../../../node_modules/@gadgetinc/api-client-core/src/DataHydrator.ts", "../../../../node_modules/klona/dist/index.mjs", "../../../../node_modules/@gadgetinc/api-client-core/src/GadgetRecord.ts", "../../../../node_modules/@gadgetinc/api-client-core/src/support.ts", "../../../../node_modules/@gadgetinc/api-client-core/src/GadgetRecordList.ts", "../../../../node_modules/@gadgetinc/api-client-core/src/operationBuilders.ts", "../../../../node_modules/@gadgetinc/api-client-core/src/operationRunners.ts", "../../../../node_modules/@gadgetinc/api-client-core/src/BackgroundActionHandle.ts", "../../../../node_modules/@gadgetinc/api-client-core/src/ClientOptions.ts", "../../../../node_modules/graphql-ws/lib/utils.mjs", "../../../../node_modules/graphql-ws/lib/common.mjs", "../../../../node_modules/graphql-ws/lib/client.mjs", "../../../../node_modules/isomorphic-ws/browser.js", "../../../../node_modules/@gadgetinc/api-client-core/src/GadgetTransaction.ts", "../../../../node_modules/@gadgetinc/api-client-core/src/InMemoryStorage.ts", "../../../../node_modules/@gadgetinc/api-client-core/src/exchanges/liveQueryExchange.ts", "../../../../node_modules/@gadgetinc/api-client-core/src/exchanges/operationNameExchange.ts", "../../../../node_modules/@gadgetinc/api-client-core/src/exchanges/urlParamExchange.ts", "../../../../node_modules/@gadgetinc/api-client-core/src/GadgetConnection.ts", "../../../../node_modules/@gadgetinc/api-client-core/src/InternalModelManager.ts", "../../../../.gadget/client/src/utils.ts", "../../../../.gadget/client/src/computedViews.ts", "../../../../.gadget/client/src/builder.ts", "../../../../.gadget/client/src/models/Session.ts", "../../../../.gadget/client/src/models/CurrentSession.ts", "../../../../.gadget/client/src/models/ShopifyGdprRequest.ts", "../../../../.gadget/client/src/models/ShopifySync.ts", "../../../../.gadget/client/src/models/SmsTemplates.ts", "../../../../.gadget/client/src/models/AllowedTag.ts", "../../../../.gadget/client/src/models/ShopifyCustomer.ts", "../../../../.gadget/client/src/models/ShopifyCustomerAddress.ts", "../../../../.gadget/client/src/models/ShopifyOrder.ts", "../../../../.gadget/client/src/models/ShopifyProduct.ts", "../../../../.gadget/client/src/models/ShopifyFile.ts", "../../../../.gadget/client/src/models/ShopifyBulkOperation.ts", "../../../../.gadget/client/src/models/ShopifyCustomerMergeable.ts", "../../../../.gadget/client/src/models/ShopifyProductImage.ts", "../../../../.gadget/client/src/models/ShopifyProductMedia.ts", "../../../../.gadget/client/src/models/ShopifyProductOption.ts", "../../../../.gadget/client/src/models/ShopifyProductVariant.ts", "../../../../.gadget/client/src/models/ShopifyProductVariantMedia.ts", "../../../../.gadget/client/src/models/LastSKU.ts", "../../../../.gadget/client/src/models/BrainSession.ts", "../../../../.gadget/client/src/models/BrainCategories.ts", "../../../../.gadget/client/src/models/ChatLog.ts", "../../../../.gadget/client/src/models/RecommendedProduct.ts", "../../../../.gadget/client/src/models/Warehouse.ts", "../../../../.gadget/client/src/models/ShopifyCompany.ts", "../../../../.gadget/client/src/models/ShopifyCompanyAddress.ts", "../../../../.gadget/client/src/models/ShopifyCompanyContact.ts", "../../../../.gadget/client/src/models/ShopifyCompanyContactRole.ts", "../../../../.gadget/client/src/models/ShopifyCompanyContactRoleAssignment.ts", "../../../../.gadget/client/src/models/ShopifyCompanyLocation.ts", "../../../../.gadget/client/src/models/ShopifyShop.ts", "../../../../.gadget/client/src/models/ShopifyLocation.ts", "../../../../.gadget/client/src/models/ShopifyFulfillment.ts", "../../../../.gadget/client/src/models/ShopifyFulfillmentEvent.ts", "../../../../.gadget/client/src/models/ShopifyFulfillmentLineItem.ts", "../../../../.gadget/client/src/models/ShopifyOrderLineItem.ts", "../../../../.gadget/client/src/models/ShopifyOrderTransaction.ts", "../../../../.gadget/client/src/Client.ts", "../../../../extensions/sms-center/src/utils/gadgetApi.ts", "../../../../extensions/sms-center/src/utils/fetchSmsTemplates.ts"],
  "sourceRoot": "C:/projects/suite/extensions/sms-center/src",
  "sourcesContent": ["/**\n * @license React\n * react.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var l=Symbol.for(\"react.element\"),n=Symbol.for(\"react.portal\"),p=Symbol.for(\"react.fragment\"),q=Symbol.for(\"react.strict_mode\"),r=Symbol.for(\"react.profiler\"),t=Symbol.for(\"react.provider\"),u=Symbol.for(\"react.context\"),v=Symbol.for(\"react.forward_ref\"),w=Symbol.for(\"react.suspense\"),x=Symbol.for(\"react.memo\"),y=Symbol.for(\"react.lazy\"),z=Symbol.iterator;function A(a){if(null===a||\"object\"!==typeof a)return null;a=z&&a[z]||a[\"@@iterator\"];return\"function\"===typeof a?a:null}\nvar B={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},C=Object.assign,D={};function E(a,b,e){this.props=a;this.context=b;this.refs=D;this.updater=e||B}E.prototype.isReactComponent={};\nE.prototype.setState=function(a,b){if(\"object\"!==typeof a&&\"function\"!==typeof a&&null!=a)throw Error(\"setState(...): takes an object of state variables to update or a function which returns an object of state variables.\");this.updater.enqueueSetState(this,a,b,\"setState\")};E.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,\"forceUpdate\")};function F(){}F.prototype=E.prototype;function G(a,b,e){this.props=a;this.context=b;this.refs=D;this.updater=e||B}var H=G.prototype=new F;\nH.constructor=G;C(H,E.prototype);H.isPureReactComponent=!0;var I=Array.isArray,J=Object.prototype.hasOwnProperty,K={current:null},L={key:!0,ref:!0,__self:!0,__source:!0};\nfunction M(a,b,e){var d,c={},k=null,h=null;if(null!=b)for(d in void 0!==b.ref&&(h=b.ref),void 0!==b.key&&(k=\"\"+b.key),b)J.call(b,d)&&!L.hasOwnProperty(d)&&(c[d]=b[d]);var g=arguments.length-2;if(1===g)c.children=e;else if(1<g){for(var f=Array(g),m=0;m<g;m++)f[m]=arguments[m+2];c.children=f}if(a&&a.defaultProps)for(d in g=a.defaultProps,g)void 0===c[d]&&(c[d]=g[d]);return{$$typeof:l,type:a,key:k,ref:h,props:c,_owner:K.current}}\nfunction N(a,b){return{$$typeof:l,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function O(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===l}function escape(a){var b={\"=\":\"=0\",\":\":\"=2\"};return\"$\"+a.replace(/[=:]/g,function(a){return b[a]})}var P=/\\/+/g;function Q(a,b){return\"object\"===typeof a&&null!==a&&null!=a.key?escape(\"\"+a.key):b.toString(36)}\nfunction R(a,b,e,d,c){var k=typeof a;if(\"undefined\"===k||\"boolean\"===k)a=null;var h=!1;if(null===a)h=!0;else switch(k){case \"string\":case \"number\":h=!0;break;case \"object\":switch(a.$$typeof){case l:case n:h=!0}}if(h)return h=a,c=c(h),a=\"\"===d?\".\"+Q(h,0):d,I(c)?(e=\"\",null!=a&&(e=a.replace(P,\"$&/\")+\"/\"),R(c,b,e,\"\",function(a){return a})):null!=c&&(O(c)&&(c=N(c,e+(!c.key||h&&h.key===c.key?\"\":(\"\"+c.key).replace(P,\"$&/\")+\"/\")+a)),b.push(c)),1;h=0;d=\"\"===d?\".\":d+\":\";if(I(a))for(var g=0;g<a.length;g++){k=\na[g];var f=d+Q(k,g);h+=R(k,b,e,f,c)}else if(f=A(a),\"function\"===typeof f)for(a=f.call(a),g=0;!(k=a.next()).done;)k=k.value,f=d+Q(k,g++),h+=R(k,b,e,f,c);else if(\"object\"===k)throw b=String(a),Error(\"Objects are not valid as a React child (found: \"+(\"[object Object]\"===b?\"object with keys {\"+Object.keys(a).join(\", \")+\"}\":b)+\"). If you meant to render a collection of children, use an array instead.\");return h}\nfunction S(a,b,e){if(null==a)return a;var d=[],c=0;R(a,d,\"\",\"\",function(a){return b.call(e,a,c++)});return d}function T(a){if(-1===a._status){var b=a._result;b=b();b.then(function(b){if(0===a._status||-1===a._status)a._status=1,a._result=b},function(b){if(0===a._status||-1===a._status)a._status=2,a._result=b});-1===a._status&&(a._status=0,a._result=b)}if(1===a._status)return a._result.default;throw a._result;}\nvar U={current:null},V={transition:null},W={ReactCurrentDispatcher:U,ReactCurrentBatchConfig:V,ReactCurrentOwner:K};function X(){throw Error(\"act(...) is not supported in production builds of React.\");}\nexports.Children={map:S,forEach:function(a,b,e){S(a,function(){b.apply(this,arguments)},e)},count:function(a){var b=0;S(a,function(){b++});return b},toArray:function(a){return S(a,function(a){return a})||[]},only:function(a){if(!O(a))throw Error(\"React.Children.only expected to receive a single React element child.\");return a}};exports.Component=E;exports.Fragment=p;exports.Profiler=r;exports.PureComponent=G;exports.StrictMode=q;exports.Suspense=w;\nexports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=W;exports.act=X;\nexports.cloneElement=function(a,b,e){if(null===a||void 0===a)throw Error(\"React.cloneElement(...): The argument must be a React element, but you passed \"+a+\".\");var d=C({},a.props),c=a.key,k=a.ref,h=a._owner;if(null!=b){void 0!==b.ref&&(k=b.ref,h=K.current);void 0!==b.key&&(c=\"\"+b.key);if(a.type&&a.type.defaultProps)var g=a.type.defaultProps;for(f in b)J.call(b,f)&&!L.hasOwnProperty(f)&&(d[f]=void 0===b[f]&&void 0!==g?g[f]:b[f])}var f=arguments.length-2;if(1===f)d.children=e;else if(1<f){g=Array(f);\nfor(var m=0;m<f;m++)g[m]=arguments[m+2];d.children=g}return{$$typeof:l,type:a.type,key:c,ref:k,props:d,_owner:h}};exports.createContext=function(a){a={$$typeof:u,_currentValue:a,_currentValue2:a,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null};a.Provider={$$typeof:t,_context:a};return a.Consumer=a};exports.createElement=M;exports.createFactory=function(a){var b=M.bind(null,a);b.type=a;return b};exports.createRef=function(){return{current:null}};\nexports.forwardRef=function(a){return{$$typeof:v,render:a}};exports.isValidElement=O;exports.lazy=function(a){return{$$typeof:y,_payload:{_status:-1,_result:a},_init:T}};exports.memo=function(a,b){return{$$typeof:x,type:a,compare:void 0===b?null:b}};exports.startTransition=function(a){var b=V.transition;V.transition={};try{a()}finally{V.transition=b}};exports.unstable_act=X;exports.useCallback=function(a,b){return U.current.useCallback(a,b)};exports.useContext=function(a){return U.current.useContext(a)};\nexports.useDebugValue=function(){};exports.useDeferredValue=function(a){return U.current.useDeferredValue(a)};exports.useEffect=function(a,b){return U.current.useEffect(a,b)};exports.useId=function(){return U.current.useId()};exports.useImperativeHandle=function(a,b,e){return U.current.useImperativeHandle(a,b,e)};exports.useInsertionEffect=function(a,b){return U.current.useInsertionEffect(a,b)};exports.useLayoutEffect=function(a,b){return U.current.useLayoutEffect(a,b)};\nexports.useMemo=function(a,b){return U.current.useMemo(a,b)};exports.useReducer=function(a,b,e){return U.current.useReducer(a,b,e)};exports.useRef=function(a){return U.current.useRef(a)};exports.useState=function(a){return U.current.useState(a)};exports.useSyncExternalStore=function(a,b,e){return U.current.useSyncExternalStore(a,b,e)};exports.useTransition=function(){return U.current.useTransition()};exports.version=\"18.3.1\";\n", "'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react.production.min.js');\n} else {\n  module.exports = require('./cjs/react.development.js');\n}\n", "/**\n * @license React\n * scheduler.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';function f(a,b){var c=a.length;a.push(b);a:for(;0<c;){var d=c-1>>>1,e=a[d];if(0<g(e,b))a[d]=b,a[c]=e,c=d;else break a}}function h(a){return 0===a.length?null:a[0]}function k(a){if(0===a.length)return null;var b=a[0],c=a.pop();if(c!==b){a[0]=c;a:for(var d=0,e=a.length,w=e>>>1;d<w;){var m=2*(d+1)-1,C=a[m],n=m+1,x=a[n];if(0>g(C,c))n<e&&0>g(x,C)?(a[d]=x,a[n]=c,d=n):(a[d]=C,a[m]=c,d=m);else if(n<e&&0>g(x,c))a[d]=x,a[n]=c,d=n;else break a}}return b}\nfunction g(a,b){var c=a.sortIndex-b.sortIndex;return 0!==c?c:a.id-b.id}if(\"object\"===typeof performance&&\"function\"===typeof performance.now){var l=performance;exports.unstable_now=function(){return l.now()}}else{var p=Date,q=p.now();exports.unstable_now=function(){return p.now()-q}}var r=[],t=[],u=1,v=null,y=3,z=!1,A=!1,B=!1,D=\"function\"===typeof setTimeout?setTimeout:null,E=\"function\"===typeof clearTimeout?clearTimeout:null,F=\"undefined\"!==typeof setImmediate?setImmediate:null;\n\"undefined\"!==typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);function G(a){for(var b=h(t);null!==b;){if(null===b.callback)k(t);else if(b.startTime<=a)k(t),b.sortIndex=b.expirationTime,f(r,b);else break;b=h(t)}}function H(a){B=!1;G(a);if(!A)if(null!==h(r))A=!0,I(J);else{var b=h(t);null!==b&&K(H,b.startTime-a)}}\nfunction J(a,b){A=!1;B&&(B=!1,E(L),L=-1);z=!0;var c=y;try{G(b);for(v=h(r);null!==v&&(!(v.expirationTime>b)||a&&!M());){var d=v.callback;if(\"function\"===typeof d){v.callback=null;y=v.priorityLevel;var e=d(v.expirationTime<=b);b=exports.unstable_now();\"function\"===typeof e?v.callback=e:v===h(r)&&k(r);G(b)}else k(r);v=h(r)}if(null!==v)var w=!0;else{var m=h(t);null!==m&&K(H,m.startTime-b);w=!1}return w}finally{v=null,y=c,z=!1}}var N=!1,O=null,L=-1,P=5,Q=-1;\nfunction M(){return exports.unstable_now()-Q<P?!1:!0}function R(){if(null!==O){var a=exports.unstable_now();Q=a;var b=!0;try{b=O(!0,a)}finally{b?S():(N=!1,O=null)}}else N=!1}var S;if(\"function\"===typeof F)S=function(){F(R)};else if(\"undefined\"!==typeof MessageChannel){var T=new MessageChannel,U=T.port2;T.port1.onmessage=R;S=function(){U.postMessage(null)}}else S=function(){D(R,0)};function I(a){O=a;N||(N=!0,S())}function K(a,b){L=D(function(){a(exports.unstable_now())},b)}\nexports.unstable_IdlePriority=5;exports.unstable_ImmediatePriority=1;exports.unstable_LowPriority=4;exports.unstable_NormalPriority=3;exports.unstable_Profiling=null;exports.unstable_UserBlockingPriority=2;exports.unstable_cancelCallback=function(a){a.callback=null};exports.unstable_continueExecution=function(){A||z||(A=!0,I(J))};\nexports.unstable_forceFrameRate=function(a){0>a||125<a?console.error(\"forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported\"):P=0<a?Math.floor(1E3/a):5};exports.unstable_getCurrentPriorityLevel=function(){return y};exports.unstable_getFirstCallbackNode=function(){return h(r)};exports.unstable_next=function(a){switch(y){case 1:case 2:case 3:var b=3;break;default:b=y}var c=y;y=b;try{return a()}finally{y=c}};exports.unstable_pauseExecution=function(){};\nexports.unstable_requestPaint=function(){};exports.unstable_runWithPriority=function(a,b){switch(a){case 1:case 2:case 3:case 4:case 5:break;default:a=3}var c=y;y=a;try{return b()}finally{y=c}};\nexports.unstable_scheduleCallback=function(a,b,c){var d=exports.unstable_now();\"object\"===typeof c&&null!==c?(c=c.delay,c=\"number\"===typeof c&&0<c?d+c:d):c=d;switch(a){case 1:var e=-1;break;case 2:e=250;break;case 5:e=1073741823;break;case 4:e=1E4;break;default:e=5E3}e=c+e;a={id:u++,callback:b,priorityLevel:a,startTime:c,expirationTime:e,sortIndex:-1};c>d?(a.sortIndex=c,f(t,a),null===h(r)&&a===h(t)&&(B?(E(L),L=-1):B=!0,K(H,c-d))):(a.sortIndex=e,f(r,a),A||z||(A=!0,I(J)));return a};\nexports.unstable_shouldYield=M;exports.unstable_wrapCallback=function(a){var b=y;return function(){var c=y;y=b;try{return a.apply(this,arguments)}finally{y=c}}};\n", "'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/scheduler.production.min.js');\n} else {\n  module.exports = require('./cjs/scheduler.development.js');\n}\n", "/**\n * @license React\n * react-reconciler.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nmodule.exports = function $$$reconciler($$$hostConfig) {\n    var exports = {};\n'use strict';var aa=require(\"react\"),ba=require(\"scheduler\"),ca=Object.assign;function m(a){for(var b=\"https://reactjs.org/docs/error-decoder.html?invariant=\"+a,c=1;c<arguments.length;c++)b+=\"&args[]=\"+encodeURIComponent(arguments[c]);return\"Minified React error #\"+a+\"; visit \"+b+\" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\"}\nvar da=aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,ea=Symbol.for(\"react.element\"),fa=Symbol.for(\"react.portal\"),ha=Symbol.for(\"react.fragment\"),ia=Symbol.for(\"react.strict_mode\"),ja=Symbol.for(\"react.profiler\"),ka=Symbol.for(\"react.provider\"),la=Symbol.for(\"react.context\"),ma=Symbol.for(\"react.forward_ref\"),na=Symbol.for(\"react.suspense\"),oa=Symbol.for(\"react.suspense_list\"),pa=Symbol.for(\"react.memo\"),qa=Symbol.for(\"react.lazy\");Symbol.for(\"react.scope\");Symbol.for(\"react.debug_trace_mode\");\nvar ra=Symbol.for(\"react.offscreen\");Symbol.for(\"react.legacy_hidden\");Symbol.for(\"react.cache\");Symbol.for(\"react.tracing_marker\");var sa=Symbol.iterator;function ta(a){if(null===a||\"object\"!==typeof a)return null;a=sa&&a[sa]||a[\"@@iterator\"];return\"function\"===typeof a?a:null}\nfunction ua(a){if(null==a)return null;if(\"function\"===typeof a)return a.displayName||a.name||null;if(\"string\"===typeof a)return a;switch(a){case ha:return\"Fragment\";case fa:return\"Portal\";case ja:return\"Profiler\";case ia:return\"StrictMode\";case na:return\"Suspense\";case oa:return\"SuspenseList\"}if(\"object\"===typeof a)switch(a.$$typeof){case la:return(a.displayName||\"Context\")+\".Consumer\";case ka:return(a._context.displayName||\"Context\")+\".Provider\";case ma:var b=a.render;a=a.displayName;a||(a=b.displayName||\nb.name||\"\",a=\"\"!==a?\"ForwardRef(\"+a+\")\":\"ForwardRef\");return a;case pa:return b=a.displayName||null,null!==b?b:ua(a.type)||\"Memo\";case qa:b=a._payload;a=a._init;try{return ua(a(b))}catch(c){}}return null}\nfunction va(a){var b=a.type;switch(a.tag){case 24:return\"Cache\";case 9:return(b.displayName||\"Context\")+\".Consumer\";case 10:return(b._context.displayName||\"Context\")+\".Provider\";case 18:return\"DehydratedFragment\";case 11:return a=b.render,a=a.displayName||a.name||\"\",b.displayName||(\"\"!==a?\"ForwardRef(\"+a+\")\":\"ForwardRef\");case 7:return\"Fragment\";case 5:return b;case 4:return\"Portal\";case 3:return\"Root\";case 6:return\"Text\";case 16:return ua(b);case 8:return b===ia?\"StrictMode\":\"Mode\";case 22:return\"Offscreen\";\ncase 12:return\"Profiler\";case 21:return\"Scope\";case 13:return\"Suspense\";case 19:return\"SuspenseList\";case 25:return\"TracingMarker\";case 1:case 0:case 17:case 2:case 14:case 15:if(\"function\"===typeof b)return b.displayName||b.name||null;if(\"string\"===typeof b)return b}return null}function wa(a){var b=a,c=a;if(a.alternate)for(;b.return;)b=b.return;else{a=b;do b=a,0!==(b.flags&4098)&&(c=b.return),a=b.return;while(a)}return 3===b.tag?c:null}function xa(a){if(wa(a)!==a)throw Error(m(188));}\nfunction ya(a){var b=a.alternate;if(!b){b=wa(a);if(null===b)throw Error(m(188));return b!==a?null:a}for(var c=a,d=b;;){var e=c.return;if(null===e)break;var f=e.alternate;if(null===f){d=e.return;if(null!==d){c=d;continue}break}if(e.child===f.child){for(f=e.child;f;){if(f===c)return xa(e),a;if(f===d)return xa(e),b;f=f.sibling}throw Error(m(188));}if(c.return!==d.return)c=e,d=f;else{for(var g=!1,h=e.child;h;){if(h===c){g=!0;c=e;d=f;break}if(h===d){g=!0;d=e;c=f;break}h=h.sibling}if(!g){for(h=f.child;h;){if(h===\nc){g=!0;c=f;d=e;break}if(h===d){g=!0;d=f;c=e;break}h=h.sibling}if(!g)throw Error(m(189));}}if(c.alternate!==d)throw Error(m(190));}if(3!==c.tag)throw Error(m(188));return c.stateNode.current===c?a:b}function Aa(a){a=ya(a);return null!==a?Ba(a):null}function Ba(a){if(5===a.tag||6===a.tag)return a;for(a=a.child;null!==a;){var b=Ba(a);if(null!==b)return b;a=a.sibling}return null}\nfunction Ca(a){if(5===a.tag||6===a.tag)return a;for(a=a.child;null!==a;){if(4!==a.tag){var b=Ca(a);if(null!==b)return b}a=a.sibling}return null}\nvar Da=Array.isArray,Ea=$$$hostConfig.getPublicInstance,Fa=$$$hostConfig.getRootHostContext,Ga=$$$hostConfig.getChildHostContext,Ha=$$$hostConfig.prepareForCommit,Ia=$$$hostConfig.resetAfterCommit,Ja=$$$hostConfig.createInstance,Ka=$$$hostConfig.appendInitialChild,La=$$$hostConfig.finalizeInitialChildren,Ma=$$$hostConfig.prepareUpdate,Na=$$$hostConfig.shouldSetTextContent,Oa=$$$hostConfig.createTextInstance,Pa=$$$hostConfig.scheduleTimeout,Qa=$$$hostConfig.cancelTimeout,Ra=$$$hostConfig.noTimeout,\nSa=$$$hostConfig.isPrimaryRenderer,Ta=$$$hostConfig.supportsMutation,Ua=$$$hostConfig.supportsPersistence,Va=$$$hostConfig.supportsHydration,Wa=$$$hostConfig.getInstanceFromNode,Xa=$$$hostConfig.preparePortalMount,Ya=$$$hostConfig.getCurrentEventPriority,Za=$$$hostConfig.detachDeletedInstance,$a=$$$hostConfig.supportsMicrotasks,ab=$$$hostConfig.scheduleMicrotask,bb=$$$hostConfig.supportsTestSelectors,cb=$$$hostConfig.findFiberRoot,db=$$$hostConfig.getBoundingRect,eb=$$$hostConfig.getTextContent,fb=\n$$$hostConfig.isHiddenSubtree,gb=$$$hostConfig.matchAccessibilityRole,hb=$$$hostConfig.setFocusIfFocusable,ib=$$$hostConfig.setupIntersectionObserver,jb=$$$hostConfig.appendChild,kb=$$$hostConfig.appendChildToContainer,lb=$$$hostConfig.commitTextUpdate,mb=$$$hostConfig.commitMount,nb=$$$hostConfig.commitUpdate,ob=$$$hostConfig.insertBefore,pb=$$$hostConfig.insertInContainerBefore,qb=$$$hostConfig.removeChild,rb=$$$hostConfig.removeChildFromContainer,sb=$$$hostConfig.resetTextContent,tb=$$$hostConfig.hideInstance,\nub=$$$hostConfig.hideTextInstance,vb=$$$hostConfig.unhideInstance,wb=$$$hostConfig.unhideTextInstance,xb=$$$hostConfig.clearContainer,yb=$$$hostConfig.cloneInstance,zb=$$$hostConfig.createContainerChildSet,Ab=$$$hostConfig.appendChildToContainerChildSet,Bb=$$$hostConfig.finalizeContainerChildren,Cb=$$$hostConfig.replaceContainerChildren,Eb=$$$hostConfig.cloneHiddenInstance,Fb=$$$hostConfig.cloneHiddenTextInstance,Gb=$$$hostConfig.canHydrateInstance,Hb=$$$hostConfig.canHydrateTextInstance,Ib=$$$hostConfig.canHydrateSuspenseInstance,\nJb=$$$hostConfig.isSuspenseInstancePending,Kb=$$$hostConfig.isSuspenseInstanceFallback,Lb=$$$hostConfig.getSuspenseInstanceFallbackErrorDetails,Mb=$$$hostConfig.registerSuspenseInstanceRetry,Nb=$$$hostConfig.getNextHydratableSibling,Ob=$$$hostConfig.getFirstHydratableChild,Pb=$$$hostConfig.getFirstHydratableChildWithinContainer,Qb=$$$hostConfig.getFirstHydratableChildWithinSuspenseInstance,Rb=$$$hostConfig.hydrateInstance,Sb=$$$hostConfig.hydrateTextInstance,Tb=$$$hostConfig.hydrateSuspenseInstance,\nUb=$$$hostConfig.getNextHydratableInstanceAfterSuspenseInstance,Vb=$$$hostConfig.commitHydratedContainer,Wb=$$$hostConfig.commitHydratedSuspenseInstance,Xb=$$$hostConfig.clearSuspenseBoundary,Yb=$$$hostConfig.clearSuspenseBoundaryFromContainer,Zb=$$$hostConfig.shouldDeleteUnhydratedTailInstances,$b=$$$hostConfig.didNotMatchHydratedContainerTextInstance,ac=$$$hostConfig.didNotMatchHydratedTextInstance,bc;\nfunction cc(a){if(void 0===bc)try{throw Error();}catch(c){var b=c.stack.trim().match(/\\n( *(at )?)/);bc=b&&b[1]||\"\"}return\"\\n\"+bc+a}var dc=!1;\nfunction ec(a,b){if(!a||dc)return\"\";dc=!0;var c=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(b)if(b=function(){throw Error();},Object.defineProperty(b.prototype,\"props\",{set:function(){throw Error();}}),\"object\"===typeof Reflect&&Reflect.construct){try{Reflect.construct(b,[])}catch(l){var d=l}Reflect.construct(a,[],b)}else{try{b.call()}catch(l){d=l}a.call(b.prototype)}else{try{throw Error();}catch(l){d=l}a()}}catch(l){if(l&&d&&\"string\"===typeof l.stack){for(var e=l.stack.split(\"\\n\"),\nf=d.stack.split(\"\\n\"),g=e.length-1,h=f.length-1;1<=g&&0<=h&&e[g]!==f[h];)h--;for(;1<=g&&0<=h;g--,h--)if(e[g]!==f[h]){if(1!==g||1!==h){do if(g--,h--,0>h||e[g]!==f[h]){var k=\"\\n\"+e[g].replace(\" at new \",\" at \");a.displayName&&k.includes(\"<anonymous>\")&&(k=k.replace(\"<anonymous>\",a.displayName));return k}while(1<=g&&0<=h)}break}}}finally{dc=!1,Error.prepareStackTrace=c}return(a=a?a.displayName||a.name:\"\")?cc(a):\"\"}var fc=Object.prototype.hasOwnProperty,gc=[],hc=-1;function ic(a){return{current:a}}\nfunction q(a){0>hc||(a.current=gc[hc],gc[hc]=null,hc--)}function v(a,b){hc++;gc[hc]=a.current;a.current=b}var jc={},x=ic(jc),z=ic(!1),kc=jc;function lc(a,b){var c=a.type.contextTypes;if(!c)return jc;var d=a.stateNode;if(d&&d.__reactInternalMemoizedUnmaskedChildContext===b)return d.__reactInternalMemoizedMaskedChildContext;var e={},f;for(f in c)e[f]=b[f];d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=b,a.__reactInternalMemoizedMaskedChildContext=e);return e}\nfunction A(a){a=a.childContextTypes;return null!==a&&void 0!==a}function mc(){q(z);q(x)}function nc(a,b,c){if(x.current!==jc)throw Error(m(168));v(x,b);v(z,c)}function oc(a,b,c){var d=a.stateNode;b=b.childContextTypes;if(\"function\"!==typeof d.getChildContext)return c;d=d.getChildContext();for(var e in d)if(!(e in b))throw Error(m(108,va(a)||\"Unknown\",e));return ca({},c,d)}\nfunction pc(a){a=(a=a.stateNode)&&a.__reactInternalMemoizedMergedChildContext||jc;kc=x.current;v(x,a);v(z,z.current);return!0}function rc(a,b,c){var d=a.stateNode;if(!d)throw Error(m(169));c?(a=oc(a,b,kc),d.__reactInternalMemoizedMergedChildContext=a,q(z),q(x),v(x,a)):q(z);v(z,c)}var tc=Math.clz32?Math.clz32:sc,uc=Math.log,vc=Math.LN2;function sc(a){a>>>=0;return 0===a?32:31-(uc(a)/vc|0)|0}var wc=64,xc=4194304;\nfunction yc(a){switch(a&-a){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return a&4194240;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return a&130023424;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;\ndefault:return a}}function zc(a,b){var c=a.pendingLanes;if(0===c)return 0;var d=0,e=a.suspendedLanes,f=a.pingedLanes,g=c&268435455;if(0!==g){var h=g&~e;0!==h?d=yc(h):(f&=g,0!==f&&(d=yc(f)))}else g=c&~e,0!==g?d=yc(g):0!==f&&(d=yc(f));if(0===d)return 0;if(0!==b&&b!==d&&0===(b&e)&&(e=d&-d,f=b&-b,e>=f||16===e&&0!==(f&4194240)))return b;0!==(d&4)&&(d|=c&16);b=a.entangledLanes;if(0!==b)for(a=a.entanglements,b&=d;0<b;)c=31-tc(b),e=1<<c,d|=a[c],b&=~e;return d}\nfunction Ac(a,b){switch(a){case 1:case 2:case 4:return b+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return b+5E3;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return-1;case 134217728:case 268435456:case 536870912:case 1073741824:return-1;default:return-1}}\nfunction Bc(a,b){for(var c=a.suspendedLanes,d=a.pingedLanes,e=a.expirationTimes,f=a.pendingLanes;0<f;){var g=31-tc(f),h=1<<g,k=e[g];if(-1===k){if(0===(h&c)||0!==(h&d))e[g]=Ac(h,b)}else k<=b&&(a.expiredLanes|=h);f&=~h}}function Cc(a){a=a.pendingLanes&-1073741825;return 0!==a?a:a&1073741824?1073741824:0}function Dc(){var a=wc;wc<<=1;0===(wc&4194240)&&(wc=64);return a}function Ec(a){for(var b=[],c=0;31>c;c++)b.push(a);return b}\nfunction Fc(a,b,c){a.pendingLanes|=b;536870912!==b&&(a.suspendedLanes=0,a.pingedLanes=0);a=a.eventTimes;b=31-tc(b);a[b]=c}function Gc(a,b){var c=a.pendingLanes&~b;a.pendingLanes=b;a.suspendedLanes=0;a.pingedLanes=0;a.expiredLanes&=b;a.mutableReadLanes&=b;a.entangledLanes&=b;b=a.entanglements;var d=a.eventTimes;for(a=a.expirationTimes;0<c;){var e=31-tc(c),f=1<<e;b[e]=0;d[e]=-1;a[e]=-1;c&=~f}}\nfunction Hc(a,b){var c=a.entangledLanes|=b;for(a=a.entanglements;c;){var d=31-tc(c),e=1<<d;e&b|a[d]&b&&(a[d]|=b);c&=~e}}var C=0;function Ic(a){a&=-a;return 1<a?4<a?0!==(a&268435455)?16:536870912:4:1}var Jc=ba.unstable_scheduleCallback,Kc=ba.unstable_cancelCallback,Lc=ba.unstable_shouldYield,Mc=ba.unstable_requestPaint,D=ba.unstable_now,Nc=ba.unstable_ImmediatePriority,Oc=ba.unstable_UserBlockingPriority,Pc=ba.unstable_NormalPriority,Qc=ba.unstable_IdlePriority,Rc=null,Sc=null;\nfunction Tc(a){if(Sc&&\"function\"===typeof Sc.onCommitFiberRoot)try{Sc.onCommitFiberRoot(Rc,a,void 0,128===(a.current.flags&128))}catch(b){}}function Uc(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var Vc=\"function\"===typeof Object.is?Object.is:Uc,Wc=null,Xc=!1,Yc=!1;function Zc(a){null===Wc?Wc=[a]:Wc.push(a)}function $c(a){Xc=!0;Zc(a)}\nfunction ad(){if(!Yc&&null!==Wc){Yc=!0;var a=0,b=C;try{var c=Wc;for(C=1;a<c.length;a++){var d=c[a];do d=d(!0);while(null!==d)}Wc=null;Xc=!1}catch(e){throw null!==Wc&&(Wc=Wc.slice(a+1)),Jc(Nc,ad),e;}finally{C=b,Yc=!1}}return null}var bd=[],cd=0,dd=null,ed=0,fd=[],gd=0,hd=null,id=1,jd=\"\";function kd(a,b){bd[cd++]=ed;bd[cd++]=dd;dd=a;ed=b}\nfunction ld(a,b,c){fd[gd++]=id;fd[gd++]=jd;fd[gd++]=hd;hd=a;var d=id;a=jd;var e=32-tc(d)-1;d&=~(1<<e);c+=1;var f=32-tc(b)+e;if(30<f){var g=e-e%5;f=(d&(1<<g)-1).toString(32);d>>=g;e-=g;id=1<<32-tc(b)+e|c<<e|d;jd=f+a}else id=1<<f|c<<e|d,jd=a}function md(a){null!==a.return&&(kd(a,1),ld(a,1,0))}function nd(a){for(;a===dd;)dd=bd[--cd],bd[cd]=null,ed=bd[--cd],bd[cd]=null;for(;a===hd;)hd=fd[--gd],fd[gd]=null,jd=fd[--gd],fd[gd]=null,id=fd[--gd],fd[gd]=null}var od=null,pd=null,F=!1,qd=!1,rd=null;\nfunction sd(a,b){var c=td(5,null,null,0);c.elementType=\"DELETED\";c.stateNode=b;c.return=a;b=a.deletions;null===b?(a.deletions=[c],a.flags|=16):b.push(c)}\nfunction ud(a,b){switch(a.tag){case 5:return b=Gb(b,a.type,a.pendingProps),null!==b?(a.stateNode=b,od=a,pd=Ob(b),!0):!1;case 6:return b=Hb(b,a.pendingProps),null!==b?(a.stateNode=b,od=a,pd=null,!0):!1;case 13:b=Ib(b);if(null!==b){var c=null!==hd?{id:id,overflow:jd}:null;a.memoizedState={dehydrated:b,treeContext:c,retryLane:1073741824};c=td(18,null,null,0);c.stateNode=b;c.return=a;a.child=c;od=a;pd=null;return!0}return!1;default:return!1}}function vd(a){return 0!==(a.mode&1)&&0===(a.flags&128)}\nfunction wd(a){if(F){var b=pd;if(b){var c=b;if(!ud(a,b)){if(vd(a))throw Error(m(418));b=Nb(c);var d=od;b&&ud(a,b)?sd(d,c):(a.flags=a.flags&-4097|2,F=!1,od=a)}}else{if(vd(a))throw Error(m(418));a.flags=a.flags&-4097|2;F=!1;od=a}}}function xd(a){for(a=a.return;null!==a&&5!==a.tag&&3!==a.tag&&13!==a.tag;)a=a.return;od=a}\nfunction yd(a){if(!Va||a!==od)return!1;if(!F)return xd(a),F=!0,!1;if(3!==a.tag&&(5!==a.tag||Zb(a.type)&&!Na(a.type,a.memoizedProps))){var b=pd;if(b){if(vd(a))throw zd(),Error(m(418));for(;b;)sd(a,b),b=Nb(b)}}xd(a);if(13===a.tag){if(!Va)throw Error(m(316));a=a.memoizedState;a=null!==a?a.dehydrated:null;if(!a)throw Error(m(317));pd=Ub(a)}else pd=od?Nb(a.stateNode):null;return!0}function zd(){for(var a=pd;a;)a=Nb(a)}function Ad(){Va&&(pd=od=null,qd=F=!1)}function Bd(a){null===rd?rd=[a]:rd.push(a)}\nvar Cd=da.ReactCurrentBatchConfig;function Dd(a,b){if(Vc(a,b))return!0;if(\"object\"!==typeof a||null===a||\"object\"!==typeof b||null===b)return!1;var c=Object.keys(a),d=Object.keys(b);if(c.length!==d.length)return!1;for(d=0;d<c.length;d++){var e=c[d];if(!fc.call(b,e)||!Vc(a[e],b[e]))return!1}return!0}\nfunction Ed(a){switch(a.tag){case 5:return cc(a.type);case 16:return cc(\"Lazy\");case 13:return cc(\"Suspense\");case 19:return cc(\"SuspenseList\");case 0:case 2:case 15:return a=ec(a.type,!1),a;case 11:return a=ec(a.type.render,!1),a;case 1:return a=ec(a.type,!0),a;default:return\"\"}}function Fd(a,b){if(a&&a.defaultProps){b=ca({},b);a=a.defaultProps;for(var c in a)void 0===b[c]&&(b[c]=a[c]);return b}return b}var Gd=ic(null),Hd=null,Id=null,Jd=null;function Kd(){Jd=Id=Hd=null}\nfunction Ld(a,b,c){Sa?(v(Gd,b._currentValue),b._currentValue=c):(v(Gd,b._currentValue2),b._currentValue2=c)}function Md(a){var b=Gd.current;q(Gd);Sa?a._currentValue=b:a._currentValue2=b}function Nd(a,b,c){for(;null!==a;){var d=a.alternate;(a.childLanes&b)!==b?(a.childLanes|=b,null!==d&&(d.childLanes|=b)):null!==d&&(d.childLanes&b)!==b&&(d.childLanes|=b);if(a===c)break;a=a.return}}\nfunction Od(a,b){Hd=a;Jd=Id=null;a=a.dependencies;null!==a&&null!==a.firstContext&&(0!==(a.lanes&b)&&(G=!0),a.firstContext=null)}function Pd(a){var b=Sa?a._currentValue:a._currentValue2;if(Jd!==a)if(a={context:a,memoizedValue:b,next:null},null===Id){if(null===Hd)throw Error(m(308));Id=a;Hd.dependencies={lanes:0,firstContext:a}}else Id=Id.next=a;return b}var Qd=null;function Rd(a){null===Qd?Qd=[a]:Qd.push(a)}\nfunction Sd(a,b,c,d){var e=b.interleaved;null===e?(c.next=c,Rd(b)):(c.next=e.next,e.next=c);b.interleaved=c;return Td(a,d)}function Td(a,b){a.lanes|=b;var c=a.alternate;null!==c&&(c.lanes|=b);c=a;for(a=a.return;null!==a;)a.childLanes|=b,c=a.alternate,null!==c&&(c.childLanes|=b),c=a,a=a.return;return 3===c.tag?c.stateNode:null}var Ud=!1;function Vd(a){a.updateQueue={baseState:a.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}\nfunction Wd(a,b){a=a.updateQueue;b.updateQueue===a&&(b.updateQueue={baseState:a.baseState,firstBaseUpdate:a.firstBaseUpdate,lastBaseUpdate:a.lastBaseUpdate,shared:a.shared,effects:a.effects})}function Xd(a,b){return{eventTime:a,lane:b,tag:0,payload:null,callback:null,next:null}}\nfunction Yd(a,b,c){var d=a.updateQueue;if(null===d)return null;d=d.shared;if(0!==(H&2)){var e=d.pending;null===e?b.next=b:(b.next=e.next,e.next=b);d.pending=b;return Td(a,c)}e=d.interleaved;null===e?(b.next=b,Rd(d)):(b.next=e.next,e.next=b);d.interleaved=b;return Td(a,c)}function Zd(a,b,c){b=b.updateQueue;if(null!==b&&(b=b.shared,0!==(c&4194240))){var d=b.lanes;d&=a.pendingLanes;c|=d;b.lanes=c;Hc(a,c)}}\nfunction $d(a,b){var c=a.updateQueue,d=a.alternate;if(null!==d&&(d=d.updateQueue,c===d)){var e=null,f=null;c=c.firstBaseUpdate;if(null!==c){do{var g={eventTime:c.eventTime,lane:c.lane,tag:c.tag,payload:c.payload,callback:c.callback,next:null};null===f?e=f=g:f=f.next=g;c=c.next}while(null!==c);null===f?e=f=b:f=f.next=b}else e=f=b;c={baseState:d.baseState,firstBaseUpdate:e,lastBaseUpdate:f,shared:d.shared,effects:d.effects};a.updateQueue=c;return}a=c.lastBaseUpdate;null===a?c.firstBaseUpdate=b:a.next=\nb;c.lastBaseUpdate=b}\nfunction ae(a,b,c,d){var e=a.updateQueue;Ud=!1;var f=e.firstBaseUpdate,g=e.lastBaseUpdate,h=e.shared.pending;if(null!==h){e.shared.pending=null;var k=h,l=k.next;k.next=null;null===g?f=l:g.next=l;g=k;var n=a.alternate;null!==n&&(n=n.updateQueue,h=n.lastBaseUpdate,h!==g&&(null===h?n.firstBaseUpdate=l:h.next=l,n.lastBaseUpdate=k))}if(null!==f){var t=e.baseState;g=0;n=l=k=null;h=f;do{var p=h.lane,B=h.eventTime;if((d&p)===p){null!==n&&(n=n.next={eventTime:B,lane:0,tag:h.tag,payload:h.payload,callback:h.callback,\nnext:null});a:{var w=a,Z=h;p=b;B=c;switch(Z.tag){case 1:w=Z.payload;if(\"function\"===typeof w){t=w.call(B,t,p);break a}t=w;break a;case 3:w.flags=w.flags&-65537|128;case 0:w=Z.payload;p=\"function\"===typeof w?w.call(B,t,p):w;if(null===p||void 0===p)break a;t=ca({},t,p);break a;case 2:Ud=!0}}null!==h.callback&&0!==h.lane&&(a.flags|=64,p=e.effects,null===p?e.effects=[h]:p.push(h))}else B={eventTime:B,lane:p,tag:h.tag,payload:h.payload,callback:h.callback,next:null},null===n?(l=n=B,k=t):n=n.next=B,g|=\np;h=h.next;if(null===h)if(h=e.shared.pending,null===h)break;else p=h,h=p.next,p.next=null,e.lastBaseUpdate=p,e.shared.pending=null}while(1);null===n&&(k=t);e.baseState=k;e.firstBaseUpdate=l;e.lastBaseUpdate=n;b=e.shared.interleaved;if(null!==b){e=b;do g|=e.lane,e=e.next;while(e!==b)}else null===f&&(e.shared.lanes=0);be|=g;a.lanes=g;a.memoizedState=t}}\nfunction ce(a,b,c){a=b.effects;b.effects=null;if(null!==a)for(b=0;b<a.length;b++){var d=a[b],e=d.callback;if(null!==e){d.callback=null;d=c;if(\"function\"!==typeof e)throw Error(m(191,e));e.call(d)}}}var de=(new aa.Component).refs;function ee(a,b,c,d){b=a.memoizedState;c=c(d,b);c=null===c||void 0===c?b:ca({},b,c);a.memoizedState=c;0===a.lanes&&(a.updateQueue.baseState=c)}\nvar he={isMounted:function(a){return(a=a._reactInternals)?wa(a)===a:!1},enqueueSetState:function(a,b,c){a=a._reactInternals;var d=I(),e=fe(a),f=Xd(d,e);f.payload=b;void 0!==c&&null!==c&&(f.callback=c);b=Yd(a,f,e);null!==b&&(ge(b,a,e,d),Zd(b,a,e))},enqueueReplaceState:function(a,b,c){a=a._reactInternals;var d=I(),e=fe(a),f=Xd(d,e);f.tag=1;f.payload=b;void 0!==c&&null!==c&&(f.callback=c);b=Yd(a,f,e);null!==b&&(ge(b,a,e,d),Zd(b,a,e))},enqueueForceUpdate:function(a,b){a=a._reactInternals;var c=I(),d=\nfe(a),e=Xd(c,d);e.tag=2;void 0!==b&&null!==b&&(e.callback=b);b=Yd(a,e,d);null!==b&&(ge(b,a,d,c),Zd(b,a,d))}};function ie(a,b,c,d,e,f,g){a=a.stateNode;return\"function\"===typeof a.shouldComponentUpdate?a.shouldComponentUpdate(d,f,g):b.prototype&&b.prototype.isPureReactComponent?!Dd(c,d)||!Dd(e,f):!0}\nfunction je(a,b,c){var d=!1,e=jc;var f=b.contextType;\"object\"===typeof f&&null!==f?f=Pd(f):(e=A(b)?kc:x.current,d=b.contextTypes,f=(d=null!==d&&void 0!==d)?lc(a,e):jc);b=new b(c,f);a.memoizedState=null!==b.state&&void 0!==b.state?b.state:null;b.updater=he;a.stateNode=b;b._reactInternals=a;d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=e,a.__reactInternalMemoizedMaskedChildContext=f);return b}\nfunction ke(a,b,c,d){a=b.state;\"function\"===typeof b.componentWillReceiveProps&&b.componentWillReceiveProps(c,d);\"function\"===typeof b.UNSAFE_componentWillReceiveProps&&b.UNSAFE_componentWillReceiveProps(c,d);b.state!==a&&he.enqueueReplaceState(b,b.state,null)}\nfunction le(a,b,c,d){var e=a.stateNode;e.props=c;e.state=a.memoizedState;e.refs=de;Vd(a);var f=b.contextType;\"object\"===typeof f&&null!==f?e.context=Pd(f):(f=A(b)?kc:x.current,e.context=lc(a,f));e.state=a.memoizedState;f=b.getDerivedStateFromProps;\"function\"===typeof f&&(ee(a,b,f,c),e.state=a.memoizedState);\"function\"===typeof b.getDerivedStateFromProps||\"function\"===typeof e.getSnapshotBeforeUpdate||\"function\"!==typeof e.UNSAFE_componentWillMount&&\"function\"!==typeof e.componentWillMount||(b=e.state,\n\"function\"===typeof e.componentWillMount&&e.componentWillMount(),\"function\"===typeof e.UNSAFE_componentWillMount&&e.UNSAFE_componentWillMount(),b!==e.state&&he.enqueueReplaceState(e,e.state,null),ae(a,c,e,d),e.state=a.memoizedState);\"function\"===typeof e.componentDidMount&&(a.flags|=4194308)}\nfunction me(a,b,c){a=c.ref;if(null!==a&&\"function\"!==typeof a&&\"object\"!==typeof a){if(c._owner){c=c._owner;if(c){if(1!==c.tag)throw Error(m(309));var d=c.stateNode}if(!d)throw Error(m(147,a));var e=d,f=\"\"+a;if(null!==b&&null!==b.ref&&\"function\"===typeof b.ref&&b.ref._stringRef===f)return b.ref;b=function(a){var b=e.refs;b===de&&(b=e.refs={});null===a?delete b[f]:b[f]=a};b._stringRef=f;return b}if(\"string\"!==typeof a)throw Error(m(284));if(!c._owner)throw Error(m(290,a));}return a}\nfunction ne(a,b){a=Object.prototype.toString.call(b);throw Error(m(31,\"[object Object]\"===a?\"object with keys {\"+Object.keys(b).join(\", \")+\"}\":a));}function oe(a){var b=a._init;return b(a._payload)}\nfunction pe(a){function b(b,c){if(a){var d=b.deletions;null===d?(b.deletions=[c],b.flags|=16):d.push(c)}}function c(c,d){if(!a)return null;for(;null!==d;)b(c,d),d=d.sibling;return null}function d(a,b){for(a=new Map;null!==b;)null!==b.key?a.set(b.key,b):a.set(b.index,b),b=b.sibling;return a}function e(a,b){a=qe(a,b);a.index=0;a.sibling=null;return a}function f(b,c,d){b.index=d;if(!a)return b.flags|=1048576,c;d=b.alternate;if(null!==d)return d=d.index,d<c?(b.flags|=2,c):d;b.flags|=2;return c}function g(b){a&&\nnull===b.alternate&&(b.flags|=2);return b}function h(a,b,c,d){if(null===b||6!==b.tag)return b=re(c,a.mode,d),b.return=a,b;b=e(b,c);b.return=a;return b}function k(a,b,c,d){var f=c.type;if(f===ha)return n(a,b,c.props.children,d,c.key);if(null!==b&&(b.elementType===f||\"object\"===typeof f&&null!==f&&f.$$typeof===qa&&oe(f)===b.type))return d=e(b,c.props),d.ref=me(a,b,c),d.return=a,d;d=se(c.type,c.key,c.props,null,a.mode,d);d.ref=me(a,b,c);d.return=a;return d}function l(a,b,c,d){if(null===b||4!==b.tag||\nb.stateNode.containerInfo!==c.containerInfo||b.stateNode.implementation!==c.implementation)return b=te(c,a.mode,d),b.return=a,b;b=e(b,c.children||[]);b.return=a;return b}function n(a,b,c,d,f){if(null===b||7!==b.tag)return b=ue(c,a.mode,d,f),b.return=a,b;b=e(b,c);b.return=a;return b}function t(a,b,c){if(\"string\"===typeof b&&\"\"!==b||\"number\"===typeof b)return b=re(\"\"+b,a.mode,c),b.return=a,b;if(\"object\"===typeof b&&null!==b){switch(b.$$typeof){case ea:return c=se(b.type,b.key,b.props,null,a.mode,c),\nc.ref=me(a,null,b),c.return=a,c;case fa:return b=te(b,a.mode,c),b.return=a,b;case qa:var d=b._init;return t(a,d(b._payload),c)}if(Da(b)||ta(b))return b=ue(b,a.mode,c,null),b.return=a,b;ne(a,b)}return null}function p(a,b,c,d){var e=null!==b?b.key:null;if(\"string\"===typeof c&&\"\"!==c||\"number\"===typeof c)return null!==e?null:h(a,b,\"\"+c,d);if(\"object\"===typeof c&&null!==c){switch(c.$$typeof){case ea:return c.key===e?k(a,b,c,d):null;case fa:return c.key===e?l(a,b,c,d):null;case qa:return e=c._init,p(a,\nb,e(c._payload),d)}if(Da(c)||ta(c))return null!==e?null:n(a,b,c,d,null);ne(a,c)}return null}function B(a,b,c,d,e){if(\"string\"===typeof d&&\"\"!==d||\"number\"===typeof d)return a=a.get(c)||null,h(b,a,\"\"+d,e);if(\"object\"===typeof d&&null!==d){switch(d.$$typeof){case ea:return a=a.get(null===d.key?c:d.key)||null,k(b,a,d,e);case fa:return a=a.get(null===d.key?c:d.key)||null,l(b,a,d,e);case qa:var f=d._init;return B(a,b,c,f(d._payload),e)}if(Da(d)||ta(d))return a=a.get(c)||null,n(b,a,d,e,null);ne(b,d)}return null}\nfunction w(e,g,h,k){for(var l=null,n=null,r=g,u=g=0,E=null;null!==r&&u<h.length;u++){r.index>u?(E=r,r=null):E=r.sibling;var y=p(e,r,h[u],k);if(null===y){null===r&&(r=E);break}a&&r&&null===y.alternate&&b(e,r);g=f(y,g,u);null===n?l=y:n.sibling=y;n=y;r=E}if(u===h.length)return c(e,r),F&&kd(e,u),l;if(null===r){for(;u<h.length;u++)r=t(e,h[u],k),null!==r&&(g=f(r,g,u),null===n?l=r:n.sibling=r,n=r);F&&kd(e,u);return l}for(r=d(e,r);u<h.length;u++)E=B(r,e,u,h[u],k),null!==E&&(a&&null!==E.alternate&&r.delete(null===\nE.key?u:E.key),g=f(E,g,u),null===n?l=E:n.sibling=E,n=E);a&&r.forEach(function(a){return b(e,a)});F&&kd(e,u);return l}function Z(e,g,h,k){var l=ta(h);if(\"function\"!==typeof l)throw Error(m(150));h=l.call(h);if(null==h)throw Error(m(151));for(var n=l=null,r=g,u=g=0,E=null,y=h.next();null!==r&&!y.done;u++,y=h.next()){r.index>u?(E=r,r=null):E=r.sibling;var w=p(e,r,y.value,k);if(null===w){null===r&&(r=E);break}a&&r&&null===w.alternate&&b(e,r);g=f(w,g,u);null===n?l=w:n.sibling=w;n=w;r=E}if(y.done)return c(e,\nr),F&&kd(e,u),l;if(null===r){for(;!y.done;u++,y=h.next())y=t(e,y.value,k),null!==y&&(g=f(y,g,u),null===n?l=y:n.sibling=y,n=y);F&&kd(e,u);return l}for(r=d(e,r);!y.done;u++,y=h.next())y=B(r,e,u,y.value,k),null!==y&&(a&&null!==y.alternate&&r.delete(null===y.key?u:y.key),g=f(y,g,u),null===n?l=y:n.sibling=y,n=y);a&&r.forEach(function(a){return b(e,a)});F&&kd(e,u);return l}function za(a,d,f,h){\"object\"===typeof f&&null!==f&&f.type===ha&&null===f.key&&(f=f.props.children);if(\"object\"===typeof f&&null!==\nf){switch(f.$$typeof){case ea:a:{for(var k=f.key,l=d;null!==l;){if(l.key===k){k=f.type;if(k===ha){if(7===l.tag){c(a,l.sibling);d=e(l,f.props.children);d.return=a;a=d;break a}}else if(l.elementType===k||\"object\"===typeof k&&null!==k&&k.$$typeof===qa&&oe(k)===l.type){c(a,l.sibling);d=e(l,f.props);d.ref=me(a,l,f);d.return=a;a=d;break a}c(a,l);break}else b(a,l);l=l.sibling}f.type===ha?(d=ue(f.props.children,a.mode,h,f.key),d.return=a,a=d):(h=se(f.type,f.key,f.props,null,a.mode,h),h.ref=me(a,d,f),h.return=\na,a=h)}return g(a);case fa:a:{for(l=f.key;null!==d;){if(d.key===l)if(4===d.tag&&d.stateNode.containerInfo===f.containerInfo&&d.stateNode.implementation===f.implementation){c(a,d.sibling);d=e(d,f.children||[]);d.return=a;a=d;break a}else{c(a,d);break}else b(a,d);d=d.sibling}d=te(f,a.mode,h);d.return=a;a=d}return g(a);case qa:return l=f._init,za(a,d,l(f._payload),h)}if(Da(f))return w(a,d,f,h);if(ta(f))return Z(a,d,f,h);ne(a,f)}return\"string\"===typeof f&&\"\"!==f||\"number\"===typeof f?(f=\"\"+f,null!==d&&\n6===d.tag?(c(a,d.sibling),d=e(d,f),d.return=a,a=d):(c(a,d),d=re(f,a.mode,h),d.return=a,a=d),g(a)):c(a,d)}return za}var ve=pe(!0),we=pe(!1),xe={},ye=ic(xe),ze=ic(xe),Ae=ic(xe);function Be(a){if(a===xe)throw Error(m(174));return a}function Ce(a,b){v(Ae,b);v(ze,a);v(ye,xe);a=Fa(b);q(ye);v(ye,a)}function De(){q(ye);q(ze);q(Ae)}function Ee(a){var b=Be(Ae.current),c=Be(ye.current);b=Ga(c,a.type,b);c!==b&&(v(ze,a),v(ye,b))}function Fe(a){ze.current===a&&(q(ye),q(ze))}var J=ic(0);\nfunction Ge(a){for(var b=a;null!==b;){if(13===b.tag){var c=b.memoizedState;if(null!==c&&(c=c.dehydrated,null===c||Jb(c)||Kb(c)))return b}else if(19===b.tag&&void 0!==b.memoizedProps.revealOrder){if(0!==(b.flags&128))return b}else if(null!==b.child){b.child.return=b;b=b.child;continue}if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return null;b=b.return}b.sibling.return=b.return;b=b.sibling}return null}var He=[];\nfunction Ie(){for(var a=0;a<He.length;a++){var b=He[a];Sa?b._workInProgressVersionPrimary=null:b._workInProgressVersionSecondary=null}He.length=0}var Je=da.ReactCurrentDispatcher,Ke=da.ReactCurrentBatchConfig,Le=0,K=null,L=null,M=null,Me=!1,Ne=!1,Oe=0,Pe=0;function N(){throw Error(m(321));}function Qe(a,b){if(null===b)return!1;for(var c=0;c<b.length&&c<a.length;c++)if(!Vc(a[c],b[c]))return!1;return!0}\nfunction Re(a,b,c,d,e,f){Le=f;K=b;b.memoizedState=null;b.updateQueue=null;b.lanes=0;Je.current=null===a||null===a.memoizedState?Se:Te;a=c(d,e);if(Ne){f=0;do{Ne=!1;Oe=0;if(25<=f)throw Error(m(301));f+=1;M=L=null;b.updateQueue=null;Je.current=Ue;a=c(d,e)}while(Ne)}Je.current=Ve;b=null!==L&&null!==L.next;Le=0;M=L=K=null;Me=!1;if(b)throw Error(m(300));return a}function We(){var a=0!==Oe;Oe=0;return a}\nfunction Xe(){var a={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};null===M?K.memoizedState=M=a:M=M.next=a;return M}function Ye(){if(null===L){var a=K.alternate;a=null!==a?a.memoizedState:null}else a=L.next;var b=null===M?K.memoizedState:M.next;if(null!==b)M=b,L=a;else{if(null===a)throw Error(m(310));L=a;a={memoizedState:L.memoizedState,baseState:L.baseState,baseQueue:L.baseQueue,queue:L.queue,next:null};null===M?K.memoizedState=M=a:M=M.next=a}return M}\nfunction Ze(a,b){return\"function\"===typeof b?b(a):b}\nfunction $e(a){var b=Ye(),c=b.queue;if(null===c)throw Error(m(311));c.lastRenderedReducer=a;var d=L,e=d.baseQueue,f=c.pending;if(null!==f){if(null!==e){var g=e.next;e.next=f.next;f.next=g}d.baseQueue=e=f;c.pending=null}if(null!==e){f=e.next;d=d.baseState;var h=g=null,k=null,l=f;do{var n=l.lane;if((Le&n)===n)null!==k&&(k=k.next={lane:0,action:l.action,hasEagerState:l.hasEagerState,eagerState:l.eagerState,next:null}),d=l.hasEagerState?l.eagerState:a(d,l.action);else{var t={lane:n,action:l.action,hasEagerState:l.hasEagerState,\neagerState:l.eagerState,next:null};null===k?(h=k=t,g=d):k=k.next=t;K.lanes|=n;be|=n}l=l.next}while(null!==l&&l!==f);null===k?g=d:k.next=h;Vc(d,b.memoizedState)||(G=!0);b.memoizedState=d;b.baseState=g;b.baseQueue=k;c.lastRenderedState=d}a=c.interleaved;if(null!==a){e=a;do f=e.lane,K.lanes|=f,be|=f,e=e.next;while(e!==a)}else null===e&&(c.lanes=0);return[b.memoizedState,c.dispatch]}\nfunction af(a){var b=Ye(),c=b.queue;if(null===c)throw Error(m(311));c.lastRenderedReducer=a;var d=c.dispatch,e=c.pending,f=b.memoizedState;if(null!==e){c.pending=null;var g=e=e.next;do f=a(f,g.action),g=g.next;while(g!==e);Vc(f,b.memoizedState)||(G=!0);b.memoizedState=f;null===b.baseQueue&&(b.baseState=f);c.lastRenderedState=f}return[f,d]}function bf(){}\nfunction cf(a,b){var c=K,d=Ye(),e=b(),f=!Vc(d.memoizedState,e);f&&(d.memoizedState=e,G=!0);d=d.queue;df(ef.bind(null,c,d,a),[a]);if(d.getSnapshot!==b||f||null!==M&&M.memoizedState.tag&1){c.flags|=2048;ff(9,gf.bind(null,c,d,e,b),void 0,null);if(null===O)throw Error(m(349));0!==(Le&30)||hf(c,b,e)}return e}function hf(a,b,c){a.flags|=16384;a={getSnapshot:b,value:c};b=K.updateQueue;null===b?(b={lastEffect:null,stores:null},K.updateQueue=b,b.stores=[a]):(c=b.stores,null===c?b.stores=[a]:c.push(a))}\nfunction gf(a,b,c,d){b.value=c;b.getSnapshot=d;jf(b)&&kf(a)}function ef(a,b,c){return c(function(){jf(b)&&kf(a)})}function jf(a){var b=a.getSnapshot;a=a.value;try{var c=b();return!Vc(a,c)}catch(d){return!0}}function kf(a){var b=Td(a,1);null!==b&&ge(b,a,1,-1)}\nfunction lf(a){var b=Xe();\"function\"===typeof a&&(a=a());b.memoizedState=b.baseState=a;a={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Ze,lastRenderedState:a};b.queue=a;a=a.dispatch=mf.bind(null,K,a);return[b.memoizedState,a]}\nfunction ff(a,b,c,d){a={tag:a,create:b,destroy:c,deps:d,next:null};b=K.updateQueue;null===b?(b={lastEffect:null,stores:null},K.updateQueue=b,b.lastEffect=a.next=a):(c=b.lastEffect,null===c?b.lastEffect=a.next=a:(d=c.next,c.next=a,a.next=d,b.lastEffect=a));return a}function nf(){return Ye().memoizedState}function of(a,b,c,d){var e=Xe();K.flags|=a;e.memoizedState=ff(1|b,c,void 0,void 0===d?null:d)}\nfunction pf(a,b,c,d){var e=Ye();d=void 0===d?null:d;var f=void 0;if(null!==L){var g=L.memoizedState;f=g.destroy;if(null!==d&&Qe(d,g.deps)){e.memoizedState=ff(b,c,f,d);return}}K.flags|=a;e.memoizedState=ff(1|b,c,f,d)}function qf(a,b){return of(8390656,8,a,b)}function df(a,b){return pf(2048,8,a,b)}function rf(a,b){return pf(4,2,a,b)}function sf(a,b){return pf(4,4,a,b)}\nfunction tf(a,b){if(\"function\"===typeof b)return a=a(),b(a),function(){b(null)};if(null!==b&&void 0!==b)return a=a(),b.current=a,function(){b.current=null}}function uf(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return pf(4,4,tf.bind(null,b,a),c)}function vf(){}function wf(a,b){var c=Ye();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&Qe(b,d[1]))return d[0];c.memoizedState=[a,b];return a}\nfunction xf(a,b){var c=Ye();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&Qe(b,d[1]))return d[0];a=a();c.memoizedState=[a,b];return a}function yf(a,b,c){if(0===(Le&21))return a.baseState&&(a.baseState=!1,G=!0),a.memoizedState=c;Vc(c,b)||(c=Dc(),K.lanes|=c,be|=c,a.baseState=!0);return b}function zf(a,b){var c=C;C=0!==c&&4>c?c:4;a(!0);var d=Ke.transition;Ke.transition={};try{a(!1),b()}finally{C=c,Ke.transition=d}}function Af(){return Ye().memoizedState}\nfunction Bf(a,b,c){var d=fe(a);c={lane:d,action:c,hasEagerState:!1,eagerState:null,next:null};if(Cf(a))Df(b,c);else if(c=Sd(a,b,c,d),null!==c){var e=I();ge(c,a,d,e);Ef(c,b,d)}}\nfunction mf(a,b,c){var d=fe(a),e={lane:d,action:c,hasEagerState:!1,eagerState:null,next:null};if(Cf(a))Df(b,e);else{var f=a.alternate;if(0===a.lanes&&(null===f||0===f.lanes)&&(f=b.lastRenderedReducer,null!==f))try{var g=b.lastRenderedState,h=f(g,c);e.hasEagerState=!0;e.eagerState=h;if(Vc(h,g)){var k=b.interleaved;null===k?(e.next=e,Rd(b)):(e.next=k.next,k.next=e);b.interleaved=e;return}}catch(l){}finally{}c=Sd(a,b,e,d);null!==c&&(e=I(),ge(c,a,d,e),Ef(c,b,d))}}\nfunction Cf(a){var b=a.alternate;return a===K||null!==b&&b===K}function Df(a,b){Ne=Me=!0;var c=a.pending;null===c?b.next=b:(b.next=c.next,c.next=b);a.pending=b}function Ef(a,b,c){if(0!==(c&4194240)){var d=b.lanes;d&=a.pendingLanes;c|=d;b.lanes=c;Hc(a,c)}}\nvar Ve={readContext:Pd,useCallback:N,useContext:N,useEffect:N,useImperativeHandle:N,useInsertionEffect:N,useLayoutEffect:N,useMemo:N,useReducer:N,useRef:N,useState:N,useDebugValue:N,useDeferredValue:N,useTransition:N,useMutableSource:N,useSyncExternalStore:N,useId:N,unstable_isNewReconciler:!1},Se={readContext:Pd,useCallback:function(a,b){Xe().memoizedState=[a,void 0===b?null:b];return a},useContext:Pd,useEffect:qf,useImperativeHandle:function(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return of(4194308,\n4,tf.bind(null,b,a),c)},useLayoutEffect:function(a,b){return of(4194308,4,a,b)},useInsertionEffect:function(a,b){return of(4,2,a,b)},useMemo:function(a,b){var c=Xe();b=void 0===b?null:b;a=a();c.memoizedState=[a,b];return a},useReducer:function(a,b,c){var d=Xe();b=void 0!==c?c(b):b;d.memoizedState=d.baseState=b;a={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:a,lastRenderedState:b};d.queue=a;a=a.dispatch=Bf.bind(null,K,a);return[d.memoizedState,a]},useRef:function(a){var b=\nXe();a={current:a};return b.memoizedState=a},useState:lf,useDebugValue:vf,useDeferredValue:function(a){return Xe().memoizedState=a},useTransition:function(){var a=lf(!1),b=a[0];a=zf.bind(null,a[1]);Xe().memoizedState=a;return[b,a]},useMutableSource:function(){},useSyncExternalStore:function(a,b,c){var d=K,e=Xe();if(F){if(void 0===c)throw Error(m(407));c=c()}else{c=b();if(null===O)throw Error(m(349));0!==(Le&30)||hf(d,b,c)}e.memoizedState=c;var f={value:c,getSnapshot:b};e.queue=f;qf(ef.bind(null,d,\nf,a),[a]);d.flags|=2048;ff(9,gf.bind(null,d,f,c,b),void 0,null);return c},useId:function(){var a=Xe(),b=O.identifierPrefix;if(F){var c=jd;var d=id;c=(d&~(1<<32-tc(d)-1)).toString(32)+c;b=\":\"+b+\"R\"+c;c=Oe++;0<c&&(b+=\"H\"+c.toString(32));b+=\":\"}else c=Pe++,b=\":\"+b+\"r\"+c.toString(32)+\":\";return a.memoizedState=b},unstable_isNewReconciler:!1},Te={readContext:Pd,useCallback:wf,useContext:Pd,useEffect:df,useImperativeHandle:uf,useInsertionEffect:rf,useLayoutEffect:sf,useMemo:xf,useReducer:$e,useRef:nf,useState:function(){return $e(Ze)},\nuseDebugValue:vf,useDeferredValue:function(a){var b=Ye();return yf(b,L.memoizedState,a)},useTransition:function(){var a=$e(Ze)[0],b=Ye().memoizedState;return[a,b]},useMutableSource:bf,useSyncExternalStore:cf,useId:Af,unstable_isNewReconciler:!1},Ue={readContext:Pd,useCallback:wf,useContext:Pd,useEffect:df,useImperativeHandle:uf,useInsertionEffect:rf,useLayoutEffect:sf,useMemo:xf,useReducer:af,useRef:nf,useState:function(){return af(Ze)},useDebugValue:vf,useDeferredValue:function(a){var b=Ye();return null===\nL?b.memoizedState=a:yf(b,L.memoizedState,a)},useTransition:function(){var a=af(Ze)[0],b=Ye().memoizedState;return[a,b]},useMutableSource:bf,useSyncExternalStore:cf,useId:Af,unstable_isNewReconciler:!1};function Ff(a,b){try{var c=\"\",d=b;do c+=Ed(d),d=d.return;while(d);var e=c}catch(f){e=\"\\nError generating stack: \"+f.message+\"\\n\"+f.stack}return{value:a,source:b,stack:e,digest:null}}function Gf(a,b,c){return{value:a,source:null,stack:null!=c?c:null,digest:null!=b?b:null}}\nfunction Hf(a,b){try{console.error(b.value)}catch(c){setTimeout(function(){throw c;})}}var If=\"function\"===typeof WeakMap?WeakMap:Map;function Jf(a,b,c){c=Xd(-1,c);c.tag=3;c.payload={element:null};var d=b.value;c.callback=function(){Kf||(Kf=!0,Lf=d);Hf(a,b)};return c}\nfunction Mf(a,b,c){c=Xd(-1,c);c.tag=3;var d=a.type.getDerivedStateFromError;if(\"function\"===typeof d){var e=b.value;c.payload=function(){return d(e)};c.callback=function(){Hf(a,b)}}var f=a.stateNode;null!==f&&\"function\"===typeof f.componentDidCatch&&(c.callback=function(){Hf(a,b);\"function\"!==typeof d&&(null===Nf?Nf=new Set([this]):Nf.add(this));var c=b.stack;this.componentDidCatch(b.value,{componentStack:null!==c?c:\"\"})});return c}\nfunction Of(a,b,c){var d=a.pingCache;if(null===d){d=a.pingCache=new If;var e=new Set;d.set(b,e)}else e=d.get(b),void 0===e&&(e=new Set,d.set(b,e));e.has(c)||(e.add(c),a=Pf.bind(null,a,b,c),b.then(a,a))}function Qf(a){do{var b;if(b=13===a.tag)b=a.memoizedState,b=null!==b?null!==b.dehydrated?!0:!1:!0;if(b)return a;a=a.return}while(null!==a);return null}\nfunction Rf(a,b,c,d,e){if(0===(a.mode&1))return a===b?a.flags|=65536:(a.flags|=128,c.flags|=131072,c.flags&=-52805,1===c.tag&&(null===c.alternate?c.tag=17:(b=Xd(-1,1),b.tag=2,Yd(c,b,1))),c.lanes|=1),a;a.flags|=65536;a.lanes=e;return a}var Sf=da.ReactCurrentOwner,G=!1;function P(a,b,c,d){b.child=null===a?we(b,null,c,d):ve(b,a.child,c,d)}\nfunction Tf(a,b,c,d,e){c=c.render;var f=b.ref;Od(b,e);d=Re(a,b,c,d,f,e);c=We();if(null!==a&&!G)return b.updateQueue=a.updateQueue,b.flags&=-2053,a.lanes&=~e,Uf(a,b,e);F&&c&&md(b);b.flags|=1;P(a,b,d,e);return b.child}\nfunction Vf(a,b,c,d,e){if(null===a){var f=c.type;if(\"function\"===typeof f&&!Wf(f)&&void 0===f.defaultProps&&null===c.compare&&void 0===c.defaultProps)return b.tag=15,b.type=f,Xf(a,b,f,d,e);a=se(c.type,null,d,b,b.mode,e);a.ref=b.ref;a.return=b;return b.child=a}f=a.child;if(0===(a.lanes&e)){var g=f.memoizedProps;c=c.compare;c=null!==c?c:Dd;if(c(g,d)&&a.ref===b.ref)return Uf(a,b,e)}b.flags|=1;a=qe(f,d);a.ref=b.ref;a.return=b;return b.child=a}\nfunction Xf(a,b,c,d,e){if(null!==a){var f=a.memoizedProps;if(Dd(f,d)&&a.ref===b.ref)if(G=!1,b.pendingProps=d=f,0!==(a.lanes&e))0!==(a.flags&131072)&&(G=!0);else return b.lanes=a.lanes,Uf(a,b,e)}return Yf(a,b,c,d,e)}\nfunction Zf(a,b,c){var d=b.pendingProps,e=d.children,f=null!==a?a.memoizedState:null;if(\"hidden\"===d.mode)if(0===(b.mode&1))b.memoizedState={baseLanes:0,cachePool:null,transitions:null},v($f,ag),ag|=c;else{if(0===(c&1073741824))return a=null!==f?f.baseLanes|c:c,b.lanes=b.childLanes=1073741824,b.memoizedState={baseLanes:a,cachePool:null,transitions:null},b.updateQueue=null,v($f,ag),ag|=a,null;b.memoizedState={baseLanes:0,cachePool:null,transitions:null};d=null!==f?f.baseLanes:c;v($f,ag);ag|=d}else null!==\nf?(d=f.baseLanes|c,b.memoizedState=null):d=c,v($f,ag),ag|=d;P(a,b,e,c);return b.child}function bg(a,b){var c=b.ref;if(null===a&&null!==c||null!==a&&a.ref!==c)b.flags|=512,b.flags|=2097152}function Yf(a,b,c,d,e){var f=A(c)?kc:x.current;f=lc(b,f);Od(b,e);c=Re(a,b,c,d,f,e);d=We();if(null!==a&&!G)return b.updateQueue=a.updateQueue,b.flags&=-2053,a.lanes&=~e,Uf(a,b,e);F&&d&&md(b);b.flags|=1;P(a,b,c,e);return b.child}\nfunction cg(a,b,c,d,e){if(A(c)){var f=!0;pc(b)}else f=!1;Od(b,e);if(null===b.stateNode)dg(a,b),je(b,c,d),le(b,c,d,e),d=!0;else if(null===a){var g=b.stateNode,h=b.memoizedProps;g.props=h;var k=g.context,l=c.contextType;\"object\"===typeof l&&null!==l?l=Pd(l):(l=A(c)?kc:x.current,l=lc(b,l));var n=c.getDerivedStateFromProps,t=\"function\"===typeof n||\"function\"===typeof g.getSnapshotBeforeUpdate;t||\"function\"!==typeof g.UNSAFE_componentWillReceiveProps&&\"function\"!==typeof g.componentWillReceiveProps||(h!==\nd||k!==l)&&ke(b,g,d,l);Ud=!1;var p=b.memoizedState;g.state=p;ae(b,d,g,e);k=b.memoizedState;h!==d||p!==k||z.current||Ud?(\"function\"===typeof n&&(ee(b,c,n,d),k=b.memoizedState),(h=Ud||ie(b,c,h,d,p,k,l))?(t||\"function\"!==typeof g.UNSAFE_componentWillMount&&\"function\"!==typeof g.componentWillMount||(\"function\"===typeof g.componentWillMount&&g.componentWillMount(),\"function\"===typeof g.UNSAFE_componentWillMount&&g.UNSAFE_componentWillMount()),\"function\"===typeof g.componentDidMount&&(b.flags|=4194308)):\n(\"function\"===typeof g.componentDidMount&&(b.flags|=4194308),b.memoizedProps=d,b.memoizedState=k),g.props=d,g.state=k,g.context=l,d=h):(\"function\"===typeof g.componentDidMount&&(b.flags|=4194308),d=!1)}else{g=b.stateNode;Wd(a,b);h=b.memoizedProps;l=b.type===b.elementType?h:Fd(b.type,h);g.props=l;t=b.pendingProps;p=g.context;k=c.contextType;\"object\"===typeof k&&null!==k?k=Pd(k):(k=A(c)?kc:x.current,k=lc(b,k));var B=c.getDerivedStateFromProps;(n=\"function\"===typeof B||\"function\"===typeof g.getSnapshotBeforeUpdate)||\n\"function\"!==typeof g.UNSAFE_componentWillReceiveProps&&\"function\"!==typeof g.componentWillReceiveProps||(h!==t||p!==k)&&ke(b,g,d,k);Ud=!1;p=b.memoizedState;g.state=p;ae(b,d,g,e);var w=b.memoizedState;h!==t||p!==w||z.current||Ud?(\"function\"===typeof B&&(ee(b,c,B,d),w=b.memoizedState),(l=Ud||ie(b,c,l,d,p,w,k)||!1)?(n||\"function\"!==typeof g.UNSAFE_componentWillUpdate&&\"function\"!==typeof g.componentWillUpdate||(\"function\"===typeof g.componentWillUpdate&&g.componentWillUpdate(d,w,k),\"function\"===typeof g.UNSAFE_componentWillUpdate&&\ng.UNSAFE_componentWillUpdate(d,w,k)),\"function\"===typeof g.componentDidUpdate&&(b.flags|=4),\"function\"===typeof g.getSnapshotBeforeUpdate&&(b.flags|=1024)):(\"function\"!==typeof g.componentDidUpdate||h===a.memoizedProps&&p===a.memoizedState||(b.flags|=4),\"function\"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&p===a.memoizedState||(b.flags|=1024),b.memoizedProps=d,b.memoizedState=w),g.props=d,g.state=w,g.context=k,d=l):(\"function\"!==typeof g.componentDidUpdate||h===a.memoizedProps&&p===\na.memoizedState||(b.flags|=4),\"function\"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&p===a.memoizedState||(b.flags|=1024),d=!1)}return eg(a,b,c,d,f,e)}\nfunction eg(a,b,c,d,e,f){bg(a,b);var g=0!==(b.flags&128);if(!d&&!g)return e&&rc(b,c,!1),Uf(a,b,f);d=b.stateNode;Sf.current=b;var h=g&&\"function\"!==typeof c.getDerivedStateFromError?null:d.render();b.flags|=1;null!==a&&g?(b.child=ve(b,a.child,null,f),b.child=ve(b,null,h,f)):P(a,b,h,f);b.memoizedState=d.state;e&&rc(b,c,!0);return b.child}function fg(a){var b=a.stateNode;b.pendingContext?nc(a,b.pendingContext,b.pendingContext!==b.context):b.context&&nc(a,b.context,!1);Ce(a,b.containerInfo)}\nfunction gg(a,b,c,d,e){Ad();Bd(e);b.flags|=256;P(a,b,c,d);return b.child}var hg={dehydrated:null,treeContext:null,retryLane:0};function ig(a){return{baseLanes:a,cachePool:null,transitions:null}}\nfunction jg(a,b,c){var d=b.pendingProps,e=J.current,f=!1,g=0!==(b.flags&128),h;(h=g)||(h=null!==a&&null===a.memoizedState?!1:0!==(e&2));if(h)f=!0,b.flags&=-129;else if(null===a||null!==a.memoizedState)e|=1;v(J,e&1);if(null===a){wd(b);a=b.memoizedState;if(null!==a&&(a=a.dehydrated,null!==a))return 0===(b.mode&1)?b.lanes=1:Kb(a)?b.lanes=8:b.lanes=1073741824,null;g=d.children;a=d.fallback;return f?(d=b.mode,f=b.child,g={mode:\"hidden\",children:g},0===(d&1)&&null!==f?(f.childLanes=0,f.pendingProps=g):\nf=kg(g,d,0,null),a=ue(a,d,c,null),f.return=b,a.return=b,f.sibling=a,b.child=f,b.child.memoizedState=ig(c),b.memoizedState=hg,a):lg(b,g)}e=a.memoizedState;if(null!==e&&(h=e.dehydrated,null!==h))return mg(a,b,g,d,h,e,c);if(f){f=d.fallback;g=b.mode;e=a.child;h=e.sibling;var k={mode:\"hidden\",children:d.children};0===(g&1)&&b.child!==e?(d=b.child,d.childLanes=0,d.pendingProps=k,b.deletions=null):(d=qe(e,k),d.subtreeFlags=e.subtreeFlags&14680064);null!==h?f=qe(h,f):(f=ue(f,g,c,null),f.flags|=2);f.return=\nb;d.return=b;d.sibling=f;b.child=d;d=f;f=b.child;g=a.child.memoizedState;g=null===g?ig(c):{baseLanes:g.baseLanes|c,cachePool:null,transitions:g.transitions};f.memoizedState=g;f.childLanes=a.childLanes&~c;b.memoizedState=hg;return d}f=a.child;a=f.sibling;d=qe(f,{mode:\"visible\",children:d.children});0===(b.mode&1)&&(d.lanes=c);d.return=b;d.sibling=null;null!==a&&(c=b.deletions,null===c?(b.deletions=[a],b.flags|=16):c.push(a));b.child=d;b.memoizedState=null;return d}\nfunction lg(a,b){b=kg({mode:\"visible\",children:b},a.mode,0,null);b.return=a;return a.child=b}function ng(a,b,c,d){null!==d&&Bd(d);ve(b,a.child,null,c);a=lg(b,b.pendingProps.children);a.flags|=2;b.memoizedState=null;return a}\nfunction mg(a,b,c,d,e,f,g){if(c){if(b.flags&256)return b.flags&=-257,d=Gf(Error(m(422))),ng(a,b,g,d);if(null!==b.memoizedState)return b.child=a.child,b.flags|=128,null;f=d.fallback;e=b.mode;d=kg({mode:\"visible\",children:d.children},e,0,null);f=ue(f,e,g,null);f.flags|=2;d.return=b;f.return=b;d.sibling=f;b.child=d;0!==(b.mode&1)&&ve(b,a.child,null,g);b.child.memoizedState=ig(g);b.memoizedState=hg;return f}if(0===(b.mode&1))return ng(a,b,g,null);if(Kb(e))return d=Lb(e).digest,f=Error(m(419)),d=Gf(f,\nd,void 0),ng(a,b,g,d);c=0!==(g&a.childLanes);if(G||c){d=O;if(null!==d){switch(g&-g){case 4:e=2;break;case 16:e=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:e=32;break;case 536870912:e=268435456;break;default:e=0}e=0!==(e&(d.suspendedLanes|g))?0:e;0!==e&&e!==f.retryLane&&(f.retryLane=e,Td(a,e),ge(d,a,\ne,-1))}og();d=Gf(Error(m(421)));return ng(a,b,g,d)}if(Jb(e))return b.flags|=128,b.child=a.child,b=pg.bind(null,a),Mb(e,b),null;a=f.treeContext;Va&&(pd=Qb(e),od=b,F=!0,rd=null,qd=!1,null!==a&&(fd[gd++]=id,fd[gd++]=jd,fd[gd++]=hd,id=a.id,jd=a.overflow,hd=b));b=lg(b,d.children);b.flags|=4096;return b}function qg(a,b,c){a.lanes|=b;var d=a.alternate;null!==d&&(d.lanes|=b);Nd(a.return,b,c)}\nfunction rg(a,b,c,d,e){var f=a.memoizedState;null===f?a.memoizedState={isBackwards:b,rendering:null,renderingStartTime:0,last:d,tail:c,tailMode:e}:(f.isBackwards=b,f.rendering=null,f.renderingStartTime=0,f.last=d,f.tail=c,f.tailMode=e)}\nfunction sg(a,b,c){var d=b.pendingProps,e=d.revealOrder,f=d.tail;P(a,b,d.children,c);d=J.current;if(0!==(d&2))d=d&1|2,b.flags|=128;else{if(null!==a&&0!==(a.flags&128))a:for(a=b.child;null!==a;){if(13===a.tag)null!==a.memoizedState&&qg(a,c,b);else if(19===a.tag)qg(a,c,b);else if(null!==a.child){a.child.return=a;a=a.child;continue}if(a===b)break a;for(;null===a.sibling;){if(null===a.return||a.return===b)break a;a=a.return}a.sibling.return=a.return;a=a.sibling}d&=1}v(J,d);if(0===(b.mode&1))b.memoizedState=\nnull;else switch(e){case \"forwards\":c=b.child;for(e=null;null!==c;)a=c.alternate,null!==a&&null===Ge(a)&&(e=c),c=c.sibling;c=e;null===c?(e=b.child,b.child=null):(e=c.sibling,c.sibling=null);rg(b,!1,e,c,f);break;case \"backwards\":c=null;e=b.child;for(b.child=null;null!==e;){a=e.alternate;if(null!==a&&null===Ge(a)){b.child=e;break}a=e.sibling;e.sibling=c;c=e;e=a}rg(b,!0,c,null,f);break;case \"together\":rg(b,!1,null,null,void 0);break;default:b.memoizedState=null}return b.child}\nfunction dg(a,b){0===(b.mode&1)&&null!==a&&(a.alternate=null,b.alternate=null,b.flags|=2)}function Uf(a,b,c){null!==a&&(b.dependencies=a.dependencies);be|=b.lanes;if(0===(c&b.childLanes))return null;if(null!==a&&b.child!==a.child)throw Error(m(153));if(null!==b.child){a=b.child;c=qe(a,a.pendingProps);b.child=c;for(c.return=b;null!==a.sibling;)a=a.sibling,c=c.sibling=qe(a,a.pendingProps),c.return=b;c.sibling=null}return b.child}\nfunction tg(a,b,c){switch(b.tag){case 3:fg(b);Ad();break;case 5:Ee(b);break;case 1:A(b.type)&&pc(b);break;case 4:Ce(b,b.stateNode.containerInfo);break;case 10:Ld(b,b.type._context,b.memoizedProps.value);break;case 13:var d=b.memoizedState;if(null!==d){if(null!==d.dehydrated)return v(J,J.current&1),b.flags|=128,null;if(0!==(c&b.child.childLanes))return jg(a,b,c);v(J,J.current&1);a=Uf(a,b,c);return null!==a?a.sibling:null}v(J,J.current&1);break;case 19:d=0!==(c&b.childLanes);if(0!==(a.flags&128)){if(d)return sg(a,\nb,c);b.flags|=128}var e=b.memoizedState;null!==e&&(e.rendering=null,e.tail=null,e.lastEffect=null);v(J,J.current);if(d)break;else return null;case 22:case 23:return b.lanes=0,Zf(a,b,c)}return Uf(a,b,c)}function ug(a){a.flags|=4}function vg(a,b){if(null!==a&&a.child===b.child)return!0;if(0!==(b.flags&16))return!1;for(a=b.child;null!==a;){if(0!==(a.flags&12854)||0!==(a.subtreeFlags&12854))return!1;a=a.sibling}return!0}var wg,xg,yg,zg;\nif(Ta)wg=function(a,b){for(var c=b.child;null!==c;){if(5===c.tag||6===c.tag)Ka(a,c.stateNode);else if(4!==c.tag&&null!==c.child){c.child.return=c;c=c.child;continue}if(c===b)break;for(;null===c.sibling;){if(null===c.return||c.return===b)return;c=c.return}c.sibling.return=c.return;c=c.sibling}},xg=function(){},yg=function(a,b,c,d,e){a=a.memoizedProps;if(a!==d){var f=b.stateNode,g=Be(ye.current);c=Ma(f,c,a,d,e,g);(b.updateQueue=c)&&ug(b)}},zg=function(a,b,c,d){c!==d&&ug(b)};else if(Ua){wg=function(a,\nb,c,d){for(var e=b.child;null!==e;){if(5===e.tag){var f=e.stateNode;c&&d&&(f=Eb(f,e.type,e.memoizedProps,e));Ka(a,f)}else if(6===e.tag)f=e.stateNode,c&&d&&(f=Fb(f,e.memoizedProps,e)),Ka(a,f);else if(4!==e.tag)if(22===e.tag&&null!==e.memoizedState)f=e.child,null!==f&&(f.return=e),wg(a,e,!0,!0);else if(null!==e.child){e.child.return=e;e=e.child;continue}if(e===b)break;for(;null===e.sibling;){if(null===e.return||e.return===b)return;e=e.return}e.sibling.return=e.return;e=e.sibling}};var Ag=function(a,\nb,c,d){for(var e=b.child;null!==e;){if(5===e.tag){var f=e.stateNode;c&&d&&(f=Eb(f,e.type,e.memoizedProps,e));Ab(a,f)}else if(6===e.tag)f=e.stateNode,c&&d&&(f=Fb(f,e.memoizedProps,e)),Ab(a,f);else if(4!==e.tag)if(22===e.tag&&null!==e.memoizedState)f=e.child,null!==f&&(f.return=e),Ag(a,e,!0,!0);else if(null!==e.child){e.child.return=e;e=e.child;continue}if(e===b)break;for(;null===e.sibling;){if(null===e.return||e.return===b)return;e=e.return}e.sibling.return=e.return;e=e.sibling}};xg=function(a,b){var c=\nb.stateNode;if(!vg(a,b)){a=c.containerInfo;var d=zb(a);Ag(d,b,!1,!1);c.pendingChildren=d;ug(b);Bb(a,d)}};yg=function(a,b,c,d,e){var f=a.stateNode,g=a.memoizedProps;if((a=vg(a,b))&&g===d)b.stateNode=f;else{var h=b.stateNode,k=Be(ye.current),l=null;g!==d&&(l=Ma(h,c,g,d,e,k));a&&null===l?b.stateNode=f:(f=yb(f,l,c,g,d,b,a,h),La(f,c,d,e,k)&&ug(b),b.stateNode=f,a?ug(b):wg(f,b,!1,!1))}};zg=function(a,b,c,d){c!==d?(a=Be(Ae.current),c=Be(ye.current),b.stateNode=Oa(d,a,c,b),ug(b)):b.stateNode=a.stateNode}}else xg=\nfunction(){},yg=function(){},zg=function(){};function Bg(a,b){if(!F)switch(a.tailMode){case \"hidden\":b=a.tail;for(var c=null;null!==b;)null!==b.alternate&&(c=b),b=b.sibling;null===c?a.tail=null:c.sibling=null;break;case \"collapsed\":c=a.tail;for(var d=null;null!==c;)null!==c.alternate&&(d=c),c=c.sibling;null===d?b||null===a.tail?a.tail=null:a.tail.sibling=null:d.sibling=null}}\nfunction Q(a){var b=null!==a.alternate&&a.alternate.child===a.child,c=0,d=0;if(b)for(var e=a.child;null!==e;)c|=e.lanes|e.childLanes,d|=e.subtreeFlags&14680064,d|=e.flags&14680064,e.return=a,e=e.sibling;else for(e=a.child;null!==e;)c|=e.lanes|e.childLanes,d|=e.subtreeFlags,d|=e.flags,e.return=a,e=e.sibling;a.subtreeFlags|=d;a.childLanes=c;return b}\nfunction Cg(a,b,c){var d=b.pendingProps;nd(b);switch(b.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Q(b),null;case 1:return A(b.type)&&mc(),Q(b),null;case 3:c=b.stateNode;De();q(z);q(x);Ie();c.pendingContext&&(c.context=c.pendingContext,c.pendingContext=null);if(null===a||null===a.child)yd(b)?ug(b):null===a||a.memoizedState.isDehydrated&&0===(b.flags&256)||(b.flags|=1024,null!==rd&&(Dg(rd),rd=null));xg(a,b);Q(b);return null;case 5:Fe(b);c=Be(Ae.current);var e=\nb.type;if(null!==a&&null!=b.stateNode)yg(a,b,e,d,c),a.ref!==b.ref&&(b.flags|=512,b.flags|=2097152);else{if(!d){if(null===b.stateNode)throw Error(m(166));Q(b);return null}a=Be(ye.current);if(yd(b)){if(!Va)throw Error(m(175));a=Rb(b.stateNode,b.type,b.memoizedProps,c,a,b,!qd);b.updateQueue=a;null!==a&&ug(b)}else{var f=Ja(e,d,c,a,b);wg(f,b,!1,!1);b.stateNode=f;La(f,e,d,c,a)&&ug(b)}null!==b.ref&&(b.flags|=512,b.flags|=2097152)}Q(b);return null;case 6:if(a&&null!=b.stateNode)zg(a,b,a.memoizedProps,d);\nelse{if(\"string\"!==typeof d&&null===b.stateNode)throw Error(m(166));a=Be(Ae.current);c=Be(ye.current);if(yd(b)){if(!Va)throw Error(m(176));a=b.stateNode;c=b.memoizedProps;if(d=Sb(a,c,b,!qd))if(e=od,null!==e)switch(e.tag){case 3:$b(e.stateNode.containerInfo,a,c,0!==(e.mode&1));break;case 5:ac(e.type,e.memoizedProps,e.stateNode,a,c,0!==(e.mode&1))}d&&ug(b)}else b.stateNode=Oa(d,a,c,b)}Q(b);return null;case 13:q(J);d=b.memoizedState;if(null===a||null!==a.memoizedState&&null!==a.memoizedState.dehydrated){if(F&&\nnull!==pd&&0!==(b.mode&1)&&0===(b.flags&128))zd(),Ad(),b.flags|=98560,e=!1;else if(e=yd(b),null!==d&&null!==d.dehydrated){if(null===a){if(!e)throw Error(m(318));if(!Va)throw Error(m(344));e=b.memoizedState;e=null!==e?e.dehydrated:null;if(!e)throw Error(m(317));Tb(e,b)}else Ad(),0===(b.flags&128)&&(b.memoizedState=null),b.flags|=4;Q(b);e=!1}else null!==rd&&(Dg(rd),rd=null),e=!0;if(!e)return b.flags&65536?b:null}if(0!==(b.flags&128))return b.lanes=c,b;c=null!==d;c!==(null!==a&&null!==a.memoizedState)&&\nc&&(b.child.flags|=8192,0!==(b.mode&1)&&(null===a||0!==(J.current&1)?0===R&&(R=3):og()));null!==b.updateQueue&&(b.flags|=4);Q(b);return null;case 4:return De(),xg(a,b),null===a&&Xa(b.stateNode.containerInfo),Q(b),null;case 10:return Md(b.type._context),Q(b),null;case 17:return A(b.type)&&mc(),Q(b),null;case 19:q(J);e=b.memoizedState;if(null===e)return Q(b),null;d=0!==(b.flags&128);f=e.rendering;if(null===f)if(d)Bg(e,!1);else{if(0!==R||null!==a&&0!==(a.flags&128))for(a=b.child;null!==a;){f=Ge(a);if(null!==\nf){b.flags|=128;Bg(e,!1);a=f.updateQueue;null!==a&&(b.updateQueue=a,b.flags|=4);b.subtreeFlags=0;a=c;for(c=b.child;null!==c;)d=c,e=a,d.flags&=14680066,f=d.alternate,null===f?(d.childLanes=0,d.lanes=e,d.child=null,d.subtreeFlags=0,d.memoizedProps=null,d.memoizedState=null,d.updateQueue=null,d.dependencies=null,d.stateNode=null):(d.childLanes=f.childLanes,d.lanes=f.lanes,d.child=f.child,d.subtreeFlags=0,d.deletions=null,d.memoizedProps=f.memoizedProps,d.memoizedState=f.memoizedState,d.updateQueue=f.updateQueue,\nd.type=f.type,e=f.dependencies,d.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),c=c.sibling;v(J,J.current&1|2);return b.child}a=a.sibling}null!==e.tail&&D()>Eg&&(b.flags|=128,d=!0,Bg(e,!1),b.lanes=4194304)}else{if(!d)if(a=Ge(f),null!==a){if(b.flags|=128,d=!0,a=a.updateQueue,null!==a&&(b.updateQueue=a,b.flags|=4),Bg(e,!0),null===e.tail&&\"hidden\"===e.tailMode&&!f.alternate&&!F)return Q(b),null}else 2*D()-e.renderingStartTime>Eg&&1073741824!==c&&(b.flags|=128,d=!0,Bg(e,!1),b.lanes=\n4194304);e.isBackwards?(f.sibling=b.child,b.child=f):(a=e.last,null!==a?a.sibling=f:b.child=f,e.last=f)}if(null!==e.tail)return b=e.tail,e.rendering=b,e.tail=b.sibling,e.renderingStartTime=D(),b.sibling=null,a=J.current,v(J,d?a&1|2:a&1),b;Q(b);return null;case 22:case 23:return Fg(),c=null!==b.memoizedState,null!==a&&null!==a.memoizedState!==c&&(b.flags|=8192),c&&0!==(b.mode&1)?0!==(ag&1073741824)&&(Q(b),Ta&&b.subtreeFlags&6&&(b.flags|=8192)):Q(b),null;case 24:return null;case 25:return null}throw Error(m(156,\nb.tag));}\nfunction Gg(a,b){nd(b);switch(b.tag){case 1:return A(b.type)&&mc(),a=b.flags,a&65536?(b.flags=a&-65537|128,b):null;case 3:return De(),q(z),q(x),Ie(),a=b.flags,0!==(a&65536)&&0===(a&128)?(b.flags=a&-65537|128,b):null;case 5:return Fe(b),null;case 13:q(J);a=b.memoizedState;if(null!==a&&null!==a.dehydrated){if(null===b.alternate)throw Error(m(340));Ad()}a=b.flags;return a&65536?(b.flags=a&-65537|128,b):null;case 19:return q(J),null;case 4:return De(),null;case 10:return Md(b.type._context),null;case 22:case 23:return Fg(),\nnull;case 24:return null;default:return null}}var Hg=!1,S=!1,Ig=\"function\"===typeof WeakSet?WeakSet:Set,T=null;function Jg(a,b){var c=a.ref;if(null!==c)if(\"function\"===typeof c)try{c(null)}catch(d){U(a,b,d)}else c.current=null}function Kg(a,b,c){try{c()}catch(d){U(a,b,d)}}var Lg=!1;\nfunction Mg(a,b){Ha(a.containerInfo);for(T=b;null!==T;)if(a=T,b=a.child,0!==(a.subtreeFlags&1028)&&null!==b)b.return=a,T=b;else for(;null!==T;){a=T;try{var c=a.alternate;if(0!==(a.flags&1024))switch(a.tag){case 0:case 11:case 15:break;case 1:if(null!==c){var d=c.memoizedProps,e=c.memoizedState,f=a.stateNode,g=f.getSnapshotBeforeUpdate(a.elementType===a.type?d:Fd(a.type,d),e);f.__reactInternalSnapshotBeforeUpdate=g}break;case 3:Ta&&xb(a.stateNode.containerInfo);break;case 5:case 6:case 4:case 17:break;\ndefault:throw Error(m(163));}}catch(h){U(a,a.return,h)}b=a.sibling;if(null!==b){b.return=a.return;T=b;break}T=a.return}c=Lg;Lg=!1;return c}function Ng(a,b,c){var d=b.updateQueue;d=null!==d?d.lastEffect:null;if(null!==d){var e=d=d.next;do{if((e.tag&a)===a){var f=e.destroy;e.destroy=void 0;void 0!==f&&Kg(b,c,f)}e=e.next}while(e!==d)}}function Og(a,b){b=b.updateQueue;b=null!==b?b.lastEffect:null;if(null!==b){var c=b=b.next;do{if((c.tag&a)===a){var d=c.create;c.destroy=d()}c=c.next}while(c!==b)}}\nfunction Pg(a){var b=a.ref;if(null!==b){var c=a.stateNode;switch(a.tag){case 5:a=Ea(c);break;default:a=c}\"function\"===typeof b?b(a):b.current=a}}function Qg(a){var b=a.alternate;null!==b&&(a.alternate=null,Qg(b));a.child=null;a.deletions=null;a.sibling=null;5===a.tag&&(b=a.stateNode,null!==b&&Za(b));a.stateNode=null;a.return=null;a.dependencies=null;a.memoizedProps=null;a.memoizedState=null;a.pendingProps=null;a.stateNode=null;a.updateQueue=null}\nfunction Rg(a){return 5===a.tag||3===a.tag||4===a.tag}function Sg(a){a:for(;;){for(;null===a.sibling;){if(null===a.return||Rg(a.return))return null;a=a.return}a.sibling.return=a.return;for(a=a.sibling;5!==a.tag&&6!==a.tag&&18!==a.tag;){if(a.flags&2)continue a;if(null===a.child||4===a.tag)continue a;else a.child.return=a,a=a.child}if(!(a.flags&2))return a.stateNode}}\nfunction Tg(a,b,c){var d=a.tag;if(5===d||6===d)a=a.stateNode,b?pb(c,a,b):kb(c,a);else if(4!==d&&(a=a.child,null!==a))for(Tg(a,b,c),a=a.sibling;null!==a;)Tg(a,b,c),a=a.sibling}function Ug(a,b,c){var d=a.tag;if(5===d||6===d)a=a.stateNode,b?ob(c,a,b):jb(c,a);else if(4!==d&&(a=a.child,null!==a))for(Ug(a,b,c),a=a.sibling;null!==a;)Ug(a,b,c),a=a.sibling}var V=null,Vg=!1;function Wg(a,b,c){for(c=c.child;null!==c;)Xg(a,b,c),c=c.sibling}\nfunction Xg(a,b,c){if(Sc&&\"function\"===typeof Sc.onCommitFiberUnmount)try{Sc.onCommitFiberUnmount(Rc,c)}catch(h){}switch(c.tag){case 5:S||Jg(c,b);case 6:if(Ta){var d=V,e=Vg;V=null;Wg(a,b,c);V=d;Vg=e;null!==V&&(Vg?rb(V,c.stateNode):qb(V,c.stateNode))}else Wg(a,b,c);break;case 18:Ta&&null!==V&&(Vg?Yb(V,c.stateNode):Xb(V,c.stateNode));break;case 4:Ta?(d=V,e=Vg,V=c.stateNode.containerInfo,Vg=!0,Wg(a,b,c),V=d,Vg=e):(Ua&&(d=c.stateNode.containerInfo,e=zb(d),Cb(d,e)),Wg(a,b,c));break;case 0:case 11:case 14:case 15:if(!S&&\n(d=c.updateQueue,null!==d&&(d=d.lastEffect,null!==d))){e=d=d.next;do{var f=e,g=f.destroy;f=f.tag;void 0!==g&&(0!==(f&2)?Kg(c,b,g):0!==(f&4)&&Kg(c,b,g));e=e.next}while(e!==d)}Wg(a,b,c);break;case 1:if(!S&&(Jg(c,b),d=c.stateNode,\"function\"===typeof d.componentWillUnmount))try{d.props=c.memoizedProps,d.state=c.memoizedState,d.componentWillUnmount()}catch(h){U(c,b,h)}Wg(a,b,c);break;case 21:Wg(a,b,c);break;case 22:c.mode&1?(S=(d=S)||null!==c.memoizedState,Wg(a,b,c),S=d):Wg(a,b,c);break;default:Wg(a,b,\nc)}}function Yg(a){var b=a.updateQueue;if(null!==b){a.updateQueue=null;var c=a.stateNode;null===c&&(c=a.stateNode=new Ig);b.forEach(function(b){var d=Zg.bind(null,a,b);c.has(b)||(c.add(b),b.then(d,d))})}}\nfunction $g(a,b){var c=b.deletions;if(null!==c)for(var d=0;d<c.length;d++){var e=c[d];try{var f=a,g=b;if(Ta){var h=g;a:for(;null!==h;){switch(h.tag){case 5:V=h.stateNode;Vg=!1;break a;case 3:V=h.stateNode.containerInfo;Vg=!0;break a;case 4:V=h.stateNode.containerInfo;Vg=!0;break a}h=h.return}if(null===V)throw Error(m(160));Xg(f,g,e);V=null;Vg=!1}else Xg(f,g,e);var k=e.alternate;null!==k&&(k.return=null);e.return=null}catch(l){U(e,b,l)}}if(b.subtreeFlags&12854)for(b=b.child;null!==b;)ah(b,a),b=b.sibling}\nfunction ah(a,b){var c=a.alternate,d=a.flags;switch(a.tag){case 0:case 11:case 14:case 15:$g(b,a);bh(a);if(d&4){try{Ng(3,a,a.return),Og(3,a)}catch(p){U(a,a.return,p)}try{Ng(5,a,a.return)}catch(p){U(a,a.return,p)}}break;case 1:$g(b,a);bh(a);d&512&&null!==c&&Jg(c,c.return);break;case 5:$g(b,a);bh(a);d&512&&null!==c&&Jg(c,c.return);if(Ta){if(a.flags&32){var e=a.stateNode;try{sb(e)}catch(p){U(a,a.return,p)}}if(d&4&&(e=a.stateNode,null!=e)){var f=a.memoizedProps;c=null!==c?c.memoizedProps:f;d=a.type;b=\na.updateQueue;a.updateQueue=null;if(null!==b)try{nb(e,b,d,c,f,a)}catch(p){U(a,a.return,p)}}}break;case 6:$g(b,a);bh(a);if(d&4&&Ta){if(null===a.stateNode)throw Error(m(162));e=a.stateNode;f=a.memoizedProps;c=null!==c?c.memoizedProps:f;try{lb(e,c,f)}catch(p){U(a,a.return,p)}}break;case 3:$g(b,a);bh(a);if(d&4){if(Ta&&Va&&null!==c&&c.memoizedState.isDehydrated)try{Vb(b.containerInfo)}catch(p){U(a,a.return,p)}if(Ua){e=b.containerInfo;f=b.pendingChildren;try{Cb(e,f)}catch(p){U(a,a.return,p)}}}break;case 4:$g(b,\na);bh(a);if(d&4&&Ua){f=a.stateNode;e=f.containerInfo;f=f.pendingChildren;try{Cb(e,f)}catch(p){U(a,a.return,p)}}break;case 13:$g(b,a);bh(a);e=a.child;e.flags&8192&&(f=null!==e.memoizedState,e.stateNode.isHidden=f,!f||null!==e.alternate&&null!==e.alternate.memoizedState||(ch=D()));d&4&&Yg(a);break;case 22:var g=null!==c&&null!==c.memoizedState;a.mode&1?(S=(c=S)||g,$g(b,a),S=c):$g(b,a);bh(a);if(d&8192){c=null!==a.memoizedState;if((a.stateNode.isHidden=c)&&!g&&0!==(a.mode&1))for(T=a,d=a.child;null!==\nd;){for(b=T=d;null!==T;){g=T;var h=g.child;switch(g.tag){case 0:case 11:case 14:case 15:Ng(4,g,g.return);break;case 1:Jg(g,g.return);var k=g.stateNode;if(\"function\"===typeof k.componentWillUnmount){var l=g,n=g.return;try{var t=l;k.props=t.memoizedProps;k.state=t.memoizedState;k.componentWillUnmount()}catch(p){U(l,n,p)}}break;case 5:Jg(g,g.return);break;case 22:if(null!==g.memoizedState){dh(b);continue}}null!==h?(h.return=g,T=h):dh(b)}d=d.sibling}if(Ta)a:if(d=null,Ta)for(b=a;;){if(5===b.tag){if(null===\nd){d=b;try{e=b.stateNode,c?tb(e):vb(b.stateNode,b.memoizedProps)}catch(p){U(a,a.return,p)}}}else if(6===b.tag){if(null===d)try{f=b.stateNode,c?ub(f):wb(f,b.memoizedProps)}catch(p){U(a,a.return,p)}}else if((22!==b.tag&&23!==b.tag||null===b.memoizedState||b===a)&&null!==b.child){b.child.return=b;b=b.child;continue}if(b===a)break a;for(;null===b.sibling;){if(null===b.return||b.return===a)break a;d===b&&(d=null);b=b.return}d===b&&(d=null);b.sibling.return=b.return;b=b.sibling}}break;case 19:$g(b,a);bh(a);\nd&4&&Yg(a);break;case 21:break;default:$g(b,a),bh(a)}}function bh(a){var b=a.flags;if(b&2){try{if(Ta){b:{for(var c=a.return;null!==c;){if(Rg(c)){var d=c;break b}c=c.return}throw Error(m(160));}switch(d.tag){case 5:var e=d.stateNode;d.flags&32&&(sb(e),d.flags&=-33);var f=Sg(a);Ug(a,f,e);break;case 3:case 4:var g=d.stateNode.containerInfo,h=Sg(a);Tg(a,h,g);break;default:throw Error(m(161));}}}catch(k){U(a,a.return,k)}a.flags&=-3}b&4096&&(a.flags&=-4097)}function eh(a,b,c){T=a;fh(a,b,c)}\nfunction fh(a,b,c){for(var d=0!==(a.mode&1);null!==T;){var e=T,f=e.child;if(22===e.tag&&d){var g=null!==e.memoizedState||Hg;if(!g){var h=e.alternate,k=null!==h&&null!==h.memoizedState||S;h=Hg;var l=S;Hg=g;if((S=k)&&!l)for(T=e;null!==T;)g=T,k=g.child,22===g.tag&&null!==g.memoizedState?gh(e):null!==k?(k.return=g,T=k):gh(e);for(;null!==f;)T=f,fh(f,b,c),f=f.sibling;T=e;Hg=h;S=l}hh(a,b,c)}else 0!==(e.subtreeFlags&8772)&&null!==f?(f.return=e,T=f):hh(a,b,c)}}\nfunction hh(a){for(;null!==T;){var b=T;if(0!==(b.flags&8772)){var c=b.alternate;try{if(0!==(b.flags&8772))switch(b.tag){case 0:case 11:case 15:S||Og(5,b);break;case 1:var d=b.stateNode;if(b.flags&4&&!S)if(null===c)d.componentDidMount();else{var e=b.elementType===b.type?c.memoizedProps:Fd(b.type,c.memoizedProps);d.componentDidUpdate(e,c.memoizedState,d.__reactInternalSnapshotBeforeUpdate)}var f=b.updateQueue;null!==f&&ce(b,f,d);break;case 3:var g=b.updateQueue;if(null!==g){c=null;if(null!==b.child)switch(b.child.tag){case 5:c=\nEa(b.child.stateNode);break;case 1:c=b.child.stateNode}ce(b,g,c)}break;case 5:var h=b.stateNode;null===c&&b.flags&4&&mb(h,b.type,b.memoizedProps,b);break;case 6:break;case 4:break;case 12:break;case 13:if(Va&&null===b.memoizedState){var k=b.alternate;if(null!==k){var l=k.memoizedState;if(null!==l){var n=l.dehydrated;null!==n&&Wb(n)}}}break;case 19:case 17:case 21:case 22:case 23:case 25:break;default:throw Error(m(163));}S||b.flags&512&&Pg(b)}catch(t){U(b,b.return,t)}}if(b===a){T=null;break}c=b.sibling;\nif(null!==c){c.return=b.return;T=c;break}T=b.return}}function dh(a){for(;null!==T;){var b=T;if(b===a){T=null;break}var c=b.sibling;if(null!==c){c.return=b.return;T=c;break}T=b.return}}\nfunction gh(a){for(;null!==T;){var b=T;try{switch(b.tag){case 0:case 11:case 15:var c=b.return;try{Og(4,b)}catch(k){U(b,c,k)}break;case 1:var d=b.stateNode;if(\"function\"===typeof d.componentDidMount){var e=b.return;try{d.componentDidMount()}catch(k){U(b,e,k)}}var f=b.return;try{Pg(b)}catch(k){U(b,f,k)}break;case 5:var g=b.return;try{Pg(b)}catch(k){U(b,g,k)}}}catch(k){U(b,b.return,k)}if(b===a){T=null;break}var h=b.sibling;if(null!==h){h.return=b.return;T=h;break}T=b.return}}\nvar ih=0,jh=1,kh=2,lh=3,mh=4;if(\"function\"===typeof Symbol&&Symbol.for){var nh=Symbol.for;ih=nh(\"selector.component\");jh=nh(\"selector.has_pseudo_class\");kh=nh(\"selector.role\");lh=nh(\"selector.test_id\");mh=nh(\"selector.text\")}function oh(a){var b=Wa(a);if(null!=b){if(\"string\"!==typeof b.memoizedProps[\"data-testname\"])throw Error(m(364));return b}a=cb(a);if(null===a)throw Error(m(362));return a.stateNode.current}\nfunction ph(a,b){switch(b.$$typeof){case ih:if(a.type===b.value)return!0;break;case jh:a:{b=b.value;a=[a,0];for(var c=0;c<a.length;){var d=a[c++],e=a[c++],f=b[e];if(5!==d.tag||!fb(d)){for(;null!=f&&ph(d,f);)e++,f=b[e];if(e===b.length){b=!0;break a}else for(d=d.child;null!==d;)a.push(d,e),d=d.sibling}}b=!1}return b;case kh:if(5===a.tag&&gb(a.stateNode,b.value))return!0;break;case mh:if(5===a.tag||6===a.tag)if(a=eb(a),null!==a&&0<=a.indexOf(b.value))return!0;break;case lh:if(5===a.tag&&(a=a.memoizedProps[\"data-testname\"],\n\"string\"===typeof a&&a.toLowerCase()===b.value.toLowerCase()))return!0;break;default:throw Error(m(365));}return!1}function qh(a){switch(a.$$typeof){case ih:return\"<\"+(ua(a.value)||\"Unknown\")+\">\";case jh:return\":has(\"+(qh(a)||\"\")+\")\";case kh:return'[role=\"'+a.value+'\"]';case mh:return'\"'+a.value+'\"';case lh:return'[data-testname=\"'+a.value+'\"]';default:throw Error(m(365));}}\nfunction rh(a,b){var c=[];a=[a,0];for(var d=0;d<a.length;){var e=a[d++],f=a[d++],g=b[f];if(5!==e.tag||!fb(e)){for(;null!=g&&ph(e,g);)f++,g=b[f];if(f===b.length)c.push(e);else for(e=e.child;null!==e;)a.push(e,f),e=e.sibling}}return c}function sh(a,b){if(!bb)throw Error(m(363));a=oh(a);a=rh(a,b);b=[];a=Array.from(a);for(var c=0;c<a.length;){var d=a[c++];if(5===d.tag)fb(d)||b.push(d.stateNode);else for(d=d.child;null!==d;)a.push(d),d=d.sibling}return b}\nvar th=Math.ceil,uh=da.ReactCurrentDispatcher,vh=da.ReactCurrentOwner,W=da.ReactCurrentBatchConfig,H=0,O=null,X=null,Y=0,ag=0,$f=ic(0),R=0,wh=null,be=0,xh=0,yh=0,zh=null,Ah=null,ch=0,Eg=Infinity,Bh=null;function Ch(){Eg=D()+500}var Kf=!1,Lf=null,Nf=null,Dh=!1,Eh=null,Fh=0,Gh=0,Hh=null,Ih=-1,Jh=0;function I(){return 0!==(H&6)?D():-1!==Ih?Ih:Ih=D()}function fe(a){if(0===(a.mode&1))return 1;if(0!==(H&2)&&0!==Y)return Y&-Y;if(null!==Cd.transition)return 0===Jh&&(Jh=Dc()),Jh;a=C;return 0!==a?a:Ya()}\nfunction ge(a,b,c,d){if(50<Gh)throw Gh=0,Hh=null,Error(m(185));Fc(a,c,d);if(0===(H&2)||a!==O)a===O&&(0===(H&2)&&(xh|=c),4===R&&Kh(a,Y)),Lh(a,d),1===c&&0===H&&0===(b.mode&1)&&(Ch(),Xc&&ad())}\nfunction Lh(a,b){var c=a.callbackNode;Bc(a,b);var d=zc(a,a===O?Y:0);if(0===d)null!==c&&Kc(c),a.callbackNode=null,a.callbackPriority=0;else if(b=d&-d,a.callbackPriority!==b){null!=c&&Kc(c);if(1===b)0===a.tag?$c(Mh.bind(null,a)):Zc(Mh.bind(null,a)),$a?ab(function(){0===(H&6)&&ad()}):Jc(Nc,ad),c=null;else{switch(Ic(d)){case 1:c=Nc;break;case 4:c=Oc;break;case 16:c=Pc;break;case 536870912:c=Qc;break;default:c=Pc}c=Nh(c,Oh.bind(null,a))}a.callbackPriority=b;a.callbackNode=c}}\nfunction Oh(a,b){Ih=-1;Jh=0;if(0!==(H&6))throw Error(m(327));var c=a.callbackNode;if(Ph()&&a.callbackNode!==c)return null;var d=zc(a,a===O?Y:0);if(0===d)return null;if(0!==(d&30)||0!==(d&a.expiredLanes)||b)b=Qh(a,d);else{b=d;var e=H;H|=2;var f=Rh();if(O!==a||Y!==b)Bh=null,Ch(),Sh(a,b);do try{Th();break}catch(h){Uh(a,h)}while(1);Kd();uh.current=f;H=e;null!==X?b=0:(O=null,Y=0,b=R)}if(0!==b){2===b&&(e=Cc(a),0!==e&&(d=e,b=Vh(a,e)));if(1===b)throw c=wh,Sh(a,0),Kh(a,d),Lh(a,D()),c;if(6===b)Kh(a,d);else{e=\na.current.alternate;if(0===(d&30)&&!Wh(e)&&(b=Qh(a,d),2===b&&(f=Cc(a),0!==f&&(d=f,b=Vh(a,f))),1===b))throw c=wh,Sh(a,0),Kh(a,d),Lh(a,D()),c;a.finishedWork=e;a.finishedLanes=d;switch(b){case 0:case 1:throw Error(m(345));case 2:Xh(a,Ah,Bh);break;case 3:Kh(a,d);if((d&130023424)===d&&(b=ch+500-D(),10<b)){if(0!==zc(a,0))break;e=a.suspendedLanes;if((e&d)!==d){I();a.pingedLanes|=a.suspendedLanes&e;break}a.timeoutHandle=Pa(Xh.bind(null,a,Ah,Bh),b);break}Xh(a,Ah,Bh);break;case 4:Kh(a,d);if((d&4194240)===d)break;\nb=a.eventTimes;for(e=-1;0<d;){var g=31-tc(d);f=1<<g;g=b[g];g>e&&(e=g);d&=~f}d=e;d=D()-d;d=(120>d?120:480>d?480:1080>d?1080:1920>d?1920:3E3>d?3E3:4320>d?4320:1960*th(d/1960))-d;if(10<d){a.timeoutHandle=Pa(Xh.bind(null,a,Ah,Bh),d);break}Xh(a,Ah,Bh);break;case 5:Xh(a,Ah,Bh);break;default:throw Error(m(329));}}}Lh(a,D());return a.callbackNode===c?Oh.bind(null,a):null}\nfunction Vh(a,b){var c=zh;a.current.memoizedState.isDehydrated&&(Sh(a,b).flags|=256);a=Qh(a,b);2!==a&&(b=Ah,Ah=c,null!==b&&Dg(b));return a}function Dg(a){null===Ah?Ah=a:Ah.push.apply(Ah,a)}\nfunction Wh(a){for(var b=a;;){if(b.flags&16384){var c=b.updateQueue;if(null!==c&&(c=c.stores,null!==c))for(var d=0;d<c.length;d++){var e=c[d],f=e.getSnapshot;e=e.value;try{if(!Vc(f(),e))return!1}catch(g){return!1}}}c=b.child;if(b.subtreeFlags&16384&&null!==c)c.return=b,b=c;else{if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return!0;b=b.return}b.sibling.return=b.return;b=b.sibling}}return!0}\nfunction Kh(a,b){b&=~yh;b&=~xh;a.suspendedLanes|=b;a.pingedLanes&=~b;for(a=a.expirationTimes;0<b;){var c=31-tc(b),d=1<<c;a[c]=-1;b&=~d}}function Mh(a){if(0!==(H&6))throw Error(m(327));Ph();var b=zc(a,0);if(0===(b&1))return Lh(a,D()),null;var c=Qh(a,b);if(0!==a.tag&&2===c){var d=Cc(a);0!==d&&(b=d,c=Vh(a,d))}if(1===c)throw c=wh,Sh(a,0),Kh(a,b),Lh(a,D()),c;if(6===c)throw Error(m(345));a.finishedWork=a.current.alternate;a.finishedLanes=b;Xh(a,Ah,Bh);Lh(a,D());return null}\nfunction Yh(a){null!==Eh&&0===Eh.tag&&0===(H&6)&&Ph();var b=H;H|=1;var c=W.transition,d=C;try{if(W.transition=null,C=1,a)return a()}finally{C=d,W.transition=c,H=b,0===(H&6)&&ad()}}function Fg(){ag=$f.current;q($f)}\nfunction Sh(a,b){a.finishedWork=null;a.finishedLanes=0;var c=a.timeoutHandle;c!==Ra&&(a.timeoutHandle=Ra,Qa(c));if(null!==X)for(c=X.return;null!==c;){var d=c;nd(d);switch(d.tag){case 1:d=d.type.childContextTypes;null!==d&&void 0!==d&&mc();break;case 3:De();q(z);q(x);Ie();break;case 5:Fe(d);break;case 4:De();break;case 13:q(J);break;case 19:q(J);break;case 10:Md(d.type._context);break;case 22:case 23:Fg()}c=c.return}O=a;X=a=qe(a.current,null);Y=ag=b;R=0;wh=null;yh=xh=be=0;Ah=zh=null;if(null!==Qd){for(b=\n0;b<Qd.length;b++)if(c=Qd[b],d=c.interleaved,null!==d){c.interleaved=null;var e=d.next,f=c.pending;if(null!==f){var g=f.next;f.next=e;d.next=g}c.pending=d}Qd=null}return a}\nfunction Uh(a,b){do{var c=X;try{Kd();Je.current=Ve;if(Me){for(var d=K.memoizedState;null!==d;){var e=d.queue;null!==e&&(e.pending=null);d=d.next}Me=!1}Le=0;M=L=K=null;Ne=!1;Oe=0;vh.current=null;if(null===c||null===c.return){R=1;wh=b;X=null;break}a:{var f=a,g=c.return,h=c,k=b;b=Y;h.flags|=32768;if(null!==k&&\"object\"===typeof k&&\"function\"===typeof k.then){var l=k,n=h,t=n.tag;if(0===(n.mode&1)&&(0===t||11===t||15===t)){var p=n.alternate;p?(n.updateQueue=p.updateQueue,n.memoizedState=p.memoizedState,\nn.lanes=p.lanes):(n.updateQueue=null,n.memoizedState=null)}var B=Qf(g);if(null!==B){B.flags&=-257;Rf(B,g,h,f,b);B.mode&1&&Of(f,l,b);b=B;k=l;var w=b.updateQueue;if(null===w){var Z=new Set;Z.add(k);b.updateQueue=Z}else w.add(k);break a}else{if(0===(b&1)){Of(f,l,b);og();break a}k=Error(m(426))}}else if(F&&h.mode&1){var za=Qf(g);if(null!==za){0===(za.flags&65536)&&(za.flags|=256);Rf(za,g,h,f,b);Bd(Ff(k,h));break a}}f=k=Ff(k,h);4!==R&&(R=2);null===zh?zh=[f]:zh.push(f);f=g;do{switch(f.tag){case 3:f.flags|=\n65536;b&=-b;f.lanes|=b;var E=Jf(f,k,b);$d(f,E);break a;case 1:h=k;var r=f.type,u=f.stateNode;if(0===(f.flags&128)&&(\"function\"===typeof r.getDerivedStateFromError||null!==u&&\"function\"===typeof u.componentDidCatch&&(null===Nf||!Nf.has(u)))){f.flags|=65536;b&=-b;f.lanes|=b;var Db=Mf(f,h,b);$d(f,Db);break a}}f=f.return}while(null!==f)}Zh(c)}catch(qc){b=qc;X===c&&null!==c&&(X=c=c.return);continue}break}while(1)}function Rh(){var a=uh.current;uh.current=Ve;return null===a?Ve:a}\nfunction og(){if(0===R||3===R||2===R)R=4;null===O||0===(be&268435455)&&0===(xh&268435455)||Kh(O,Y)}function Qh(a,b){var c=H;H|=2;var d=Rh();if(O!==a||Y!==b)Bh=null,Sh(a,b);do try{$h();break}catch(e){Uh(a,e)}while(1);Kd();H=c;uh.current=d;if(null!==X)throw Error(m(261));O=null;Y=0;return R}function $h(){for(;null!==X;)ai(X)}function Th(){for(;null!==X&&!Lc();)ai(X)}function ai(a){var b=bi(a.alternate,a,ag);a.memoizedProps=a.pendingProps;null===b?Zh(a):X=b;vh.current=null}\nfunction Zh(a){var b=a;do{var c=b.alternate;a=b.return;if(0===(b.flags&32768)){if(c=Cg(c,b,ag),null!==c){X=c;return}}else{c=Gg(c,b);if(null!==c){c.flags&=32767;X=c;return}if(null!==a)a.flags|=32768,a.subtreeFlags=0,a.deletions=null;else{R=6;X=null;return}}b=b.sibling;if(null!==b){X=b;return}X=b=a}while(null!==b);0===R&&(R=5)}function Xh(a,b,c){var d=C,e=W.transition;try{W.transition=null,C=1,ci(a,b,c,d)}finally{W.transition=e,C=d}return null}\nfunction ci(a,b,c,d){do Ph();while(null!==Eh);if(0!==(H&6))throw Error(m(327));c=a.finishedWork;var e=a.finishedLanes;if(null===c)return null;a.finishedWork=null;a.finishedLanes=0;if(c===a.current)throw Error(m(177));a.callbackNode=null;a.callbackPriority=0;var f=c.lanes|c.childLanes;Gc(a,f);a===O&&(X=O=null,Y=0);0===(c.subtreeFlags&2064)&&0===(c.flags&2064)||Dh||(Dh=!0,Nh(Pc,function(){Ph();return null}));f=0!==(c.flags&15990);if(0!==(c.subtreeFlags&15990)||f){f=W.transition;W.transition=null;var g=\nC;C=1;var h=H;H|=4;vh.current=null;Mg(a,c);ah(c,a);Ia(a.containerInfo);a.current=c;eh(c,a,e);Mc();H=h;C=g;W.transition=f}else a.current=c;Dh&&(Dh=!1,Eh=a,Fh=e);f=a.pendingLanes;0===f&&(Nf=null);Tc(c.stateNode,d);Lh(a,D());if(null!==b)for(d=a.onRecoverableError,c=0;c<b.length;c++)e=b[c],d(e.value,{componentStack:e.stack,digest:e.digest});if(Kf)throw Kf=!1,a=Lf,Lf=null,a;0!==(Fh&1)&&0!==a.tag&&Ph();f=a.pendingLanes;0!==(f&1)?a===Hh?Gh++:(Gh=0,Hh=a):Gh=0;ad();return null}\nfunction Ph(){if(null!==Eh){var a=Ic(Fh),b=W.transition,c=C;try{W.transition=null;C=16>a?16:a;if(null===Eh)var d=!1;else{a=Eh;Eh=null;Fh=0;if(0!==(H&6))throw Error(m(331));var e=H;H|=4;for(T=a.current;null!==T;){var f=T,g=f.child;if(0!==(T.flags&16)){var h=f.deletions;if(null!==h){for(var k=0;k<h.length;k++){var l=h[k];for(T=l;null!==T;){var n=T;switch(n.tag){case 0:case 11:case 15:Ng(8,n,f)}var t=n.child;if(null!==t)t.return=n,T=t;else for(;null!==T;){n=T;var p=n.sibling,B=n.return;Qg(n);if(n===\nl){T=null;break}if(null!==p){p.return=B;T=p;break}T=B}}}var w=f.alternate;if(null!==w){var Z=w.child;if(null!==Z){w.child=null;do{var za=Z.sibling;Z.sibling=null;Z=za}while(null!==Z)}}T=f}}if(0!==(f.subtreeFlags&2064)&&null!==g)g.return=f,T=g;else b:for(;null!==T;){f=T;if(0!==(f.flags&2048))switch(f.tag){case 0:case 11:case 15:Ng(9,f,f.return)}var E=f.sibling;if(null!==E){E.return=f.return;T=E;break b}T=f.return}}var r=a.current;for(T=r;null!==T;){g=T;var u=g.child;if(0!==(g.subtreeFlags&2064)&&null!==\nu)u.return=g,T=u;else b:for(g=r;null!==T;){h=T;if(0!==(h.flags&2048))try{switch(h.tag){case 0:case 11:case 15:Og(9,h)}}catch(qc){U(h,h.return,qc)}if(h===g){T=null;break b}var Db=h.sibling;if(null!==Db){Db.return=h.return;T=Db;break b}T=h.return}}H=e;ad();if(Sc&&\"function\"===typeof Sc.onPostCommitFiberRoot)try{Sc.onPostCommitFiberRoot(Rc,a)}catch(qc){}d=!0}return d}finally{C=c,W.transition=b}}return!1}function di(a,b,c){b=Ff(c,b);b=Jf(a,b,1);a=Yd(a,b,1);b=I();null!==a&&(Fc(a,1,b),Lh(a,b))}\nfunction U(a,b,c){if(3===a.tag)di(a,a,c);else for(;null!==b;){if(3===b.tag){di(b,a,c);break}else if(1===b.tag){var d=b.stateNode;if(\"function\"===typeof b.type.getDerivedStateFromError||\"function\"===typeof d.componentDidCatch&&(null===Nf||!Nf.has(d))){a=Ff(c,a);a=Mf(b,a,1);b=Yd(b,a,1);a=I();null!==b&&(Fc(b,1,a),Lh(b,a));break}}b=b.return}}\nfunction Pf(a,b,c){var d=a.pingCache;null!==d&&d.delete(b);b=I();a.pingedLanes|=a.suspendedLanes&c;O===a&&(Y&c)===c&&(4===R||3===R&&(Y&130023424)===Y&&500>D()-ch?Sh(a,0):yh|=c);Lh(a,b)}function ei(a,b){0===b&&(0===(a.mode&1)?b=1:(b=xc,xc<<=1,0===(xc&130023424)&&(xc=4194304)));var c=I();a=Td(a,b);null!==a&&(Fc(a,b,c),Lh(a,c))}function pg(a){var b=a.memoizedState,c=0;null!==b&&(c=b.retryLane);ei(a,c)}\nfunction Zg(a,b){var c=0;switch(a.tag){case 13:var d=a.stateNode;var e=a.memoizedState;null!==e&&(c=e.retryLane);break;case 19:d=a.stateNode;break;default:throw Error(m(314));}null!==d&&d.delete(b);ei(a,c)}var bi;\nbi=function(a,b,c){if(null!==a)if(a.memoizedProps!==b.pendingProps||z.current)G=!0;else{if(0===(a.lanes&c)&&0===(b.flags&128))return G=!1,tg(a,b,c);G=0!==(a.flags&131072)?!0:!1}else G=!1,F&&0!==(b.flags&1048576)&&ld(b,ed,b.index);b.lanes=0;switch(b.tag){case 2:var d=b.type;dg(a,b);a=b.pendingProps;var e=lc(b,x.current);Od(b,c);e=Re(null,b,d,a,e,c);var f=We();b.flags|=1;\"object\"===typeof e&&null!==e&&\"function\"===typeof e.render&&void 0===e.$$typeof?(b.tag=1,b.memoizedState=null,b.updateQueue=null,\nA(d)?(f=!0,pc(b)):f=!1,b.memoizedState=null!==e.state&&void 0!==e.state?e.state:null,Vd(b),e.updater=he,b.stateNode=e,e._reactInternals=b,le(b,d,a,c),b=eg(null,b,d,!0,f,c)):(b.tag=0,F&&f&&md(b),P(null,b,e,c),b=b.child);return b;case 16:d=b.elementType;a:{dg(a,b);a=b.pendingProps;e=d._init;d=e(d._payload);b.type=d;e=b.tag=fi(d);a=Fd(d,a);switch(e){case 0:b=Yf(null,b,d,a,c);break a;case 1:b=cg(null,b,d,a,c);break a;case 11:b=Tf(null,b,d,a,c);break a;case 14:b=Vf(null,b,d,Fd(d.type,a),c);break a}throw Error(m(306,\nd,\"\"));}return b;case 0:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Fd(d,e),Yf(a,b,d,e,c);case 1:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Fd(d,e),cg(a,b,d,e,c);case 3:a:{fg(b);if(null===a)throw Error(m(387));d=b.pendingProps;f=b.memoizedState;e=f.element;Wd(a,b);ae(b,d,null,c);var g=b.memoizedState;d=g.element;if(Va&&f.isDehydrated)if(f={element:d,isDehydrated:!1,cache:g.cache,pendingSuspenseBoundaries:g.pendingSuspenseBoundaries,transitions:g.transitions},b.updateQueue.baseState=\nf,b.memoizedState=f,b.flags&256){e=Ff(Error(m(423)),b);b=gg(a,b,d,c,e);break a}else if(d!==e){e=Ff(Error(m(424)),b);b=gg(a,b,d,c,e);break a}else for(Va&&(pd=Pb(b.stateNode.containerInfo),od=b,F=!0,rd=null,qd=!1),c=we(b,null,d,c),b.child=c;c;)c.flags=c.flags&-3|4096,c=c.sibling;else{Ad();if(d===e){b=Uf(a,b,c);break a}P(a,b,d,c)}b=b.child}return b;case 5:return Ee(b),null===a&&wd(b),d=b.type,e=b.pendingProps,f=null!==a?a.memoizedProps:null,g=e.children,Na(d,e)?g=null:null!==f&&Na(d,f)&&(b.flags|=32),\nbg(a,b),P(a,b,g,c),b.child;case 6:return null===a&&wd(b),null;case 13:return jg(a,b,c);case 4:return Ce(b,b.stateNode.containerInfo),d=b.pendingProps,null===a?b.child=ve(b,null,d,c):P(a,b,d,c),b.child;case 11:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Fd(d,e),Tf(a,b,d,e,c);case 7:return P(a,b,b.pendingProps,c),b.child;case 8:return P(a,b,b.pendingProps.children,c),b.child;case 12:return P(a,b,b.pendingProps.children,c),b.child;case 10:a:{d=b.type._context;e=b.pendingProps;f=b.memoizedProps;\ng=e.value;Ld(b,d,g);if(null!==f)if(Vc(f.value,g)){if(f.children===e.children&&!z.current){b=Uf(a,b,c);break a}}else for(f=b.child,null!==f&&(f.return=b);null!==f;){var h=f.dependencies;if(null!==h){g=f.child;for(var k=h.firstContext;null!==k;){if(k.context===d){if(1===f.tag){k=Xd(-1,c&-c);k.tag=2;var l=f.updateQueue;if(null!==l){l=l.shared;var n=l.pending;null===n?k.next=k:(k.next=n.next,n.next=k);l.pending=k}}f.lanes|=c;k=f.alternate;null!==k&&(k.lanes|=c);Nd(f.return,c,b);h.lanes|=c;break}k=k.next}}else if(10===\nf.tag)g=f.type===b.type?null:f.child;else if(18===f.tag){g=f.return;if(null===g)throw Error(m(341));g.lanes|=c;h=g.alternate;null!==h&&(h.lanes|=c);Nd(g,c,b);g=f.sibling}else g=f.child;if(null!==g)g.return=f;else for(g=f;null!==g;){if(g===b){g=null;break}f=g.sibling;if(null!==f){f.return=g.return;g=f;break}g=g.return}f=g}P(a,b,e.children,c);b=b.child}return b;case 9:return e=b.type,d=b.pendingProps.children,Od(b,c),e=Pd(e),d=d(e),b.flags|=1,P(a,b,d,c),b.child;case 14:return d=b.type,e=Fd(d,b.pendingProps),\ne=Fd(d.type,e),Vf(a,b,d,e,c);case 15:return Xf(a,b,b.type,b.pendingProps,c);case 17:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Fd(d,e),dg(a,b),b.tag=1,A(d)?(a=!0,pc(b)):a=!1,Od(b,c),je(b,d,e),le(b,d,e,c),eg(null,b,d,!0,a,c);case 19:return sg(a,b,c);case 22:return Zf(a,b,c)}throw Error(m(156,b.tag));};function Nh(a,b){return Jc(a,b)}\nfunction gi(a,b,c,d){this.tag=a;this.key=c;this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null;this.index=0;this.ref=null;this.pendingProps=b;this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null;this.mode=d;this.subtreeFlags=this.flags=0;this.deletions=null;this.childLanes=this.lanes=0;this.alternate=null}function td(a,b,c,d){return new gi(a,b,c,d)}function Wf(a){a=a.prototype;return!(!a||!a.isReactComponent)}\nfunction fi(a){if(\"function\"===typeof a)return Wf(a)?1:0;if(void 0!==a&&null!==a){a=a.$$typeof;if(a===ma)return 11;if(a===pa)return 14}return 2}\nfunction qe(a,b){var c=a.alternate;null===c?(c=td(a.tag,b,a.key,a.mode),c.elementType=a.elementType,c.type=a.type,c.stateNode=a.stateNode,c.alternate=a,a.alternate=c):(c.pendingProps=b,c.type=a.type,c.flags=0,c.subtreeFlags=0,c.deletions=null);c.flags=a.flags&14680064;c.childLanes=a.childLanes;c.lanes=a.lanes;c.child=a.child;c.memoizedProps=a.memoizedProps;c.memoizedState=a.memoizedState;c.updateQueue=a.updateQueue;b=a.dependencies;c.dependencies=null===b?null:{lanes:b.lanes,firstContext:b.firstContext};\nc.sibling=a.sibling;c.index=a.index;c.ref=a.ref;return c}\nfunction se(a,b,c,d,e,f){var g=2;d=a;if(\"function\"===typeof a)Wf(a)&&(g=1);else if(\"string\"===typeof a)g=5;else a:switch(a){case ha:return ue(c.children,e,f,b);case ia:g=8;e|=8;break;case ja:return a=td(12,c,b,e|2),a.elementType=ja,a.lanes=f,a;case na:return a=td(13,c,b,e),a.elementType=na,a.lanes=f,a;case oa:return a=td(19,c,b,e),a.elementType=oa,a.lanes=f,a;case ra:return kg(c,e,f,b);default:if(\"object\"===typeof a&&null!==a)switch(a.$$typeof){case ka:g=10;break a;case la:g=9;break a;case ma:g=11;\nbreak a;case pa:g=14;break a;case qa:g=16;d=null;break a}throw Error(m(130,null==a?a:typeof a,\"\"));}b=td(g,c,b,e);b.elementType=a;b.type=d;b.lanes=f;return b}function ue(a,b,c,d){a=td(7,a,d,b);a.lanes=c;return a}function kg(a,b,c,d){a=td(22,a,d,b);a.elementType=ra;a.lanes=c;a.stateNode={isHidden:!1};return a}function re(a,b,c){a=td(6,a,null,b);a.lanes=c;return a}\nfunction te(a,b,c){b=td(4,null!==a.children?a.children:[],a.key,b);b.lanes=c;b.stateNode={containerInfo:a.containerInfo,pendingChildren:null,implementation:a.implementation};return b}\nfunction hi(a,b,c,d,e){this.tag=b;this.containerInfo=a;this.finishedWork=this.pingCache=this.current=this.pendingChildren=null;this.timeoutHandle=Ra;this.callbackNode=this.pendingContext=this.context=null;this.callbackPriority=0;this.eventTimes=Ec(0);this.expirationTimes=Ec(-1);this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0;this.entanglements=Ec(0);this.identifierPrefix=d;this.onRecoverableError=e;Va&&(this.mutableSourceEagerHydrationData=\nnull)}function ii(a,b,c,d,e,f,g,h,k){a=new hi(a,b,c,h,k);1===b?(b=1,!0===f&&(b|=8)):b=0;f=td(3,null,null,b);a.current=f;f.stateNode=a;f.memoizedState={element:d,isDehydrated:c,cache:null,transitions:null,pendingSuspenseBoundaries:null};Vd(f);return a}\nfunction ji(a){if(!a)return jc;a=a._reactInternals;a:{if(wa(a)!==a||1!==a.tag)throw Error(m(170));var b=a;do{switch(b.tag){case 3:b=b.stateNode.context;break a;case 1:if(A(b.type)){b=b.stateNode.__reactInternalMemoizedMergedChildContext;break a}}b=b.return}while(null!==b);throw Error(m(171));}if(1===a.tag){var c=a.type;if(A(c))return oc(a,c,b)}return b}\nfunction ki(a){var b=a._reactInternals;if(void 0===b){if(\"function\"===typeof a.render)throw Error(m(188));a=Object.keys(a).join(\",\");throw Error(m(268,a));}a=Aa(b);return null===a?null:a.stateNode}function li(a,b){a=a.memoizedState;if(null!==a&&null!==a.dehydrated){var c=a.retryLane;a.retryLane=0!==c&&c<b?c:b}}function mi(a,b){li(a,b);(a=a.alternate)&&li(a,b)}function ni(a){a=Aa(a);return null===a?null:a.stateNode}function oi(){return null}\nexports.attemptContinuousHydration=function(a){if(13===a.tag){var b=Td(a,134217728);if(null!==b){var c=I();ge(b,a,134217728,c)}mi(a,134217728)}};exports.attemptDiscreteHydration=function(a){if(13===a.tag){var b=Td(a,1);if(null!==b){var c=I();ge(b,a,1,c)}mi(a,1)}};exports.attemptHydrationAtCurrentPriority=function(a){if(13===a.tag){var b=fe(a),c=Td(a,b);if(null!==c){var d=I();ge(c,a,b,d)}mi(a,b)}};\nexports.attemptSynchronousHydration=function(a){switch(a.tag){case 3:var b=a.stateNode;if(b.current.memoizedState.isDehydrated){var c=yc(b.pendingLanes);0!==c&&(Hc(b,c|1),Lh(b,D()),0===(H&6)&&(Ch(),ad()))}break;case 13:Yh(function(){var b=Td(a,1);if(null!==b){var c=I();ge(b,a,1,c)}}),mi(a,1)}};exports.batchedUpdates=function(a,b){var c=H;H|=1;try{return a(b)}finally{H=c,0===H&&(Ch(),Xc&&ad())}};exports.createComponentSelector=function(a){return{$$typeof:ih,value:a}};\nexports.createContainer=function(a,b,c,d,e,f,g){return ii(a,b,!1,null,c,d,e,f,g)};exports.createHasPseudoClassSelector=function(a){return{$$typeof:jh,value:a}};exports.createHydrationContainer=function(a,b,c,d,e,f,g,h,k){a=ii(c,d,!0,a,e,f,g,h,k);a.context=ji(null);c=a.current;d=I();e=fe(c);f=Xd(d,e);f.callback=void 0!==b&&null!==b?b:null;Yd(c,f,e);a.current.lanes=e;Fc(a,e,d);Lh(a,d);return a};\nexports.createPortal=function(a,b,c){var d=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:fa,key:null==d?null:\"\"+d,children:a,containerInfo:b,implementation:c}};exports.createRoleSelector=function(a){return{$$typeof:kh,value:a}};exports.createTestNameSelector=function(a){return{$$typeof:lh,value:a}};exports.createTextSelector=function(a){return{$$typeof:mh,value:a}};\nexports.deferredUpdates=function(a){var b=C,c=W.transition;try{return W.transition=null,C=16,a()}finally{C=b,W.transition=c}};exports.discreteUpdates=function(a,b,c,d,e){var f=C,g=W.transition;try{return W.transition=null,C=1,a(b,c,d,e)}finally{C=f,W.transition=g,0===H&&Ch()}};exports.findAllNodes=sh;\nexports.findBoundingRects=function(a,b){if(!bb)throw Error(m(363));b=sh(a,b);a=[];for(var c=0;c<b.length;c++)a.push(db(b[c]));for(b=a.length-1;0<b;b--){c=a[b];for(var d=c.x,e=d+c.width,f=c.y,g=f+c.height,h=b-1;0<=h;h--)if(b!==h){var k=a[h],l=k.x,n=l+k.width,t=k.y,p=t+k.height;if(d>=l&&f>=t&&e<=n&&g<=p){a.splice(b,1);break}else if(!(d!==l||c.width!==k.width||p<f||t>g)){t>f&&(k.height+=t-f,k.y=f);p<g&&(k.height=g-t);a.splice(b,1);break}else if(!(f!==t||c.height!==k.height||n<d||l>e)){l>d&&(k.width+=\nl-d,k.x=d);n<e&&(k.width=e-l);a.splice(b,1);break}}}return a};exports.findHostInstance=ki;exports.findHostInstanceWithNoPortals=function(a){a=ya(a);a=null!==a?Ca(a):null;return null===a?null:a.stateNode};exports.findHostInstanceWithWarning=function(a){return ki(a)};exports.flushControlled=function(a){var b=H;H|=1;var c=W.transition,d=C;try{W.transition=null,C=1,a()}finally{C=d,W.transition=c,H=b,0===H&&(Ch(),ad())}};exports.flushPassiveEffects=Ph;exports.flushSync=Yh;\nexports.focusWithin=function(a,b){if(!bb)throw Error(m(363));a=oh(a);b=rh(a,b);b=Array.from(b);for(a=0;a<b.length;){var c=b[a++];if(!fb(c)){if(5===c.tag&&hb(c.stateNode))return!0;for(c=c.child;null!==c;)b.push(c),c=c.sibling}}return!1};exports.getCurrentUpdatePriority=function(){return C};\nexports.getFindAllNodesFailureDescription=function(a,b){if(!bb)throw Error(m(363));var c=0,d=[];a=[oh(a),0];for(var e=0;e<a.length;){var f=a[e++],g=a[e++],h=b[g];if(5!==f.tag||!fb(f))if(ph(f,h)&&(d.push(qh(h)),g++,g>c&&(c=g)),g<b.length)for(f=f.child;null!==f;)a.push(f,g),f=f.sibling}if(c<b.length){for(a=[];c<b.length;c++)a.push(qh(b[c]));return\"findAllNodes was able to match part of the selector:\\n  \"+(d.join(\" > \")+\"\\n\\nNo matching component was found for:\\n  \")+a.join(\" > \")}return null};\nexports.getPublicRootInstance=function(a){a=a.current;if(!a.child)return null;switch(a.child.tag){case 5:return Ea(a.child.stateNode);default:return a.child.stateNode}};\nexports.injectIntoDevTools=function(a){a={bundleType:a.bundleType,version:a.version,rendererPackageName:a.rendererPackageName,rendererConfig:a.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:da.ReactCurrentDispatcher,findHostInstanceByFiber:ni,findFiberByHostInstance:a.findFiberByHostInstance||\noi,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:\"18.2.0\"};if(\"undefined\"===typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)a=!1;else{var b=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(b.isDisabled||!b.supportsFiber)a=!0;else{try{Rc=b.inject(a),Sc=b}catch(c){}a=b.checkDCE?!0:!1}}return a};exports.isAlreadyRendering=function(){return!1};\nexports.observeVisibleRects=function(a,b,c,d){if(!bb)throw Error(m(363));a=sh(a,b);var e=ib(a,c,d).disconnect;return{disconnect:function(){e()}}};exports.registerMutableSourceForHydration=function(a,b){var c=b._getVersion;c=c(b._source);null==a.mutableSourceEagerHydrationData?a.mutableSourceEagerHydrationData=[b,c]:a.mutableSourceEagerHydrationData.push(b,c)};exports.runWithPriority=function(a,b){var c=C;try{return C=a,b()}finally{C=c}};exports.shouldError=function(){return null};\nexports.shouldSuspend=function(){return!1};exports.updateContainer=function(a,b,c,d){var e=b.current,f=I(),g=fe(e);c=ji(c);null===b.context?b.context=c:b.pendingContext=c;b=Xd(f,g);b.payload={element:a};d=void 0===d?null:d;null!==d&&(b.callback=d);a=Yd(e,b,g);null!==a&&(ge(a,e,g,f),Zd(a,e,g));return g};\n\n    return exports;\n};\n", "'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-reconciler.production.min.js');\n} else {\n  module.exports = require('./cjs/react-reconciler.development.js');\n}\n", "/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n", "'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n", "// Save global object in a variable\nvar __global__ =\n(typeof globalThis !== 'undefined' && globalThis) ||\n(typeof self !== 'undefined' && self) ||\n(typeof global !== 'undefined' && global);\n// Create an object that extends from __global__ without the fetch function\nvar __globalThis__ = (function () {\nfunction F() {\nthis.fetch = false;\nthis.DOMException = __global__.DOMException\n}\nF.prototype = __global__; // Needed for feature detection on whatwg-fetch's code\nreturn new F();\n})();\n// Wraps whatwg-fetch with a function scope to hijack the global object\n// \"globalThis\" that's going to be patched\n(function(globalThis) {\n\nvar irrelevant = (function (exports) {\n\n  var global =\n    (typeof globalThis !== 'undefined' && globalThis) ||\n    (typeof self !== 'undefined' && self) ||\n    (typeof global !== 'undefined' && global);\n\n  var support = {\n    searchParams: 'URLSearchParams' in global,\n    iterable: 'Symbol' in global && 'iterator' in Symbol,\n    blob:\n      'FileReader' in global &&\n      'Blob' in global &&\n      (function() {\n        try {\n          new Blob();\n          return true\n        } catch (e) {\n          return false\n        }\n      })(),\n    formData: 'FormData' in global,\n    arrayBuffer: 'ArrayBuffer' in global\n  };\n\n  function isDataView(obj) {\n    return obj && DataView.prototype.isPrototypeOf(obj)\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ];\n\n    var isArrayBufferView =\n      ArrayBuffer.isView ||\n      function(obj) {\n        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n      };\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name);\n    }\n    if (/[^a-z0-9\\-#$%&'*+.^_`|~!]/i.test(name) || name === '') {\n      throw new TypeError('Invalid character in header field name: \"' + name + '\"')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value);\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift();\n        return {done: value === undefined, value: value}\n      }\n    };\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      };\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {};\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value);\n      }, this);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1]);\n      }, this);\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name]);\n      }, this);\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name);\n    value = normalizeValue(value);\n    var oldValue = this.map[name];\n    this.map[name] = oldValue ? oldValue + ', ' + value : value;\n  };\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)];\n  };\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name);\n    return this.has(name) ? this.map[name] : null\n  };\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  };\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value);\n  };\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this);\n      }\n    }\n  };\n\n  Headers.prototype.keys = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push(name);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.values = function() {\n    var items = [];\n    this.forEach(function(value) {\n      items.push(value);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.entries = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push([name, value]);\n    });\n    return iteratorFor(items)\n  };\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true;\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result);\n      };\n      reader.onerror = function() {\n        reject(reader.error);\n      };\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsArrayBuffer(blob);\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsText(blob);\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf);\n    var chars = new Array(view.length);\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i]);\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength);\n      view.set(new Uint8Array(buf));\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false;\n\n    this._initBody = function(body) {\n      /*\n        fetch-mock wraps the Response object in an ES6 Proxy to\n        provide useful test harness features such as flush. However, on\n        ES5 browsers without fetch or Proxy support pollyfills must be used;\n        the proxy-pollyfill is unable to proxy an attribute unless it exists\n        on the object before the Proxy is created. This change ensures\n        Response.bodyUsed exists on the instance, while maintaining the\n        semantic of setting Request.bodyUsed in the constructor before\n        _initBody is called.\n      */\n      this.bodyUsed = this.bodyUsed;\n      this._bodyInit = body;\n      if (!body) {\n        this._bodyText = '';\n      } else if (typeof body === 'string') {\n        this._bodyText = body;\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body;\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body;\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString();\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer);\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer]);\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body);\n      } else {\n        this._bodyText = body = Object.prototype.toString.call(body);\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8');\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type);\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        }\n      }\n    };\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this);\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      };\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          var isConsumed = consumed(this);\n          if (isConsumed) {\n            return isConsumed\n          }\n          if (ArrayBuffer.isView(this._bodyArrayBuffer)) {\n            return Promise.resolve(\n              this._bodyArrayBuffer.buffer.slice(\n                this._bodyArrayBuffer.byteOffset,\n                this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength\n              )\n            )\n          } else {\n            return Promise.resolve(this._bodyArrayBuffer)\n          }\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      };\n    }\n\n    this.text = function() {\n      var rejected = consumed(this);\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    };\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      };\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    };\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase();\n    return methods.indexOf(upcased) > -1 ? upcased : method\n  }\n\n  function Request(input, options) {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Please use the \"new\" operator, this DOM object constructor cannot be called as a function.')\n    }\n\n    options = options || {};\n    var body = options.body;\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url;\n      this.credentials = input.credentials;\n      if (!options.headers) {\n        this.headers = new Headers(input.headers);\n      }\n      this.method = input.method;\n      this.mode = input.mode;\n      this.signal = input.signal;\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit;\n        input.bodyUsed = true;\n      }\n    } else {\n      this.url = String(input);\n    }\n\n    this.credentials = options.credentials || this.credentials || 'same-origin';\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers);\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET');\n    this.mode = options.mode || this.mode || null;\n    this.signal = options.signal || this.signal;\n    this.referrer = null;\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body);\n\n    if (this.method === 'GET' || this.method === 'HEAD') {\n      if (options.cache === 'no-store' || options.cache === 'no-cache') {\n        // Search for a '_' parameter in the query string\n        var reParamSearch = /([?&])_=[^&]*/;\n        if (reParamSearch.test(this.url)) {\n          // If it already exists then set the value with the current time\n          this.url = this.url.replace(reParamSearch, '$1_=' + new Date().getTime());\n        } else {\n          // Otherwise add a new '_' parameter to the end with the current time\n          var reQueryString = /\\?/;\n          this.url += (reQueryString.test(this.url) ? '&' : '?') + '_=' + new Date().getTime();\n        }\n      }\n    }\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, {body: this._bodyInit})\n  };\n\n  function decode(body) {\n    var form = new FormData();\n    body\n      .trim()\n      .split('&')\n      .forEach(function(bytes) {\n        if (bytes) {\n          var split = bytes.split('=');\n          var name = split.shift().replace(/\\+/g, ' ');\n          var value = split.join('=').replace(/\\+/g, ' ');\n          form.append(decodeURIComponent(name), decodeURIComponent(value));\n        }\n      });\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers();\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n    // Avoiding split via regex to work around a common IE11 bug with the core-js 3.6.0 regex polyfill\n    // https://github.com/github/fetch/issues/748\n    // https://github.com/zloirock/core-js/issues/751\n    preProcessedHeaders\n      .split('\\r')\n      .map(function(header) {\n        return header.indexOf('\\n') === 0 ? header.substr(1, header.length) : header\n      })\n      .forEach(function(line) {\n        var parts = line.split(':');\n        var key = parts.shift().trim();\n        if (key) {\n          var value = parts.join(':').trim();\n          headers.append(key, value);\n        }\n      });\n    return headers\n  }\n\n  Body.call(Request.prototype);\n\n  function Response(bodyInit, options) {\n    if (!(this instanceof Response)) {\n      throw new TypeError('Please use the \"new\" operator, this DOM object constructor cannot be called as a function.')\n    }\n    if (!options) {\n      options = {};\n    }\n\n    this.type = 'default';\n    this.status = options.status === undefined ? 200 : options.status;\n    this.ok = this.status >= 200 && this.status < 300;\n    this.statusText = options.statusText === undefined ? '' : '' + options.statusText;\n    this.headers = new Headers(options.headers);\n    this.url = options.url || '';\n    this._initBody(bodyInit);\n  }\n\n  Body.call(Response.prototype);\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  };\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''});\n    response.type = 'error';\n    return response\n  };\n\n  var redirectStatuses = [301, 302, 303, 307, 308];\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  };\n\n  exports.DOMException = global.DOMException;\n  try {\n    new exports.DOMException();\n  } catch (err) {\n    exports.DOMException = function(message, name) {\n      this.message = message;\n      this.name = name;\n      var error = Error(message);\n      this.stack = error.stack;\n    };\n    exports.DOMException.prototype = Object.create(Error.prototype);\n    exports.DOMException.prototype.constructor = exports.DOMException;\n  }\n\n  function fetch(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init);\n\n      if (request.signal && request.signal.aborted) {\n        return reject(new exports.DOMException('Aborted', 'AbortError'))\n      }\n\n      var xhr = new XMLHttpRequest();\n\n      function abortXhr() {\n        xhr.abort();\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        };\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n        setTimeout(function() {\n          resolve(new Response(body, options));\n        }, 0);\n      };\n\n      xhr.onerror = function() {\n        setTimeout(function() {\n          reject(new TypeError('Network request failed'));\n        }, 0);\n      };\n\n      xhr.ontimeout = function() {\n        setTimeout(function() {\n          reject(new TypeError('Network request failed'));\n        }, 0);\n      };\n\n      xhr.onabort = function() {\n        setTimeout(function() {\n          reject(new exports.DOMException('Aborted', 'AbortError'));\n        }, 0);\n      };\n\n      function fixUrl(url) {\n        try {\n          return url === '' && global.location.href ? global.location.href : url\n        } catch (e) {\n          return url\n        }\n      }\n\n      xhr.open(request.method, fixUrl(request.url), true);\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true;\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false;\n      }\n\n      if ('responseType' in xhr) {\n        if (support.blob) {\n          xhr.responseType = 'blob';\n        } else if (\n          support.arrayBuffer &&\n          request.headers.get('Content-Type') &&\n          request.headers.get('Content-Type').indexOf('application/octet-stream') !== -1\n        ) {\n          xhr.responseType = 'arraybuffer';\n        }\n      }\n\n      if (init && typeof init.headers === 'object' && !(init.headers instanceof Headers)) {\n        Object.getOwnPropertyNames(init.headers).forEach(function(name) {\n          xhr.setRequestHeader(name, normalizeValue(init.headers[name]));\n        });\n      } else {\n        request.headers.forEach(function(value, name) {\n          xhr.setRequestHeader(name, value);\n        });\n      }\n\n      if (request.signal) {\n        request.signal.addEventListener('abort', abortXhr);\n\n        xhr.onreadystatechange = function() {\n          // DONE (success or failure)\n          if (xhr.readyState === 4) {\n            request.signal.removeEventListener('abort', abortXhr);\n          }\n        };\n      }\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n    })\n  }\n\n  fetch.polyfill = true;\n\n  if (!global.fetch) {\n    global.fetch = fetch;\n    global.Headers = Headers;\n    global.Request = Request;\n    global.Response = Response;\n  }\n\n  exports.Headers = Headers;\n  exports.Request = Request;\n  exports.Response = Response;\n  exports.fetch = fetch;\n\n  return exports;\n\n})({});\n})(__globalThis__);\n// This is a ponyfill, so...\n__globalThis__.fetch.ponyfill = true;\ndelete __globalThis__.fetch.polyfill;\n// Choose between native implementation (__global__) or custom implementation (__globalThis__)\nvar ctx = __global__.fetch ? __global__ : __globalThis__;\nexports = ctx.fetch // To enable: import fetch from 'cross-fetch'\nexports.default = ctx.fetch // For TypeScript consumers without esModuleInterop.\nexports.fetch = ctx.fetch // To enable: import {fetch} from 'cross-fetch'\nexports.Headers = ctx.Headers\nexports.Request = ctx.Request\nexports.Response = ctx.Response\nmodule.exports = exports\n", "/**\n * LCS implementation that supports arrays or strings\n *\n * reference: http://en.wikipedia.org/wiki/Longest_common_subsequence_problem\n */\nexport function defaultMatch(array1, array2, index1, index2) {\n    return array1[index1] === array2[index2];\n}\nexport function lengthMatrix(array1, array2, match, context) {\n    const len1 = array1.length;\n    const len2 = array2.length;\n    // initialize empty matrix of len1+1 x len2+1\n    let matrix = Object.assign([len1 + 1], {\n        match,\n    });\n    for (let x = 0; x < len1 + 1; x++) {\n        matrix[x] = [len2 + 1];\n        for (let y = 0; y < len2 + 1; y++) {\n            matrix[x][y] = 0;\n        }\n    }\n    // save sequence lengths for each coordinate\n    for (let x = 1; x < len1 + 1; x++) {\n        for (let y = 1; y < len2 + 1; y++) {\n            if (match(array1, array2, x - 1, y - 1, context)) {\n                matrix[x][y] = matrix[x - 1][y - 1] + 1;\n            }\n            else {\n                matrix[x][y] = Math.max(matrix[x - 1][y], matrix[x][y - 1]);\n            }\n        }\n    }\n    return matrix;\n}\nexport function backtrack(matrix, array1, array2, context) {\n    let index1 = array1.length;\n    let index2 = array2.length;\n    const subsequence = {\n        sequence: [],\n        indices1: [],\n        indices2: [],\n    };\n    while (index1 !== 0 && index2 !== 0) {\n        const sameLetter = matrix.match(array1, array2, index1 - 1, index2 - 1, context);\n        if (sameLetter) {\n            subsequence.sequence.unshift(array1[index1 - 1]);\n            subsequence.indices1.unshift(index1 - 1);\n            subsequence.indices2.unshift(index2 - 1);\n            --index1;\n            --index2;\n        }\n        else {\n            const valueAtMatrixAbove = matrix[index1][index2 - 1];\n            const valueAtMatrixLeft = matrix[index1 - 1][index2];\n            if (valueAtMatrixAbove > valueAtMatrixLeft) {\n                --index2;\n            }\n            else {\n                --index1;\n            }\n        }\n    }\n    return subsequence;\n}\nexport function get(array1, array2, match, context) {\n    const innerContext = context || {};\n    const matrix = lengthMatrix(array1, array2, match || defaultMatch, innerContext);\n    return backtrack(matrix, array1, array2, innerContext);\n}\n", "import * as lcs from \"./lcs.js\";\nexport function diff(input, options) {\n    var _a;\n    const includePreviousValue = (_a = options === null || options === void 0 ? void 0 : options.includePreviousValue) !== null && _a !== void 0 ? _a : false;\n    const objectHash = options === null || options === void 0 ? void 0 : options.objectHash;\n    const matchByPosition = options === null || options === void 0 ? void 0 : options.matchByPosition;\n    const context = {\n        result: undefined,\n        left: input.left,\n        right: input.right,\n        includePreviousValue,\n        objectHash,\n        matchByPosition,\n        stopped: false,\n    };\n    function process(context) {\n        var _a, _b;\n        const steps = [\n            nested_collectChildrenDiffFilter,\n            trivialDiffFilter,\n            nested_objectsDiffFilter,\n            array_diffFilter,\n        ];\n        for (const step of steps) {\n            step(context);\n            if (context.stopped) {\n                context.stopped = false;\n                break;\n            }\n        }\n        if ((_a = context.children) === null || _a === void 0 ? void 0 : _a.length) {\n            for (const childrenContext of context.children) {\n                process(childrenContext);\n                if (childrenContext.result !== undefined) {\n                    context.result = (_b = context.result) !== null && _b !== void 0 ? _b : {};\n                    context.result[childrenContext.name] =\n                        childrenContext.result;\n                }\n            }\n            if (context.result && context.leftIsArray) {\n                context.result._t = \"a\";\n            }\n        }\n    }\n    process(context);\n    return context.result;\n}\n// diff primitive values and non arrays\nfunction trivialDiffFilter(context) {\n    if (context.left === context.right) {\n        context.result = undefined;\n        context.stopped = true;\n        return;\n    }\n    // Item was added\n    if (typeof context.left === \"undefined\") {\n        context.result = [context.right];\n        context.stopped = true;\n        return;\n    }\n    // Item was removed\n    if (typeof context.right === \"undefined\") {\n        const previousValue = context.includePreviousValue ? context.left : null;\n        context.result = [previousValue, 0, 0];\n        context.stopped = true;\n        return;\n    }\n    context.leftType = context.left === null ? \"null\" : typeof context.left;\n    context.rightType = context.right === null ? \"null\" : typeof context.right;\n    if (context.leftType !== context.rightType) {\n        const previousValue = context.includePreviousValue ? context.left : null;\n        context.result = [previousValue, context.right];\n        context.stopped = true;\n        return;\n    }\n    if (context.leftType === \"boolean\" ||\n        context.leftType === \"number\" ||\n        context.leftType === \"string\") {\n        const previousValue = context.includePreviousValue ? context.left : null;\n        context.result = [previousValue, context.right];\n        context.stopped = true;\n        return;\n    }\n    if (context.leftType === \"object\") {\n        context.leftIsArray = Array.isArray(context.left);\n    }\n    if (context.rightType === \"object\") {\n        context.rightIsArray = Array.isArray(context.right);\n    }\n    if (context.leftIsArray !== context.rightIsArray) {\n        const previousValue = context.includePreviousValue ? context.left : null;\n        context.result = [previousValue, context.right];\n        context.stopped = true;\n        return;\n    }\n}\nfunction nested_collectChildrenDiffFilter(context) {\n    if (!context || !context.children) {\n        return;\n    }\n    const length = context.children.length;\n    let child;\n    let result = context.result;\n    for (let index = 0; index < length; index++) {\n        child = context.children[index];\n        if (typeof child.result === \"undefined\") {\n            continue;\n        }\n        result = result !== null && result !== void 0 ? result : {};\n        result[child.name] = child.result;\n    }\n    if (result && context.leftIsArray) {\n        result[\"_t\"] = \"a\";\n    }\n    context.result = result;\n    context.stopped = true;\n}\nfunction nested_objectsDiffFilter(context) {\n    if (context.leftIsArray || context.leftType !== \"object\") {\n        return;\n    }\n    const left = context.left;\n    const right = context.right;\n    for (const name in left) {\n        if (!Object.prototype.hasOwnProperty.call(left, name)) {\n            continue;\n        }\n        if (context.children === undefined) {\n            context.children = [];\n        }\n        context.children.push({\n            left: left[name],\n            right: right[name],\n            result: undefined,\n            name,\n            includePreviousValue: context.includePreviousValue,\n            objectHash: context.objectHash,\n            matchByPosition: context.matchByPosition,\n            stopped: false,\n        });\n    }\n    for (const name in right) {\n        if (!Object.prototype.hasOwnProperty.call(right, name)) {\n            continue;\n        }\n        if (typeof left[name] === \"undefined\") {\n            if (context.children === undefined) {\n                context.children = [];\n            }\n            context.children.push({\n                left: undefined,\n                right: right[name],\n                result: undefined,\n                name,\n                includePreviousValue: context.includePreviousValue,\n                objectHash: context.objectHash,\n                matchByPosition: context.matchByPosition,\n                stopped: false,\n            });\n        }\n    }\n    if (!context.children || context.children.length === 0) {\n        context.result = undefined;\n        context.stopped = true;\n        return;\n    }\n    context.stopped = true;\n}\nconst ARRAY_MOVE = 3;\nfunction array_diffFilter(context) {\n    if (!context.leftIsArray) {\n        return;\n    }\n    let matchContext = {\n        objectHash: context.objectHash,\n        matchByPosition: context.matchByPosition,\n    };\n    let commonHead = 0;\n    let commonTail = 0;\n    let index;\n    let index1;\n    let index2;\n    const array1 = context.left;\n    const array2 = context.right;\n    const len1 = array1.length;\n    const len2 = array2.length;\n    if (len1 > 0 &&\n        len2 > 0 &&\n        !matchContext.objectHash &&\n        typeof matchContext.matchByPosition !== \"boolean\") {\n        matchContext.matchByPosition = !arraysHaveMatchByRef(array1, array2, len1, len2);\n    }\n    // separate common head\n    while (commonHead < len1 &&\n        commonHead < len2 &&\n        matchItems(array1, array2, commonHead, commonHead, matchContext)) {\n        index = commonHead;\n        const left = context.left;\n        const right = context.right;\n        if (context.children === undefined) {\n            context.children = [];\n        }\n        context.children.push({\n            left: left[index],\n            right: right[index],\n            result: undefined,\n            name: index,\n            includePreviousValue: context.includePreviousValue,\n            objectHash: context.objectHash,\n            matchByPosition: context.matchByPosition,\n            stopped: false,\n        });\n        commonHead++;\n    }\n    // separate common tail\n    while (commonTail + commonHead < len1 &&\n        commonTail + commonHead < len2 &&\n        matchItems(array1, array2, len1 - 1 - commonTail, len2 - 1 - commonTail, matchContext)) {\n        index1 = len1 - 1 - commonTail;\n        index2 = len2 - 1 - commonTail;\n        const left = context.left;\n        const right = context.right;\n        if (context.children === undefined) {\n            context.children = [];\n        }\n        context.children.push({\n            left: left[index1],\n            right: right[index2],\n            result: undefined,\n            name: index2,\n            includePreviousValue: context.includePreviousValue,\n            objectHash: context.objectHash,\n            matchByPosition: context.matchByPosition,\n            stopped: false,\n        });\n        commonTail++;\n    }\n    if (commonHead + commonTail === len1) {\n        if (len1 === len2) {\n            // arrays are identical\n            context.result = undefined;\n            context.stopped = true;\n            return;\n        }\n        // trivial case, a block (1 or more consecutive items) was added\n        const result = {\n            _t: \"a\",\n        };\n        for (index = commonHead; index < len2 - commonTail; index++) {\n            result[index] = [array2[index]];\n        }\n        context.result = result;\n        context.stopped = true;\n        return;\n    }\n    if (commonHead + commonTail === len2) {\n        // trivial case, a block (1 or more consecutive items) was removed\n        const result = {\n            _t: \"a\",\n        };\n        for (index = commonHead; index < len1 - commonTail; index++) {\n            result[`_${index}`] = [\n                context.includePreviousValue ? array1[index] : null,\n                0,\n                0,\n            ];\n        }\n        context.result = result;\n        context.stopped = true;\n        return;\n    }\n    // reset hash cache\n    delete matchContext.hashCache1;\n    delete matchContext.hashCache2;\n    // diff is not trivial, find the LCS (Longest Common Subsequence)\n    let trimmed1 = array1.slice(commonHead, len1 - commonTail);\n    let trimmed2 = array2.slice(commonHead, len2 - commonTail);\n    let seq = lcs.get(trimmed1, trimmed2, matchItems, matchContext);\n    let removedItems = [];\n    const result = {\n        _t: \"a\",\n    };\n    for (index = commonHead; index < len1 - commonTail; index++) {\n        if (seq.indices1.indexOf(index - commonHead) < 0) {\n            // removed\n            result[`_${index}`] = [\n                context.includePreviousValue ? array1[index] : null,\n                0,\n                0,\n            ];\n            removedItems.push(index);\n        }\n    }\n    const detectMove = true;\n    let includeValueOnMove = true;\n    let removedItemsLength = removedItems.length;\n    for (index = commonHead; index < len2 - commonTail; index++) {\n        let indexOnArray2 = seq.indices2.indexOf(index - commonHead);\n        if (indexOnArray2 < 0) {\n            // added, try to match with a removed item and register as position move\n            let isMove = false;\n            if (detectMove && removedItemsLength > 0) {\n                for (let removeItemIndex1 = 0; removeItemIndex1 < removedItemsLength; removeItemIndex1++) {\n                    index1 = removedItems[removeItemIndex1];\n                    if (matchItems(trimmed1, trimmed2, index1 - commonHead, index - commonHead, matchContext)) {\n                        // store position move as: [originalValue, newPosition, ARRAY_MOVE]\n                        result[`_${index1}`].splice(1, 2, index, ARRAY_MOVE);\n                        if (!includeValueOnMove) {\n                            // don't include moved value on diff, to save bytes\n                            result[`_${index1}`][0] = \"\";\n                        }\n                        index2 = index;\n                        if (context.children === undefined) {\n                            context.children = [];\n                        }\n                        const left = context.left;\n                        const right = context.right;\n                        context.children.push({\n                            left: left[index1],\n                            right: right[index2],\n                            result: undefined,\n                            name: index2,\n                            includePreviousValue: context.includePreviousValue,\n                            objectHash: context.objectHash,\n                            matchByPosition: context.matchByPosition,\n                            stopped: false,\n                        });\n                        removedItems.splice(removeItemIndex1, 1);\n                        isMove = true;\n                        break;\n                    }\n                }\n            }\n            if (!isMove) {\n                // added\n                result[index] = [array2[index]];\n            }\n        }\n        else {\n            // match, do inner diff\n            index1 = seq.indices1[indexOnArray2] + commonHead;\n            index2 = seq.indices2[indexOnArray2] + commonHead;\n            if (context.children === undefined) {\n                context.children = [];\n            }\n            const left = context.left;\n            const right = context.right;\n            context.children.push({\n                left: left[index1],\n                right: right[index2],\n                result: undefined,\n                name: index2,\n                includePreviousValue: context.includePreviousValue,\n                objectHash: context.objectHash,\n                matchByPosition: context.matchByPosition,\n                stopped: false,\n            });\n        }\n    }\n    context.result = result;\n    context.stopped = true;\n}\nfunction arraysHaveMatchByRef(array1, array2, len1, len2) {\n    for (let index1 = 0; index1 < len1; index1++) {\n        let val1 = array1[index1];\n        for (let index2 = 0; index2 < len2; index2++) {\n            let val2 = array2[index2];\n            if (index1 !== index2 && val1 === val2) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nfunction matchItems(array1, array2, index1, index2, context) {\n    let value1 = array1[index1];\n    let value2 = array2[index2];\n    if (value1 === value2) {\n        return true;\n    }\n    if (typeof value1 !== \"object\" || typeof value2 !== \"object\") {\n        return false;\n    }\n    let objectHash = context.objectHash;\n    if (!objectHash) {\n        // no way to match objects was provided, try match by position\n        return context.matchByPosition && index1 === index2;\n    }\n    let hash1;\n    let hash2;\n    if (typeof index1 === \"number\") {\n        context.hashCache1 = context.hashCache1 || [];\n        hash1 = context.hashCache1[index1];\n        if (typeof hash1 === \"undefined\") {\n            context.hashCache1[index1] = hash1 = objectHash(value1, index1);\n        }\n    }\n    else {\n        hash1 = objectHash(value1);\n    }\n    if (typeof hash1 === \"undefined\") {\n        return false;\n    }\n    if (typeof index2 === \"number\") {\n        context.hashCache2 = context.hashCache2 || [];\n        hash2 = context.hashCache2[index2];\n        if (typeof hash2 === \"undefined\") {\n            context.hashCache2[index2] = hash2 = objectHash(value2, index2);\n        }\n    }\n    else {\n        hash2 = objectHash(value2);\n    }\n    if (typeof hash2 === \"undefined\") {\n        return false;\n    }\n    return hash1 === hash2;\n}\n", "export function patch(params) {\n    const context = {\n        left: params.left,\n        delta: params.delta,\n        children: undefined,\n        name: undefined,\n        nested: false,\n        stopped: false,\n    };\n    function process(context) {\n        var _a;\n        const steps = [\n            nested_collectChildrenPatchFilter,\n            array_collectChildrenPatchFilter,\n            trivial_patchFilter,\n            nested_patchFilter,\n            array_patchFilter,\n        ];\n        for (const step of steps) {\n            step(context);\n            if (context.stopped) {\n                context.stopped = false;\n                break;\n            }\n        }\n        if (context.children) {\n            for (const childrenContext of context.children) {\n                process(childrenContext);\n                context.result = (_a = context.result) !== null && _a !== void 0 ? _a : context.left;\n                if (\"result\" in childrenContext === false) {\n                    delete context.result[childrenContext.name];\n                }\n                else {\n                    context.result[childrenContext.name] =\n                        childrenContext.result;\n                }\n            }\n        }\n    }\n    process(context);\n    return context.result;\n}\nfunction nested_collectChildrenPatchFilter(context) {\n    if (!context || !context.children) {\n        return;\n    }\n    if (context.delta._t) {\n        return;\n    }\n    for (let child of context.children) {\n        if (Object.prototype.hasOwnProperty.call(context.left, child.name) &&\n            child.result === undefined) {\n            delete context.left[child.name];\n        }\n        else if (context.left[child.name] !== child.result) {\n            context.left[child.name] = child.result;\n        }\n    }\n    context.result = context.left;\n    context.stopped = true;\n}\nfunction array_collectChildrenPatchFilter(context) {\n    if (!context || !context.children) {\n        return;\n    }\n    if (context.delta._t !== \"a\") {\n        return;\n    }\n    let length = context.children.length;\n    let child;\n    for (let index = 0; index < length; index++) {\n        child = context.children[index];\n        context.left[child.name] = child.result;\n    }\n    context.result = context.left;\n    context.stopped = true;\n}\nfunction trivial_patchFilter(context) {\n    if (typeof context.delta === \"undefined\") {\n        context.result = context.left;\n        return;\n    }\n    context.nested = !Array.isArray(context.delta);\n    if (context.nested) {\n        return;\n    }\n    if (context.delta.length === 1) {\n        context.result = context.delta[0];\n        context.stopped = true;\n        return;\n    }\n    if (context.delta.length === 2) {\n        context.result = context.delta[1];\n        context.stopped = true;\n        return;\n    }\n    if (context.delta.length === 3 && context.delta[2] === 0) {\n        context.stopped = true;\n    }\n}\nfunction nested_patchFilter(context) {\n    if (!context.nested) {\n        return;\n    }\n    if (context.delta._t) {\n        return;\n    }\n    for (let name in context.delta) {\n        if (context.children === undefined) {\n            context.children = [];\n        }\n        context.children.push({\n            left: context.left[name],\n            delta: context.delta[name],\n            name,\n            stopped: false,\n        });\n    }\n    context.stopped = true;\n}\nconst ARRAY_MOVE = 3;\nlet compare = {\n    numerically(a, b) {\n        return a - b;\n    },\n    numericallyBy(name) {\n        return (a, b) => a[name] - b[name];\n    },\n};\nfunction array_patchFilter(context) {\n    if (!context.nested) {\n        return;\n    }\n    if (context.delta._t !== \"a\") {\n        return;\n    }\n    let index;\n    let index1;\n    let delta = context.delta;\n    let array = context.left;\n    // first, separate removals, insertions and modifications\n    let toRemove = [];\n    let toInsert = [];\n    let toModify = [];\n    for (index in delta) {\n        if (index !== \"_t\") {\n            if (index[0] === \"_\") {\n                // removed item from original array\n                if (delta[index][2] === 0 || delta[index][2] === ARRAY_MOVE) {\n                    toRemove.push(parseInt(index.slice(1), 10));\n                }\n                else {\n                    throw new Error(`only removal or move can be applied at original array indices,` +\n                        ` invalid diff type: ${delta[index][2]}`);\n                }\n            }\n            else {\n                if (delta[index].length === 1) {\n                    // added item at new array\n                    toInsert.push({\n                        index: parseInt(index, 10),\n                        value: delta[index][0],\n                    });\n                }\n                else {\n                    // modified item at new array\n                    toModify.push({\n                        index: parseInt(index, 10),\n                        delta: delta[index],\n                    });\n                }\n            }\n        }\n    }\n    // remove items, in reverse order to avoid sawing our own floor\n    toRemove = toRemove.sort(compare.numerically);\n    for (index = toRemove.length - 1; index >= 0; index--) {\n        index1 = toRemove[index];\n        let indexDiff = delta[`_${index1}`];\n        let removedValue = array.splice(index1, 1)[0];\n        if (indexDiff[2] === ARRAY_MOVE) {\n            // reinsert later\n            toInsert.push({\n                index: indexDiff[1],\n                value: removedValue,\n            });\n        }\n    }\n    // insert items, in reverse order to avoid moving our own floor\n    toInsert = toInsert.sort(compare.numericallyBy(\"index\"));\n    let toInsertLength = toInsert.length;\n    for (index = 0; index < toInsertLength; index++) {\n        let insertion = toInsert[index];\n        array.splice(insertion.index, 0, insertion.value);\n    }\n    // apply modifications\n    let toModifyLength = toModify.length;\n    if (toModifyLength > 0) {\n        for (index = 0; index < toModifyLength; index++) {\n            let modification = toModify[index];\n            if (context.children === undefined) {\n                context.children = [];\n            }\n            context.children.push({\n                left: context.left[modification.index],\n                delta: modification.delta,\n                name: modification.index,\n                stopped: false,\n            });\n        }\n    }\n    if (!context.children) {\n        context.result = context.left;\n        context.stopped = true;\n        return;\n    }\n}\n", "export * from \"./diff.js\";\nexport * from \"./patch.js\";\n", "/**\n * Code adopted from https://github.com/repeaterjs/repeater/blob/master/packages/repeater/src/repeater.ts after removing static classes.\n */\n\n/** An error subclass which is thrown when there are too many pending push or next operations on a single repeater. */\nexport class RepeaterOverflowError extends Error {\n  constructor(message: string) {\n    super(message);\n    Object.defineProperty(this, \"name\", {\n      value: \"RepeaterOverflowError\",\n      enumerable: false,\n    });\n    if (typeof Object.setPrototypeOf === \"function\") {\n      Object.setPrototypeOf(this, this.constructor.prototype);\n    } else {\n      (this as any).__proto__ = this.constructor.prototype;\n    }\n    if (typeof (Error as any).captureStackTrace === \"function\") {\n      (Error as any).captureStackTrace(this, this.constructor);\n    }\n  }\n}\n/*** BUFFERS ***/\n/** A special queue interface which allow multiple values to be pushed onto a repeater without having pushes wait or throw overflow errors, passed as the second argument to the repeater constructor. */\nexport interface RepeaterBuffer<TValue = unknown> {\n  empty: boolean;\n  full: boolean;\n  add(value: TValue): unknown;\n  remove(): TValue;\n}\n\n/** A buffer which allows you to push a set amount of values to the repeater without pushes waiting or throwing errors. */\nexport class FixedBuffer implements RepeaterBuffer {\n  // capacity\n  _c: number;\n  // queue\n  _q: Array<unknown>;\n\n  constructor(capacity: number) {\n    if (capacity < 0) {\n      throw new RangeError(\"Capacity may not be less than 0\");\n    }\n\n    this._c = capacity;\n    this._q = [];\n  }\n\n  get empty(): boolean {\n    return this._q.length === 0;\n  }\n\n  get full(): boolean {\n    return this._q.length >= this._c;\n  }\n\n  add(value: unknown): void {\n    if (this.full) {\n      throw new Error(\"Buffer full\");\n    } else {\n      this._q.push(value);\n    }\n  }\n\n  remove(): unknown {\n    if (this.empty) {\n      throw new Error(\"Buffer empty\");\n    }\n\n    return this._q.shift()!;\n  }\n}\n\n// TODO: Use a circular buffer here.\n/** Sliding buffers allow you to push a set amount of values to the repeater without pushes waiting or throwing errors. If the number of values exceeds the capacity set in the constructor, the buffer will discard the earliest values added. */\nexport class SlidingBuffer implements RepeaterBuffer {\n  // capacity\n  _c: number;\n  // queue\n  _q: Array<unknown>;\n\n  constructor(capacity: number) {\n    if (capacity < 1) {\n      throw new RangeError(\"Capacity may not be less than 1\");\n    }\n\n    this._c = capacity;\n    this._q = [];\n  }\n\n  get empty(): boolean {\n    return this._q.length === 0;\n  }\n\n  get full(): boolean {\n    return false;\n  }\n\n  add(value: unknown): void {\n    while (this._q.length >= this._c) {\n      this._q.shift();\n    }\n\n    this._q.push(value);\n  }\n\n  remove(): unknown {\n    if (this.empty) {\n      throw new Error(\"Buffer empty\");\n    }\n\n    return this._q.shift();\n  }\n}\n/** Dropping buffers allow you to push a set amount of values to the repeater without the push function waiting or throwing errors. If the number of values exceeds the capacity set in the constructor, the buffer will discard the latest values added. */\nexport class DroppingBuffer implements RepeaterBuffer {\n  // capacity\n  _c: number;\n  // queue\n  _q: Array<unknown>;\n\n  constructor(capacity: number) {\n    if (capacity < 1) {\n      throw new RangeError(\"Capacity may not be less than 1\");\n    }\n\n    this._c = capacity;\n    this._q = [];\n  }\n\n  get empty(): boolean {\n    return this._q.length === 0;\n  }\n\n  get full() {\n    return false;\n  }\n\n  add(value: unknown): void {\n    if (this._q.length < this._c) {\n      this._q.push(value);\n    }\n  }\n\n  remove(): unknown {\n    if (this.empty) {\n      throw new Error(\"Buffer empty\");\n    }\n\n    return this._q.shift();\n  }\n}\n\n/** Makes sure promise-likes don’t cause unhandled rejections. */\nfunction swallow(value: any): void {\n  if (value != null && typeof value.then === \"function\") {\n    value.then(NOOP, NOOP);\n  }\n}\n\n/*** TYPES ***/\n/** The type of the first argument passed to the executor callback. */\ntype Push<T, TNext = unknown> = (value: PromiseLike<T> | T) => Promise<TNext | undefined>;\n\n/** The type of the second argument passed to the executor callback. A callable promise. */\ntype Stop = ((err?: unknown) => undefined) & Promise<undefined>;\n\n/** The type of the callback passed to the Repeater constructor. */\ntype RepeaterExecutor<T, TReturn = any, TNext = unknown> = (push: Push<T, TNext>, stop: Stop) => PromiseLike<TReturn> | TReturn;\n\n/** The type of the object passed to the push queue. */\ninterface PushOperation<T, TNext> {\n  // The value passed to the push function.\n  value: Promise<T | undefined>;\n  // The resolve function of the promise return from push.\n  resolve(next?: PromiseLike<TNext> | TNext): unknown;\n}\n\n/** The type of the object passed to the next queue. */\ninterface NextOperation<T, TReturn, TNext> {\n  // The value passed to the next method.\n  value: PromiseLike<TNext> | TNext | undefined;\n  // The resolve function of the promise returned from next.\n  resolve(iteration: Promise<IteratorResult<T, TReturn>>): unknown;\n}\n\n/*** REPEATER STATES ***/\n/** The following is an enumeration of all possible repeater states. These states are ordered, and a repeater may only advance to higher states. */\n\n/** The initial state of the repeater. */\nconst Initial = 0;\n\n/** Repeaters advance to this state the first time the next method is called on the repeater. */\nconst Started = 1;\n\n/** Repeaters advance to this state when the stop function is called. */\nconst Stopped = 2;\n\n/** Repeaters advance to this state when there are no values left to be pulled from the repeater. */\nconst Done = 3;\n\n/** Repeaters advance to this state if an error is thrown into the repeater. */\nconst Rejected = 4;\n\n/** The maximum number of push or next operations which may exist on a single repeater. */\nexport const MAX_QUEUE_LENGTH = 1024;\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst NOOP = () => {};\n\n/** An interface containing the private data of repeaters, only accessible through a private WeakMap. */\ninterface RepeaterRecord<T, TReturn, TNext> {\n  // A number enum. States are ordered and the repeater will move through these states over the course of its lifetime. See REPEATER STATES.\n  state: number;\n\n  // The function passed to the repeater constructor.\n  executor: RepeaterExecutor<T, TReturn, TNext>;\n\n  // The buffer passed to the repeater constructor.\n  buffer: RepeaterBuffer | undefined;\n\n  // A queue of values which were pushed.\n  pushes: Array<PushOperation<T, TNext>>;\n\n  // A queue of requests for values.\n  nexts: Array<NextOperation<T, TReturn, TNext>>;\n  // NOTE: both the push queue and the next queue will never contain values at the same time.\n\n  // A promise which is continuously reassigned and chained so that all repeater iterations settle in order.\n  pending: Promise<unknown> | undefined;\n\n  // The return value of the executor.\n  execution: Promise<TReturn | undefined> | undefined;\n\n  // An error passed to the stop function.\n  err: unknown;\n\n  // A callback set to the resolve function of the promise returned from push.\n  onnext: (value?: PromiseLike<TNext> | TNext) => unknown;\n\n  // A callback set to the resolve function of the stop promise.\n  onstop: () => unknown;\n}\n\n/** A helper function used to mimic the behavior of async generators where the final iteration is consumed. */\nfunction consumeExecution<T, TReturn, TNext>(r: RepeaterRecord<T, TReturn, TNext>): Promise<TReturn | undefined> {\n  const err = r.err;\n  const execution = Promise.resolve(r.execution).then((value) => {\n    if (err != null) {\n      throw err;\n    }\n\n    return value;\n  });\n\n  r.err = undefined;\n  r.execution = execution.then(\n    () => undefined,\n    () => undefined\n  );\n\n  return r.pending === undefined ? execution : r.pending.then(() => execution);\n}\n\n/** A helper function for building iterations from values. Promises are unwrapped, so that iterations never have their value property set to a promise. */\nfunction createIteration<T, TReturn, TNext>(\n  r: RepeaterRecord<T, TReturn, TNext>,\n  value: Promise<T | TReturn | undefined> | T | TReturn | undefined\n): Promise<IteratorResult<T, TReturn>> {\n  const done = r.state >= Done;\n  return Promise.resolve(value).then((value: any) => {\n    if (!done && r.state >= Rejected) {\n      return consumeExecution<T, TReturn, TNext>(r).then((value: any) => ({\n        value,\n        done: true,\n      }));\n    }\n\n    return { value, done };\n  });\n}\n\n/**\n * This function is bound and passed to the executor as the stop argument.\n *\n * Advances state to Stopped.\n */\nfunction stop<T, TReturn, TNext>(r: RepeaterRecord<T, TReturn, TNext>, err?: unknown): void {\n  if (r.state >= Stopped) {\n    return;\n  }\n\n  r.state = Stopped;\n  r.onnext();\n  r.onstop();\n  if (r.err == null) {\n    r.err = err;\n  }\n\n  if (r.pushes.length === 0 && (typeof r.buffer === \"undefined\" || r.buffer.empty)) {\n    finish(r);\n  } else {\n    for (const push of r.pushes) {\n      push.resolve();\n    }\n  }\n}\n\n/**\n * The difference between stopping a repeater vs finishing a repeater is that stopping a repeater allows next to continue to drain values from the push queue and buffer, while finishing a repeater will clear all pending values and end iteration immediately. Once, a repeater is finished, all iterations will have the done property set to true.\n *\n * Advances state to Done.\n */\nfunction finish<T, TReturn, TNext>(r: RepeaterRecord<T, TReturn, TNext>): void {\n  if (r.state >= Done) {\n    return;\n  }\n\n  if (r.state < Stopped) {\n    stop(r);\n  }\n\n  r.state = Done;\n  r.buffer = undefined;\n  for (const next of r.nexts) {\n    const execution: Promise<TReturn | undefined> =\n      r.pending === undefined ? consumeExecution<T, TReturn, TNext>(r) : r.pending.then(() => consumeExecution<T, TReturn, TNext>(r));\n    next.resolve(createIteration<T, TReturn, TNext>(r, execution));\n  }\n\n  r.pushes = [];\n  r.nexts = [];\n}\n\n/**\n * Called when a promise passed to push rejects, or when a push call is unhandled.\n *\n * Advances state to Rejected.\n */\nfunction reject(r: RepeaterRecord<any, any, any>): void {\n  if (r.state >= Rejected) {\n    return;\n  }\n\n  if (r.state < Done) {\n    finish(r);\n  }\n\n  r.state = Rejected;\n}\n\n/** This function is bound and passed to the executor as the push argument. */\nfunction push<T, TReturn, TNext>(r: RepeaterRecord<T, TReturn, TNext>, value: PromiseLike<T> | T): Promise<TNext | undefined> {\n  swallow(value);\n  if (r.pushes.length >= MAX_QUEUE_LENGTH) {\n    throw new RepeaterOverflowError(`No more than ${MAX_QUEUE_LENGTH} pending calls to push are allowed on a single repeater.`);\n  } else if (r.state >= Stopped) {\n    return Promise.resolve(undefined);\n  }\n\n  let valueP: Promise<T | undefined> = r.pending === undefined ? Promise.resolve(value) : r.pending.then(() => value);\n\n  valueP = valueP.catch((err) => {\n    if (r.state < Stopped) {\n      r.err = err;\n    }\n\n    reject(r);\n    return undefined; // void :(\n  });\n\n  let nextP: Promise<TNext | undefined>;\n  if (r.nexts.length) {\n    const next = r.nexts.shift()!;\n    next.resolve(createIteration<T, TReturn, TNext>(r, valueP));\n    if (r.nexts.length) {\n      nextP = Promise.resolve(r.nexts[0].value);\n    } else {\n      nextP = new Promise((resolve) => (r.onnext = resolve));\n    }\n  } else if (typeof r.buffer !== \"undefined\" && !r.buffer.full) {\n    r.buffer.add(valueP);\n    nextP = Promise.resolve(undefined);\n  } else {\n    nextP = new Promise((resolve) => r.pushes.push({ resolve, value: valueP }));\n  }\n\n  // If an error is thrown into the repeater via the next or throw methods, we give the repeater a chance to handle this by rejecting the promise returned from push. If the push call is not immediately handled we throw the next iteration of the repeater.\n  // To check that the promise returned from push is floating, we modify the then and catch methods of the returned promise so that they flip the floating flag. The push function actually does not return a promise, because modern engines do not call the then and catch methods on native promises. By making next a plain old javascript object, we ensure that the then and catch methods will be called.\n  let floating = true;\n  const next = {} as Promise<TNext | undefined>;\n  const unhandled = nextP.catch((err) => {\n    if (floating) {\n      throw err;\n    }\n\n    return undefined; // void :(\n  });\n\n  next.then = (onfulfilled, onrejected): any => {\n    floating = false;\n    return Promise.prototype.then.call(nextP, onfulfilled, onrejected);\n  };\n\n  next.catch = (onrejected): any => {\n    floating = false;\n    return Promise.prototype.catch.call(nextP, onrejected);\n  };\n\n  next.finally = nextP.finally.bind(nextP);\n  r.pending = valueP\n    .then(() => unhandled)\n    .catch((err) => {\n      r.err = err;\n      reject(r);\n    });\n\n  return next;\n}\n\n/**\n * Creates the stop callable promise which is passed to the executor\n */\nfunction createStop<T, TReturn, TNext>(r: RepeaterRecord<T, TReturn, TNext>): Stop {\n  const stop1 = stop.bind(null, r as RepeaterRecord<unknown, unknown, unknown>) as Stop;\n  const stopP = new Promise<undefined>((resolve) => (r.onstop = resolve as () => unknown));\n  stop1.then = stopP.then.bind(stopP);\n  stop1.catch = stopP.catch.bind(stopP);\n  stop1.finally = stopP.finally.bind(stopP);\n  return stop1;\n}\n\n/**\n * Calls the executor passed into the constructor. This function is called the first time the next method is called on the repeater.\n *\n * Advances state to Started.\n */\nfunction execute<T, TReturn, TNext>(r: RepeaterRecord<T, TReturn, TNext>): void {\n  if (r.state >= Started) {\n    return;\n  }\n\n  r.state = Started;\n  const push1 = (push as any).bind(null, r) as Push<T, TNext>;\n  const stop1 = createStop(r);\n  r.execution = new Promise((resolve) => resolve(r.executor(push1, stop1)));\n  // TODO: We should consider stopping all repeaters when the executor settles.\n  r.execution.catch(() => stop(r));\n}\n\ntype RecordMap<T, TResult, TNext> = WeakMap<Repeater<T, TResult, TNext>, RepeaterRecord<T, TResult, TNext>>;\n\nconst records: RecordMap<any, any, any> = new WeakMap();\n\n// NOTE: While repeaters implement and are assignable to the AsyncGenerator interface, and you can use the types interchangeably, we don’t use typescript’s implements syntax here because this would make supporting earlier versions of typescript trickier. This is because TypeScript version 3.6 changed the iterator types by adding the TReturn and TNext type parameters.\nexport class Repeater<T, TReturn = any, TNext = unknown> {\n  constructor(executor: RepeaterExecutor<T, TReturn, TNext>, buffer?: RepeaterBuffer | undefined) {\n    records.set(this, {\n      executor,\n      buffer,\n      err: undefined,\n      state: Initial,\n      pushes: [],\n      nexts: [],\n      pending: undefined,\n      execution: undefined,\n      onnext: NOOP,\n      onstop: NOOP,\n    });\n  }\n\n  next(value?: PromiseLike<TNext> | TNext): Promise<IteratorResult<T, TReturn>> {\n    swallow(value);\n    const r = records.get(this);\n    if (r === undefined) {\n      throw new Error(\"WeakMap error\");\n    }\n\n    if (r.nexts.length >= MAX_QUEUE_LENGTH) {\n      throw new RepeaterOverflowError(`No more than ${MAX_QUEUE_LENGTH} pending calls to next are allowed on a single repeater.`);\n    }\n\n    if (r.state <= Initial) {\n      execute(r);\n    }\n\n    r.onnext(value);\n    if (typeof r.buffer !== \"undefined\" && !r.buffer.empty) {\n      const result = createIteration(r, r.buffer.remove() as Promise<T | undefined>);\n      if (r.pushes.length) {\n        const push = r.pushes.shift()!;\n        r.buffer.add(push.value);\n        r.onnext = push.resolve;\n      }\n\n      return result;\n    } else if (r.pushes.length) {\n      const push = r.pushes.shift()!;\n      r.onnext = push.resolve;\n      return createIteration(r, push.value);\n    } else if (r.state >= Stopped) {\n      finish(r);\n      return createIteration(r, consumeExecution(r));\n    }\n\n    return new Promise((resolve) => r.nexts.push({ resolve, value }));\n  }\n\n  return(value?: PromiseLike<TReturn> | TReturn): Promise<IteratorResult<T, TReturn>> {\n    swallow(value);\n    const r = records.get(this);\n    if (r === undefined) {\n      throw new Error(\"WeakMap error\");\n    }\n\n    finish(r);\n    // We override the execution because return should always return the value passed in.\n    r.execution = Promise.resolve(r.execution).then(() => value);\n    return createIteration(r, consumeExecution(r));\n  }\n\n  throw(err: unknown): Promise<IteratorResult<T, TReturn>> {\n    const r = records.get(this);\n    if (r === undefined) {\n      throw new Error(\"WeakMap error\");\n    }\n\n    if (r.state <= Initial || r.state >= Stopped || (typeof r.buffer !== \"undefined\" && !r.buffer.empty)) {\n      finish(r);\n      // If r.err is already set, that mean the repeater has already produced an error, so we throw that error rather than the error passed in, because doing so might be more informative for the caller.\n      if (r.err == null) {\n        r.err = err;\n      }\n\n      return createIteration(r, consumeExecution(r));\n    }\n\n    return this.next(Promise.reject(err));\n  }\n\n  [Symbol.asyncIterator](): this {\n    return this;\n  }\n}\n", "import type { ExecutionResult } from \"graphql\";\nimport { Repeater } from \"../repeater/index.js\";\n\nexport type ExecutionLivePatchResult<PatchPayload = unknown> = {\n  errors?: ExecutionResult[\"errors\"];\n  /* data must be included in the first result */\n  data?: ExecutionResult[\"data\"];\n  /* patch must be present in the next results */\n  patch?: PatchPayload;\n  revision?: number;\n  extensions?: ExecutionResult[\"extensions\"];\n};\n\nexport type ApplyPatchFunction<PatchPayload = unknown> = (\n  previous: Record<string, unknown>,\n  patch: PatchPayload\n) => Record<string, unknown>;\n\n/**\n * Create a middleware generator function for applying live query patches on the client.\n */\nexport const createApplyLiveQueryPatch =\n  <PatchPayload = unknown>(\n    /* Function which is used for generating the patches */\n    applyPatch: ApplyPatchFunction<PatchPayload>\n  ) =>\n  <TExecutionResult = Record<string, unknown>>(source: AsyncIterable<TExecutionResult>) =>\n    new Repeater<TExecutionResult>(async (push, stop) => {\n      const iterator = source[Symbol.asyncIterator]();\n      stop.then(() => iterator.return?.()).catch(console.log);\n      let mutableData: ExecutionResult | null = null;\n      let lastRevision = 0;\n      let next: IteratorResult<ExecutionLivePatchResult<PatchPayload>>;\n      // @ts-expect-error bad types\n      while ((next = await iterator.next()).done === false) {\n        // no revision means this is no live query patch.\n        if (\"revision\" in next.value && next.value.revision) {\n          const valueToPublish: ExecutionLivePatchResult = {};\n\n          if (next.value.revision === 1) {\n            if (next.value.data !== undefined) {\n              valueToPublish.data = next.value.data;\n\n              mutableData = next.value.data;\n              lastRevision = 1;\n            } else {\n              throw new Error(\"Missing data.\");\n            }\n          } else {\n            if (!mutableData) {\n              throw new Error(\"No previousData available.\");\n            }\n            if (!next.value.patch) {\n              throw new Error(\"Missing patch.\");\n            }\n            if (lastRevision + 1 !== next.value.revision) {\n              throw new Error(\"Wrong revision received.\");\n            }\n\n            mutableData = applyPatch(mutableData as Record<string, unknown>, next.value.patch);\n            valueToPublish.data = { ...mutableData } as Record<string, unknown>;\n\n            lastRevision++;\n          }\n\n          if (next.value.extensions) {\n            valueToPublish.extensions = next.value.extensions;\n          }\n          if (next.value.errors) {\n            valueToPublish.errors = next.value.errors;\n          }\n\n          await push(valueToPublish as TExecutionResult);\n          continue;\n        }\n\n        await push(next.value as TExecutionResult);\n      }\n\n      stop();\n    });\n", "/**\r\n * Attaches a cleanup handler to a AsyncIterable.\r\n *\r\n * @param source The source that should have a return handler attached\r\n * @param onReturn The return handler that should be attached\r\n * @returns\r\n */\r\nfunction withHandlers(source, onReturn, onThrow) {\r\n    const stream = (async function* withReturnSource() {\r\n        yield* source;\r\n    })();\r\n    const originalReturn = stream.return.bind(stream);\r\n    if (onReturn) {\r\n        stream.return = (...args) => {\r\n            onReturn();\r\n            return originalReturn(...args);\r\n        };\r\n    }\r\n    if (onThrow) {\r\n        const originalThrow = stream.throw.bind(stream);\r\n        stream.throw = (err) => {\r\n            onThrow(err);\r\n            return originalThrow(err);\r\n        };\r\n    }\r\n    return stream;\r\n}\n\nfunction createDeferred() {\r\n    const d = {};\r\n    d.promise = new Promise((resolve, reject) => {\r\n        d.resolve = resolve;\r\n        d.reject = reject;\r\n    });\r\n    return d;\r\n}\r\n/**\r\n * makePushPullAsyncIterableIterator\r\n *\r\n * The iterable will publish values until return or throw is called.\r\n * Afterwards it is in the completed state and cannot be used for publishing any further values.\r\n * It will handle back-pressure and keep pushed values until they are consumed by a source.\r\n */\r\nfunction makePushPullAsyncIterableIterator() {\r\n    let state = {\r\n        type: \"running\" /* running */\r\n    };\r\n    let next = createDeferred();\r\n    const values = [];\r\n    function pushValue(value) {\r\n        if (state.type !== \"running\" /* running */) {\r\n            return;\r\n        }\r\n        values.push(value);\r\n        next.resolve();\r\n        next = createDeferred();\r\n    }\r\n    const source = (async function* PushPullAsyncIterableIterator() {\r\n        while (true) {\r\n            if (values.length > 0) {\r\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n                yield values.shift();\r\n            }\r\n            else {\r\n                if (state.type === \"error\" /* error */) {\r\n                    throw state.error;\r\n                }\r\n                if (state.type === \"finished\" /* finished */) {\r\n                    return;\r\n                }\r\n                await next.promise;\r\n            }\r\n        }\r\n    })();\r\n    const stream = withHandlers(source, () => {\r\n        if (state.type !== \"running\" /* running */) {\r\n            return;\r\n        }\r\n        state = {\r\n            type: \"finished\" /* finished */\r\n        };\r\n        next.resolve();\r\n    }, (error) => {\r\n        if (state.type !== \"running\" /* running */) {\r\n            return;\r\n        }\r\n        state = {\r\n            type: \"error\" /* error */,\r\n            error\r\n        };\r\n        next.resolve();\r\n    });\r\n    return {\r\n        pushValue,\r\n        asyncIterableIterator: stream\r\n    };\r\n}\n\nconst makeAsyncIterableIteratorFromSink = (make) => {\r\n    const { pushValue, asyncIterableIterator } = makePushPullAsyncIterableIterator();\r\n    const dispose = make({\r\n        next: (value) => {\r\n            pushValue(value);\r\n        },\r\n        complete: () => {\r\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n            asyncIterableIterator.return();\r\n        },\r\n        error: (err) => {\r\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n            asyncIterableIterator.throw(err);\r\n        }\r\n    });\r\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n    const originalReturn = asyncIterableIterator.return;\r\n    let returnValue = undefined;\r\n    asyncIterableIterator.return = () => {\r\n        if (returnValue === undefined) {\r\n            dispose();\r\n            returnValue = originalReturn();\r\n        }\r\n        return returnValue;\r\n    };\r\n    return asyncIterableIterator;\r\n};\n\nfunction applyAsyncIterableIteratorToSink(asyncIterableIterator, sink) {\r\n    const run = async () => {\r\n        try {\r\n            for await (const value of asyncIterableIterator) {\r\n                sink.next(value);\r\n            }\r\n            sink.complete();\r\n        }\r\n        catch (err) {\r\n            sink.error(err);\r\n        }\r\n    };\r\n    run();\r\n    return () => {\r\n        var _a;\r\n        (_a = asyncIterableIterator.return) === null || _a === void 0 ? void 0 : _a.call(asyncIterableIterator);\r\n    };\r\n}\n\nfunction isAsyncIterable(input) {\r\n    return (typeof input === \"object\" &&\r\n        input !== null &&\r\n        // The AsyncGenerator check is for Safari on iOS which currently does not have\r\n        // Symbol.asyncIterator implemented\r\n        // That means every custom AsyncIterable must be built using a AsyncGeneratorFunction (async function * () {})\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        (input[Symbol.toStringTag] === \"AsyncGenerator\" ||\r\n            (Symbol.asyncIterator && Symbol.asyncIterator in input)));\r\n}\n\n/**\r\n * Attaches a cleanup handler from and AsyncIterable to an AsyncIterable.\r\n *\r\n * @param source\r\n * @param target\r\n */\r\nfunction withHandlersFrom(\r\n/** The source that should be returned with attached handlers. */\r\nsource, \r\n/**The target on which the return and throw methods should be called. */\r\ntarget) {\r\n    return withHandlers(source, () => { var _a; return (_a = target.return) === null || _a === void 0 ? void 0 : _a.call(target); }, err => { var _a; return (_a = target.throw) === null || _a === void 0 ? void 0 : _a.call(target, err); });\r\n}\n\nfunction filter(filter) {\r\n    return async function* filterGenerator(asyncIterable) {\r\n        for await (const value of asyncIterable) {\r\n            if (filter(value)) {\r\n                yield value;\r\n            }\r\n        }\r\n    };\r\n}\n\n/**\r\n * Map the events published by an AsyncIterable.\r\n */\r\nconst map = (map) => async function* mapGenerator(asyncIterable) {\r\n    for await (const value of asyncIterable) {\r\n        yield map(value);\r\n    }\r\n};\n\nexport { applyAsyncIterableIteratorToSink, filter, isAsyncIterable, makeAsyncIterableIteratorFromSink, makePushPullAsyncIterableIterator, map, withHandlers, withHandlersFrom };\n", "import type { Delta } from \"@n1ru4l/json-patch-plus\";\nimport { patch } from \"@n1ru4l/json-patch-plus\";\nimport { createApplyLiveQueryPatch } from \"./createApplyLiveQueryPatch.js\";\n\nexport type ApplyPatchFunction<PatchPayload = unknown> = (\n  previous: Record<string, unknown>,\n  patch: PatchPayload\n) => Record<string, unknown>;\n\nexport const applyJSONDiffPatch: ApplyPatchFunction<Delta> = (left, delta): Record<string, unknown> =>\n  patch({\n    left,\n    delta,\n  });\n\nexport const applyLiveQueryJSONDiffPatch = createApplyLiveQueryPatch(applyJSONDiffPatch);\nexport { applyAsyncIterableIteratorToSink, makeAsyncIterableIteratorFromSink } from \"@n1ru4l/push-pull-async-iterable-iterator\";\n", "import { useEffect, useState } from 'react';\r\nimport {\r\n  Badge,\r\n  BlockStack,\r\n  InlineStack,\r\n  Button,\r\n  reactExtension,\r\n  ProgressIndicator,\r\n  useApi,\r\n  Text,\r\n  Link,\r\n} from '@shopify/ui-extensions-react/admin';\r\n\r\nimport { getOrderInfo, addOrderNote } from '../../shared/shopifyOperations';\r\n\r\nimport { replacePlaceholders } from './utils/replacePlaceholders';\r\nimport { sendSmsMessage } from './utils/sendSmsMessage';\r\nimport { fetchSmsTemplates } from './utils/fetchSmsTemplates';\r\n\r\nconst TARGET = 'admin.order-details.block.render';\r\n\r\nexport default reactExtension(TARGET, () => <App />);\r\n\r\nfunction App() {\r\n  const { data } = useApi(TARGET);\r\n  const [status, setStatus] = useState('Loading...');\r\n  const [smsTemplates, setSmsTemplates] = useState<any[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [customerPhone, setCustomerPhone] = useState<string>('');\r\n  const [orderDetails, setOrderDetails] = useState<any>(null);\r\n  const orderId = data?.selected[0]?.id;\r\n\r\n  useEffect(() => {\r\n    const loadSmsTemplates = async () => {\r\n      try {\r\n        const orderInfo = await getOrderInfo(orderId);\r\n        const orderDetails = orderInfo?.orderDetails;\r\n        const results = await fetchSmsTemplates();\r\n        const resultsProcessed = results.map((res) => ({\r\n          ...res,\r\n          smsTextReplaced: replacePlaceholders(res.smsText, {\r\n            orderTotal: orderDetails?.total || '',\r\n            orderNumber: orderDetails?.orderNumber || '',\r\n          }),\r\n        }));\r\n        setSmsTemplates(resultsProcessed);\r\n        setOrderDetails(orderDetails);\r\n\r\n        if (!orderDetails?.shippingPhone) {\r\n          setStatus('Phone not found');\r\n        } else {\r\n          setCustomerPhone(orderDetails?.shippingPhone);\r\n          setStatus('Ready to send SMS');\r\n        }\r\n      } catch (err: any) {\r\n        setStatus(`Error in fetch: ${err.message || err.toString()}`);\r\n      }\r\n    };\r\n    loadSmsTemplates();\r\n  }, [orderId]);\r\n\r\n  const handleSendSms = async (smsText: string) => {\r\n    setLoading(true);\r\n    setStatus('Sending SMS...');\r\n    try {\r\n      const response = await sendSmsMessage(customerPhone, smsText);\r\n      console.log('\uD83D\uDE80 ~ response:', JSON.stringify(response));\r\n      if (response.status === 'error') {\r\n        throw new Error(response.error);\r\n      }\r\n\r\n      const note = `Success: SMS sent \"${smsText}\"`;\r\n      await addOrderNote({ orderId, note });\r\n      setStatus(note);\r\n    } catch (error) {\r\n      const note = `Error sending sms: ${(error as Error).message}`;\r\n      await addOrderNote({ orderId, note });\r\n      setStatus(note);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const generateContextMessage = () => {\r\n    if (!orderDetails) return '';\r\n\r\n    const productName = orderDetails.lineItems?.[0]?.title || '';\r\n    const orderNumber = orderDetails.orderNumber || '';\r\n\r\n    return `\u0414\u043E\u0431\u0440\u043E\u0433\u043E \u0434\u043D\u044F! \u0426\u0435 \u043C\u0430\u0433\u0430\u0437\u0438\u043D informatica.com.ua \u0449\u043E\u0434\u043E \u0432\u0430\u0448\u043E\u0433\u043E \u0437\u0430\u043C\u043E\u0432\u043B\u0435\u043D\u043D\u044F ${`${orderNumber} `}\u043D\u0430 \u0442\u043E\u0432\u0430\u0440 \"${productName}\"`;\r\n  };\r\n\r\n  return (\r\n    <BlockStack gap='large'>\r\n      <Text>\r\n        {customerPhone\r\n          ? `\u0422\u0435\u043B\u0435\u0444\u043E\u043D \u043A\u043B\u0456\u0454\u043D\u0442\u0430: ${customerPhone}`\r\n          : '\u0422\u0435\u043B\u0435\u0444\u043E\u043D \u043A\u043B\u0456\u0454\u043D\u0442\u0430 \u043D\u0435 \u0437\u043D\u0430\u0439\u0434\u0435\u043D\u043E'}\r\n      </Text>\r\n\r\n      {customerPhone && (\r\n        <BlockStack gap='base'>\r\n          <InlineStack gap='base'>\r\n            <Link\r\n              href={`https://msng.link/o/?${customerPhone}=vi`}\r\n              target='_blank'\r\n              tone='default'\r\n            >\r\n              Viber\r\n            </Link>\r\n          </InlineStack>\r\n          <Text>\u0422\u0435\u043A\u0441\u0442: \"{generateContextMessage()}\"</Text>\r\n        </BlockStack>\r\n      )}\r\n\r\n      <InlineStack inlineAlignment='center' blockAlignment='center' gap='large'>\r\n        {smsTemplates.map((template) => (\r\n          <Button\r\n            key={template.id}\r\n            onPress={() => handleSendSms(template.smsTextReplaced)}\r\n            disabled={loading || status !== 'Ready to send SMS'}\r\n            variant='primary'\r\n            tone='default'\r\n          >\r\n            {template.title}\r\n          </Button>\r\n        ))}\r\n      </InlineStack>\r\n\r\n      <BlockStack>\r\n        <InlineStack>\r\n          {loading && <ProgressIndicator size='small-200' />}\r\n          <Badge\r\n            tone={\r\n              status.startsWith('Success')\r\n                ? 'success'\r\n                : status.startsWith('Error')\r\n                ? 'critical'\r\n                : 'default'\r\n            }\r\n            size='small-100'\r\n          >\r\n            {status.slice(0, 90)}\r\n          </Badge>\r\n        </InlineStack>\r\n      </BlockStack>\r\n    </BlockStack>\r\n  );\r\n}\r\n", "import { RETAINED_BY, RETAIN_METHOD, RELEASE_METHOD } from './types.mjs';\nexport { RELEASE_METHOD, RETAINED_BY, RETAIN_METHOD } from './types.mjs';\n\nclass StackFrame {\n  constructor() {\n    this.memoryManaged = new Set();\n  }\n\n  add(memoryManageable) {\n    this.memoryManaged.add(memoryManageable);\n    memoryManageable[RETAINED_BY].add(this);\n    memoryManageable[RETAIN_METHOD]();\n  }\n\n  release() {\n    for (const memoryManaged of this.memoryManaged) {\n      memoryManaged[RETAINED_BY].delete(this);\n      memoryManaged[RELEASE_METHOD]();\n    }\n\n    this.memoryManaged.clear();\n  }\n\n}\nfunction isMemoryManageable(value) {\n  return Boolean(value && value[RETAIN_METHOD] && value[RELEASE_METHOD]);\n}\nfunction retain(value, {\n  deep = true\n} = {}) {\n  return retainInternal(value, deep, new Map());\n}\n\nfunction retainInternal(value, deep, seen) {\n  const seenValue = seen.get(value);\n  if (seenValue != null) return seenValue;\n  const canRetain = isMemoryManageable(value);\n\n  if (canRetain) {\n    value[RETAIN_METHOD]();\n  }\n\n  seen.set(value, canRetain);\n\n  if (deep) {\n    if (Array.isArray(value)) {\n      const nestedCanRetain = value.reduce((canRetain, item) => retainInternal(item, deep, seen) || canRetain, canRetain);\n      seen.set(value, nestedCanRetain);\n      return nestedCanRetain;\n    }\n\n    if (isBasicObject(value)) {\n      const nestedCanRetain = Object.keys(value).reduce((canRetain, key) => retainInternal(value[key], deep, seen) || canRetain, canRetain);\n      seen.set(value, nestedCanRetain);\n      return nestedCanRetain;\n    }\n  }\n\n  seen.set(value, canRetain);\n  return canRetain;\n}\n\nfunction release(value, {\n  deep = true\n} = {}) {\n  return releaseInternal(value, deep, new Map());\n}\nfunction releaseInternal(value, deep, seen) {\n  const seenValue = seen.get(value);\n  if (seenValue != null) return seenValue;\n  const canRelease = isMemoryManageable(value);\n\n  if (canRelease) {\n    value[RELEASE_METHOD]();\n  }\n\n  seen.set(value, canRelease);\n\n  if (deep) {\n    if (Array.isArray(value)) {\n      const nestedCanRelease = value.reduce((canRelease, item) => releaseInternal(item, deep, seen) || canRelease, canRelease);\n      seen.set(value, nestedCanRelease);\n      return nestedCanRelease;\n    }\n\n    if (isBasicObject(value)) {\n      const nestedCanRelease = Object.keys(value).reduce((canRelease, key) => releaseInternal(value[key], deep, seen) || canRelease, canRelease);\n      seen.set(value, nestedCanRelease);\n      return nestedCanRelease;\n    }\n  }\n\n  return canRelease;\n}\nfunction isBasicObject(value) {\n  if (value == null || typeof value !== 'object') return false;\n  const prototype = Object.getPrototypeOf(value);\n  return prototype == null || prototype === Object.prototype;\n}\n\nexport { StackFrame, isBasicObject, isMemoryManageable, release, releaseInternal, retain };\n", "import { KIND_COMPONENT, KIND_TEXT, KIND_FRAGMENT } from './types.mjs';\n\nfunction isRemoteComponent(child) {\n  return child != null && child.kind === KIND_COMPONENT;\n}\nfunction isRemoteText(child) {\n  return child != null && child.kind === KIND_TEXT;\n}\nfunction isRemoteFragment(object) {\n  return object != null && object.kind === KIND_FRAGMENT;\n}\n\nexport { isRemoteComponent, isRemoteFragment, isRemoteText };\n", "import { isBasicObject } from '@remote-ui/rpc';\nimport { KIND_ROOT, ACTION_MOUNT, ACTION_INSERT_CHILD, KIND_TEXT, ACTION_REMOVE_CHILD, KIND_COMPONENT, KIND_FRAGMENT, ACTION_UPDATE_PROPS, ACTION_UPDATE_TEXT } from './types.mjs';\nimport { isRemoteFragment } from './utilities.mjs';\n\nconst FUNCTION_CURRENT_IMPLEMENTATION_KEY = '__current';\nconst EMPTY_OBJECT = {};\nconst EMPTY_ARRAY = [];\nfunction createRemoteRoot(channel, {\n  strict = true,\n  components\n} = {}) {\n  let currentId = 0;\n  const rootInternals = {\n    strict,\n    mounted: false,\n    channel,\n    children: EMPTY_ARRAY,\n    nodes: new WeakSet(),\n    parents: new WeakMap(),\n    tops: new WeakMap(),\n    components: new WeakMap(),\n    fragments: new WeakMap()\n  };\n  if (strict) Object.freeze(components);\n  const remoteRoot = {\n    kind: KIND_ROOT,\n    options: strict ? Object.freeze({\n      strict,\n      components\n    }) : {\n      strict,\n      components\n    },\n\n    get children() {\n      return rootInternals.children;\n    },\n\n    createComponent(type, ...rest) {\n      if (components && components.indexOf(type) < 0) {\n        throw new Error(`Unsupported component: ${type}`);\n      }\n\n      const [initialProps, initialChildren, ...moreChildren] = rest;\n      const normalizedInitialProps = initialProps !== null && initialProps !== void 0 ? initialProps : {};\n      const normalizedInitialChildren = [];\n      const normalizedInternalProps = {};\n\n      if (initialProps) {\n        for (const key of Object.keys(initialProps)) {\n          // \"children\" as a prop can be extremely confusing with the \"children\" of\n          // a component. In React, a \"child\" can be anything, but once it reaches\n          // a host environment (like this remote `Root`), we want \"children\" to have\n          // only one meaning: the actual, resolved children components and text.\n          //\n          // To enforce this, we delete any prop named \"children\". We don\u2019t take a copy\n          // of the props for performance, so a user calling this function must do so\n          // with an object that can handle being mutated.\n          if (key === 'children') continue;\n          normalizedInternalProps[key] = makeValueHotSwappable(serializeProp(initialProps[key]));\n        }\n      }\n\n      if (initialChildren) {\n        if (Array.isArray(initialChildren)) {\n          for (const child of initialChildren) {\n            normalizedInitialChildren.push(normalizeChild(child, remoteRoot));\n          }\n        } else {\n          normalizedInitialChildren.push(normalizeChild(initialChildren, remoteRoot)); // The complex tuple type of `rest` makes it so `moreChildren` is\n          // incorrectly inferred as potentially being the props of the component,\n          // lazy casting since we know it will be an array of child elements\n          // (or empty).\n\n          for (const child of moreChildren) {\n            normalizedInitialChildren.push(normalizeChild(child, remoteRoot));\n          }\n        }\n      }\n\n      const id = `${currentId++}`;\n      const internals = {\n        externalProps: strict ? Object.freeze(normalizedInitialProps) : normalizedInitialProps,\n        internalProps: normalizedInternalProps,\n        children: strict ? Object.freeze(normalizedInitialChildren) : normalizedInitialChildren\n      };\n      const component = {\n        kind: KIND_COMPONENT,\n\n        get children() {\n          return internals.children;\n        },\n\n        get props() {\n          return internals.externalProps;\n        },\n\n        get remoteProps() {\n          return internals.internalProps;\n        },\n\n        remove: () => remove(component),\n        updateProps: newProps => updateProps(component, newProps, internals, rootInternals),\n        append: (...children) => append(component, children.map(child => normalizeChild(child, remoteRoot)), internals, rootInternals),\n        appendChild: child => appendChild(component, normalizeChild(child, remoteRoot), internals, rootInternals),\n        removeChild: child => removeChild(component, child, internals, rootInternals),\n        replaceChildren: (...children) => replaceChildren(component, children.map(child => normalizeChild(child, remoteRoot)), internals, rootInternals),\n        insertBefore: (child, before) => insertBefore(component, normalizeChild(child, remoteRoot), before, internals, rootInternals),\n        insertChildBefore: (child, before) => insertBefore(component, normalizeChild(child, remoteRoot), before, internals, rootInternals),\n        // Just satisfying the type definition, since we need to write\n        // some properties manually, which we do below. If we just `as any`\n        // the whole object, we lose the implicit argument types for the\n        // methods above.\n        ...EMPTY_OBJECT\n      };\n      rootInternals.components.set(component, internals);\n      Object.defineProperty(component, 'type', {\n        value: type,\n        configurable: false,\n        writable: false,\n        enumerable: true\n      });\n      makePartOfTree(component, rootInternals);\n      makeRemote(component, id, remoteRoot);\n\n      for (const child of internals.children) {\n        moveNodeToContainer(component, child, rootInternals);\n      }\n\n      return component;\n    },\n\n    createText(content = '') {\n      const id = `${currentId++}`;\n      const internals = {\n        text: content\n      };\n\n      const update = newText => updateText(text, newText, internals, rootInternals);\n\n      const text = {\n        kind: KIND_TEXT,\n\n        get text() {\n          return internals.text;\n        },\n\n        update,\n        updateText: update,\n        remove: () => remove(text),\n        // Just satisfying the type definition, since we need to write\n        // some properties manually.\n        ...EMPTY_OBJECT\n      };\n      makePartOfTree(text, rootInternals);\n      makeRemote(text, id, remoteRoot);\n      return text;\n    },\n\n    createFragment() {\n      const id = `${currentId++}`;\n      const internals = {\n        children: strict ? Object.freeze([]) : []\n      };\n      const fragment = {\n        kind: KIND_FRAGMENT,\n\n        get children() {\n          return internals.children;\n        },\n\n        append: (...children) => append(fragment, children.map(child => normalizeChild(child, remoteRoot)), internals, rootInternals),\n        appendChild: child => appendChild(fragment, normalizeChild(child, remoteRoot), internals, rootInternals),\n        removeChild: child => removeChild(fragment, child, internals, rootInternals),\n        replaceChildren: (...children) => replaceChildren(fragment, children.map(child => normalizeChild(child, remoteRoot)), internals, rootInternals),\n        insertBefore: (child, before) => insertBefore(fragment, normalizeChild(child, remoteRoot), before, internals, rootInternals),\n        insertChildBefore: (child, before) => insertBefore(fragment, normalizeChild(child, remoteRoot), before, internals, rootInternals),\n        // Just satisfying the type definition, since we need to write\n        // some properties manually.\n        ...EMPTY_OBJECT\n      };\n      rootInternals.fragments.set(fragment, internals);\n      makePartOfTree(fragment, rootInternals);\n      makeRemote(fragment, id, remoteRoot);\n      return fragment;\n    },\n\n    append: (...children) => append(remoteRoot, children.map(child => normalizeChild(child, remoteRoot)), rootInternals, rootInternals),\n    appendChild: child => appendChild(remoteRoot, normalizeChild(child, remoteRoot), rootInternals, rootInternals),\n    replaceChildren: (...children) => replaceChildren(remoteRoot, children.map(child => normalizeChild(child, remoteRoot)), rootInternals, rootInternals),\n    removeChild: child => removeChild(remoteRoot, child, rootInternals, rootInternals),\n    insertBefore: (child, before) => insertBefore(remoteRoot, normalizeChild(child, remoteRoot), before, rootInternals, rootInternals),\n    insertChildBefore: (child, before) => insertBefore(remoteRoot, normalizeChild(child, remoteRoot), before, rootInternals, rootInternals),\n\n    mount() {\n      if (rootInternals.mounted) return Promise.resolve();\n      rootInternals.mounted = true;\n      return Promise.resolve(channel(ACTION_MOUNT, rootInternals.children.map(serializeChild)));\n    }\n\n  };\n  return remoteRoot;\n}\n\nfunction connected(element, {\n  tops\n}) {\n  var _tops$get;\n\n  return ((_tops$get = tops.get(element)) === null || _tops$get === void 0 ? void 0 : _tops$get.kind) === KIND_ROOT;\n}\n\nfunction allDescendants(element, withEach) {\n  const recurse = element => {\n    if ('children' in element) {\n      for (const child of element.children) {\n        withEach(child);\n        recurse(child);\n      }\n    }\n  };\n\n  recurse(element);\n}\n\nfunction perform(element, rootInternals, {\n  remote,\n  local\n}) {\n  const {\n    mounted,\n    channel\n  } = rootInternals;\n\n  if (mounted && (element.kind === KIND_ROOT || connected(element, rootInternals))) {\n    // should only create context once async queue is cleared\n    remote(channel); // technically, we should be waiting for the remote update to apply,\n    // then apply it locally. The implementation below is too naive because\n    // it allows local updates to get out of sync with remote ones.\n    // if (remoteResult == null || !('then' in remoteResult)) {\n    //   local();\n    //   return;\n    // } else {\n    //   return remoteResult.then(() => {\n    //     local();\n    //   });\n    // }\n  }\n\n  local();\n}\n\nfunction updateText(text, newText, internals, rootInternals) {\n  return perform(text, rootInternals, {\n    remote: channel => channel(ACTION_UPDATE_TEXT, text.id, newText),\n    local: () => {\n      internals.text = newText;\n    }\n  });\n}\n\nconst IGNORE = Symbol('ignore');\n\nfunction updateProps(component, newProps, internals, rootInternals) {\n  const {\n    strict\n  } = rootInternals;\n  const {\n    internalProps: currentProps,\n    externalProps: currentExternalProps\n  } = internals;\n  const normalizedNewProps = {};\n  const hotSwapFunctions = [];\n  let hasRemoteChange = false;\n\n  for (const key of Object.keys(newProps)) {\n    // See notes above for why we treat `children` as a reserved prop.\n    if (key === 'children') continue;\n    const currentExternalValue = currentExternalProps[key];\n    const newExternalValue = newProps[key];\n    const currentValue = currentProps[key];\n    const newValue = serializeProp(newExternalValue); // Bail out if we have equal, primitive types\n\n    if (currentValue === newValue && (newValue == null || typeof newValue !== 'object')) {\n      continue;\n    }\n\n    const [value, hotSwaps] = tryHotSwappingValues(currentValue, newValue);\n\n    if (hotSwaps) {\n      hotSwapFunctions.push(...hotSwaps);\n    }\n\n    if (value === IGNORE) continue;\n    hasRemoteChange = true;\n    normalizedNewProps[key] = value;\n\n    if (isRemoteFragment(currentExternalValue)) {\n      removeNodeFromContainer(currentExternalValue, rootInternals);\n    }\n\n    if (isRemoteFragment(newExternalValue)) {\n      moveNodeToContainer(component, newExternalValue, rootInternals);\n    }\n  }\n\n  return perform(component, rootInternals, {\n    remote: channel => {\n      if (hasRemoteChange) {\n        channel(ACTION_UPDATE_PROPS, component.id, normalizedNewProps);\n      }\n    },\n    local: () => {\n      const mergedExternalProps = { ...currentExternalProps,\n        ...newProps\n      };\n      internals.externalProps = strict ? Object.freeze(mergedExternalProps) : mergedExternalProps;\n      internals.internalProps = { ...internals.internalProps,\n        ...normalizedNewProps\n      };\n\n      for (const [hotSwappable, newValue] of hotSwapFunctions) {\n        hotSwappable[FUNCTION_CURRENT_IMPLEMENTATION_KEY] = newValue;\n      }\n    }\n  });\n} // Imagine the following remote-ui components we might render in a remote context:\n//\n// const root = createRemoteRoot();\n// const {value, onChange, onPress} = getPropsForValue();\n//\n// const textField = root.createComponent('TextField', {value, onChange});\n// const button = root.createComponent('Button', {onPress});\n//\n// root.append(textField);\n// root.append(button);\n//\n// function getPropsForValue(value = '') {\n//   return {\n//     value,\n//     onChange: () => {\n//       const {value, onChange, onPress} = getPropsForValue();\n//       textField.updateProps({value, onChange});\n//       button.updateProps({onPress});\n//     },\n//     onPress: () => console.log(value),\n//   };\n// }\n//\n//\n// In this example, assume that the `TextField` `onChange` prop is run on blur.\n// If this were running on the host, the following steps would happen if you pressed\n// on the button:\n//\n// 1. The text field blurs, and so calls `onChange()` with its current value, which\n//    then calls `setValue()` with the updated value.\n// 2. We synchronously update the `value`, `onChange`, and `onPress` props to point at\n//    the most current `value`.\n// 3. Handling blur is finished, so the browser now handles the click by calling the\n//    (newly-updated) `Button` `onPress()`, which logs out the new value.\n//\n// Because remote-ui reproduces a UI tree asynchronously from the remote context, the\n// steps above run in a different order:\n//\n// 1. The text field blurs, and so calls `onChange()` with its current value.\n// 2. Handling blur is finished **from the perspective of the main thread**, so the\n//    browser now handles the click by calling the (original) `Button` `onPress()`, which\n//    logs out the **initial** value.\n// 3. In the remote context, we receive the `onChange()` call, which calls updates the props\n//    on the `Button` and `TextField` to be based on the new `value`, but by now it\u2019s\n//    already too late for `onPress` \u2014 the old version has already been called!\n//\n// As you can see, the timing issue introduced by the asynchronous nature of remote-ui\n// can cause \u201Cold props\u201D to be called from the main thread. This example may seem like\n// an unusual pattern, and it is if you are using `@remote-ui/core` directly; you\u2019d generally\n// keep a mutable reference to the state, instead of closing over the state with new props.\n// However, abstractions on top of `@remote-ui/core`, like the React reconciler in\n// `@remote-ui/react`, work almost entirely by closing over state, so this issue is\n// much more common with those declarative libraries.\n//\n// To protect against this, we handle function props a bit differently. When we have a\n// function prop, we replace it with a new function that calls the original. However,\n// we make the original mutable, by making it a property on the function itself. When\n// this function subsequently updates, we don\u2019t send the update to the main thread (as\n// we just saw, this can often be \"too late\" to be of any use). Instead, we swap out\n// the mutable reference to the current implementation of the function prop, which can\n// be done synchronously. In the example above, this would all happen synchronously in\n// the remote context; in our handling of `TextField onChange()`, we update `Button onPress()`,\n// and swap out the implementations. Now, when the main thread attempts to call `Button onPress()`,\n// it instead calls our wrapper around the function, which can refer to, and call, the\n// most recently-applied implementation, instead of directly calling the old implementation.\n\n\nfunction tryHotSwappingValues(currentValue, newValue, seen = new Set()) {\n  if (seen.has(currentValue)) {\n    return [IGNORE];\n  }\n\n  seen.add(currentValue);\n\n  if (typeof currentValue === 'function' && FUNCTION_CURRENT_IMPLEMENTATION_KEY in currentValue) {\n    const result = [typeof newValue === 'function' ? IGNORE : makeValueHotSwappable(newValue), [[currentValue, newValue]]];\n    return result;\n  }\n\n  if (Array.isArray(currentValue)) {\n    const result = tryHotSwappingArrayValues(currentValue, newValue, seen);\n    return result;\n  }\n\n  if (isBasicObject(currentValue) && !isRemoteFragment(currentValue)) {\n    const result = tryHotSwappingObjectValues(currentValue, newValue, seen);\n    return result;\n  }\n\n  const result = [currentValue === newValue ? IGNORE : newValue];\n  return result;\n}\n\nfunction makeValueHotSwappable(value, seen = new Map()) {\n  const seenValue = seen.get(value);\n  if (seenValue) return seenValue;\n\n  if (isRemoteFragment(value)) {\n    seen.set(value, value);\n    return value;\n  }\n\n  if (Array.isArray(value)) {\n    const result = [];\n    seen.set(value, result);\n\n    for (const nested of value) {\n      result.push(makeValueHotSwappable(nested, seen));\n    }\n\n    return result;\n  }\n\n  if (isBasicObject(value)) {\n    const result = {};\n    seen.set(value, result);\n\n    for (const key of Object.keys(value)) {\n      result[key] = makeValueHotSwappable(value[key], seen);\n    }\n\n    return result;\n  }\n\n  if (typeof value === 'function') {\n    const wrappedFunction = (...args) => {\n      return wrappedFunction[FUNCTION_CURRENT_IMPLEMENTATION_KEY](...args);\n    };\n\n    Object.defineProperty(wrappedFunction, FUNCTION_CURRENT_IMPLEMENTATION_KEY, {\n      enumerable: false,\n      configurable: false,\n      writable: true,\n      value\n    });\n    seen.set(value, wrappedFunction);\n    return wrappedFunction;\n  }\n\n  seen.set(value, value);\n  return value;\n}\n\nfunction collectNestedHotSwappableValues(value, seen = new Set()) {\n  if (seen.has(value)) return undefined;\n  seen.add(value);\n\n  if (Array.isArray(value)) {\n    return value.reduce((all, element) => {\n      const nested = collectNestedHotSwappableValues(element, seen);\n      return nested ? [...all, ...nested] : all;\n    }, []);\n  }\n\n  if (isBasicObject(value)) {\n    return Object.keys(value).reduce((all, key) => {\n      const nested = collectNestedHotSwappableValues(value[key], seen);\n      return nested ? [...all, ...nested] : all;\n    }, []);\n  }\n\n  if (typeof value === 'function') {\n    return FUNCTION_CURRENT_IMPLEMENTATION_KEY in value ? [value] : undefined;\n  }\n\n  return undefined;\n}\n\nfunction remove(child) {\n  var _child$parent;\n\n  (_child$parent = child.parent) === null || _child$parent === void 0 ? void 0 : _child$parent.removeChild(child);\n}\n\nfunction append(container, children, internals, rootInternals) {\n  for (const child of children) {\n    appendChild(container, child, internals, rootInternals);\n  }\n}\n\nfunction appendChild(container, child, internals, rootInternals) {\n  var _currentParent$childr;\n\n  const {\n    nodes,\n    strict\n  } = rootInternals;\n\n  if (!nodes.has(child)) {\n    throw new Error(`Cannot append a node that was not created by this remote root`);\n  }\n\n  const currentParent = child.parent;\n  const existingIndex = (_currentParent$childr = currentParent === null || currentParent === void 0 ? void 0 : currentParent.children.indexOf(child)) !== null && _currentParent$childr !== void 0 ? _currentParent$childr : -1;\n  return perform(container, rootInternals, {\n    remote: channel => {\n      channel(ACTION_INSERT_CHILD, container.id, existingIndex < 0 ? container.children.length : container.children.length - 1, serializeChild(child), currentParent ? currentParent.id : false);\n    },\n    local: () => {\n      moveNodeToContainer(container, child, rootInternals);\n      let newChildren;\n\n      if (currentParent) {\n        const currentInternals = getCurrentInternals(currentParent, rootInternals);\n        const currentChildren = [...currentInternals.children];\n        currentChildren.splice(existingIndex, 1);\n\n        if (currentParent === container) {\n          newChildren = currentChildren;\n        } else {\n          currentInternals.children = strict ? Object.freeze(currentChildren) : currentChildren;\n          newChildren = [...internals.children];\n        }\n      } else {\n        newChildren = [...internals.children];\n      }\n\n      newChildren.push(child);\n      internals.children = strict ? Object.freeze(newChildren) : newChildren;\n    }\n  });\n}\n\nfunction replaceChildren(container, children, internals, rootInternals) {\n  for (const child of container.children) {\n    removeChild(container, child, internals, rootInternals);\n  }\n\n  append(container, children, internals, rootInternals);\n} // there is a problem with this, because when multiple children\n// are removed, there is no guarantee the messages will arrive in the\n// order we need them to on the host side (it depends how React\n// calls our reconciler). If it calls with, for example, the removal of\n// the second last item, then the removal of the last item, it will fail\n// because the indexes moved around.\n//\n// Might need to send the removed child ID, or find out if we\n// can collect removals into a single update.\n\n\nfunction removeChild(container, child, internals, rootInternals) {\n  const {\n    strict\n  } = rootInternals;\n  return perform(container, rootInternals, {\n    remote: channel => channel(ACTION_REMOVE_CHILD, container.id, container.children.indexOf(child)),\n    local: () => {\n      removeNodeFromContainer(child, rootInternals);\n      const newChildren = [...internals.children];\n      newChildren.splice(newChildren.indexOf(child), 1);\n      internals.children = strict ? Object.freeze(newChildren) : newChildren;\n    }\n  });\n}\n\nfunction insertBefore(container, child, before, internals, rootInternals) {\n  var _currentParent$childr2;\n\n  const {\n    strict,\n    nodes\n  } = rootInternals;\n\n  if (!nodes.has(child)) {\n    throw new Error(`Cannot insert a node that was not created by this remote root`);\n  }\n\n  const currentParent = child.parent;\n  const existingIndex = (_currentParent$childr2 = currentParent === null || currentParent === void 0 ? void 0 : currentParent.children.indexOf(child)) !== null && _currentParent$childr2 !== void 0 ? _currentParent$childr2 : -1;\n  return perform(container, rootInternals, {\n    remote: channel => {\n      const beforeIndex = before == null ? container.children.length - 1 : container.children.indexOf(before);\n      channel(ACTION_INSERT_CHILD, container.id, beforeIndex < existingIndex || existingIndex < 0 ? beforeIndex : beforeIndex - 1, serializeChild(child), currentParent ? currentParent.id : false);\n    },\n    local: () => {\n      moveNodeToContainer(container, child, rootInternals);\n      let newChildren;\n\n      if (currentParent) {\n        const currentInternals = getCurrentInternals(currentParent, rootInternals);\n        const currentChildren = [...currentInternals.children];\n        currentChildren.splice(existingIndex, 1);\n\n        if (currentParent === container) {\n          newChildren = currentChildren;\n        } else {\n          currentInternals.children = strict ? Object.freeze(currentChildren) : currentChildren;\n          newChildren = [...internals.children];\n        }\n      } else {\n        newChildren = [...internals.children];\n      }\n\n      if (before == null) {\n        newChildren.push(child);\n      } else {\n        newChildren.splice(newChildren.indexOf(before), 0, child);\n      }\n\n      internals.children = strict ? Object.freeze(newChildren) : newChildren;\n    }\n  });\n}\n\nfunction normalizeChild(child, root) {\n  return typeof child === 'string' ? root.createText(child) : child;\n}\n\nfunction moveNodeToContainer(container, node, rootInternals) {\n  const {\n    tops,\n    parents\n  } = rootInternals;\n  const newTop = container.kind === KIND_ROOT ? container : tops.get(container);\n  tops.set(node, newTop);\n  parents.set(node, container);\n  moveFragmentToContainer(node, rootInternals);\n  allDescendants(node, descendant => {\n    tops.set(descendant, newTop);\n    moveFragmentToContainer(descendant, rootInternals);\n  });\n}\n\nfunction moveFragmentToContainer(node, rootInternals) {\n  if (node.kind !== KIND_COMPONENT) return;\n  const props = node.props;\n  if (!props) return;\n  Object.values(props).forEach(prop => {\n    if (!isRemoteFragment(prop)) return;\n    moveNodeToContainer(node, prop, rootInternals);\n  });\n}\n\nfunction removeNodeFromContainer(node, rootInternals) {\n  const {\n    tops,\n    parents\n  } = rootInternals;\n  tops.delete(node);\n  parents.delete(node);\n  allDescendants(node, descendant => {\n    tops.delete(descendant);\n    removeFragmentFromContainer(descendant, rootInternals);\n  });\n  removeFragmentFromContainer(node, rootInternals);\n}\n\nfunction removeFragmentFromContainer(node, rootInternals) {\n  if (node.kind !== KIND_COMPONENT) return;\n  const props = node.remoteProps;\n\n  for (const key of Object.keys(props !== null && props !== void 0 ? props : {})) {\n    const prop = props[key];\n    if (!isRemoteFragment(prop)) continue;\n    removeNodeFromContainer(prop, rootInternals);\n  }\n}\n\nfunction makePartOfTree(node, {\n  parents,\n  tops,\n  nodes\n}) {\n  nodes.add(node);\n  Object.defineProperty(node, 'parent', {\n    get() {\n      return parents.get(node);\n    },\n\n    configurable: true,\n    enumerable: true\n  });\n  Object.defineProperty(node, 'top', {\n    get() {\n      return tops.get(node);\n    },\n\n    configurable: true,\n    enumerable: true\n  });\n}\n\nfunction serializeChild(value) {\n  return value.kind === KIND_TEXT ? {\n    id: value.id,\n    kind: value.kind,\n    text: value.text\n  } : {\n    id: value.id,\n    kind: value.kind,\n    type: value.type,\n    props: value.remoteProps,\n    children: value.children.map(child => serializeChild(child))\n  };\n}\n\nfunction serializeProp(prop) {\n  if (isRemoteFragment(prop)) {\n    return serializeFragment(prop);\n  }\n\n  return prop;\n}\n\nfunction serializeFragment(value) {\n  return {\n    id: value.id,\n    kind: value.kind,\n\n    get children() {\n      return value.children.map(child => serializeChild(child));\n    }\n\n  };\n}\n\nfunction getCurrentInternals(currentParent, rootInternals) {\n  if (currentParent.kind === KIND_ROOT) {\n    return rootInternals;\n  }\n\n  if (currentParent.kind === KIND_FRAGMENT) {\n    return rootInternals.fragments.get(currentParent);\n  }\n\n  return rootInternals.components.get(currentParent);\n}\n\nfunction makeRemote(value, id, root) {\n  Object.defineProperty(value, 'id', {\n    value: id,\n    configurable: true,\n    writable: false,\n    enumerable: false\n  });\n  Object.defineProperty(value, 'root', {\n    value: root,\n    configurable: true,\n    writable: false,\n    enumerable: false\n  });\n}\n\nfunction tryHotSwappingObjectValues(currentValue, newValue, seen) {\n  if (!isBasicObject(newValue)) {\n    var _collectNestedHotSwap;\n\n    return [makeValueHotSwappable(newValue), (_collectNestedHotSwap = collectNestedHotSwappableValues(currentValue)) === null || _collectNestedHotSwap === void 0 ? void 0 : _collectNestedHotSwap.map(hotSwappable => [hotSwappable, undefined])];\n  }\n\n  let hasChanged = false;\n  const hotSwaps = [];\n  const normalizedNewValue = {}; // eslint-disable-next-line guard-for-in\n\n  for (const key in currentValue) {\n    const currentObjectValue = currentValue[key];\n\n    if (!(key in newValue)) {\n      hasChanged = true;\n      const nestedHotSwappables = collectNestedHotSwappableValues(currentObjectValue);\n\n      if (nestedHotSwappables) {\n        hotSwaps.push(...nestedHotSwappables.map(hotSwappable => [hotSwappable, undefined]));\n      }\n    }\n\n    const newObjectValue = newValue[key];\n    const [updatedValue, elementHotSwaps] = tryHotSwappingValues(currentObjectValue, newObjectValue, seen);\n\n    if (elementHotSwaps) {\n      hotSwaps.push(...elementHotSwaps);\n    }\n\n    if (updatedValue !== IGNORE) {\n      hasChanged = true;\n      normalizedNewValue[key] = updatedValue;\n    }\n  }\n\n  for (const key in newValue) {\n    if (key in normalizedNewValue) continue;\n    hasChanged = true;\n    normalizedNewValue[key] = makeValueHotSwappable(newValue[key]);\n  }\n\n  return [hasChanged ? normalizedNewValue : IGNORE, hotSwaps];\n}\n\nfunction tryHotSwappingArrayValues(currentValue, newValue, seen) {\n  if (!Array.isArray(newValue)) {\n    var _collectNestedHotSwap2;\n\n    return [makeValueHotSwappable(newValue), (_collectNestedHotSwap2 = collectNestedHotSwappableValues(currentValue)) === null || _collectNestedHotSwap2 === void 0 ? void 0 : _collectNestedHotSwap2.map(hotSwappable => [hotSwappable, undefined])];\n  }\n\n  let hasChanged = false;\n  const hotSwaps = [];\n  const newLength = newValue.length;\n  const currentLength = currentValue.length;\n  const maxLength = Math.max(currentLength, newLength);\n  const normalizedNewValue = [];\n\n  for (let i = 0; i < maxLength; i++) {\n    const currentArrayValue = currentValue[i];\n    const newArrayValue = newValue[i];\n\n    if (i < newLength) {\n      if (i >= currentLength) {\n        hasChanged = true;\n        normalizedNewValue[i] = makeValueHotSwappable(newArrayValue);\n        continue;\n      }\n\n      const [updatedValue, elementHotSwaps] = tryHotSwappingValues(currentArrayValue, newArrayValue, seen);\n      if (elementHotSwaps) hotSwaps.push(...elementHotSwaps);\n\n      if (updatedValue === IGNORE) {\n        normalizedNewValue[i] = currentArrayValue;\n        continue;\n      }\n\n      hasChanged = true;\n      normalizedNewValue[i] = updatedValue;\n    } else {\n      hasChanged = true;\n      const nestedHotSwappables = collectNestedHotSwappableValues(currentArrayValue);\n\n      if (nestedHotSwappables) {\n        hotSwaps.push(...nestedHotSwappables.map(hotSwappable => [hotSwappable, undefined]));\n      }\n    }\n  }\n\n  return [hasChanged ? normalizedNewValue : IGNORE, hotSwaps];\n}\n\nexport { createRemoteRoot };\n", "import { createRemoteRoot } from '@remote-ui/core';\n\n/**\n * This function takes an extension function that is expecting a `RemoteRoot` as its\n * first argument, and returns a new function that accepts a `RemoteChannel` instead.\n * This is a convenience that allows the raw UI extension API to only expose the simpler\n * `RemoteChannel` type, while allowing the extension to use the more powerful `RemoteRoot`,\n * provided by a version of `@remote-ui/core` that the extension controls.\n */\nfunction createExtensionRegistrationFunction() {\n  const extensionWrapper = (target, implementation) => {\n    var _shopify;\n    async function extension(...args) {\n      // Rendering extensions have two arguments. Non-rendering extensions don\u2019t have\n      // a `RemoteChannel` that needs to be normalized, so we can just pass the arguments\n      // through.\n      if (args.length === 1) {\n        return implementation(...args);\n      }\n      const [{\n        channel,\n        components\n      }, api] = args;\n      const root = createRemoteRoot(channel, {\n        components,\n        strict: true\n      });\n      let renderResult = implementation(root, api);\n      if (typeof renderResult === 'object' && renderResult != null && 'then' in renderResult) {\n        renderResult = await renderResult;\n      }\n      root.mount();\n      return renderResult;\n    }\n    (_shopify = globalThis.shopify) === null || _shopify === void 0 ? void 0 : _shopify.extend(target, extension);\n    return extension;\n  };\n  return extensionWrapper;\n}\n\nexport { createExtensionRegistrationFunction };\n", "import { createExtensionRegistrationFunction } from '../../utilities/registration.mjs';\n\nconst extension = createExtensionRegistrationFunction();\nconst extend = extension;\n\nexport { extend, extension };\n", "import { createRemoteComponent } from '@remote-ui/core';\n\nconst Badge = createRemoteComponent('Badge');\n\nexport { Badge };\n", "import { createRemoteComponent } from '@remote-ui/core';\n\nconst BlockStack = createRemoteComponent('BlockStack');\n\nexport { BlockStack };\n", "import { createRemoteComponent } from '@remote-ui/core';\n\nconst Button = createRemoteComponent('Button');\n\nexport { Button };\n", "import { createRemoteComponent } from '@remote-ui/core';\n\nconst InlineStack = createRemoteComponent('InlineStack');\n\nexport { InlineStack };\n", "import { createRemoteComponent } from '@remote-ui/core';\n\nconst Link = createRemoteComponent('Link');\n\nexport { Link };\n", "import { createRemoteComponent } from '@remote-ui/core';\n\nconst ProgressIndicator = createRemoteComponent('ProgressIndicator');\n\nexport { ProgressIndicator };\n", "import { createRemoteComponent } from '@remote-ui/core';\n\nconst Text = createRemoteComponent('Text');\n\nexport { Text };\n", "import { version } from 'react';\nimport { createReconciler } from './reconciler.mjs';\nimport { RenderContext } from './context.mjs';\nimport { jsx } from 'react/jsx-runtime';\n\nconst cache = new WeakMap(); // @see https://github.com/facebook/react/blob/fea6f8da6ab669469f2fa3f18bd3a831f00ab284/packages/react-reconciler/src/ReactRootTags.js#L12\n// We don't support concurrent rendering for now.\n\nconst LEGACY_ROOT = 0;\nconst defaultReconciler = createReconciler();\nfunction createRoot(root) {\n  return {\n    render(children) {\n      render(children, root);\n    },\n\n    unmount() {\n      if (!cache.has(root)) return;\n      render(null, root);\n      cache.delete(root);\n    }\n\n  };\n}\n/**\n * @deprecated Use `createRoot` for a React 18-style rendering API.\n */\n\nfunction render(element, root, callback, reconciler = defaultReconciler) {\n  // First, check if we've already cached a container and render context for this root\n  let cached = cache.get(root);\n\n  if (!cached) {\n    var _version$split;\n\n    const major = Number(((_version$split = version.split('.')) === null || _version$split === void 0 ? void 0 : _version$split[0]) || 18); // Since we haven't created a container for this root yet, create a new one\n\n    const value = {\n      container: major >= 18 ? reconciler.createContainer(root, LEGACY_ROOT, null, false, null, // Might not be necessary\n      'r-ui', () => null, null) : // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore - this is to support React 17\n      reconciler.createContainer(root, LEGACY_ROOT, false, null),\n      // We also cache the render context to avoid re-creating it on subsequent render calls\n      renderContext: {\n        root,\n        reconciler\n      }\n    }; // Store the container and render context for retrieval on subsequent render calls\n\n    cache.set(root, value);\n    cached = value;\n  }\n\n  const {\n    container,\n    renderContext\n  } = cached; // callback is cast here because the typings do not mark that argument\n  // as optional, even though it is.\n\n  reconciler.updateContainer(element && /*#__PURE__*/jsx(RenderContext.Provider, {\n    value: renderContext,\n    children: element\n  }), container, null, callback); // Did not work for me because (I think?) it is done by the worker\n  // and therefore has an entirely different React.\n  //\n  // Original code was from:\n  // @see https://github.com/facebook/react/issues/16666\n  // @see https://github.com/michalochman/react-pixi-fiber/pull/148\n  //\n  // reconciler.injectIntoDevTools({\n  //   bundleType: 1,\n  //   findFiberByHostInstance: reconciler.findFiberByHostInstance,\n  //   rendererPackageName: '@remote-ui/react',\n  //   version: '16.9.0',\n  // });\n}\n\nexport { createRoot, render };\n", "import reactReconciler from 'react-reconciler';\n\nconst createReconciler = options => {\n  var _options$primary;\n\n  return reactReconciler({\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore - Compat for React <= 17.x\n    now: Date.now,\n    // Timeout\n    scheduleTimeout: setTimeout,\n    cancelTimeout: clearTimeout,\n    noTimeout: false,\n    // Microtask scheduling\n    // @see https://github.com/facebook/react/blob/2c8a1452b82b9ec5ebfa3f370b31fda19610ae92/packages/react-dom/src/client/ReactDOMHostConfig.js#L391-L401\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore - types in `@types/react-reconciler` are outdated\n    supportsMicrotasks: true,\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore - types in `@types/react-reconciler` are outdated\n    scheduleMicrotask,\n    // Compat for React <= 17.x\n    queueMicrotask: scheduleMicrotask,\n    isPrimaryRenderer: (_options$primary = options === null || options === void 0 ? void 0 : options.primary) !== null && _options$primary !== void 0 ? _options$primary : true,\n    supportsMutation: true,\n    supportsHydration: false,\n    supportsPersistence: false,\n\n    // Context\n    getRootHostContext() {\n      return {};\n    },\n\n    getChildHostContext(context) {\n      return context;\n    },\n\n    // Instances\n    createTextInstance(text, root) {\n      return root.createText(text);\n    },\n\n    createInstance(type, allProps, root) {\n      const {\n        children: _children,\n        ...props\n      } = allProps;\n      return root.createComponent(type, props);\n    },\n\n    // Updates\n    commitTextUpdate(text, _oldText, newText) {\n      text.update(newText);\n    },\n\n    prepareUpdate(_instance, _type, oldProps, newProps) {\n      const updateProps = {};\n      let needsUpdate = false;\n\n      for (const key in oldProps) {\n        if (!has(oldProps, key) || key === 'children') {\n          continue;\n        }\n\n        if (!(key in newProps)) {\n          needsUpdate = true;\n          updateProps[key] = undefined; // } else if (typeof oldProps[key] === 'function') {\n          //   if (typeof newProps[key] === 'function') {\n          //     fragment.controller.functions.exchange(\n          //       oldProps[key] as Function,\n          //       newProps[key] as Function,\n          //     );\n          //   } else {\n          //     needsUpdate = true;\n          //     fragment.controller.functions.revoke(oldProps[key] as Function);\n          //     updateProps[key] = newProps[key];\n          //   }\n        } else if (oldProps[key] !== newProps[key]) {\n          needsUpdate = true;\n          updateProps[key] = newProps[key];\n        }\n      }\n\n      for (const key in newProps) {\n        if (!has(newProps, key) || key === 'children') {\n          continue;\n        }\n\n        if (!(key in oldProps)) {\n          needsUpdate = true;\n          updateProps[key] = newProps[key];\n        }\n      }\n\n      return needsUpdate ? updateProps : null;\n    },\n\n    commitUpdate(instance, payload) {\n      instance.updateProps(payload);\n    },\n\n    // Update root\n    appendChildToContainer(remoteRoot, child) {\n      remoteRoot.append(child);\n    },\n\n    insertInContainerBefore(remoteRoot, child, beforeChild) {\n      remoteRoot.insertBefore(child, beforeChild);\n    },\n\n    removeChildFromContainer(remoteRoot, child) {\n      remoteRoot.removeChild(child);\n    },\n\n    clearContainer(remoteRoot) {\n      for (const child of remoteRoot.children) {\n        remoteRoot.removeChild(child);\n      }\n    },\n\n    // Update children\n    appendInitialChild(parent, child) {\n      parent.append(child);\n    },\n\n    appendChild(parent, child) {\n      parent.append(child);\n    },\n\n    insertBefore(parent, newChild, beforeChild) {\n      parent.insertBefore(newChild, beforeChild);\n    },\n\n    removeChild(parent, child) {\n      parent.removeChild(child);\n    },\n\n    // Unknown\n    finalizeInitialChildren() {\n      return false;\n    },\n\n    shouldSetTextContent() {\n      return false;\n    },\n\n    getPublicInstance() {},\n\n    prepareForCommit() {\n      return null;\n    },\n\n    resetAfterCommit() {},\n\n    commitMount() {},\n\n    preparePortalMount() {},\n\n    detachDeletedInstance() {}\n\n  });\n};\n\nfunction scheduleMicrotask(callback) {\n  return typeof queueMicrotask === 'function' ? queueMicrotask : Promise.resolve(null).then(callback).catch(handleErrorInNextTick);\n}\n\nfunction handleErrorInNextTick(error) {\n  setTimeout(() => {\n    throw error;\n  });\n}\n\nconst {\n  hasOwnProperty\n} = {};\n\nfunction has(object, property) {\n  return hasOwnProperty.call(object, property);\n}\n\nexport { createReconciler };\n", "import { createContext } from 'react';\n\nconst RenderContext = /*#__PURE__*/createContext(null);\n\nexport { RenderContext };\n", "import { memo, useRef, useMemo, isValidElement, Children } from 'react';\nimport { isRemoteFragment } from '@remote-ui/core';\nimport { jsx } from 'react/jsx-runtime';\nimport { useRender } from './hooks/render.mjs';\n\nfunction createRemoteReactComponent(componentType, {\n  fragmentProps\n} = {}) {\n  if (!fragmentProps || !fragmentProps.length) {\n    return componentType;\n  }\n\n  const wrapper = createComponentWrapper(componentType, fragmentProps);\n  wrapper.displayName = componentType;\n  return wrapper;\n}\n\nfunction createComponentWrapper(componentType, fragmentProps) {\n  const Component = componentType;\n  return /*#__PURE__*/memo(function ComponentWrapper({\n    children: externalChildren = [],\n    ...externalProps\n  }) {\n    const fragments = useRef({});\n    const {\n      root,\n      reconciler\n    } = useRender();\n    const {\n      props,\n      children\n    } = useMemo(() => {\n      // React portals need to be attached to the tree after intialize in order to render.\n      // It's usually done by appending them as children of a parent node.\n      // @see https://reactjs.org/docs/portals.html\n      const portals = [];\n      const props = {};\n\n      for (const key of Object.keys(externalProps)) {\n        const element = externalProps[key];\n\n        if (fragmentProps.includes(key) && /*#__PURE__*/isValidElement(element)) {\n          const currentFragment = fragments.current[key];\n          const fragment = isRemoteFragment(currentFragment) ? currentFragment : root.createFragment();\n          fragments.current[key] = fragment; // Assign createText and createComponent to fragment\n          // so that it can become a React container to render the portal\n\n          Object.assign(fragment, {\n            createText(...args) {\n              return root.createText(...args);\n            },\n\n            createComponent(type, ...args) {\n              return root.createComponent(type, ...args);\n            }\n\n          });\n          const portal = reconciler.createPortal(element, fragment, null, null);\n          portals.push(portal);\n          props[key] = fragment;\n        } else {\n          props[key] = element;\n          delete fragments.current[key];\n        }\n      }\n\n      return {\n        props,\n        children: [...Children.toArray(externalChildren), ...portals]\n      };\n    }, [externalChildren, externalProps, root, reconciler, fragments]);\n    return /*#__PURE__*/jsx(Component, { ...props,\n      children: children\n    });\n  });\n}\n\nexport { createRemoteReactComponent };\n", "import { useContext } from 'react';\nimport { RenderContext } from '../context.mjs';\n\nfunction useRender() {\n  const render = useContext(RenderContext);\n\n  if (render == null) {\n    throw new Error('No remote-ui Render instance found in context');\n  }\n\n  return render;\n}\n\nexport { useRender };\n", "import { createContext } from 'react';\n\nconst ExtensionApiContext = /*#__PURE__*/createContext(null);\n\nexport { ExtensionApiContext };\n", "import { render } from '@remote-ui/react';\nimport { extension } from '@shopify/ui-extensions/admin';\nimport { ExtensionApiContext } from './context.mjs';\nimport { jsx } from 'react/jsx-runtime';\n\nfunction reactExtension(target, render$1) {\n  // TypeScript can\u2019t infer the type of the callback because it\u2019s a big union\n  // type. To get around it, we\u2019ll just fake like we are rendering the\n  // Playground extension, since all render extensions have the same general\n  // shape (`RenderExtension`).\n  return extension(target, async (root, api) => {\n    const element = await render$1(api);\n    await new Promise((resolve, reject) => {\n      try {\n        render( /*#__PURE__*/jsx(ExtensionApiContext.Provider, {\n          value: api,\n          children: element\n        }), root, () => {\n          resolve();\n        });\n      } catch (error) {\n        // Workaround for https://github.com/Shopify/ui-extensions/issues/325\n        // eslint-disable-next-line no-console\n        console.error(error);\n        reject(error);\n      }\n    });\n  });\n}\n\nexport { reactExtension, reactExtension as render };\n", "import { Badge as Badge$1 } from '@shopify/ui-extensions/admin';\nimport { createRemoteReactComponent } from '@remote-ui/react';\n\nconst Badge = createRemoteReactComponent(Badge$1);\n\nexport { Badge };\n", "import { BlockStack as BlockStack$1 } from '@shopify/ui-extensions/admin';\nimport { createRemoteReactComponent } from '@remote-ui/react';\n\nconst BlockStack = createRemoteReactComponent(BlockStack$1);\n\nexport { BlockStack };\n", "import { Button as Button$1 } from '@shopify/ui-extensions/admin';\nimport { createRemoteReactComponent } from '@remote-ui/react';\n\nconst Button = createRemoteReactComponent(Button$1);\n\nexport { Button };\n", "import { InlineStack as InlineStack$1 } from '@shopify/ui-extensions/admin';\nimport { createRemoteReactComponent } from '@remote-ui/react';\n\nconst InlineStack = createRemoteReactComponent(InlineStack$1);\n\nexport { InlineStack };\n", "import { Link as Link$1 } from '@shopify/ui-extensions/admin';\nimport { createRemoteReactComponent } from '@remote-ui/react';\n\nconst Link = createRemoteReactComponent(Link$1);\n\nexport { Link };\n", "import { ProgressIndicator as ProgressIndicator$1 } from '@shopify/ui-extensions/admin';\nimport { createRemoteReactComponent } from '@remote-ui/react';\n\nconst ProgressIndicator = createRemoteReactComponent(ProgressIndicator$1);\n\nexport { ProgressIndicator };\n", "import { Text as Text$1 } from '@shopify/ui-extensions/admin';\nimport { createRemoteReactComponent } from '@remote-ui/react';\n\nconst Text = createRemoteReactComponent(Text$1);\n\nexport { Text };\n", "import { useContext } from 'react';\nimport { ExtensionApiContext } from '../context.mjs';\nimport { AdminUIExtensionError } from '../errors.mjs';\n\n/**\n * Returns the full API object that was passed in to your\n * extension when it was created.\n */\nfunction useApi(_target) {\n  const api = useContext(ExtensionApiContext);\n  if (api == null) {\n    throw new AdminUIExtensionError('No extension api found.');\n  }\n  return api;\n}\n\n/**\n * Returns the full API object that was passed in to your\n * extension when it was created.\n * @deprecated you shoud be importing useApi instead\n */\nfunction useExtensionApi() {\n  return useApi();\n}\n\nexport { useApi, useExtensionApi };\n", "class AdminUIExtensionError extends Error {\n  constructor(...args) {\n    super(...args);\n    this.name = 'AdminUIExtensionError';\n  }\n}\n\nexport { AdminUIExtensionError };\n", "type GraphQLResponse<T> = {\r\n  data?: T;\r\n  errors?: { message: string }[];\r\n};\r\n\r\nexport async function makeGraphQLQuery<T>(\r\n  query: string,\r\n  variables: Record<string, unknown>\r\n): Promise<GraphQLResponse<T>> {\r\n  const graphQLQuery = { query, variables };\r\n\r\n  const res = await fetch('shopify:admin/api/graphql.json', {\r\n    method: 'POST',\r\n    body: JSON.stringify(graphQLQuery),\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n  });\r\n\r\n  if (!res.ok) {\r\n    throw new Error('Network error');\r\n  }\r\n\r\n  return (await res.json()) as GraphQLResponse<T>;\r\n}\r\n", "import { makeGraphQLQuery } from './makeGraphQLQuery';\r\n\r\nexport async function getOrdersTags(orderIds: string[]): Promise<string[]> {\r\n  const orderTagPromises = orderIds.map((id) => {\r\n    const query = `#graphql\r\n      query Order($id: ID!) {\r\n        order(id: $id) {\r\n          tags\r\n        }\r\n      }`;\r\n    return makeGraphQLQuery<{ order: { tags: string[] } }>(query, { id });\r\n  });\r\n\r\n  const tagQueryResults = await Promise.all(orderTagPromises);\r\n  const tags: string[] = [];\r\n  tagQueryResults.forEach(({ data }) => {\r\n    if (data?.order?.tags) {\r\n      tags.push(...data.order.tags);\r\n    }\r\n  });\r\n\r\n  return tags;\r\n}\r\n\r\nexport type NovaPoshtaWarehouse = {\r\n  cityDescription?: string;\r\n  cityRef?: string;\r\n  warehouseDescription?: string;\r\n  warehouseRef?: string;\r\n  settlementAreaDescription?: string;\r\n  matchProbability?: number;\r\n} | null;\r\n\r\nexport type OrderDetails = {\r\n  id: string;\r\n  tags: string[];\r\n  orderNumber: string;\r\n  total: string;\r\n  customerId: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  clientIp: string;\r\n  email: string | null;\r\n  shippingPhone: string | null;\r\n  city: string | null;\r\n  address: string | null;\r\n  zip: string | null;\r\n  paymentMethod: string | null;\r\n  lineItems?: { title: string; unfulfilledQuantity: number }[];\r\n} | null;\r\n\r\nexport type OrderInfo =\r\n  | {\r\n      orderDetails: OrderDetails;\r\n      novaposhtaRecepientWarehouse: NovaPoshtaWarehouse;\r\n      novaposhtaDeclaration: {\r\n        number: string | null;\r\n        ref: string | null;\r\n      };\r\n    }\r\n  | null\r\n  | undefined;\r\n\r\nexport async function getOrderInfo(orderId: string): Promise<OrderInfo> {\r\n  const query = `#graphql\r\n    query Order($id: ID!) {\r\n      order(id: $id) {\r\n        name\r\n        phone\r\n        email\r\n        clientIp\r\n        currentSubtotalPriceSet {\r\n            shopMoney {\r\n                amount\r\n            }\r\n        }\r\n        tags\r\n        customer {\r\n            id\r\n        }\r\n        shippingAddress {\r\n          firstName\r\n          lastName\r\n          phone\r\n          address1\r\n          city\r\n          zip\r\n        }\r\n        paymentMethod: metafield(namespace: \\\"custom\\\", key: \\\"payment_method\\\") {\r\n            value\r\n        }\r\n        novaposhtaRecepientWarehouse: metafield(namespace: \\\"nova_poshta\\\", key: \\\"recepient_warehouse\\\") {\r\n            value\r\n        }\r\n        novaposhtaDeclarationNumber: metafield(namespace: \\\"nova_poshta\\\", key: \\\"declaration_number\\\") {\r\n            value\r\n        }\r\n        novaposhtaDeclarationRef: metafield(namespace: \\\"nova_poshta\\\", key: \\\"declaration_ref\\\") {\r\n            value\r\n        }\r\n        lineItems(first: 10) {\r\n          nodes {\r\n            title\r\n            unfulfilledQuantity\r\n          }\r\n        }\r\n      }\r\n    }`;\r\n  const { data } = await makeGraphQLQuery<{\r\n    order: {\r\n      tags: string[];\r\n      name: string;\r\n      clientIp: string;\r\n      phone: string | null;\r\n      email: string | null;\r\n      currentSubtotalPriceSet: {\r\n        shopMoney: { amount: string };\r\n      };\r\n      customer: { id: string };\r\n      shippingAddress: {\r\n        firstName: string;\r\n        lastName: string;\r\n        phone: string;\r\n        address1: string;\r\n        city: string;\r\n        zip: string;\r\n      };\r\n      paymentMethod: { value: string };\r\n      novaposhtaRecepientWarehouse: { value: string };\r\n      novaposhtaDeclarationNumber: { value: string };\r\n      novaposhtaDeclarationRef: { value: string };\r\n      lineItems: { nodes: { title: string; unfulfilledQuantity: number }[] };\r\n    };\r\n  }>(query, { id: orderId });\r\n\r\n  if (data?.order) {\r\n    const {\r\n      tags,\r\n      name,\r\n      email,\r\n      phone,\r\n      currentSubtotalPriceSet,\r\n      customer,\r\n      clientIp,\r\n      shippingAddress,\r\n      paymentMethod,\r\n      novaposhtaRecepientWarehouse,\r\n      novaposhtaDeclarationNumber,\r\n      novaposhtaDeclarationRef,\r\n      lineItems,\r\n    } = data?.order;\r\n\r\n    const zip =\r\n      shippingAddress?.zip !== '12345' ? `${shippingAddress?.zip}` : '';\r\n    try {\r\n      const orderDetails = {\r\n        id: orderId,\r\n        tags,\r\n        orderNumber: name,\r\n        total: currentSubtotalPriceSet.shopMoney.amount,\r\n        customerId: customer?.id,\r\n        firstName: shippingAddress?.firstName,\r\n        lastName: shippingAddress?.lastName,\r\n        shippingPhone: phone || shippingAddress?.phone || null,\r\n        email: email || null,\r\n        clientIp,\r\n        city: shippingAddress?.city,\r\n        address: shippingAddress?.address1,\r\n        zip,\r\n        paymentMethod: paymentMethod?.value,\r\n        lineItems: lineItems?.nodes || [],\r\n      };\r\n      return {\r\n        orderDetails,\r\n        novaposhtaRecepientWarehouse: JSON.parse(\r\n          novaposhtaRecepientWarehouse?.value || '{}'\r\n        ),\r\n        novaposhtaDeclaration: {\r\n          number: novaposhtaDeclarationNumber?.value || null,\r\n          ref: novaposhtaDeclarationRef?.value || null,\r\n        },\r\n      };\r\n    } catch (error) {\r\n      throw new Error(`Parsing error: ${error}`);\r\n    }\r\n  }\r\n  throw new Error(`Order ${orderId} not found`);\r\n}\r\n\r\nexport async function updateOrdersTags({\r\n  value,\r\n  orderIds,\r\n}: {\r\n  value: string;\r\n  orderIds: string[];\r\n}): Promise<string[]> {\r\n  console.log(\r\n    'Starting updateOrdersTags with value:',\r\n    value,\r\n    'and orderIds:',\r\n    orderIds\r\n  );\r\n\r\n  const currentTags = await getOrdersTags(orderIds);\r\n  console.log('Current tags for the orders:', currentTags);\r\n\r\n  if (currentTags.length > 0) {\r\n    console.log('Removing current tags from orders...');\r\n    const removeTagsPromises = orderIds.map((id) => {\r\n      const removeTagsMutation = `#graphql\r\n          mutation RemoveTags($id: ID!, $tags: [String!]!) {\r\n            tagsRemove(id: $id, tags: $tags) {\r\n              userErrors {\r\n                field\r\n                message\r\n              }\r\n            }\r\n          }`;\r\n      console.log(`Removing tags for order ${id}:`, currentTags);\r\n      return makeGraphQLQuery(removeTagsMutation, {\r\n        id,\r\n        tags: currentTags,\r\n      });\r\n    });\r\n\r\n    try {\r\n      const removeTagsResults = await Promise.all(removeTagsPromises);\r\n      console.log('Remove tags results:', removeTagsResults);\r\n    } catch (error) {\r\n      console.error('Error removing tags:', error);\r\n    }\r\n  }\r\n\r\n  console.log('Adding new tags to orders...');\r\n  const addTagsPromises = orderIds.map((id) => {\r\n    const addTagsMutation = `#graphql\r\n        mutation AddTags($id: ID!, $tags: [String!]!) {\r\n          tagsAdd(id: $id, tags: $tags) {\r\n            userErrors {\r\n              field\r\n              message\r\n            }\r\n            node {\r\n              id\r\n            }\r\n          }\r\n        }`;\r\n    console.log(`Adding tag '${value}' to order ${id}`);\r\n    return makeGraphQLQuery(addTagsMutation, {\r\n      id,\r\n      tags: [value],\r\n    });\r\n  });\r\n\r\n  try {\r\n    const addTagsResults = await Promise.all(addTagsPromises);\r\n    console.log('Add tags results:', addTagsResults);\r\n  } catch (error) {\r\n    console.error('Error adding tags:', error);\r\n  }\r\n\r\n  console.log('Tags successfully updated for all orders.');\r\n  return [value];\r\n}\r\n\r\nexport async function getCustomerPhone(customerId: string) {\r\n  const query = `#graphql\r\n  query GetCustomerPhone($customerId: ID!) {\r\n    customer(id: $customerId) {\r\n        phone\r\n  }\r\n  }`;\r\n  const { data, errors } = await makeGraphQLQuery<{\r\n    customer: { phone: string };\r\n  }>(query, { customerId });\r\n\r\n  if (errors) {\r\n    const errorMessages = errors.map((e) => e.message).join(', ');\r\n    throw new Error(`Failed to fetch order details: ${errorMessages}`);\r\n  }\r\n  const phone = data?.customer?.phone;\r\n  return phone ? phone.slice(-12) : '';\r\n}\r\n\r\nexport async function addOrderNote({\r\n  orderId,\r\n  note,\r\n}: {\r\n  orderId: string;\r\n  note: string;\r\n}) {\r\n  console.log('\uD83D\uDE80 ~ addOrderNote:', note, orderId);\r\n  if (!orderId) {\r\n    throw new Error(`Order ID is required but was not provided`);\r\n  }\r\n  const updatedNote = note + (await makeIPMessage());\r\n  const mutation = `#graphql\r\n        mutation updateOrderNote($input: OrderInput!) {\r\n            orderUpdate(input: $input) {\r\n                order {\r\n                    id\r\n                    note\r\n                }\r\n                userErrors {\r\n                    field\r\n                    message\r\n                }\r\n            }\r\n        }\r\n      `;\r\n\r\n  const { data, errors } = await makeGraphQLQuery<{\r\n    orderUpdate: {\r\n      order: { id: string; note: string };\r\n      userErrors: { field: string; message: string }[];\r\n    };\r\n  }>(mutation, {\r\n    input: {\r\n      id: orderId,\r\n      note: updatedNote,\r\n    },\r\n  });\r\n  if (errors) {\r\n    const errorMessages = errors.map((e) => e.message).join(', ');\r\n    throw new Error(`Failed to update order note: ${errorMessages}`);\r\n  }\r\n\r\n  if (data?.orderUpdate?.userErrors?.length) {\r\n    const userErrorMessages = data.orderUpdate.userErrors\r\n      .map((e) => `${e.field}: ${e.message}`)\r\n      .join(', ');\r\n    throw new Error(`Failed to update order note: ${userErrorMessages}`);\r\n  }\r\n  return data?.orderUpdate?.order?.note || '';\r\n}\r\n\r\nexport async function updateWarehouse({\r\n  warehouse,\r\n  orderId,\r\n}: {\r\n  warehouse: NovaPoshtaWarehouse;\r\n  orderId: string;\r\n}) {\r\n  console.log('\uD83D\uDE80 ~ warehouse:', warehouse);\r\n  console.log('\uD83D\uDE80 ~ orderId:', orderId);\r\n  const metafieldMutation = `#graphql\r\n            mutation UpdateMetafield($metafields: [MetafieldsSetInput!]!) {\r\n              metafieldsSet(metafields: $metafields) {\r\n                metafields {\r\n                  id\r\n                  value\r\n                }\r\n                userErrors {\r\n                  field\r\n                  message\r\n                }\r\n              }\r\n            }\r\n          `;\r\n  const variables = {\r\n    metafields: [\r\n      {\r\n        ownerId: orderId,\r\n        namespace: 'nova_poshta',\r\n        key: 'recepient_warehouse',\r\n        value: JSON.stringify(warehouse),\r\n        type: 'json',\r\n      },\r\n    ],\r\n  };\r\n  const response = await makeGraphQLQuery(metafieldMutation, variables);\r\n  return response;\r\n}\r\n\r\nasync function makeIPMessage() {\r\n  const response = await fetch('https://api.ipify.org?format=json');\r\n  const data = await response.json();\r\n  const ipMessage = data?.ip ? ` by ${data.ip}` : '';\r\n  return ipMessage;\r\n}\r\n\r\nexport interface OrderResponse {\r\n  nodes: {\r\n    id: string;\r\n    name: string;\r\n    createdAt: string;\r\n    phone: string;\r\n    tags: string[];\r\n    customer: {\r\n      firstName: string;\r\n      lastName: string;\r\n    };\r\n    shippingAddress: {\r\n      phone: string;\r\n      city: string;\r\n      address1: string;\r\n      firstName: string;\r\n      lastName: string;\r\n    };\r\n    lineItems: {\r\n      nodes: {\r\n        title: string;\r\n        unfulfilledQuantity: number;\r\n        discountedUnitPriceSet: {\r\n          shopMoney: {\r\n            amount: string;\r\n          };\r\n        };\r\n        variant: {\r\n          sku: string;\r\n          barcode: string;\r\n          inventoryItem: {\r\n            unitCost: {\r\n              amount: string;\r\n            };\r\n          };\r\n        };\r\n        product: {\r\n          id: string;\r\n          deltaMetafield: {\r\n            value: string;\r\n          } | null;\r\n          warrantyMetafield: {\r\n            value: string;\r\n          } | null;\r\n        };\r\n        customAttributes: {\r\n          key: string;\r\n          value: string;\r\n        }[];\r\n      }[];\r\n    };\r\n    paymentMetafield: {\r\n      value: string;\r\n    } | null;\r\n  }[];\r\n}\r\n\r\nasync function fetchVariantDetails(productId: string): Promise<any | null> {\r\n  const variantQuery = `#graphql\r\n      query GetVariantByProductId($id: ID!) {\r\n        product(id: $id) {\r\n          variants(first: 1) {\r\n            nodes {\r\n              sku\r\n              barcode\r\n              inventoryItem {\r\n                unitCost {\r\n                  amount\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }`;\r\n  try {\r\n    const { data, errors } = await makeGraphQLQuery<{\r\n      product: {\r\n        variants: {\r\n          nodes: {\r\n            sku: string;\r\n            barcode: string;\r\n            inventoryItem: {\r\n              unitCost: {\r\n                amount: string;\r\n              };\r\n            };\r\n          }[];\r\n        };\r\n      };\r\n    }>(variantQuery, {\r\n      id: productId,\r\n    });\r\n    if (errors) {\r\n      console.error('GraphQL errors fetching variant:', errors);\r\n      return null;\r\n    }\r\n    return data?.product?.variants?.nodes[0] || null;\r\n  } catch (error) {\r\n    console.error('Error fetching variant:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\nexport async function fetchOrdersData(\r\n  ids: string[]\r\n): Promise<OrderResponse['nodes'] | null> {\r\n  const query = `#graphql\r\n        query GetOrdersByIds($ids: [ID!]!) {\r\n          nodes(ids: $ids) {\r\n            ... on Order {\r\n              id\r\n              name\r\n              createdAt\r\n              phone\r\n              tags\r\n              customer {\r\n                firstName\r\n                lastName\r\n              }\r\n              shippingAddress {\r\n                phone\r\n                city\r\n                address1\r\n                firstName\r\n                lastName\r\n              }\r\n              lineItems(first: 10) {\r\n                nodes {\r\n                  title\r\n                  unfulfilledQuantity\r\n                  discountedUnitPriceSet {\r\n                    shopMoney {\r\n                      amount\r\n                    }\r\n                  }\r\n                  variant {\r\n                    sku\r\n                    barcode\r\n                    inventoryItem {\r\n                      unitCost {\r\n                        amount\r\n                      }\r\n                    }\r\n                  }\r\n                  product {\r\n                    id\r\n                    deltaMetafield: metafield(namespace: \"custom\", key: \"delta\") {\r\n                      value\r\n                    }\r\n                    warrantyMetafield: metafield(namespace: \"custom\", key: \"warranty\") {\r\n                      value\r\n                    }\r\n                  }\r\n                  customAttributes {\r\n                    key\r\n                    value\r\n                  }\r\n                }\r\n              }\r\n              paymentMetafield: metafield(namespace: \"custom\", key: \"payment_method\") {\r\n                value\r\n              }\r\n            }\r\n          }\r\n        }`;\r\n\r\n  try {\r\n    const { data, errors } = await makeGraphQLQuery<{\r\n      nodes: OrderResponse['nodes'];\r\n    }>(query, { ids });\r\n    if (errors) {\r\n      console.error('GraphQL errors fetching orders:', errors);\r\n      return null;\r\n    }\r\n\r\n    const orders = data?.nodes || null;\r\n    if (!orders) return null;\r\n\r\n    for (const order of orders) {\r\n      order.lineItems.nodes = order.lineItems.nodes.filter(\r\n        (item) => item.unfulfilledQuantity > 0\r\n      );\r\n    }\r\n\r\n    // For each order's line item, if variant is null (which is a known quirk), fetch variant details using product id.\r\n    for (const order of orders) {\r\n      for (const item of order.lineItems.nodes) {\r\n        if (!item.variant && item.product?.id) {\r\n          const variantDetails = await fetchVariantDetails(item.product.id);\r\n          if (variantDetails) {\r\n            item.variant = variantDetails;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return orders;\r\n  } catch (error) {\r\n    console.error('Error fetching orders:', error);\r\n    return null;\r\n  }\r\n}\r\n", "/**\r\n * Replaces placeholders in a template string with actual values from the data object.\r\n * @param {string} template - The template string containing placeholders (e.g., \"Order number: {{orderNumber}}\").\r\n * @param {object} data - An object containing key-value pairs for replacements (e.g., { orderNumber: \"12345\" }).\r\n * @returns {string} - The processed string with placeholders replaced.\r\n */\r\nexport const replacePlaceholders = (\r\n  template: string,\r\n  data: Record<string, string>\r\n): string => {\r\n  let result = template;\r\n\r\n  for (const key in data) {\r\n    const placeholder = `{{${key}}}`;\r\n    result = result.replace(new RegExp(placeholder, 'g'), data[key]);\r\n  }\r\n  return result;\r\n};\r\n", "export const SHOPIFY_APP_URL = `https://admin-action-block.gadget.app`;\r\n", "export default function validateAndFormatPhoneNumber(phone: string): string {\r\n  const cleaned = phone.replace(/\\D/g, '');\r\n\r\n  if (cleaned.length === 10 && cleaned.startsWith('0')) {\r\n    return `380${cleaned.slice(1)}`;\r\n  }\r\n  if (cleaned.length === 12 && cleaned.startsWith('380')) {\r\n    return cleaned;\r\n  }\r\n\r\n  throw new Error(\r\n    `Invalid phone number: ${phone}. Must be in the format 380XXXXXXXXX.`\r\n  );\r\n}\r\n", "import { SHOPIFY_APP_URL } from '../../../shared/data';\r\nimport validateAndFormatPhoneNumber from './validateAndFormatPhoneNumber';\r\n\r\ntype SmsResponse = {\r\n  status: string;\r\n  messageId: string;\r\n  error?: string;\r\n};\r\n\r\n/**\r\n * Sends an SMS message to the specified receiver.\r\n * @param {string} receiverNumber - The phone number of the receiver.\r\n * @param {string} messageText - The SMS text to send.\r\n * @returns {Promise<SmsResponse>} - The response from the server with details about the sent message.\r\n */\r\nexport const sendSmsMessage = async (\r\n  receiverNumber: string,\r\n  messageText: string\r\n): Promise<SmsResponse> => {\r\n  try {\r\n    const formattedNumber = validateAndFormatPhoneNumber(receiverNumber);\r\n    console.log('Formatted number:', formattedNumber);\r\n\r\n    const response = await fetch(`${SHOPIFY_APP_URL}/send-sms`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        to: formattedNumber,\r\n        message: messageText,\r\n      }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      console.error('Error response from server:', errorData);\r\n\r\n      return {\r\n        status: 'error',\r\n        messageId: '',\r\n        error: errorData.error || 'Failed to send SMS',\r\n      };\r\n    }\r\n\r\n    const data = await response.json();\r\n    console.log('Success response data:', data);\r\n\r\n    return {\r\n      status: data.status || 'success',\r\n      messageId: data.messageId || '',\r\n      error: data.error,\r\n    };\r\n  } catch (error: any) {\r\n    console.error('Exception caught while sending SMS:', error);\r\n\r\n    return {\r\n      status: 'error',\r\n      messageId: '',\r\n      error:\r\n        'An unexpected error occurred: ' + (error.message || 'Unknown error'),\r\n    };\r\n  }\r\n};\r\n", "import type { GadgetConnection } from \"./GadgetConnection.js\";\nimport type { GadgetTransaction } from \"./GadgetTransaction.js\";\nimport type { InternalModelManager } from \"./InternalModelManager.js\";\n\nexport const $modelRelationships = Symbol.for(\"gadget/modelRelationships\");\n\nexport type InternalModelManagerNamespace = { [key: string]: InternalModelManager | InternalModelManagerNamespace };\n\n/**\n * An instance of any Gadget app's API client object\n */\nexport interface AnyClient {\n  connection: GadgetConnection;\n  query(graphQL: string, variables?: Record<string, any>): Promise<any>;\n  mutate(graphQL: string, variables?: Record<string, any>): Promise<any>;\n  transaction<T>(callback: (transaction: GadgetTransaction) => Promise<T>): Promise<T>;\n  internal: InternalModelManagerNamespace;\n  apiClientCoreVersion?: string;\n  [$modelRelationships]?: { [modelName: string]: { [apiIdentifier: string]: { type: string; model: string } } };\n}\n\n/**\n * Checks if the given object is an instance of any Gadget app's generated JS client object\n */\nexport const isGadgetClient = (client: any): client is AnyClient => {\n  return client && \"connection\" in client && client.connection && \"endpoint\" in client.connection;\n};\n", "var teardownPlaceholder = () => {};\n\nvar e = teardownPlaceholder;\n\nfunction start(e) {\n  return {\n    tag: 0,\n    0: e\n  };\n}\n\nfunction push(e) {\n  return {\n    tag: 1,\n    0: e\n  };\n}\n\nvar asyncIteratorSymbol = () => \"function\" == typeof Symbol && Symbol.asyncIterator || \"@@asyncIterator\";\n\nvar observableSymbol = () => \"function\" == typeof Symbol && Symbol.observable || \"@@observable\";\n\nvar identity = e => e;\n\nfunction buffer(r) {\n  return t => i => {\n    var a = [];\n    var f = e;\n    var n = e;\n    var s = !1;\n    var l = !1;\n    t((e => {\n      if (l) {} else if (0 === e) {\n        l = !0;\n        n(1);\n        if (a.length) {\n          i(push(a));\n        }\n        i(0);\n      } else if (0 === e.tag) {\n        f = e[0];\n        r((e => {\n          if (l) {} else if (0 === e) {\n            l = !0;\n            f(1);\n            if (a.length) {\n              i(push(a));\n            }\n            i(0);\n          } else if (0 === e.tag) {\n            n = e[0];\n          } else if (a.length) {\n            var r = push(a);\n            a = [];\n            i(r);\n          }\n        }));\n      } else {\n        a.push(e[0]);\n        if (!s) {\n          s = !0;\n          f(0);\n          n(0);\n        } else {\n          s = !1;\n        }\n      }\n    }));\n    i(start((e => {\n      if (1 === e && !l) {\n        l = !0;\n        f(1);\n        n(1);\n      } else if (!l && !s) {\n        s = !0;\n        f(0);\n        n(0);\n      }\n    })));\n  };\n}\n\nfunction concatMap(r) {\n  return t => i => {\n    var a = [];\n    var f = e;\n    var n = e;\n    var s = !1;\n    var l = !1;\n    var u = !1;\n    var o = !1;\n    function applyInnerSource(e) {\n      u = !0;\n      e((e => {\n        if (0 === e) {\n          if (u) {\n            u = !1;\n            if (a.length) {\n              applyInnerSource(r(a.shift()));\n            } else if (o) {\n              i(0);\n            } else if (!s) {\n              s = !0;\n              f(0);\n            }\n          }\n        } else if (0 === e.tag) {\n          l = !1;\n          (n = e[0])(0);\n        } else if (u) {\n          i(e);\n          if (l) {\n            l = !1;\n          } else {\n            n(0);\n          }\n        }\n      }));\n    }\n    t((e => {\n      if (o) {} else if (0 === e) {\n        o = !0;\n        if (!u && !a.length) {\n          i(0);\n        }\n      } else if (0 === e.tag) {\n        f = e[0];\n      } else {\n        s = !1;\n        if (u) {\n          a.push(e[0]);\n        } else {\n          applyInnerSource(r(e[0]));\n        }\n      }\n    }));\n    i(start((e => {\n      if (1 === e) {\n        if (!o) {\n          o = !0;\n          f(1);\n        }\n        if (u) {\n          u = !1;\n          n(1);\n        }\n      } else {\n        if (!o && !s) {\n          s = !0;\n          f(0);\n        }\n        if (u && !l) {\n          l = !0;\n          n(0);\n        }\n      }\n    })));\n  };\n}\n\nfunction concatAll(e) {\n  return concatMap(identity)(e);\n}\n\nfunction concat(e) {\n  return concatAll(r(e));\n}\n\nfunction filter(r) {\n  return t => i => {\n    var a = e;\n    t((e => {\n      if (0 === e) {\n        i(0);\n      } else if (0 === e.tag) {\n        a = e[0];\n        i(e);\n      } else if (!r(e[0])) {\n        a(0);\n      } else {\n        i(e);\n      }\n    }));\n  };\n}\n\nfunction map(e) {\n  return r => t => r((r => {\n    if (0 === r || 0 === r.tag) {\n      t(r);\n    } else {\n      t(push(e(r[0])));\n    }\n  }));\n}\n\nfunction mergeMap(r) {\n  return t => i => {\n    var a = [];\n    var f = e;\n    var n = !1;\n    var s = !1;\n    t((t => {\n      if (s) {} else if (0 === t) {\n        s = !0;\n        if (!a.length) {\n          i(0);\n        }\n      } else if (0 === t.tag) {\n        f = t[0];\n      } else {\n        n = !1;\n        !function applyInnerSource(r) {\n          var t = e;\n          r((e => {\n            if (0 === e) {\n              if (a.length) {\n                var r = a.indexOf(t);\n                if (r > -1) {\n                  (a = a.slice()).splice(r, 1);\n                }\n                if (!a.length) {\n                  if (s) {\n                    i(0);\n                  } else if (!n) {\n                    n = !0;\n                    f(0);\n                  }\n                }\n              }\n            } else if (0 === e.tag) {\n              a.push(t = e[0]);\n              t(0);\n            } else if (a.length) {\n              i(e);\n              t(0);\n            }\n          }));\n        }(r(t[0]));\n        if (!n) {\n          n = !0;\n          f(0);\n        }\n      }\n    }));\n    i(start((e => {\n      if (1 === e) {\n        if (!s) {\n          s = !0;\n          f(1);\n        }\n        for (var r = 0, t = a, i = a.length; r < i; r++) {\n          t[r](1);\n        }\n        a.length = 0;\n      } else {\n        if (!s && !n) {\n          n = !0;\n          f(0);\n        } else {\n          n = !1;\n        }\n        for (var l = 0, u = a, o = a.length; l < o; l++) {\n          u[l](0);\n        }\n      }\n    })));\n  };\n}\n\nfunction mergeAll(e) {\n  return mergeMap(identity)(e);\n}\n\nfunction merge(e) {\n  return mergeAll(r(e));\n}\n\nfunction onEnd(e) {\n  return r => t => {\n    var i = !1;\n    r((r => {\n      if (i) {} else if (0 === r) {\n        i = !0;\n        t(0);\n        e();\n      } else if (0 === r.tag) {\n        var a = r[0];\n        t(start((r => {\n          if (1 === r) {\n            i = !0;\n            a(1);\n            e();\n          } else {\n            a(r);\n          }\n        })));\n      } else {\n        t(r);\n      }\n    }));\n  };\n}\n\nfunction onPush(e) {\n  return r => t => {\n    var i = !1;\n    r((r => {\n      if (i) {} else if (0 === r) {\n        i = !0;\n        t(0);\n      } else if (0 === r.tag) {\n        var a = r[0];\n        t(start((e => {\n          if (1 === e) {\n            i = !0;\n          }\n          a(e);\n        })));\n      } else {\n        e(r[0]);\n        t(r);\n      }\n    }));\n  };\n}\n\nfunction onStart(e) {\n  return r => t => r((r => {\n    if (0 === r) {\n      t(0);\n    } else if (0 === r.tag) {\n      t(r);\n      e();\n    } else {\n      t(r);\n    }\n  }));\n}\n\nfunction sample(r) {\n  return t => i => {\n    var a = e;\n    var f = e;\n    var n;\n    var s = !1;\n    var l = !1;\n    t((e => {\n      if (l) {} else if (0 === e) {\n        l = !0;\n        f(1);\n        i(0);\n      } else if (0 === e.tag) {\n        a = e[0];\n      } else {\n        n = e[0];\n        if (!s) {\n          s = !0;\n          f(0);\n          a(0);\n        } else {\n          s = !1;\n        }\n      }\n    }));\n    r((e => {\n      if (l) {} else if (0 === e) {\n        l = !0;\n        a(1);\n        i(0);\n      } else if (0 === e.tag) {\n        f = e[0];\n      } else if (void 0 !== n) {\n        var r = push(n);\n        n = void 0;\n        i(r);\n      }\n    }));\n    i(start((e => {\n      if (1 === e && !l) {\n        l = !0;\n        a(1);\n        f(1);\n      } else if (!l && !s) {\n        s = !0;\n        a(0);\n        f(0);\n      }\n    })));\n  };\n}\n\nfunction scan(e, r) {\n  return t => i => {\n    var a = r;\n    t((r => {\n      if (0 === r) {\n        i(0);\n      } else if (0 === r.tag) {\n        i(r);\n      } else {\n        i(push(a = e(a, r[0])));\n      }\n    }));\n  };\n}\n\nfunction share(r) {\n  var t = [];\n  var i = e;\n  var a = !1;\n  return e => {\n    t.push(e);\n    if (1 === t.length) {\n      r((e => {\n        if (0 === e) {\n          for (var r = 0, f = t, n = t.length; r < n; r++) {\n            f[r](0);\n          }\n          t.length = 0;\n        } else if (0 === e.tag) {\n          i = e[0];\n        } else {\n          a = !1;\n          for (var s = 0, l = t, u = t.length; s < u; s++) {\n            l[s](e);\n          }\n        }\n      }));\n    }\n    e(start((r => {\n      if (1 === r) {\n        var f = t.indexOf(e);\n        if (f > -1) {\n          (t = t.slice()).splice(f, 1);\n        }\n        if (!t.length) {\n          i(1);\n        }\n      } else if (!a) {\n        a = !0;\n        i(0);\n      }\n    })));\n  };\n}\n\nfunction skip(r) {\n  return t => i => {\n    var a = e;\n    var f = r;\n    t((e => {\n      if (0 === e) {\n        i(0);\n      } else if (0 === e.tag) {\n        a = e[0];\n        i(e);\n      } else if (f-- > 0) {\n        a(0);\n      } else {\n        i(e);\n      }\n    }));\n  };\n}\n\nfunction skipUntil(r) {\n  return t => i => {\n    var a = e;\n    var f = e;\n    var n = !0;\n    var s = !1;\n    var l = !1;\n    t((e => {\n      if (l) {} else if (0 === e) {\n        l = !0;\n        if (n) {\n          f(1);\n        }\n        i(0);\n      } else if (0 === e.tag) {\n        a = e[0];\n        r((e => {\n          if (0 === e) {\n            if (n) {\n              l = !0;\n              a(1);\n            }\n          } else if (0 === e.tag) {\n            (f = e[0])(0);\n          } else {\n            n = !1;\n            f(1);\n          }\n        }));\n      } else if (!n) {\n        s = !1;\n        i(e);\n      } else if (!s) {\n        s = !0;\n        a(0);\n        f(0);\n      } else {\n        s = !1;\n      }\n    }));\n    i(start((e => {\n      if (1 === e && !l) {\n        l = !0;\n        a(1);\n        if (n) {\n          f(1);\n        }\n      } else if (!l && !s) {\n        s = !0;\n        if (n) {\n          f(0);\n        }\n        a(0);\n      }\n    })));\n  };\n}\n\nfunction skipWhile(r) {\n  return t => i => {\n    var a = e;\n    var f = !0;\n    t((e => {\n      if (0 === e) {\n        i(0);\n      } else if (0 === e.tag) {\n        a = e[0];\n        i(e);\n      } else if (f) {\n        if (r(e[0])) {\n          a(0);\n        } else {\n          f = !1;\n          i(e);\n        }\n      } else {\n        i(e);\n      }\n    }));\n  };\n}\n\nfunction switchMap(r) {\n  return t => i => {\n    var a = e;\n    var f = e;\n    var n = !1;\n    var s = !1;\n    var l = !1;\n    var u = !1;\n    t((t => {\n      if (u) {} else if (0 === t) {\n        u = !0;\n        if (!l) {\n          i(0);\n        }\n      } else if (0 === t.tag) {\n        a = t[0];\n      } else {\n        if (l) {\n          f(1);\n          f = e;\n        }\n        if (!n) {\n          n = !0;\n          a(0);\n        } else {\n          n = !1;\n        }\n        !function applyInnerSource(e) {\n          l = !0;\n          e((e => {\n            if (!l) {} else if (0 === e) {\n              l = !1;\n              if (u) {\n                i(0);\n              } else if (!n) {\n                n = !0;\n                a(0);\n              }\n            } else if (0 === e.tag) {\n              s = !1;\n              (f = e[0])(0);\n            } else {\n              i(e);\n              if (!s) {\n                f(0);\n              } else {\n                s = !1;\n              }\n            }\n          }));\n        }(r(t[0]));\n      }\n    }));\n    i(start((e => {\n      if (1 === e) {\n        if (!u) {\n          u = !0;\n          a(1);\n        }\n        if (l) {\n          l = !1;\n          f(1);\n        }\n      } else {\n        if (!u && !n) {\n          n = !0;\n          a(0);\n        }\n        if (l && !s) {\n          s = !0;\n          f(0);\n        }\n      }\n    })));\n  };\n}\n\nfunction switchAll(e) {\n  return switchMap(identity)(e);\n}\n\nfunction take(r) {\n  return t => i => {\n    var a = e;\n    var f = !1;\n    var n = 0;\n    t((e => {\n      if (f) {} else if (0 === e) {\n        f = !0;\n        i(0);\n      } else if (0 === e.tag) {\n        if (r <= 0) {\n          f = !0;\n          i(0);\n          e[0](1);\n        } else {\n          a = e[0];\n        }\n      } else if (n++ < r) {\n        i(e);\n        if (!f && n >= r) {\n          f = !0;\n          i(0);\n          a(1);\n        }\n      } else {\n        i(e);\n      }\n    }));\n    i(start((e => {\n      if (1 === e && !f) {\n        f = !0;\n        a(1);\n      } else if (0 === e && !f && n < r) {\n        a(0);\n      }\n    })));\n  };\n}\n\nfunction takeLast(t) {\n  return i => a => {\n    var f = [];\n    var n = e;\n    i((e => {\n      if (0 === e) {\n        r(f)(a);\n      } else if (0 === e.tag) {\n        if (t <= 0) {\n          e[0](1);\n          r(f)(a);\n        } else {\n          (n = e[0])(0);\n        }\n      } else {\n        if (f.length >= t && t) {\n          f.shift();\n        }\n        f.push(e[0]);\n        n(0);\n      }\n    }));\n  };\n}\n\nfunction takeUntil(r) {\n  return t => i => {\n    var a = e;\n    var f = e;\n    var n = !1;\n    t((e => {\n      if (n) {} else if (0 === e) {\n        n = !0;\n        f(1);\n        i(0);\n      } else if (0 === e.tag) {\n        a = e[0];\n        r((e => {\n          if (0 === e) {} else if (0 === e.tag) {\n            (f = e[0])(0);\n          } else {\n            n = !0;\n            f(1);\n            a(1);\n            i(0);\n          }\n        }));\n      } else {\n        i(e);\n      }\n    }));\n    i(start((e => {\n      if (1 === e && !n) {\n        n = !0;\n        a(1);\n        f(1);\n      } else if (!n) {\n        a(0);\n      }\n    })));\n  };\n}\n\nfunction takeWhile(r, t) {\n  return i => a => {\n    var f = e;\n    var n = !1;\n    i((e => {\n      if (n) {} else if (0 === e) {\n        n = !0;\n        a(0);\n      } else if (0 === e.tag) {\n        f = e[0];\n        a(e);\n      } else if (!r(e[0])) {\n        n = !0;\n        if (t) {\n          a(e);\n        }\n        a(0);\n        f(1);\n      } else {\n        a(e);\n      }\n    }));\n  };\n}\n\nfunction debounce(e) {\n  return r => t => {\n    var i;\n    var a = !1;\n    var f = !1;\n    r((r => {\n      if (f) {} else if (0 === r) {\n        f = !0;\n        if (i) {\n          a = !0;\n        } else {\n          t(0);\n        }\n      } else if (0 === r.tag) {\n        var n = r[0];\n        t(start((e => {\n          if (1 === e && !f) {\n            f = !0;\n            a = !1;\n            if (i) {\n              clearTimeout(i);\n            }\n            n(1);\n          } else if (!f) {\n            n(0);\n          }\n        })));\n      } else {\n        if (i) {\n          clearTimeout(i);\n        }\n        i = setTimeout((() => {\n          i = void 0;\n          t(r);\n          if (a) {\n            t(0);\n          }\n        }), e(r[0]));\n      }\n    }));\n  };\n}\n\nfunction delay(e) {\n  return r => t => {\n    var i = 0;\n    r((r => {\n      if (0 !== r && 0 === r.tag) {\n        t(r);\n      } else {\n        i++;\n        setTimeout((() => {\n          if (i) {\n            i--;\n            t(r);\n          }\n        }), e);\n      }\n    }));\n  };\n}\n\nfunction throttle(e) {\n  return r => t => {\n    var i = !1;\n    var a;\n    r((r => {\n      if (0 === r) {\n        if (a) {\n          clearTimeout(a);\n        }\n        t(0);\n      } else if (0 === r.tag) {\n        var f = r[0];\n        t(start((e => {\n          if (1 === e) {\n            if (a) {\n              clearTimeout(a);\n            }\n            f(1);\n          } else {\n            f(0);\n          }\n        })));\n      } else if (!i) {\n        i = !0;\n        if (a) {\n          clearTimeout(a);\n        }\n        a = setTimeout((() => {\n          a = void 0;\n          i = !1;\n        }), e(r[0]));\n        t(r);\n      }\n    }));\n  };\n}\n\nfunction lazy(e) {\n  return r => e()(r);\n}\n\nfunction fromAsyncIterable(e) {\n  return r => {\n    var t = e[asyncIteratorSymbol()] && e[asyncIteratorSymbol()]() || e;\n    var i = !1;\n    var a = !1;\n    var f = !1;\n    var n;\n    r(start((async e => {\n      if (1 === e) {\n        i = !0;\n        if (t.return) {\n          t.return();\n        }\n      } else if (a) {\n        f = !0;\n      } else {\n        for (f = a = !0; f && !i; ) {\n          if ((n = await t.next()).done) {\n            i = !0;\n            if (t.return) {\n              await t.return();\n            }\n            r(0);\n          } else {\n            try {\n              f = !1;\n              r(push(n.value));\n            } catch (e) {\n              if (t.throw) {\n                if (i = !!(await t.throw(e)).done) {\n                  r(0);\n                }\n              } else {\n                throw e;\n              }\n            }\n          }\n        }\n        a = !1;\n      }\n    })));\n  };\n}\n\nfunction fromIterable(e) {\n  if (e[Symbol.asyncIterator]) {\n    return fromAsyncIterable(e);\n  }\n  return r => {\n    var t = e[Symbol.iterator]();\n    var i = !1;\n    var a = !1;\n    var f = !1;\n    var n;\n    r(start((e => {\n      if (1 === e) {\n        i = !0;\n        if (t.return) {\n          t.return();\n        }\n      } else if (a) {\n        f = !0;\n      } else {\n        for (f = a = !0; f && !i; ) {\n          if ((n = t.next()).done) {\n            i = !0;\n            if (t.return) {\n              t.return();\n            }\n            r(0);\n          } else {\n            try {\n              f = !1;\n              r(push(n.value));\n            } catch (e) {\n              if (t.throw) {\n                if (i = !!t.throw(e).done) {\n                  r(0);\n                }\n              } else {\n                throw e;\n              }\n            }\n          }\n        }\n        a = !1;\n      }\n    })));\n  };\n}\n\nvar r = fromIterable;\n\nfunction fromValue(e) {\n  return r => {\n    var t = !1;\n    r(start((i => {\n      if (1 === i) {\n        t = !0;\n      } else if (!t) {\n        t = !0;\n        r(push(e));\n        r(0);\n      }\n    })));\n  };\n}\n\nfunction make(e) {\n  return r => {\n    var t = !1;\n    var i = e({\n      next(e) {\n        if (!t) {\n          r(push(e));\n        }\n      },\n      complete() {\n        if (!t) {\n          t = !0;\n          r(0);\n        }\n      }\n    });\n    r(start((e => {\n      if (1 === e && !t) {\n        t = !0;\n        i();\n      }\n    })));\n  };\n}\n\nfunction makeSubject() {\n  var e;\n  var r;\n  return {\n    source: share(make((t => {\n      e = t.next;\n      r = t.complete;\n      return teardownPlaceholder;\n    }))),\n    next(r) {\n      if (e) {\n        e(r);\n      }\n    },\n    complete() {\n      if (r) {\n        r();\n      }\n    }\n  };\n}\n\nvar empty = e => {\n  var r = !1;\n  e(start((t => {\n    if (1 === t) {\n      r = !0;\n    } else if (!r) {\n      r = !0;\n      e(0);\n    }\n  })));\n};\n\nvar never = r => {\n  r(start(e));\n};\n\nfunction interval(e) {\n  return make((r => {\n    var t = 0;\n    var i = setInterval((() => r.next(t++)), e);\n    return () => clearInterval(i);\n  }));\n}\n\nfunction fromDomEvent(e, r) {\n  return make((t => {\n    e.addEventListener(r, t.next);\n    return () => e.removeEventListener(r, t.next);\n  }));\n}\n\nfunction fromPromise(e) {\n  return make((r => {\n    e.then((e => {\n      Promise.resolve(e).then((() => {\n        r.next(e);\n        r.complete();\n      }));\n    }));\n    return teardownPlaceholder;\n  }));\n}\n\nfunction subscribe(r) {\n  return t => {\n    var i = e;\n    var a = !1;\n    t((e => {\n      if (0 === e) {\n        a = !0;\n      } else if (0 === e.tag) {\n        (i = e[0])(0);\n      } else if (!a) {\n        r(e[0]);\n        i(0);\n      }\n    }));\n    return {\n      unsubscribe() {\n        if (!a) {\n          a = !0;\n          i(1);\n        }\n      }\n    };\n  };\n}\n\nfunction forEach(e) {\n  return r => {\n    subscribe(e)(r);\n  };\n}\n\nfunction publish(e) {\n  subscribe((e => {}))(e);\n}\n\nvar t = {\n  done: !0\n};\n\nvar toAsyncIterable = r => {\n  var i = [];\n  var a = !1;\n  var f = !1;\n  var n = !1;\n  var s = e;\n  var l;\n  return {\n    async next() {\n      if (!f) {\n        f = !0;\n        r((e => {\n          if (a) {} else if (0 === e) {\n            if (l) {\n              l = l(t);\n            }\n            a = !0;\n          } else if (0 === e.tag) {\n            n = !0;\n            (s = e[0])(0);\n          } else {\n            n = !1;\n            if (l) {\n              l = l({\n                value: e[0],\n                done: !1\n              });\n            } else {\n              i.push(e[0]);\n            }\n          }\n        }));\n      }\n      if (a && !i.length) {\n        return t;\n      } else if (!a && !n && i.length <= 1) {\n        n = !0;\n        s(0);\n      }\n      return i.length ? {\n        value: i.shift(),\n        done: !1\n      } : new Promise((e => l = e));\n    },\n    async return() {\n      if (!a) {\n        l = s(1);\n      }\n      a = !0;\n      return t;\n    },\n    [asyncIteratorSymbol()]() {\n      return this;\n    }\n  };\n};\n\nfunction toArray(r) {\n  var t = [];\n  var i = e;\n  var a = !1;\n  r((e => {\n    if (0 === e) {\n      a = !0;\n    } else if (0 === e.tag) {\n      (i = e[0])(0);\n    } else {\n      t.push(e[0]);\n      i(0);\n    }\n  }));\n  if (!a) {\n    i(1);\n  }\n  return t;\n}\n\nfunction toPromise(r) {\n  return new Promise((t => {\n    var i = e;\n    var a;\n    r((e => {\n      if (0 === e) {\n        Promise.resolve(a).then(t);\n      } else if (0 === e.tag) {\n        (i = e[0])(0);\n      } else {\n        a = e[0];\n        i(0);\n      }\n    }));\n  }));\n}\n\nfunction zip(r) {\n  var t = Object.keys(r).length;\n  return i => {\n    var a = new Set;\n    var f = Array.isArray(r) ? new Array(t).fill(e) : {};\n    var n = Array.isArray(r) ? new Array(t) : {};\n    var s = !1;\n    var l = !1;\n    var u = !1;\n    var o = 0;\n    var loop = function(v) {\n      r[v]((c => {\n        if (0 === c) {\n          if (o >= t - 1) {\n            u = !0;\n            i(0);\n          } else {\n            o++;\n          }\n        } else if (0 === c.tag) {\n          f[v] = c[0];\n        } else if (!u) {\n          n[v] = c[0];\n          a.add(v);\n          if (!s && a.size < t) {\n            if (!l) {\n              for (var h in r) {\n                if (!a.has(h)) {\n                  (f[h] || e)(0);\n                }\n              }\n            } else {\n              l = !1;\n            }\n          } else {\n            s = !0;\n            l = !1;\n            i(push(Array.isArray(n) ? n.slice() : {\n              ...n\n            }));\n          }\n        }\n      }));\n    };\n    for (var v in r) {\n      loop(v);\n    }\n    i(start((e => {\n      if (u) {} else if (1 === e) {\n        u = !0;\n        for (var r in f) {\n          f[r](1);\n        }\n      } else if (!l) {\n        l = !0;\n        for (var t in f) {\n          f[t](0);\n        }\n      }\n    })));\n  };\n}\n\nfunction combine(...e) {\n  return zip(e);\n}\n\nfunction fromObservable(e) {\n  return r => {\n    var t = (e[observableSymbol()] ? e[observableSymbol()]() : e).subscribe({\n      next(e) {\n        r(push(e));\n      },\n      complete() {\n        r(0);\n      },\n      error(e) {\n        throw e;\n      }\n    });\n    r(start((e => {\n      if (1 === e) {\n        t.unsubscribe();\n      }\n    })));\n  };\n}\n\nfunction toObservable(r) {\n  return {\n    subscribe(t, i, a) {\n      var f = \"object\" == typeof t ? t : {\n        next: t,\n        error: i,\n        complete: a\n      };\n      var n = e;\n      var s = !1;\n      r((e => {\n        if (s) {} else if (0 === e) {\n          s = !0;\n          if (f.complete) {\n            f.complete();\n          }\n        } else if (0 === e.tag) {\n          (n = e[0])(0);\n        } else {\n          f.next(e[0]);\n          n(0);\n        }\n      }));\n      var l = {\n        closed: !1,\n        unsubscribe() {\n          l.closed = !0;\n          s = !0;\n          n(1);\n        }\n      };\n      return l;\n    },\n    [observableSymbol()]() {\n      return this;\n    }\n  };\n}\n\nfunction fromCallbag(e) {\n  return r => {\n    e(0, ((e, t) => {\n      if (0 === e) {\n        r(start((e => {\n          t(e + 1);\n        })));\n      } else if (1 === e) {\n        r(push(t));\n      } else {\n        r(0);\n      }\n    }));\n  };\n}\n\nfunction toCallbag(e) {\n  return (r, t) => {\n    if (0 === r) {\n      e((e => {\n        if (0 === e) {\n          t(2);\n        } else if (0 === e.tag) {\n          t(0, (r => {\n            if (r < 3) {\n              e[0](r - 1);\n            }\n          }));\n        } else {\n          t(1, e[0]);\n        }\n      }));\n    }\n  };\n}\n\nvar pipe = (...e) => {\n  var r = e[0];\n  for (var t = 1, i = e.length; t < i; t++) {\n    r = e[t](r);\n  }\n  return r;\n};\n\nexport { buffer, combine, concat, concatAll, concatMap, debounce, delay, empty, filter, mergeAll as flatten, forEach, r as fromArray, fromAsyncIterable, fromCallbag, fromDomEvent, fromIterable, fromObservable, fromPromise, fromValue, interval, lazy, make, makeSubject, map, merge, mergeAll, mergeMap, never, onEnd, onPush, onStart, pipe, publish, sample, scan, share, skip, skipUntil, skipWhile, subscribe, switchAll, switchMap, take, takeLast, takeUntil, takeWhile, onPush as tap, throttle, toArray, toAsyncIterable, toCallbag, toObservable, toPromise, zip };\n//# sourceMappingURL=wonka.mjs.map\n", "export const Kind = {\n  NAME: 'Name',\n  DOCUMENT: 'Document',\n  OPERATION_DEFINITION: 'OperationDefinition',\n  VARIABLE_DEFINITION: 'VariableDefinition',\n  SELECTION_SET: 'SelectionSet',\n  FIELD: 'Field',\n  ARGUMENT: 'Argument',\n  FRAGMENT_SPREAD: 'FragmentSpread',\n  INLINE_FRAGMENT: 'InlineFragment',\n  FRAGMENT_DEFINITION: 'FragmentDefinition',\n  VARIABLE: 'Variable',\n  INT: 'IntValue',\n  FLOAT: 'FloatValue',\n  STRING: 'StringValue',\n  BOOLEAN: 'BooleanValue',\n  NULL: 'NullValue',\n  ENUM: 'EnumValue',\n  LIST: 'ListValue',\n  OBJECT: 'ObjectValue',\n  OBJECT_FIELD: 'ObjectField',\n  DIRECTIVE: 'Directive',\n  NAMED_TYPE: 'NamedType',\n  LIST_TYPE: 'ListType',\n  NON_NULL_TYPE: 'NonNullType',\n\n  /*\n  SCHEMA_DEFINITION: 'SchemaDefinition',\n  OPERATION_TYPE_DEFINITION: 'OperationTypeDefinition',\n  SCALAR_TYPE_DEFINITION: 'ScalarTypeDefinition',\n  OBJECT_TYPE_DEFINITION: 'ObjectTypeDefinition',\n  FIELD_DEFINITION: 'FieldDefinition',\n  INPUT_VALUE_DEFINITION: 'InputValueDefinition',\n  INTERFACE_TYPE_DEFINITION: 'InterfaceTypeDefinition',\n  UNION_TYPE_DEFINITION: 'UnionTypeDefinition',\n  ENUM_TYPE_DEFINITION: 'EnumTypeDefinition',\n  ENUM_VALUE_DEFINITION: 'EnumValueDefinition',\n  INPUT_OBJECT_TYPE_DEFINITION: 'InputObjectTypeDefinition',\n  DIRECTIVE_DEFINITION: 'DirectiveDefinition',\n  SCHEMA_EXTENSION: 'SchemaExtension',\n  SCALAR_TYPE_EXTENSION: 'ScalarTypeExtension',\n  OBJECT_TYPE_EXTENSION: 'ObjectTypeExtension',\n  INTERFACE_TYPE_EXTENSION: 'InterfaceTypeExtension',\n  UNION_TYPE_EXTENSION: 'UnionTypeExtension',\n  ENUM_TYPE_EXTENSION: 'EnumTypeExtension',\n  INPUT_OBJECT_TYPE_EXTENSION: 'InputObjectTypeExtension',\n  */\n};\n\nexport const OperationTypeNode = {\n  QUERY: 'query',\n  MUTATION: 'mutation',\n  SUBSCRIPTION: 'subscription',\n};\n", "import type { Maybe, Extensions, Source } from './types';\nimport type { ASTNode } from './ast';\n\nexport class GraphQLError extends Error {\n  readonly locations: ReadonlyArray<any> | undefined;\n  readonly path: ReadonlyArray<string | number> | undefined;\n  readonly nodes: ReadonlyArray<any> | undefined;\n  readonly source: Source | undefined;\n  readonly positions: ReadonlyArray<number> | undefined;\n  readonly originalError: Error | undefined;\n  readonly extensions: Extensions;\n\n  constructor(\n    message: string,\n    nodes?: ReadonlyArray<ASTNode> | ASTNode | null,\n    source?: Maybe<Source>,\n    positions?: Maybe<ReadonlyArray<number>>,\n    path?: Maybe<ReadonlyArray<string | number>>,\n    originalError?: Maybe<Error>,\n    extensions?: Maybe<Extensions>\n  ) {\n    super(message);\n\n    this.name = 'GraphQLError';\n    this.message = message;\n\n    if (path) this.path = path;\n    if (nodes) this.nodes = (Array.isArray(nodes) ? nodes : [nodes]) as ASTNode[];\n    if (source) this.source = source;\n    if (positions) this.positions = positions;\n    if (originalError) this.originalError = originalError;\n\n    let _extensions = extensions;\n    if (!_extensions && originalError) {\n      const originalExtensions = (originalError as any).extensions;\n      if (originalExtensions && typeof originalExtensions === 'object') {\n        _extensions = originalExtensions;\n      }\n    }\n\n    this.extensions = _extensions || {};\n  }\n\n  toJSON(): any {\n    return { ...this, message: this.message };\n  }\n\n  toString(): string {\n    return this.message;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return 'GraphQLError';\n  }\n}\n", "/**\n * This is a spec-compliant implementation of a GraphQL query language parser,\n * up-to-date with the October 2021 Edition. Unlike the reference implementation\n * in graphql.js it will only parse the query language, but not the schema\n * language.\n */\nimport type { Kind, OperationTypeNode } from './kind';\nimport { GraphQLError } from './error';\nimport type { Source } from './types';\nimport type * as ast from './ast';\n\nlet input: string;\nlet idx: number;\n\nfunction error(kind: string) {\n  return new GraphQLError(`Syntax Error: Unexpected token at ${idx} in ${kind}`);\n}\n\nfunction advance(pattern: RegExp) {\n  pattern.lastIndex = idx;\n  if (pattern.test(input)) {\n    const match = input.slice(idx, (idx = pattern.lastIndex));\n    return match;\n  }\n}\n\nconst leadingRe = / +(?=[^\\s])/y;\nfunction blockString(string: string) {\n  const lines = string.split('\\n');\n  let out = '';\n  let commonIndent = 0;\n  let firstNonEmptyLine = 0;\n  let lastNonEmptyLine = lines.length - 1;\n  for (let i = 0; i < lines.length; i++) {\n    leadingRe.lastIndex = 0;\n    if (leadingRe.test(lines[i])) {\n      if (i && (!commonIndent || leadingRe.lastIndex < commonIndent))\n        commonIndent = leadingRe.lastIndex;\n      firstNonEmptyLine = firstNonEmptyLine || i;\n      lastNonEmptyLine = i;\n    }\n  }\n  for (let i = firstNonEmptyLine; i <= lastNonEmptyLine; i++) {\n    if (i !== firstNonEmptyLine) out += '\\n';\n    out += lines[i].slice(commonIndent).replace(/\\\\\"\"\"/g, '\"\"\"');\n  }\n  return out;\n}\n\n// Note: This is equivalent to: /(?:[\\s,]*|#[^\\n\\r]*)*/y\nfunction ignored() {\n  for (\n    let char = input.charCodeAt(idx++) | 0;\n    char === 9 /*'\\t'*/ ||\n    char === 10 /*'\\n'*/ ||\n    char === 13 /*'\\r'*/ ||\n    char === 32 /*' '*/ ||\n    char === 35 /*'#'*/ ||\n    char === 44 /*','*/ ||\n    char === 65279 /*'\\ufeff'*/;\n    char = input.charCodeAt(idx++) | 0\n  ) {\n    if (char === 35 /*'#'*/) while ((char = input.charCodeAt(idx++)) !== 10 && char !== 13);\n  }\n  idx--;\n}\n\nconst nameRe = /[_A-Za-z]\\w*/y;\n\n// NOTE: This should be compressed by our build step\n// This merges all possible value parsing into one regular expression\nconst valueRe = new RegExp(\n  '(?:' +\n    // `null`, `true`, and `false` literals (BooleanValue & NullValue)\n    '(null|true|false)|' +\n    // Variables starting with `$` then having a name (VariableNode)\n    '\\\\$(' +\n    nameRe.source +\n    ')|' +\n    // Numbers, starting with int then optionally following with a float part (IntValue and FloatValue)\n    '(-?\\\\d+)((?:\\\\.\\\\d+)?[eE][+-]?\\\\d+|\\\\.\\\\d+)?|' +\n    // Block strings starting with `\"\"\"` until the next unescaped `\"\"\"` (StringValue)\n    '(\"\"\"(?:\"\"\"|(?:[\\\\s\\\\S]*?[^\\\\\\\\])\"\"\"))|' +\n    // Strings starting with `\"` must be on one line (StringValue)\n    '(\"(?:\"|[^\\\\r\\\\n]*?[^\\\\\\\\]\"))|' + // string\n    // Enums are simply names except for our literals (EnumValue)\n    '(' +\n    nameRe.source +\n    '))',\n  'y'\n);\n\n// NOTE: Each of the groups above end up in the RegExpExecArray at the specified indices (starting with 1)\nconst enum ValueGroup {\n  Const = 1,\n  Var,\n  Int,\n  Float,\n  BlockString,\n  String,\n  Enum,\n}\n\ntype ValueExec = RegExpExecArray & {\n  [Prop in ValueGroup]: string | undefined;\n};\n\nconst complexStringRe = /\\\\/;\n\nfunction value(constant: true): ast.ConstValueNode;\nfunction value(constant: boolean): ast.ValueNode;\n\nfunction value(constant: boolean): ast.ValueNode {\n  let match: string | undefined;\n  let exec: ValueExec | null;\n  valueRe.lastIndex = idx;\n  if (input.charCodeAt(idx) === 91 /*'['*/) {\n    // Lists are checked ahead of time with `[` chars\n    idx++;\n    ignored();\n    const values: ast.ValueNode[] = [];\n    while (input.charCodeAt(idx) !== 93 /*']'*/) values.push(value(constant));\n    idx++;\n    ignored();\n    return {\n      kind: 'ListValue' as Kind.LIST,\n      values,\n    };\n  } else if (input.charCodeAt(idx) === 123 /*'{'*/) {\n    // Objects are checked ahead of time with `{` chars\n    idx++;\n    ignored();\n    const fields: ast.ObjectFieldNode[] = [];\n    while (input.charCodeAt(idx) !== 125 /*'}'*/) {\n      if ((match = advance(nameRe)) == null) throw error('ObjectField');\n      ignored();\n      if (input.charCodeAt(idx++) !== 58 /*':'*/) throw error('ObjectField');\n      ignored();\n      fields.push({\n        kind: 'ObjectField' as Kind.OBJECT_FIELD,\n        name: { kind: 'Name' as Kind.NAME, value: match },\n        value: value(constant),\n      });\n    }\n    idx++;\n    ignored();\n    return {\n      kind: 'ObjectValue' as Kind.OBJECT,\n      fields,\n    };\n  } else if ((exec = valueRe.exec(input) as ValueExec) != null) {\n    // Starting from here, the merged `valueRe` is used\n    idx = valueRe.lastIndex;\n    ignored();\n    if ((match = exec[ValueGroup.Const]) != null) {\n      return match === 'null'\n        ? { kind: 'NullValue' as Kind.NULL }\n        : {\n            kind: 'BooleanValue' as Kind.BOOLEAN,\n            value: match === 'true',\n          };\n    } else if ((match = exec[ValueGroup.Var]) != null) {\n      if (constant) {\n        throw error('Variable');\n      } else {\n        return {\n          kind: 'Variable' as Kind.VARIABLE,\n          name: {\n            kind: 'Name' as Kind.NAME,\n            value: match,\n          },\n        };\n      }\n    } else if ((match = exec[ValueGroup.Int]) != null) {\n      let floatPart: string | undefined;\n      if ((floatPart = exec[ValueGroup.Float]) != null) {\n        return {\n          kind: 'FloatValue' as Kind.FLOAT,\n          value: match + floatPart,\n        };\n      } else {\n        return {\n          kind: 'IntValue' as Kind.INT,\n          value: match,\n        };\n      }\n    } else if ((match = exec[ValueGroup.BlockString]) != null) {\n      return {\n        kind: 'StringValue' as Kind.STRING,\n        value: blockString(match.slice(3, -3)),\n        block: true,\n      };\n    } else if ((match = exec[ValueGroup.String]) != null) {\n      return {\n        kind: 'StringValue' as Kind.STRING,\n        // When strings don't contain escape codes, a simple slice will be enough, otherwise\n        // `JSON.parse` matches GraphQL's string parsing perfectly\n        value: complexStringRe.test(match) ? (JSON.parse(match) as string) : match.slice(1, -1),\n        block: false,\n      };\n    } else if ((match = exec[ValueGroup.Enum]) != null) {\n      return {\n        kind: 'EnumValue' as Kind.ENUM,\n        value: match,\n      };\n    }\n  }\n\n  throw error('Value');\n}\n\nfunction arguments_(constant: boolean): ast.ArgumentNode[] | undefined {\n  if (input.charCodeAt(idx) === 40 /*'('*/) {\n    const args: ast.ArgumentNode[] = [];\n    idx++;\n    ignored();\n    let _name: string | undefined;\n    do {\n      if ((_name = advance(nameRe)) == null) throw error('Argument');\n      ignored();\n      if (input.charCodeAt(idx++) !== 58 /*':'*/) throw error('Argument');\n      ignored();\n      args.push({\n        kind: 'Argument' as Kind.ARGUMENT,\n        name: { kind: 'Name' as Kind.NAME, value: _name },\n        value: value(constant),\n      });\n    } while (input.charCodeAt(idx) !== 41 /*')'*/);\n    idx++;\n    ignored();\n    return args;\n  }\n}\n\nfunction directives(constant: true): ast.ConstDirectiveNode[] | undefined;\nfunction directives(constant: boolean): ast.DirectiveNode[] | undefined;\n\nfunction directives(constant: boolean): ast.DirectiveNode[] | undefined {\n  if (input.charCodeAt(idx) === 64 /*'@'*/) {\n    const directives: ast.DirectiveNode[] = [];\n    let _name: string | undefined;\n    do {\n      idx++;\n      if ((_name = advance(nameRe)) == null) throw error('Directive');\n      ignored();\n      directives.push({\n        kind: 'Directive' as Kind.DIRECTIVE,\n        name: { kind: 'Name' as Kind.NAME, value: _name },\n        arguments: arguments_(constant),\n      });\n    } while (input.charCodeAt(idx) === 64 /*'@'*/);\n    return directives;\n  }\n}\n\nfunction type(): ast.TypeNode {\n  let match: string | undefined;\n  let lists = 0;\n  while (input.charCodeAt(idx) === 91 /*'['*/) {\n    lists++;\n    idx++;\n    ignored();\n  }\n  if ((match = advance(nameRe)) == null) throw error('NamedType');\n  ignored();\n  let type: ast.TypeNode = {\n    kind: 'NamedType' as Kind.NAMED_TYPE,\n    name: { kind: 'Name' as Kind.NAME, value: match },\n  };\n  do {\n    if (input.charCodeAt(idx) === 33 /*'!'*/) {\n      idx++;\n      ignored();\n      type = {\n        kind: 'NonNullType' as Kind.NON_NULL_TYPE,\n        type: type as ast.NamedTypeNode | ast.ListTypeNode,\n      } satisfies ast.NonNullTypeNode;\n    }\n    if (lists) {\n      if (input.charCodeAt(idx++) !== 93 /*']'*/) throw error('NamedType');\n      ignored();\n      type = {\n        kind: 'ListType' as Kind.LIST_TYPE,\n        type: type as ast.NamedTypeNode | ast.ListTypeNode,\n      } satisfies ast.ListTypeNode;\n    }\n  } while (lists--);\n  return type;\n}\n\n// NOTE: This should be compressed by our build step\n// This merges the two possible selection parsing branches into one regular expression\nconst selectionRe = new RegExp(\n  '(?:' +\n    // fragment spreads (FragmentSpread or InlineFragment nodes)\n    '(\\\\.{3})|' +\n    // field aliases or names (FieldNode)\n    '(' +\n    nameRe.source +\n    '))',\n  'y'\n);\n\n// NOTE: Each of the groups above end up in the RegExpExecArray at the indices 1&2\nconst enum SelectionGroup {\n  Spread = 1,\n  Name,\n}\n\ntype SelectionExec = RegExpExecArray & {\n  [Prop in SelectionGroup]: string | undefined;\n};\n\nfunction selectionSet(): ast.SelectionSetNode {\n  const selections: ast.SelectionNode[] = [];\n  let match: string | undefined;\n  let exec: SelectionExec | null;\n  do {\n    selectionRe.lastIndex = idx;\n    if ((exec = selectionRe.exec(input) as SelectionExec) != null) {\n      idx = selectionRe.lastIndex;\n      if (exec[SelectionGroup.Spread] != null) {\n        ignored();\n        let match = advance(nameRe);\n        if (match != null && match !== 'on') {\n          // A simple `...Name` spread with optional directives\n          ignored();\n          selections.push({\n            kind: 'FragmentSpread' as Kind.FRAGMENT_SPREAD,\n            name: { kind: 'Name' as Kind.NAME, value: match },\n            directives: directives(false),\n          });\n        } else {\n          ignored();\n          if (match === 'on') {\n            // An inline `... on Name` spread; if this doesn't match, the type condition has been omitted\n            if ((match = advance(nameRe)) == null) throw error('NamedType');\n            ignored();\n          }\n          const _directives = directives(false);\n          if (input.charCodeAt(idx++) !== 123 /*'{'*/) throw error('InlineFragment');\n          ignored();\n          selections.push({\n            kind: 'InlineFragment' as Kind.INLINE_FRAGMENT,\n            typeCondition: match\n              ? {\n                  kind: 'NamedType' as Kind.NAMED_TYPE,\n                  name: { kind: 'Name' as Kind.NAME, value: match },\n                }\n              : undefined,\n            directives: _directives,\n            selectionSet: selectionSet(),\n          });\n        }\n      } else if ((match = exec[SelectionGroup.Name]) != null) {\n        let _alias: string | undefined;\n        ignored();\n        // Parse the optional alias, by reassigning and then getting the name\n        if (input.charCodeAt(idx) === 58 /*':'*/) {\n          idx++;\n          ignored();\n          _alias = match;\n          if ((match = advance(nameRe)) == null) throw error('Field');\n          ignored();\n        }\n        const _arguments = arguments_(false);\n        ignored();\n        const _directives = directives(false);\n        let _selectionSet: ast.SelectionSetNode | undefined;\n        if (input.charCodeAt(idx) === 123 /*'{'*/) {\n          idx++;\n          ignored();\n          _selectionSet = selectionSet();\n        }\n        selections.push({\n          kind: 'Field' as Kind.FIELD,\n          alias: _alias ? { kind: 'Name' as Kind.NAME, value: _alias } : undefined,\n          name: { kind: 'Name' as Kind.NAME, value: match },\n          arguments: _arguments,\n          directives: _directives,\n          selectionSet: _selectionSet,\n        });\n      }\n    } else {\n      throw error('SelectionSet');\n    }\n  } while (input.charCodeAt(idx) !== 125 /*'}'*/);\n  idx++;\n  ignored();\n  return {\n    kind: 'SelectionSet' as Kind.SELECTION_SET,\n    selections,\n  };\n}\n\nfunction variableDefinitions(): ast.VariableDefinitionNode[] | undefined {\n  ignored();\n  if (input.charCodeAt(idx) === 40 /*'('*/) {\n    const vars: ast.VariableDefinitionNode[] = [];\n    idx++;\n    ignored();\n    let _name: string | undefined;\n    do {\n      if (input.charCodeAt(idx++) !== 36 /*'$'*/) throw error('Variable');\n      if ((_name = advance(nameRe)) == null) throw error('Variable');\n      ignored();\n      if (input.charCodeAt(idx++) !== 58 /*':'*/) throw error('VariableDefinition');\n      ignored();\n      const _type = type();\n      let _defaultValue: ast.ConstValueNode | undefined;\n      if (input.charCodeAt(idx) === 61 /*'='*/) {\n        idx++;\n        ignored();\n        _defaultValue = value(true);\n      }\n      ignored();\n      vars.push({\n        kind: 'VariableDefinition' as Kind.VARIABLE_DEFINITION,\n        variable: {\n          kind: 'Variable' as Kind.VARIABLE,\n          name: { kind: 'Name' as Kind.NAME, value: _name },\n        },\n        type: _type,\n        defaultValue: _defaultValue,\n        directives: directives(true),\n      });\n    } while (input.charCodeAt(idx) !== 41 /*')'*/);\n    idx++;\n    ignored();\n    return vars;\n  }\n}\n\nfunction fragmentDefinition(): ast.FragmentDefinitionNode {\n  let _name: string | undefined;\n  let _condition: string | undefined;\n  if ((_name = advance(nameRe)) == null) throw error('FragmentDefinition');\n  ignored();\n  if (advance(nameRe) !== 'on') throw error('FragmentDefinition');\n  ignored();\n  if ((_condition = advance(nameRe)) == null) throw error('FragmentDefinition');\n  ignored();\n  const _directives = directives(false);\n  if (input.charCodeAt(idx++) !== 123 /*'{'*/) throw error('FragmentDefinition');\n  ignored();\n  return {\n    kind: 'FragmentDefinition' as Kind.FRAGMENT_DEFINITION,\n    name: { kind: 'Name' as Kind.NAME, value: _name },\n    typeCondition: {\n      kind: 'NamedType' as Kind.NAMED_TYPE,\n      name: { kind: 'Name' as Kind.NAME, value: _condition },\n    },\n    directives: _directives,\n    selectionSet: selectionSet(),\n  };\n}\n\nconst definitionRe = /(?:query|mutation|subscription|fragment)/y;\n\nfunction operationDefinition(\n  operation: OperationTypeNode | undefined\n): ast.OperationDefinitionNode | undefined {\n  let _name: string | undefined;\n  let _variableDefinitions: ast.VariableDefinitionNode[] | undefined;\n  let _directives: ast.DirectiveNode[] | undefined;\n  if (operation) {\n    ignored();\n    _name = advance(nameRe);\n    _variableDefinitions = variableDefinitions();\n    _directives = directives(false);\n  }\n  if (input.charCodeAt(idx) === 123 /*'{'*/) {\n    idx++;\n    ignored();\n    return {\n      kind: 'OperationDefinition' as Kind.OPERATION_DEFINITION,\n      operation: operation || ('query' as OperationTypeNode.QUERY),\n      name: _name ? { kind: 'Name' as Kind.NAME, value: _name } : undefined,\n      variableDefinitions: _variableDefinitions,\n      directives: _directives,\n      selectionSet: selectionSet(),\n    };\n  }\n}\n\nfunction document(): ast.DocumentNode {\n  let match: string | undefined;\n  let definition: ast.OperationDefinitionNode | undefined;\n  ignored();\n  const definitions: ast.ExecutableDefinitionNode[] = [];\n  do {\n    if ((match = advance(definitionRe)) === 'fragment') {\n      ignored();\n      definitions.push(fragmentDefinition());\n    } else if ((definition = operationDefinition(match as OperationTypeNode)) != null) {\n      definitions.push(definition);\n    } else {\n      throw error('Document');\n    }\n  } while (idx < input.length);\n  return {\n    kind: 'Document' as Kind.DOCUMENT,\n    definitions,\n  };\n}\n\ntype ParseOptions = {\n  [option: string]: any;\n};\n\nexport function parse(\n  string: string | Source,\n  _options?: ParseOptions | undefined\n): ast.DocumentNode {\n  input = typeof string.body === 'string' ? string.body : string;\n  idx = 0;\n  return document();\n}\n\nexport function parseValue(\n  string: string | Source,\n  _options?: ParseOptions | undefined\n): ast.ValueNode {\n  input = typeof string.body === 'string' ? string.body : string;\n  idx = 0;\n  ignored();\n  return value(false);\n}\n\nexport function parseType(\n  string: string | Source,\n  _options?: ParseOptions | undefined\n): ast.TypeNode {\n  input = typeof string.body === 'string' ? string.body : string;\n  idx = 0;\n  return type();\n}\n", "import type { ASTNode } from './ast';\n\nexport const BREAK = {};\n\nexport function visit<N extends ASTNode>(root: N, visitor: ASTVisitor): N;\nexport function visit<R>(root: ASTNode, visitor: ASTReducer<R>): R;\n\nexport function visit(node: ASTNode, visitor: ASTVisitor | ASTReducer<any>) {\n  const ancestors: Array<ASTNode | ReadonlyArray<ASTNode>> = [];\n  const path: Array<string | number> = [];\n\n  function traverse(\n    node: ASTNode,\n    key?: string | number | undefined,\n    parent?: ASTNode | ReadonlyArray<ASTNode> | undefined\n  ) {\n    let hasEdited = false;\n\n    const enter =\n      (visitor[node.kind] && visitor[node.kind].enter) ||\n      visitor[node.kind] ||\n      (visitor as EnterLeaveVisitor<ASTNode>).enter;\n    const resultEnter = enter && enter.call(visitor, node, key, parent, path, ancestors);\n    if (resultEnter === false) {\n      return node;\n    } else if (resultEnter === null) {\n      return null;\n    } else if (resultEnter === BREAK) {\n      throw BREAK;\n    } else if (resultEnter && typeof resultEnter.kind === 'string') {\n      hasEdited = resultEnter !== node;\n      node = resultEnter;\n    }\n\n    if (parent) ancestors.push(parent);\n\n    let result: any;\n    const copy = { ...node };\n    for (const nodeKey in node) {\n      path.push(nodeKey);\n      let value = node[nodeKey];\n      if (Array.isArray(value)) {\n        const newValue: any[] = [];\n        for (let index = 0; index < value.length; index++) {\n          if (value[index] != null && typeof value[index].kind === 'string') {\n            ancestors.push(node);\n            path.push(index);\n            result = traverse(value[index], index, value);\n            path.pop();\n            ancestors.pop();\n            if (result == null) {\n              hasEdited = true;\n            } else {\n              hasEdited = hasEdited || result !== value[index];\n              newValue.push(result);\n            }\n          }\n        }\n        value = newValue;\n      } else if (value != null && typeof value.kind === 'string') {\n        result = traverse(value, nodeKey, node);\n        if (result !== undefined) {\n          hasEdited = hasEdited || value !== result;\n          value = result;\n        }\n      }\n\n      path.pop();\n      if (hasEdited) copy[nodeKey] = value;\n    }\n\n    if (parent) ancestors.pop();\n    const leave =\n      (visitor[node.kind] && visitor[node.kind].leave) ||\n      (visitor as EnterLeaveVisitor<ASTNode>).leave;\n    const resultLeave = leave && leave.call(visitor, node, key, parent, path, ancestors);\n    if (resultLeave === BREAK) {\n      throw BREAK;\n    } else if (resultLeave !== undefined) {\n      return resultLeave;\n    } else if (resultEnter !== undefined) {\n      return hasEdited ? copy : resultEnter;\n    } else {\n      return hasEdited ? copy : node;\n    }\n  }\n\n  try {\n    const result = traverse(node);\n    return result !== undefined && result !== false ? result : node;\n  } catch (error) {\n    if (error !== BREAK) throw error;\n    return node;\n  }\n}\n\nexport type ASTVisitor = EnterLeaveVisitor<ASTNode> | KindVisitor;\n\ntype KindVisitor = {\n  readonly [NodeT in ASTNode as NodeT['kind']]?: ASTVisitFn<NodeT> | EnterLeaveVisitor<NodeT>;\n};\n\ninterface EnterLeaveVisitor<TVisitedNode extends ASTNode> {\n  readonly enter?: ASTVisitFn<TVisitedNode> | undefined;\n  readonly leave?: ASTVisitFn<TVisitedNode> | undefined;\n}\n\nexport type ASTVisitFn<Node extends ASTNode> = (\n  node: Node,\n  key: string | number | undefined,\n  parent: ASTNode | ReadonlyArray<ASTNode> | undefined,\n  path: ReadonlyArray<string | number>,\n  ancestors: ReadonlyArray<ASTNode | ReadonlyArray<ASTNode>>\n) => any;\n\nexport type ASTReducer<R> = {\n  readonly [NodeT in ASTNode as NodeT['kind']]?: {\n    readonly enter?: ASTVisitFn<NodeT>;\n    readonly leave: ASTReducerFn<NodeT, R>;\n  };\n};\n\ntype ASTReducerFn<TReducedNode extends ASTNode, R> = (\n  node: { [K in keyof TReducedNode]: ReducedField<TReducedNode[K], R> },\n  key: string | number | undefined,\n  parent: ASTNode | ReadonlyArray<ASTNode> | undefined,\n  path: ReadonlyArray<string | number>,\n  ancestors: ReadonlyArray<ASTNode | ReadonlyArray<ASTNode>>\n) => R;\n\ntype ReducedField<T, R> = T extends null | undefined\n  ? T\n  : T extends ReadonlyArray<any>\n    ? ReadonlyArray<R>\n    : R;\n", "import type {\n  ASTNode,\n  NameNode,\n  DocumentNode,\n  VariableNode,\n  SelectionSetNode,\n  FieldNode,\n  ArgumentNode,\n  FragmentSpreadNode,\n  InlineFragmentNode,\n  VariableDefinitionNode,\n  OperationDefinitionNode,\n  FragmentDefinitionNode,\n  IntValueNode,\n  FloatValueNode,\n  StringValueNode,\n  BooleanValueNode,\n  NullValueNode,\n  EnumValueNode,\n  ListValueNode,\n  ObjectValueNode,\n  ObjectFieldNode,\n  DirectiveNode,\n  NamedTypeNode,\n  ListTypeNode,\n  NonNullTypeNode,\n} from './ast';\n\nfunction mapJoin<T>(value: readonly T[], joiner: string, mapper: (value: T) => string): string {\n  let out = '';\n  for (let index = 0; index < value.length; index++) {\n    if (index) out += joiner;\n    out += mapper(value[index]);\n  }\n  return out;\n}\n\nfunction printString(string: string): string {\n  return JSON.stringify(string);\n}\n\nfunction printBlockString(string: string): string {\n  return '\"\"\"\\n' + string.replace(/\"\"\"/g, '\\\\\"\"\"') + '\\n\"\"\"';\n}\n\nconst MAX_LINE_LENGTH = 80;\n\nlet LF = '\\n';\n\nconst nodes = {\n  OperationDefinition(node: OperationDefinitionNode): string {\n    let out: string = node.operation;\n    if (node.name) out += ' ' + node.name.value;\n    if (node.variableDefinitions && node.variableDefinitions.length) {\n      if (!node.name) out += ' ';\n      out += '(' + mapJoin(node.variableDefinitions, ', ', nodes.VariableDefinition) + ')';\n    }\n    if (node.directives && node.directives.length)\n      out += ' ' + mapJoin(node.directives, ' ', nodes.Directive);\n    return out !== 'query'\n      ? out + ' ' + nodes.SelectionSet(node.selectionSet)\n      : nodes.SelectionSet(node.selectionSet);\n  },\n  VariableDefinition(node: VariableDefinitionNode): string {\n    let out = nodes.Variable!(node.variable) + ': ' + _print(node.type);\n    if (node.defaultValue) out += ' = ' + _print(node.defaultValue);\n    if (node.directives && node.directives.length)\n      out += ' ' + mapJoin(node.directives, ' ', nodes.Directive);\n    return out;\n  },\n  Field(node: FieldNode): string {\n    let out = node.alias ? node.alias.value + ': ' + node.name.value : node.name.value;\n    if (node.arguments && node.arguments.length) {\n      const args = mapJoin(node.arguments, ', ', nodes.Argument);\n      if (out.length + args.length + 2 > MAX_LINE_LENGTH) {\n        out +=\n          '(' +\n          (LF += '  ') +\n          mapJoin(node.arguments, LF, nodes.Argument) +\n          (LF = LF.slice(0, -2)) +\n          ')';\n      } else {\n        out += '(' + args + ')';\n      }\n    }\n    if (node.directives && node.directives.length)\n      out += ' ' + mapJoin(node.directives, ' ', nodes.Directive);\n    if (node.selectionSet) out += ' ' + nodes.SelectionSet(node.selectionSet);\n    return out;\n  },\n  StringValue(node: StringValueNode): string {\n    if (node.block) {\n      return printBlockString(node.value).replace(/\\n/g, LF);\n    } else {\n      return printString(node.value);\n    }\n  },\n  BooleanValue(node: BooleanValueNode): string {\n    return '' + node.value;\n  },\n  NullValue(_node: NullValueNode): string {\n    return 'null';\n  },\n  IntValue(node: IntValueNode): string {\n    return node.value;\n  },\n  FloatValue(node: FloatValueNode): string {\n    return node.value;\n  },\n  EnumValue(node: EnumValueNode): string {\n    return node.value;\n  },\n  Name(node: NameNode): string {\n    return node.value;\n  },\n  Variable(node: VariableNode): string {\n    return '$' + node.name.value;\n  },\n  ListValue(node: ListValueNode): string {\n    return '[' + mapJoin(node.values, ', ', _print) + ']';\n  },\n  ObjectValue(node: ObjectValueNode): string {\n    return '{' + mapJoin(node.fields, ', ', nodes.ObjectField) + '}';\n  },\n  ObjectField(node: ObjectFieldNode): string {\n    return node.name.value + ': ' + _print(node.value);\n  },\n  Document(node: DocumentNode): string {\n    if (!node.definitions || !node.definitions.length) return '';\n    return mapJoin(node.definitions, '\\n\\n', _print);\n  },\n  SelectionSet(node: SelectionSetNode): string {\n    return '{' + (LF += '  ') + mapJoin(node.selections, LF, _print) + (LF = LF.slice(0, -2)) + '}';\n  },\n  Argument(node: ArgumentNode): string {\n    return node.name.value + ': ' + _print(node.value);\n  },\n  FragmentSpread(node: FragmentSpreadNode): string {\n    let out = '...' + node.name.value;\n    if (node.directives && node.directives.length)\n      out += ' ' + mapJoin(node.directives, ' ', nodes.Directive);\n    return out;\n  },\n  InlineFragment(node: InlineFragmentNode): string {\n    let out = '...';\n    if (node.typeCondition) out += ' on ' + node.typeCondition.name.value;\n    if (node.directives && node.directives.length)\n      out += ' ' + mapJoin(node.directives, ' ', nodes.Directive);\n    out += ' ' + nodes.SelectionSet(node.selectionSet);\n    return out;\n  },\n  FragmentDefinition(node: FragmentDefinitionNode): string {\n    let out = 'fragment ' + node.name.value;\n    out += ' on ' + node.typeCondition.name.value;\n    if (node.directives && node.directives.length)\n      out += ' ' + mapJoin(node.directives, ' ', nodes.Directive);\n    return out + ' ' + nodes.SelectionSet(node.selectionSet);\n  },\n  Directive(node: DirectiveNode): string {\n    let out = '@' + node.name.value;\n    if (node.arguments && node.arguments.length)\n      out += '(' + mapJoin(node.arguments, ', ', nodes.Argument) + ')';\n    return out;\n  },\n  NamedType(node: NamedTypeNode): string {\n    return node.name.value;\n  },\n  ListType(node: ListTypeNode): string {\n    return '[' + _print(node.type) + ']';\n  },\n  NonNullType(node: NonNullTypeNode): string {\n    return _print(node.type) + '!';\n  },\n} as const;\n\nconst _print = (node: ASTNode): string => nodes[node.kind](node);\n\nfunction print(node: ASTNode): string {\n  LF = '\\n';\n  return nodes[node.kind] ? nodes[node.kind](node) : '';\n}\n\nexport { print, printString, printBlockString };\n", "import type { TypeNode, ValueNode } from './ast';\nimport type { Maybe } from './types';\n\nexport function valueFromASTUntyped(\n  node: ValueNode,\n  variables?: Maybe<Record<string, any>>\n): unknown {\n  switch (node.kind) {\n    case 'NullValue':\n      return null;\n    case 'IntValue':\n      return parseInt(node.value, 10);\n    case 'FloatValue':\n      return parseFloat(node.value);\n    case 'StringValue':\n    case 'EnumValue':\n    case 'BooleanValue':\n      return node.value;\n    case 'ListValue': {\n      const values: unknown[] = [];\n      for (const value of node.values) values.push(valueFromASTUntyped(value, variables));\n      return values;\n    }\n    case 'ObjectValue': {\n      const obj = Object.create(null);\n      for (const field of node.fields)\n        obj[field.name.value] = valueFromASTUntyped(field.value, variables);\n      return obj;\n    }\n    case 'Variable':\n      return variables && variables[node.name.value];\n  }\n}\n\nexport function valueFromTypeNode(\n  node: ValueNode,\n  type: TypeNode,\n  variables?: Maybe<Record<string, any>>\n): unknown {\n  if (node.kind === 'Variable') {\n    const variableName = node.name.value;\n    return variables ? valueFromTypeNode(variables[variableName], type, variables) : undefined;\n  } else if (type.kind === 'NonNullType') {\n    return node.kind !== 'NullValue' ? valueFromTypeNode(node, type, variables) : undefined;\n  } else if (node.kind === 'NullValue') {\n    return null;\n  } else if (type.kind === 'ListType') {\n    if (node.kind === 'ListValue') {\n      const values: unknown[] = [];\n      for (const value of node.values) {\n        const coerced = valueFromTypeNode(value, type.type, variables);\n        if (coerced === undefined) {\n          return undefined;\n        } else {\n          values.push(coerced);\n        }\n      }\n      return values;\n    }\n  } else if (type.kind === 'NamedType') {\n    switch (type.name.value) {\n      case 'Int':\n      case 'Float':\n      case 'String':\n      case 'Bool':\n        return type.name.value + 'Value' === node.kind\n          ? valueFromASTUntyped(node, variables)\n          : undefined;\n      default:\n        return valueFromASTUntyped(node, variables);\n    }\n  }\n}\n", "import { GraphQLError } from '@0no-co/graphql.web';\nimport type { ErrorLike } from '../types';\n\nconst generateErrorMessage = (\n  networkErr?: Error,\n  graphQlErrs?: GraphQLError[]\n) => {\n  let error = '';\n  if (networkErr) return `[Network] ${networkErr.message}`;\n  if (graphQlErrs) {\n    for (const err of graphQlErrs) {\n      if (error) error += '\\n';\n      error += `[GraphQL] ${err.message}`;\n    }\n  }\n  return error;\n};\n\nconst rehydrateGraphQlError = (error: any): GraphQLError => {\n  if (\n    error &&\n    error.message &&\n    (error.extensions || error.name === 'GraphQLError')\n  ) {\n    return error;\n  } else if (typeof error === 'object' && error.message) {\n    return new GraphQLError(\n      error.message,\n      error.nodes,\n      error.source,\n      error.positions,\n      error.path,\n      error,\n      error.extensions || {}\n    );\n  } else {\n    return new GraphQLError(error as any);\n  }\n};\n\n/** An abstracted `Error` that provides either a `networkError` or `graphQLErrors`.\n *\n * @remarks\n * During a GraphQL request, either the request can fail entirely, causing a network error,\n * or the GraphQL execution or fields can fail, which will cause an {@link ExecutionResult}\n * to contain an array of GraphQL errors.\n *\n * The `CombinedError` abstracts and normalizes both failure cases. When {@link OperationResult.error}\n * is set to this error, the `CombinedError` abstracts all errors, making it easier to handle only\n * a subset of error cases.\n *\n * @see {@link https://urql.dev/goto/docs/basics/errors} for more information on handling\n * GraphQL errors and the `CombinedError`.\n */\nexport class CombinedError extends Error {\n  public name: string;\n  public message: string;\n\n  /** A list of GraphQL errors rehydrated from a {@link ExecutionResult}.\n   *\n   * @remarks\n   * If an {@link ExecutionResult} received from the API contains a list of errors,\n   * the `CombinedError` will rehydrate them, normalize them to\n   * {@link GraphQLError | GraphQLErrors} and list them here.\n   * An empty list indicates that no GraphQL error has been sent by the API.\n   */\n  public graphQLErrors: GraphQLError[];\n\n  /** Set to an error, if a GraphQL request has failed outright.\n   *\n   * @remarks\n   * A GraphQL over HTTP request may fail and not reach the API. Any error that\n   * prevents a GraphQl request outright, will be considered a “network error” and\n   * set here.\n   */\n  public networkError?: Error;\n\n  /** Set to the {@link Response} object a fetch exchange received.\n   *\n   * @remarks\n   * If a built-in fetch {@link Exchange} is used in `urql`, this may\n   * be set to the {@link Response} object of the Fetch API response.\n   * However, since `urql` doesn’t assume that all users will use HTTP\n   * as the only or exclusive transport for GraphQL this property is\n   * neither typed nor guaranteed and may be re-used for other purposes\n   * by non-fetch exchanges.\n   *\n   * Hint: It can be useful to use `response.status` here, however, if\n   * you plan on relying on this being a {@link Response} in your app,\n   * which it is by default, then make sure you add some extra checks\n   * before blindly assuming so!\n   */\n  public response?: any;\n\n  constructor(input: {\n    networkError?: Error;\n    graphQLErrors?: Array<string | ErrorLike>;\n    response?: any;\n  }) {\n    const normalizedGraphQLErrors = (input.graphQLErrors || []).map(\n      rehydrateGraphQlError\n    );\n    const message = generateErrorMessage(\n      input.networkError,\n      normalizedGraphQLErrors\n    );\n\n    super(message);\n\n    this.name = 'CombinedError';\n    this.message = message;\n    this.graphQLErrors = normalizedGraphQLErrors;\n    this.networkError = input.networkError;\n    this.response = input.response;\n  }\n\n  toString() {\n    return this.message;\n  }\n}\n", "/** A hash value as computed by {@link phash}.\n *\n * @remarks\n * Typically `HashValue`s are used as hashes and keys of GraphQL documents,\n * variables, and combined, for GraphQL requests.\n */\nexport type HashValue = number & {\n  /** Marker to indicate that a `HashValue` may not be created by a user.\n   *\n   * @remarks\n   * `HashValue`s are created by {@link phash} and are marked as such to not mix them\n   * up with other numbers and prevent them from being created or used outside of this\n   * hashing function.\n   *\n   * @internal\n   */\n  readonly _opaque: unique symbol;\n};\n\n/** Computes a djb2 hash of the given string.\n *\n * @param x - the string to be hashed\n * @param seed - optionally a prior hash for progressive hashing\n * @returns a hash value, i.e. a number\n *\n * @remark\n * This is the hashing function used throughout `urql`, primarily to compute\n * {@link Operation.key}.\n *\n * @see {@link http://www.cse.yorku.ca/~oz/hash.html#djb2} for a further description of djb2.\n */\nexport const phash = (x: string, seed?: HashValue): HashValue => {\n  let h = (seed || 5381) | 0;\n  for (let i = 0, l = x.length | 0; i < l; i++)\n    h = (h << 5) + h + x.charCodeAt(i);\n  return h as HashValue;\n};\n", "export type FileMap = Map<string, File | Blob>;\n\nconst seen = new Set();\nconst cache = new WeakMap();\n\nconst stringify = (x: any): string => {\n  if (x === null || seen.has(x)) {\n    return 'null';\n  } else if (typeof x !== 'object') {\n    return JSON.stringify(x) || '';\n  } else if (x.toJSON) {\n    return stringify(x.toJSON());\n  } else if (Array.isArray(x)) {\n    let out = '[';\n    for (const value of x) {\n      if (out.length > 1) out += ',';\n      out += stringify(value) || 'null';\n    }\n    out += ']';\n    return out;\n  } else if (\n    (FileConstructor !== NoopConstructor && x instanceof FileConstructor) ||\n    (BlobConstructor !== NoopConstructor && x instanceof BlobConstructor)\n  ) {\n    return 'null';\n  }\n\n  const keys = Object.keys(x).sort();\n  if (\n    !keys.length &&\n    x.constructor &&\n    Object.getPrototypeOf(x).constructor !== Object.prototype.constructor\n  ) {\n    const key = cache.get(x) || Math.random().toString(36).slice(2);\n    cache.set(x, key);\n    return stringify({ __key: key });\n  }\n\n  seen.add(x);\n  let out = '{';\n  for (const key of keys) {\n    const value = stringify(x[key]);\n    if (value) {\n      if (out.length > 1) out += ',';\n      out += stringify(key) + ':' + value;\n    }\n  }\n\n  seen.delete(x);\n  out += '}';\n  return out;\n};\n\nconst extract = (map: FileMap, path: string, x: any) => {\n  if (x == null || typeof x !== 'object' || x.toJSON || seen.has(x)) {\n    /*noop*/\n  } else if (Array.isArray(x)) {\n    for (let i = 0, l = x.length; i < l; i++)\n      extract(map, `${path}.${i}`, x[i]);\n  } else if (x instanceof FileConstructor || x instanceof BlobConstructor) {\n    map.set(path, x as File | Blob);\n  } else {\n    seen.add(x);\n    for (const key of Object.keys(x)) extract(map, `${path}.${key}`, x[key]);\n  }\n};\n\n/** A stable stringifier for GraphQL variables objects.\n *\n * @param x - any JSON-like data.\n * @return A JSON string.\n *\n * @remarks\n * This utility creates a stable JSON string from any passed data,\n * and protects itself from throwing.\n *\n * The JSON string is stable insofar as objects’ keys are sorted,\n * and instances of non-plain objects are replaced with random keys\n * replacing their values, which remain stable for the objects’\n * instance.\n */\nexport const stringifyVariables = (x: any): string => {\n  seen.clear();\n  return stringify(x);\n};\n\nclass NoopConstructor {}\nconst FileConstructor = typeof File !== 'undefined' ? File : NoopConstructor;\nconst BlobConstructor = typeof Blob !== 'undefined' ? Blob : NoopConstructor;\n\nexport const extractFiles = (x: any): FileMap => {\n  const map: FileMap = new Map();\n  if (\n    FileConstructor !== NoopConstructor ||\n    BlobConstructor !== NoopConstructor\n  ) {\n    seen.clear();\n    extract(map, 'variables', x);\n  }\n  return map;\n};\n", "import { Kind, parse, print } from '@0no-co/graphql.web';\nimport type { DocumentNode, DefinitionNode } from './graphql';\nimport type { HashValue } from './hash';\nimport { phash } from './hash';\nimport { stringifyVariables } from './variables';\n\nimport type {\n  DocumentInput,\n  TypedDocumentNode,\n  AnyVariables,\n  GraphQLRequest,\n  RequestExtensions,\n} from '../types';\n\n/** A `DocumentNode` annotated with its hashed key.\n * @internal\n */\nexport type KeyedDocumentNode = TypedDocumentNode & {\n  __key: HashValue;\n};\n\nconst SOURCE_NAME = 'gql';\nconst GRAPHQL_STRING_RE = /(\"{3}[\\s\\S]*\"{3}|\"(?:\\\\.|[^\"])*\")/g;\nconst REPLACE_CHAR_RE = /(?:#[^\\n\\r]+)?(?:[\\r\\n]+|$)/g;\n\nconst replaceOutsideStrings = (str: string, idx: number) =>\n  idx % 2 === 0 ? str.replace(REPLACE_CHAR_RE, '\\n') : str;\n\n/** Sanitizes a GraphQL document string by replacing comments and redundant newlines in it. */\nconst sanitizeDocument = (node: string): string =>\n  node.split(GRAPHQL_STRING_RE).map(replaceOutsideStrings).join('').trim();\n\nconst prints = new Map<DocumentNode | DefinitionNode, string>();\nconst docs = new Map<HashValue, KeyedDocumentNode>();\n\n/** A cached printing function for GraphQL documents.\n *\n * @param node - A string of a document or a {@link DocumentNode}\n * @returns A normalized printed string of the passed GraphQL document.\n *\n * @remarks\n * This function accepts a GraphQL query string or {@link DocumentNode},\n * then prints and sanitizes it. The sanitizer takes care of removing\n * comments, which otherwise alter the key of the document although the\n * document is otherwise equivalent to another.\n *\n * When a {@link DocumentNode} is passed to this function, it caches its\n * output by modifying the `loc.source.body` property on the GraphQL node.\n */\nexport const stringifyDocument = (\n  node: string | DefinitionNode | DocumentNode\n): string => {\n  let printed: string;\n  if (typeof node === 'string') {\n    printed = sanitizeDocument(node);\n  } else if (node.loc && docs.get((node as KeyedDocumentNode).__key) === node) {\n    printed = node.loc.source.body;\n  } else {\n    printed = prints.get(node) || sanitizeDocument(print(node));\n    prints.set(node, printed);\n  }\n\n  if (typeof node !== 'string' && !node.loc) {\n    (node as any).loc = {\n      start: 0,\n      end: printed.length,\n      source: {\n        body: printed,\n        name: SOURCE_NAME,\n        locationOffset: { line: 1, column: 1 },\n      },\n    };\n  }\n\n  return printed;\n};\n\n/** Computes the hash for a document's string using {@link stringifyDocument}'s output.\n *\n * @param node - A string of a document or a {@link DocumentNode}\n * @returns A {@link HashValue}\n *\n * @privateRemarks\n * This function adds the operation name of the document to the hash, since sometimes\n * a merged document with multiple operations may be used. Although `urql` requires a\n * `DocumentNode` to only contain a single operation, when the cached `loc.source.body`\n * of a `DocumentNode` is used, this string may still contain multiple operations and\n * the resulting hash should account for only one at a time.\n */\nconst hashDocument = (\n  node: string | DefinitionNode | DocumentNode\n): HashValue => {\n  let key = phash(stringifyDocument(node));\n  // Add the operation name to the produced hash\n  if ((node as DocumentNode).definitions) {\n    const operationName = getOperationName(node as DocumentNode);\n    if (operationName) key = phash(`\\n# ${operationName}`, key);\n  }\n  return key;\n};\n\n/** Returns a canonical version of the passed `DocumentNode` with an added hash key.\n *\n * @param node - A string of a document or a {@link DocumentNode}\n * @returns A {@link KeyedDocumentNode}\n *\n * @remarks\n * `urql` will always avoid unnecessary work, no matter whether a user passes `DocumentNode`s\n * or strings of GraphQL documents to its APIs.\n *\n * This function will return a canonical version of a {@link KeyedDocumentNode} no matter\n * which kind of input is passed, avoiding parsing or hashing of passed data as needed.\n */\nexport const keyDocument = (node: string | DocumentNode): KeyedDocumentNode => {\n  let key: HashValue;\n  let query: DocumentNode;\n  if (typeof node === 'string') {\n    key = hashDocument(node);\n    query = docs.get(key) || parse(node, { noLocation: true });\n  } else {\n    key = (node as KeyedDocumentNode).__key || hashDocument(node);\n    query = docs.get(key) || node;\n  }\n\n  // Add location information if it's missing\n  if (!query.loc) stringifyDocument(query);\n\n  (query as KeyedDocumentNode).__key = key;\n  docs.set(key, query as KeyedDocumentNode);\n  return query as KeyedDocumentNode;\n};\n\n/** Creates a `GraphQLRequest` from the passed parameters.\n *\n * @param q - A string of a document or a {@link DocumentNode}\n * @param variables - A variables object for the defined GraphQL operation.\n * @returns A {@link GraphQLRequest}\n *\n * @remarks\n * `createRequest` creates a {@link GraphQLRequest} from the passed parameters,\n * while replacing the document as needed with a canonical version of itself,\n * to avoid parsing, printing, or hashing the same input multiple times.\n *\n * If no variables are passed, canonically it'll default to an empty object,\n * which is removed from the resulting hash key.\n */\nexport const createRequest = <\n  Data = any,\n  Variables extends AnyVariables = AnyVariables,\n>(\n  _query: DocumentInput<Data, Variables>,\n  _variables: Variables,\n  extensions?: RequestExtensions | undefined\n): GraphQLRequest<Data, Variables> => {\n  const variables = _variables || ({} as Variables);\n  const query = keyDocument(_query);\n  const printedVars = stringifyVariables(variables);\n  let key = query.__key;\n  if (printedVars !== '{}') key = phash(printedVars, key);\n  return { key, query, variables, extensions };\n};\n\n/** Returns the name of the `DocumentNode`'s operation, if any.\n * @param query - A {@link DocumentNode}\n * @returns the operation's name contained within the document, or `undefined`\n */\nexport const getOperationName = (query: DocumentNode): string | undefined => {\n  for (const node of query.definitions) {\n    if (node.kind === Kind.OPERATION_DEFINITION) {\n      return node.name ? node.name.value : undefined;\n    }\n  }\n};\n\n/** Returns the type of the `DocumentNode`'s operation, if any.\n * @param query - A {@link DocumentNode}\n * @returns the operation's type contained within the document, or `undefined`\n */\nexport const getOperationType = (query: DocumentNode): string | undefined => {\n  for (const node of query.definitions) {\n    if (node.kind === Kind.OPERATION_DEFINITION) {\n      return node.operation;\n    }\n  }\n};\n", "import type {\n  ExecutionResult,\n  Operation,\n  OperationResult,\n  IncrementalPayload,\n} from '../types';\nimport { CombinedError } from './error';\n\n/** Converts the `ExecutionResult` received for a given `Operation` to an `OperationResult`.\n *\n * @param operation - The {@link Operation} for which the API’s result is for.\n * @param result - The GraphQL API’s {@link ExecutionResult}.\n * @param response - Optionally, a raw object representing the API’s result (Typically a {@link Response}).\n * @returns An {@link OperationResult}.\n *\n * @remarks\n * This utility can be used to create {@link OperationResult | OperationResults} in the shape\n * that `urql` expects and defines, and should be used rather than creating the results manually.\n *\n * @throws\n * If no data, or errors are contained within the result, or the result is instead an incremental\n * response containing a `path` property, a “No Content” error is thrown.\n *\n * @see {@link ExecutionResult} for the type definition of GraphQL API results.\n */\nexport const makeResult = (\n  operation: Operation,\n  result: ExecutionResult,\n  response?: any\n): OperationResult => {\n  if (\n    !('data' in result) &&\n    (!('errors' in result) || !Array.isArray(result.errors))\n  ) {\n    throw new Error('No Content');\n  }\n\n  const defaultHasNext = operation.kind === 'subscription';\n  return {\n    operation,\n    data: result.data,\n    error: Array.isArray(result.errors)\n      ? new CombinedError({\n          graphQLErrors: result.errors,\n          response,\n        })\n      : undefined,\n    extensions: result.extensions ? { ...result.extensions } : undefined,\n    hasNext: result.hasNext == null ? defaultHasNext : result.hasNext,\n    stale: false,\n  };\n};\n\nconst deepMerge = (target: any, source: any) => {\n  if (typeof target === 'object' && target != null) {\n    if (\n      !target.constructor ||\n      target.constructor === Object ||\n      Array.isArray(target)\n    ) {\n      target = Array.isArray(target) ? [...target] : { ...target };\n      for (const key of Object.keys(source))\n        target[key] = deepMerge(target[key], source[key]);\n      return target;\n    }\n  }\n  return source;\n};\n\n/** Merges an incrementally delivered `ExecutionResult` into a previous `OperationResult`.\n *\n * @param prevResult - The {@link OperationResult} that preceded this result.\n * @param path - The GraphQL API’s {@link ExecutionResult} that should be patching the `prevResult`.\n * @param response - Optionally, a raw object representing the API’s result (Typically a {@link Response}).\n * @returns A new {@link OperationResult} patched with the incremental result.\n *\n * @remarks\n * This utility should be used to merge subsequent {@link ExecutionResult | ExecutionResults} of\n * incremental responses into a prior {@link OperationResult}.\n *\n * When directives like `@defer`, `@stream`, and `@live` are used, GraphQL may deliver new\n * results that modify previous results. In these cases, it'll set a `path` property to modify\n * the result it sent last. This utility is built to handle these cases and merge these payloads\n * into existing {@link OperationResult | OperationResults}.\n *\n * @see {@link ExecutionResult} for the type definition of GraphQL API results.\n */\nexport const mergeResultPatch = (\n  prevResult: OperationResult,\n  nextResult: ExecutionResult,\n  response?: any,\n  pending?: ExecutionResult['pending']\n): OperationResult => {\n  let errors = prevResult.error ? prevResult.error.graphQLErrors : [];\n  let hasExtensions =\n    !!prevResult.extensions || !!(nextResult.payload || nextResult).extensions;\n  const extensions = {\n    ...prevResult.extensions,\n    ...(nextResult.payload || nextResult).extensions,\n  };\n\n  let incremental = nextResult.incremental;\n\n  // NOTE: We handle the old version of the incremental delivery payloads as well\n  if ('path' in nextResult) {\n    incremental = [nextResult as IncrementalPayload];\n  }\n\n  const withData = { data: prevResult.data };\n  if (incremental) {\n    for (const patch of incremental) {\n      if (Array.isArray(patch.errors)) {\n        errors.push(...(patch.errors as any));\n      }\n\n      if (patch.extensions) {\n        Object.assign(extensions, patch.extensions);\n        hasExtensions = true;\n      }\n\n      let prop: string | number = 'data';\n      let part: Record<string, any> | Array<any> = withData;\n      let path: readonly (string | number)[] = [];\n      if (patch.path) {\n        path = patch.path;\n      } else if (pending) {\n        const res = pending.find(pendingRes => pendingRes.id === patch.id);\n        if (patch.subPath) {\n          path = [...res!.path, ...patch.subPath];\n        } else {\n          path = res!.path;\n        }\n      }\n\n      for (let i = 0, l = path.length; i < l; prop = path[i++]) {\n        part = part[prop] = Array.isArray(part[prop])\n          ? [...part[prop]]\n          : { ...part[prop] };\n      }\n\n      if (patch.items) {\n        const startIndex = +prop >= 0 ? (prop as number) : 0;\n        for (let i = 0, l = patch.items.length; i < l; i++)\n          part[startIndex + i] = deepMerge(\n            part[startIndex + i],\n            patch.items[i]\n          );\n      } else if (patch.data !== undefined) {\n        part[prop] = deepMerge(part[prop], patch.data);\n      }\n    }\n  } else {\n    withData.data = (nextResult.payload || nextResult).data || prevResult.data;\n    errors =\n      (nextResult.errors as any[]) ||\n      (nextResult.payload && nextResult.payload.errors) ||\n      errors;\n  }\n\n  return {\n    operation: prevResult.operation,\n    data: withData.data,\n    error: errors.length\n      ? new CombinedError({ graphQLErrors: errors, response })\n      : undefined,\n    extensions: hasExtensions ? extensions : undefined,\n    hasNext:\n      nextResult.hasNext != null ? nextResult.hasNext : prevResult.hasNext,\n    stale: false,\n  };\n};\n\n/** Creates an `OperationResult` containing a network error for requests that encountered unexpected errors.\n *\n * @param operation - The {@link Operation} for which the API’s result is for.\n * @param error - The network-like error that prevented an API result from being delivered.\n * @param response - Optionally, a raw object representing the API’s result (Typically a {@link Response}).\n * @returns An {@link OperationResult} containing only a {@link CombinedError}.\n *\n * @remarks\n * This utility can be used to create {@link OperationResult | OperationResults} in the shape\n * that `urql` expects and defines, and should be used rather than creating the results manually.\n * This function should be used for when the {@link CombinedError.networkError} property is\n * populated and no GraphQL execution actually occurred.\n */\nexport const makeErrorResult = (\n  operation: Operation,\n  error: Error,\n  response?: any\n): OperationResult => ({\n  operation,\n  data: undefined,\n  error: new CombinedError({\n    networkError: error,\n    response,\n  }),\n  extensions: undefined,\n  hasNext: false,\n  stale: false,\n});\n", "import {\n  stringifyDocument,\n  getOperationName,\n  stringifyVariables,\n  extractFiles,\n} from '../utils';\n\nimport type { AnyVariables, GraphQLRequest, Operation } from '../types';\n\n/** Abstract definition of the JSON data sent during GraphQL HTTP POST requests. */\nexport interface FetchBody {\n  query?: string;\n  documentId?: string;\n  operationName: string | undefined;\n  variables: undefined | Record<string, any>;\n  extensions: undefined | Record<string, any>;\n}\n\n/** Creates a GraphQL over HTTP compliant JSON request body.\n * @param request - An object containing a `query` document and `variables`.\n * @returns A {@link FetchBody}\n * @see {@link https://github.com/graphql/graphql-over-http} for the GraphQL over HTTP spec.\n */\nexport function makeFetchBody<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables,\n>(request: Omit<GraphQLRequest<Data, Variables>, 'key'>): FetchBody {\n  const body: FetchBody = {\n    query: undefined,\n    documentId: undefined,\n    operationName: getOperationName(request.query),\n    variables: request.variables || undefined,\n    extensions: request.extensions,\n  };\n\n  if (\n    'documentId' in request.query &&\n    request.query.documentId &&\n    // NOTE: We have to check that the document will definitely be sent\n    // as a persisted document to avoid breaking changes\n    (!request.query.definitions || !request.query.definitions.length)\n  ) {\n    body.documentId = request.query.documentId;\n  } else if (\n    !request.extensions ||\n    !request.extensions.persistedQuery ||\n    !!request.extensions.persistedQuery.miss\n  ) {\n    body.query = stringifyDocument(request.query);\n  }\n\n  return body;\n}\n\n/** Creates a URL that will be called for a GraphQL HTTP request.\n *\n * @param operation - An {@link Operation} for which to make the request.\n * @param body - A {@link FetchBody} which may be replaced with a URL.\n *\n * @remarks\n * Creates the URL that’ll be called as part of a GraphQL HTTP request.\n * Built-in fetch exchanges support sending GET requests, even for\n * non-persisted full requests, which this function supports by being\n * able to serialize GraphQL requests into the URL.\n */\nexport const makeFetchURL = (\n  operation: Operation,\n  body?: FetchBody\n): string => {\n  const useGETMethod =\n    operation.kind === 'query' && operation.context.preferGetMethod;\n  if (!useGETMethod || !body) return operation.context.url;\n\n  const urlParts = splitOutSearchParams(operation.context.url);\n  for (const key in body) {\n    const value = body[key];\n    if (value) {\n      urlParts[1].set(\n        key,\n        typeof value === 'object' ? stringifyVariables(value) : value\n      );\n    }\n  }\n  const finalUrl = urlParts.join('?');\n  if (finalUrl.length > 2047 && useGETMethod !== 'force') {\n    operation.context.preferGetMethod = false;\n    return operation.context.url;\n  }\n\n  return finalUrl;\n};\n\nconst splitOutSearchParams = (\n  url: string\n): readonly [string, URLSearchParams] => {\n  const start = url.indexOf('?');\n  return start > -1\n    ? [url.slice(0, start), new URLSearchParams(url.slice(start + 1))]\n    : [url, new URLSearchParams()];\n};\n\n/** Serializes a {@link FetchBody} into a {@link RequestInit.body} format. */\nconst serializeBody = (\n  operation: Operation,\n  body?: FetchBody\n): FormData | string | undefined => {\n  const omitBody =\n    operation.kind === 'query' && !!operation.context.preferGetMethod;\n  if (body && !omitBody) {\n    const json = stringifyVariables(body);\n    const files = extractFiles(body.variables);\n    if (files.size) {\n      const form = new FormData();\n      form.append('operations', json);\n      form.append(\n        'map',\n        stringifyVariables({\n          ...[...files.keys()].map(value => [value]),\n        })\n      );\n      let index = 0;\n      for (const file of files.values()) form.append(`${index++}`, file);\n      return form;\n    }\n    return json;\n  }\n};\n\nconst isHeaders = (headers: HeadersInit): headers is Headers =>\n  'has' in headers && !Object.keys(headers).length;\n\n/** Creates a `RequestInit` object for a given `Operation`.\n *\n * @param operation - An {@link Operation} for which to make the request.\n * @param body - A {@link FetchBody} which is added to the options, if the request isn’t a GET request.\n *\n * @remarks\n * Creates the fetch options {@link RequestInit} object that’ll be passed to the Fetch API\n * as part of a GraphQL over HTTP request. It automatically sets a default `Content-Type`\n * header.\n *\n * @see {@link https://github.com/graphql/graphql-over-http} for the GraphQL over HTTP spec.\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API} for the Fetch API spec.\n */\nexport const makeFetchOptions = (\n  operation: Operation,\n  body?: FetchBody\n): RequestInit => {\n  const headers: HeadersInit = {\n    accept:\n      operation.kind === 'subscription'\n        ? 'text/event-stream, multipart/mixed'\n        : 'application/graphql-response+json, application/graphql+json, application/json, text/event-stream, multipart/mixed',\n  };\n  const extraOptions =\n    (typeof operation.context.fetchOptions === 'function'\n      ? operation.context.fetchOptions()\n      : operation.context.fetchOptions) || {};\n  if (extraOptions.headers) {\n    if (isHeaders(extraOptions.headers)) {\n      extraOptions.headers.forEach((value, key) => {\n        headers[key] = value;\n      });\n    } else if (Array.isArray(extraOptions.headers)) {\n      (extraOptions.headers as Array<[string, string]>).forEach(\n        (value, key) => {\n          if (Array.isArray(value)) {\n            if (headers[value[0]]) {\n              headers[value[0]] = `${headers[value[0]]},${value[1]}`;\n            } else {\n              headers[value[0]] = value[1];\n            }\n          } else {\n            headers[key] = value;\n          }\n        }\n      );\n    } else {\n      for (const key in extraOptions.headers) {\n        headers[key.toLowerCase()] = extraOptions.headers[key];\n      }\n    }\n  }\n\n  const serializedBody = serializeBody(operation, body);\n  if (typeof serializedBody === 'string' && !headers['content-type'])\n    headers['content-type'] = 'application/json';\n  return {\n    ...extraOptions,\n    method: serializedBody ? 'POST' : 'GET',\n    body: serializedBody,\n    headers,\n  };\n};\n", "/* Summary: This file handles the HTTP transport via GraphQL over HTTP\n * See: https://graphql.github.io/graphql-over-http/draft/\n *\n * `@urql/core`, by default, implements several RFC'd protocol extensions\n * on top of this. As such, this implementation supports:\n * - [Incremental Delivery](https://github.com/graphql/graphql-over-http/blob/main/rfcs/IncrementalDelivery.md)\n * - [GraphQL over SSE](https://github.com/graphql/graphql-over-http/blob/main/rfcs/GraphQLOverSSE.md)\n *\n * This also supports the \"Defer Stream\" payload format.\n * See: https://github.com/graphql/graphql-wg/blob/main/rfcs/DeferStream.md\n * Implementation for this is located in `../utils/result.ts` in `mergeResultPatch`\n *\n * And; this also supports the GraphQL Multipart spec for file uploads.\n * See: https://github.com/jaydenseric/graphql-multipart-request-spec\n * Implementation for this is located in `../utils/variables.ts` in `extractFiles`,\n * and `./fetchOptions.ts` in `serializeBody`.\n *\n * And; this also supports GET requests (and hence; automatic persisted queries)\n * via the `@urql/exchange-persisted` package.\n *\n * This implementation DOES NOT support Batching.\n * See: https://github.com/graphql/graphql-over-http/blob/main/rfcs/Batching.md\n * Which is deemed out-of-scope, as it's sufficiently unnecessary given\n * modern handling of HTTP requests being in parallel.\n *\n * The implementation in this file needs to make certain accommodations for:\n * - The Web Fetch API\n * - Non-browser or polyfill Fetch APIs\n * - Node.js-like Fetch implementations (see `toString` below)\n *\n * GraphQL over SSE has a reference implementation, which supports non-HTTP/2\n * modes and is a faithful implementation of the spec.\n * See: https://github.com/enisdenjo/graphql-sse\n *\n * GraphQL Inremental Delivery (aka “GraphQL Multipart Responses”) has a\n * reference implementation, which a prior implementation of this file heavily\n * leaned on (See prior attribution comments)\n * See: https://github.com/maraisr/meros\n *\n * This file merges support for all three GraphQL over HTTP response formats\n * via async generators and Wonka’s `fromAsyncIterable`. As part of this, `streamBody`\n * and `split` are the common, cross-compatible base implementations.\n */\n\nimport type { Source } from 'wonka';\nimport { fromAsyncIterable, onEnd, filter, pipe } from 'wonka';\nimport type { Operation, OperationResult, ExecutionResult } from '../types';\nimport { makeResult, makeErrorResult, mergeResultPatch } from '../utils';\n\nconst decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder() : null;\nconst boundaryHeaderRe = /boundary=\"?([^=\";]+)\"?/i;\nconst eventStreamRe = /data: ?([^\\n]+)/;\n\ntype ChunkData = Buffer | Uint8Array;\n\n// NOTE: We're avoiding referencing the `Buffer` global here to prevent\n// auto-polyfilling in Webpack\nconst toString = (input: Buffer | ArrayBuffer): string =>\n  input.constructor.name === 'Buffer'\n    ? (input as Buffer).toString()\n    : decoder!.decode(input as ArrayBuffer);\n\nasync function* streamBody(response: Response): AsyncIterableIterator<string> {\n  if (response.body![Symbol.asyncIterator]) {\n    for await (const chunk of response.body! as any)\n      yield toString(chunk as ChunkData);\n  } else {\n    const reader = response.body!.getReader();\n    let result: ReadableStreamReadResult<ChunkData>;\n    try {\n      while (!(result = await reader.read()).done) yield toString(result.value);\n    } finally {\n      reader.cancel();\n    }\n  }\n}\n\nasync function* split(\n  chunks: AsyncIterableIterator<string>,\n  boundary: string\n): AsyncIterableIterator<string> {\n  let buffer = '';\n  let boundaryIndex: number;\n  for await (const chunk of chunks) {\n    buffer += chunk;\n    while ((boundaryIndex = buffer.indexOf(boundary)) > -1) {\n      yield buffer.slice(0, boundaryIndex);\n      buffer = buffer.slice(boundaryIndex + boundary.length);\n    }\n  }\n}\n\nasync function* parseJSON(\n  response: Response\n): AsyncIterableIterator<ExecutionResult> {\n  yield JSON.parse(await response.text());\n}\n\nasync function* parseEventStream(\n  response: Response\n): AsyncIterableIterator<ExecutionResult> {\n  let payload: any;\n  for await (const chunk of split(streamBody(response), '\\n\\n')) {\n    const match = chunk.match(eventStreamRe);\n    if (match) {\n      const chunk = match[1];\n      try {\n        yield (payload = JSON.parse(chunk));\n      } catch (error) {\n        if (!payload) throw error;\n      }\n      if (payload && payload.hasNext === false) break;\n    }\n  }\n  if (payload && payload.hasNext !== false) {\n    yield { hasNext: false };\n  }\n}\n\nasync function* parseMultipartMixed(\n  contentType: string,\n  response: Response\n): AsyncIterableIterator<ExecutionResult> {\n  const boundaryHeader = contentType.match(boundaryHeaderRe);\n  const boundary = '--' + (boundaryHeader ? boundaryHeader[1] : '-');\n  let isPreamble = true;\n  let payload: any;\n  for await (let chunk of split(streamBody(response), '\\r\\n' + boundary)) {\n    if (isPreamble) {\n      isPreamble = false;\n      const preambleIndex = chunk.indexOf(boundary);\n      if (preambleIndex > -1) {\n        chunk = chunk.slice(preambleIndex + boundary.length);\n      } else {\n        continue;\n      }\n    }\n    try {\n      yield (payload = JSON.parse(chunk.slice(chunk.indexOf('\\r\\n\\r\\n') + 4)));\n    } catch (error) {\n      if (!payload) throw error;\n    }\n    if (payload && payload.hasNext === false) break;\n  }\n  if (payload && payload.hasNext !== false) {\n    yield { hasNext: false };\n  }\n}\n\nasync function* parseMaybeJSON(\n  response: Response\n): AsyncIterableIterator<ExecutionResult> {\n  const text = await response.text();\n  try {\n    const result = JSON.parse(text);\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(\n        `Found response with content-type \"text/plain\" but it had a valid \"application/json\" response.`\n      );\n    }\n    yield result;\n  } catch (e) {\n    throw new Error(text);\n  }\n}\n\nasync function* fetchOperation(\n  operation: Operation,\n  url: string,\n  fetchOptions: RequestInit\n) {\n  let networkMode = true;\n  let result: OperationResult | null = null;\n  let response: Response | undefined;\n\n  try {\n    // Delay for a tick to give the Client a chance to cancel the request\n    // if a teardown comes in immediately\n    yield await Promise.resolve();\n\n    response = await (operation.context.fetch || fetch)(url, fetchOptions);\n    const contentType = response.headers.get('Content-Type') || '';\n\n    let results: AsyncIterable<ExecutionResult>;\n    if (/multipart\\/mixed/i.test(contentType)) {\n      results = parseMultipartMixed(contentType, response);\n    } else if (/text\\/event-stream/i.test(contentType)) {\n      results = parseEventStream(response);\n    } else if (!/text\\//i.test(contentType)) {\n      results = parseJSON(response);\n    } else {\n      results = parseMaybeJSON(response);\n    }\n\n    let pending: ExecutionResult['pending'];\n    for await (const payload of results) {\n      if (payload.pending && !result) {\n        pending = payload.pending;\n      } else if (payload.pending) {\n        pending = [...pending!, ...payload.pending];\n      }\n      result = result\n        ? mergeResultPatch(result, payload, response, pending)\n        : makeResult(operation, payload, response);\n      networkMode = false;\n      yield result;\n      networkMode = true;\n    }\n\n    if (!result) {\n      yield (result = makeResult(operation, {}, response));\n    }\n  } catch (error: any) {\n    if (!networkMode) {\n      throw error;\n    }\n\n    yield makeErrorResult(\n      operation,\n      response &&\n        (response.status < 200 || response.status >= 300) &&\n        response.statusText\n        ? new Error(response.statusText)\n        : error,\n      response\n    );\n  }\n}\n\n/** Makes a GraphQL HTTP request to a given API by wrapping around the Fetch API.\n *\n * @param operation - The {@link Operation} that should be sent via GraphQL over HTTP.\n * @param url - The endpoint URL for the GraphQL HTTP API.\n * @param fetchOptions - The {@link RequestInit} fetch options for the request.\n * @returns A Wonka {@link Source} of {@link OperationResult | OperationResults}.\n *\n * @remarks\n * This utility defines how all built-in fetch exchanges make GraphQL HTTP requests,\n * supporting multipart incremental responses, cancellation and other smaller\n * implementation details.\n *\n * If you’re implementing a modified fetch exchange for a GraphQL over HTTP API\n * it’s recommended you use this utility.\n *\n * Hint: This function does not use the passed `operation` to create or modify the\n * `fetchOptions` and instead expects that the options have already been created\n * using {@link makeFetchOptions} and modified as needed.\n *\n * @throws\n * If the `fetch` polyfill or globally available `fetch` function doesn’t support\n * streamed multipart responses while trying to handle a `multipart/mixed` GraphQL response,\n * the source will throw “Streaming requests unsupported”.\n * This shouldn’t happen in modern browsers and Node.js.\n *\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API} for the Fetch API spec.\n */\nexport function makeFetchSource(\n  operation: Operation,\n  url: string,\n  fetchOptions: RequestInit\n): Source<OperationResult> {\n  let abortController: AbortController | void;\n  if (typeof AbortController !== 'undefined') {\n    fetchOptions.signal = (abortController = new AbortController()).signal;\n  }\n  return pipe(\n    fromAsyncIterable(fetchOperation(operation, url, fetchOptions)),\n    filter((result): result is OperationResult => !!result),\n    onEnd(() => {\n      if (abortController) abortController.abort();\n    })\n  );\n}\n", "interface EntityLike {\n  [key: string]: EntityLike | EntityLike[] | any;\n  __typename: string | null | void;\n}\n\nconst collectTypes = (obj: EntityLike | EntityLike[], types: Set<string>) => {\n  if (Array.isArray(obj)) {\n    for (const item of obj) collectTypes(item, types);\n  } else if (typeof obj === 'object' && obj !== null) {\n    for (const key in obj) {\n      if (key === '__typename' && typeof obj[key] === 'string') {\n        types.add(obj[key] as string);\n      } else {\n        collectTypes(obj[key], types);\n      }\n    }\n  }\n\n  return types;\n};\n\n/** Finds and returns a list of `__typename` fields found in response data.\n *\n * @privateRemarks\n * This is used by `@urql/core`’s document `cacheExchange` to find typenames\n * in a given GraphQL response’s data.\n */\nexport const collectTypenames = (response: object): string[] => [\n  ...collectTypes(response as EntityLike, new Set()),\n];\n", "import type {\n  FieldNode,\n  SelectionNode,\n  DefinitionNode,\n  DirectiveNode,\n} from '@0no-co/graphql.web';\nimport { Kind } from '@0no-co/graphql.web';\nimport type { KeyedDocumentNode } from './request';\nimport { keyDocument } from './request';\nimport type { FormattedNode, TypedDocumentNode } from '../types';\n\nconst formatNode = <\n  T extends SelectionNode | DefinitionNode | TypedDocumentNode<any, any>,\n>(\n  node: T\n): FormattedNode<T> => {\n  if ('definitions' in node) {\n    const definitions: FormattedNode<DefinitionNode>[] = [];\n    for (const definition of node.definitions) {\n      const newDefinition = formatNode(definition);\n      definitions.push(newDefinition);\n    }\n\n    return { ...node, definitions } as FormattedNode<T>;\n  }\n\n  if ('directives' in node && node.directives && node.directives.length) {\n    const directives: DirectiveNode[] = [];\n    const _directives = {};\n    for (const directive of node.directives) {\n      let name = directive.name.value;\n      if (name[0] !== '_') {\n        directives.push(directive);\n      } else {\n        name = name.slice(1);\n      }\n      _directives[name] = directive;\n    }\n    node = { ...node, directives, _directives };\n  }\n\n  if ('selectionSet' in node) {\n    const selections: FormattedNode<SelectionNode>[] = [];\n    let hasTypename = node.kind === Kind.OPERATION_DEFINITION;\n    if (node.selectionSet) {\n      for (const selection of node.selectionSet.selections || []) {\n        hasTypename =\n          hasTypename ||\n          (selection.kind === Kind.FIELD &&\n            selection.name.value === '__typename' &&\n            !selection.alias);\n        const newSelection = formatNode(selection);\n        selections.push(newSelection);\n      }\n\n      if (!hasTypename) {\n        selections.push({\n          kind: Kind.FIELD,\n          name: {\n            kind: Kind.NAME,\n            value: '__typename',\n          },\n          _generated: true,\n        } as FormattedNode<FieldNode>);\n      }\n\n      return {\n        ...node,\n        selectionSet: { ...node.selectionSet, selections },\n      } as FormattedNode<T>;\n    }\n  }\n\n  return node as FormattedNode<T>;\n};\n\nconst formattedDocs = new Map<number, KeyedDocumentNode>();\n\n/** Formats a GraphQL document to add `__typename` fields and process client-side directives.\n *\n * @param node - a {@link DocumentNode}.\n * @returns a {@link FormattedDocument}\n *\n * @remarks\n * Cache {@link Exchange | Exchanges} will require typename introspection to\n * recognize types in a GraphQL response. To retrieve these typenames,\n * this function is used to add the `__typename` fields to non-root\n * selection sets of a GraphQL document.\n *\n * Additionally, this utility will process directives, filter out client-side\n * directives starting with an `_` underscore, and place a `_directives` dictionary\n * on selection nodes.\n *\n * This utility also preserves the internally computed key of the\n * document as created by {@link createRequest} to avoid any\n * formatting from being duplicated.\n *\n * @see {@link https://spec.graphql.org/October2021/#sec-Type-Name-Introspection} for more information\n * on typename introspection via the `__typename` field.\n */\nexport const formatDocument = <T extends TypedDocumentNode<any, any>>(\n  node: T\n): FormattedNode<T> => {\n  const query = keyDocument(node);\n\n  let result = formattedDocs.get(query.__key);\n  if (!result) {\n    formattedDocs.set(\n      query.__key,\n      (result = formatNode(query) as KeyedDocumentNode)\n    );\n    // Ensure that the hash of the resulting document won't suddenly change\n    // we are marking __key as non-enumerable so when external exchanges use visit\n    // to manipulate a document we won't restore the previous query due to the __key\n    // property.\n    Object.defineProperty(result, '__key', {\n      value: query.__key,\n      enumerable: false,\n    });\n  }\n\n  return result as FormattedNode<T>;\n};\n", "/** Used to recursively mark `__typename` fields in data as non-enumerable.\n *\n * @deprecated Not recommended over modelling inputs manually (See #3299)\n *\n * @remarks\n * This utility can be used to recursively copy GraphQl response data and hide\n * all `__typename` fields present on it.\n *\n * Hint: It’s not recommended to do this, unless it's absolutely necessary as\n * cloning and modifying all data of a response can be unnecessarily slow, when\n * a manual and more specific copy/mask is more efficient.\n *\n * @see {@link ClientOptions.maskTypename} for a description of how the `Client` uses this utility.\n */\nexport const maskTypename = (data: any, isRoot?: boolean): any => {\n  if (!data || typeof data !== 'object') {\n    return data;\n  } else if (Array.isArray(data)) {\n    return data.map(d => maskTypename(d));\n  } else if (\n    data &&\n    typeof data === 'object' &&\n    (isRoot || '__typename' in data)\n  ) {\n    const acc = {};\n    for (const key in data) {\n      if (key === '__typename') {\n        Object.defineProperty(acc, '__typename', {\n          enumerable: false,\n          value: data.__typename,\n        });\n      } else {\n        acc[key] = maskTypename(data[key]);\n      }\n    }\n    return acc;\n  } else {\n    return data;\n  }\n};\n", "import type { Sink, Source } from 'wonka';\nimport { subscribe, take, filter, toPromise, pipe } from 'wonka';\nimport type { OperationResult, OperationResultSource } from '../types';\n\n/** Patches a `toPromise` method onto the `Source` passed to it.\n * @param source$ - the Wonka {@link Source} to patch.\n * @returns The passed `source$` with a patched `toPromise` method as a {@link PromisifiedSource}.\n * @internal\n */\nexport function withPromise<T extends OperationResult>(\n  _source$: Source<T>\n): OperationResultSource<T> {\n  const source$ = ((sink: Sink<T>) =>\n    _source$(sink)) as OperationResultSource<T>;\n  source$.toPromise = () =>\n    pipe(\n      source$,\n      filter(result => !result.stale && !result.hasNext),\n      take(1),\n      toPromise\n    );\n  source$.then = (onResolve, onReject) =>\n    source$.toPromise().then(onResolve, onReject);\n  source$.subscribe = onResult => subscribe(onResult)(source$);\n  return source$;\n}\n", "import type {\n  AnyVariables,\n  GraphQLRequest,\n  Operation,\n  OperationContext,\n  OperationType,\n} from '../types';\n\n/** Creates a {@link Operation} from the given parameters.\n *\n * @param kind - The {@link OperationType} of GraphQL operation, i.e. `query`, `mutation`, or `subscription`.\n * @param request - The {@link GraphQLRequest} or {@link Operation} used as a template for the new `Operation`.\n * @param context - The {@link OperationContext} `context` data for the `Operation`.\n * @returns A new {@link Operation}.\n *\n * @remarks\n * This method is both used to create new {@link Operation | Operations} as well as copy and modify existing\n * operations. While it’s not required to use this function to copy an `Operation`, it is recommended, in case\n * additional dynamic logic is added to them in the future.\n *\n * Hint: When an {@link Operation} is passed to the `request` argument, the `context` argument does not have to be\n * a complete {@link OperationContext} and will instead be combined with passed {@link Operation.context}.\n *\n * @example\n * An example of copying an existing `Operation` to modify its `context`:\n *\n * ```ts\n * makeOperation(\n *   operation.kind,\n *   operation,\n *   { requestPolicy: 'cache-first' },\n * );\n * ```\n */\nfunction makeOperation<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables,\n>(\n  kind: OperationType,\n  request: GraphQLRequest<Data, Variables>,\n  context: OperationContext\n): Operation<Data, Variables>;\n\nfunction makeOperation<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables,\n>(\n  kind: OperationType,\n  request: Operation<Data, Variables>,\n  context?: Partial<OperationContext>\n): Operation<Data, Variables>;\n\nfunction makeOperation(kind, request, context) {\n  return {\n    ...request,\n    kind,\n    context: request.context\n      ? {\n          ...request.context,\n          ...context,\n        }\n      : context || request.context,\n  };\n}\n\nexport { makeOperation };\n\n/** Adds additional metadata to an `Operation`'s `context.meta` property while copying it.\n * @see {@link OperationDebugMeta} for more information on the {@link OperationContext.meta} property.\n */\nexport const addMetadata = (\n  operation: Operation,\n  meta: OperationContext['meta']\n) => {\n  return makeOperation(operation.kind, operation, {\n    meta: {\n      ...operation.context.meta,\n      ...meta,\n    },\n  });\n};\n", "export * from './error';\nexport * from './request';\nexport * from './result';\nexport * from './variables';\nexport * from './collectTypenames';\nexport * from './formatDocument';\nexport * from './maskTypename';\nexport * from './streamUtils';\nexport * from './operation';\n\nexport const noop = () => {\n  /* noop */\n};\n", "/* eslint-disable prefer-rest-params */\nimport { Kind } from '@0no-co/graphql.web';\nimport type { DocumentNode, DefinitionNode } from './utils/graphql';\nimport type { AnyVariables, TypedDocumentNode } from './types';\nimport { keyDocument, stringifyDocument } from './utils';\n\n/** A GraphQL parse function, which may be called as a tagged template literal, returning a parsed {@link DocumentNode}.\n *\n * @remarks\n * The `gql` tag or function is used to parse a GraphQL query document into a {@link DocumentNode}.\n *\n * When used as a tagged template, `gql` will automatically merge fragment definitions into the resulting\n * document and deduplicate them.\n *\n * It enforces that all fragments have a unique name. When fragments with different definitions share a name,\n * it will log a warning in development.\n *\n * Hint: It’s recommended to use this `gql` function over other GraphQL parse functions, since it puts the parsed\n * results directly into `@urql/core`’s internal caches and prevents further unnecessary work.\n *\n * @example\n * ```ts\n * const AuthorFragment = gql`\n *   fragment AuthorDisplayComponent on Author {\n *     id\n *     name\n *   }\n * `;\n *\n * const BookFragment = gql`\n *   fragment ListBookComponent on Book {\n *     id\n *     title\n *     author {\n *       ...AuthorDisplayComponent\n *     }\n *   }\n *\n *   ${AuthorFragment}\n * `;\n *\n * const BookQuery = gql`\n *   query Book($id: ID!) {\n *     book(id: $id) {\n *       ...BookFragment\n *     }\n *   }\n *\n *   ${BookFragment}\n * `;\n * ```\n */\nfunction gql<Data = any, Variables extends AnyVariables = AnyVariables>(\n  strings: TemplateStringsArray,\n  ...interpolations: Array<TypedDocumentNode | DocumentNode | string>\n): TypedDocumentNode<Data, Variables>;\n\nfunction gql<Data = any, Variables extends AnyVariables = AnyVariables>(\n  string: string\n): TypedDocumentNode<Data, Variables>;\n\nfunction gql(parts: string | TemplateStringsArray /* arguments */) {\n  const fragmentNames = new Map<string, string>();\n  const definitions: DefinitionNode[] = [];\n  const source: DocumentNode[] = [];\n\n  // Apply the entire tagged template body's definitions\n  let body: string = Array.isArray(parts) ? parts[0] : parts || '';\n  for (let i = 1; i < arguments.length; i++) {\n    const value = arguments[i];\n    if (value && value.definitions) {\n      source.push(value);\n    } else {\n      body += value;\n    }\n\n    body += arguments[0][i];\n  }\n\n  source.unshift(keyDocument(body));\n  for (const document of source) {\n    for (const definition of document.definitions) {\n      if (definition.kind === Kind.FRAGMENT_DEFINITION) {\n        const name = definition.name.value;\n        const value = stringifyDocument(definition);\n        // Fragments will be deduplicated according to this Map\n        if (!fragmentNames.has(name)) {\n          fragmentNames.set(name, value);\n          definitions.push(definition);\n        } else if (\n          process.env.NODE_ENV !== 'production' &&\n          fragmentNames.get(name) !== value\n        ) {\n          // Fragments with the same names is expected to have the same contents\n          console.warn(\n            '[WARNING: Duplicate Fragment] A fragment with name `' +\n              name +\n              '` already exists in this document.\\n' +\n              'While fragment names may not be unique across your source, each name must be unique per document.'\n          );\n        }\n      } else {\n        definitions.push(definition);\n      }\n    }\n  }\n\n  return keyDocument({\n    kind: Kind.DOCUMENT,\n    definitions,\n  });\n}\n\nexport { gql };\n", "/* eslint-disable @typescript-eslint/no-use-before-define */\nimport { filter, map, merge, pipe, tap } from 'wonka';\n\nimport type { Client } from '../client';\nimport type { Exchange, Operation, OperationResult } from '../types';\n\nimport {\n  makeOperation,\n  addMetadata,\n  collectTypenames,\n  formatDocument,\n  makeResult,\n} from '../utils';\n\ntype ResultCache = Map<number, OperationResult>;\ntype OperationCache = Map<string, Set<number>>;\n\nconst shouldSkip = ({ kind }: Operation) =>\n  kind !== 'mutation' && kind !== 'query';\n\n/** Adds unique typenames to query (for invalidating cache entries) */\nexport const mapTypeNames = (operation: Operation): Operation => {\n  const query = formatDocument(operation.query);\n  if (query !== operation.query) {\n    const formattedOperation = makeOperation(operation.kind, operation);\n    formattedOperation.query = query;\n    return formattedOperation;\n  } else {\n    return operation;\n  }\n};\n\n/** Default document cache exchange.\n *\n * @remarks\n * The default document cache in `urql` avoids sending the same GraphQL request\n * multiple times by caching it using the {@link Operation.key}. It will invalidate\n * query results automatically whenever it sees a mutation responses with matching\n * `__typename`s in their responses.\n *\n * The document cache will get the introspected `__typename` fields by modifying\n * your GraphQL operation documents using the {@link formatDocument} utility.\n *\n * This automatic invalidation strategy can fail if your query or mutation don’t\n * contain matching typenames, for instance, because the query contained an\n * empty list.\n * You can manually add hints for this exchange by specifying a list of\n * {@link OperationContext.additionalTypenames} for queries and mutations that\n * should invalidate one another.\n *\n * @see {@link https://urql.dev/goto/docs/basics/document-caching} for more information on this cache.\n */\nexport const cacheExchange: Exchange = ({ forward, client, dispatchDebug }) => {\n  const resultCache: ResultCache = new Map();\n  const operationCache: OperationCache = new Map();\n\n  const isOperationCached = (operation: Operation) =>\n    operation.kind === 'query' &&\n    operation.context.requestPolicy !== 'network-only' &&\n    (operation.context.requestPolicy === 'cache-only' ||\n      resultCache.has(operation.key));\n\n  return ops$ => {\n    const cachedOps$ = pipe(\n      ops$,\n      filter(op => !shouldSkip(op) && isOperationCached(op)),\n      map(operation => {\n        const cachedResult = resultCache.get(operation.key);\n\n        dispatchDebug({\n          operation,\n          ...(cachedResult\n            ? {\n                type: 'cacheHit',\n                message: 'The result was successfully retried from the cache',\n              }\n            : {\n                type: 'cacheMiss',\n                message: 'The result could not be retrieved from the cache',\n              }),\n        });\n\n        let result: OperationResult =\n          cachedResult ||\n          makeResult(operation, {\n            data: null,\n          });\n\n        result = {\n          ...result,\n          operation: addMetadata(operation, {\n            cacheOutcome: cachedResult ? 'hit' : 'miss',\n          }),\n        };\n\n        if (operation.context.requestPolicy === 'cache-and-network') {\n          result.stale = true;\n          reexecuteOperation(client, operation);\n        }\n\n        return result;\n      })\n    );\n\n    const forwardedOps$ = pipe(\n      merge([\n        pipe(\n          ops$,\n          filter(op => !shouldSkip(op) && !isOperationCached(op)),\n          map(mapTypeNames)\n        ),\n        pipe(\n          ops$,\n          filter(op => shouldSkip(op))\n        ),\n      ]),\n      map(op => addMetadata(op, { cacheOutcome: 'miss' })),\n      filter(\n        op => op.kind !== 'query' || op.context.requestPolicy !== 'cache-only'\n      ),\n      forward,\n      tap(response => {\n        let { operation } = response;\n        if (!operation) return;\n\n        let typenames = operation.context.additionalTypenames || [];\n        // NOTE: For now, we only respect `additionalTypenames` from subscriptions to\n        // avoid unexpected breaking changes\n        // We'd expect live queries or other update mechanisms to be more suitable rather\n        // than using subscriptions as “signals” to reexecute queries. However, if they’re\n        // just used as signals, it’s intuitive to hook them up using `additionalTypenames`\n        if (response.operation.kind !== 'subscription') {\n          typenames = collectTypenames(response.data).concat(typenames);\n        }\n\n        // Invalidates the cache given a mutation's response\n        if (\n          response.operation.kind === 'mutation' ||\n          response.operation.kind === 'subscription'\n        ) {\n          const pendingOperations = new Set<number>();\n\n          dispatchDebug({\n            type: 'cacheInvalidation',\n            message: `The following typenames have been invalidated: ${typenames}`,\n            operation,\n            data: { typenames, response },\n          });\n\n          for (let i = 0; i < typenames.length; i++) {\n            const typeName = typenames[i];\n            let operations = operationCache.get(typeName);\n            if (!operations)\n              operationCache.set(typeName, (operations = new Set()));\n            for (const key of operations.values()) pendingOperations.add(key);\n            operations.clear();\n          }\n\n          for (const key of pendingOperations.values()) {\n            if (resultCache.has(key)) {\n              operation = (resultCache.get(key) as OperationResult).operation;\n              resultCache.delete(key);\n              reexecuteOperation(client, operation);\n            }\n          }\n        } else if (operation.kind === 'query' && response.data) {\n          resultCache.set(operation.key, response);\n          for (let i = 0; i < typenames.length; i++) {\n            const typeName = typenames[i];\n            let operations = operationCache.get(typeName);\n            if (!operations)\n              operationCache.set(typeName, (operations = new Set()));\n            operations.add(operation.key);\n          }\n        }\n      })\n    );\n\n    return merge([cachedOps$, forwardedOps$]);\n  };\n};\n\n/** Reexecutes an `Operation` with the `network-only` request policy.\n * @internal\n */\nexport const reexecuteOperation = (client: Client, operation: Operation) => {\n  return client.reexecuteOperation(\n    makeOperation(operation.kind, operation, {\n      requestPolicy: 'network-only',\n    })\n  );\n};\n", "import type { GraphQLError } from '../utils/graphql';\nimport { pipe, filter, merge, map, tap } from 'wonka';\nimport type { Exchange, OperationResult, Operation } from '../types';\nimport { addMetadata, CombinedError } from '../utils';\nimport { reexecuteOperation, mapTypeNames } from './cache';\n\n/** A serialized version of an {@link OperationResult}.\n *\n * @remarks\n * All properties are serialized separately as JSON strings, except for the\n * {@link CombinedError} to speed up JS parsing speed, even if a result doesn’t\n * end up being used.\n *\n * @internal\n */\nexport interface SerializedResult {\n  hasNext?: boolean;\n  /** JSON-serialized version of {@link OperationResult.data}. */\n  data?: string | undefined; // JSON string of data\n  /** JSON-serialized version of {@link OperationResult.extensions}. */\n  extensions?: string | undefined;\n  /** JSON version of {@link CombinedError}. */\n  error?: {\n    graphQLErrors: Array<Partial<GraphQLError> | string>;\n    networkError?: string;\n  };\n}\n\n/** A dictionary of {@link Operation.key} keys to serializable {@link SerializedResult} objects.\n *\n * @remarks\n * It’s not recommended to modify the serialized data manually, however, multiple payloads of\n * this dictionary may safely be merged and combined.\n */\nexport interface SSRData {\n  [key: string]: SerializedResult;\n}\n\n/** Options for the `ssrExchange` allowing it to either operate on the server- or client-side. */\nexport interface SSRExchangeParams {\n  /** Indicates to the {@link SSRExchange} whether it's currently in server-side or client-side mode.\n   *\n   * @remarks\n   * Depending on this option, the {@link SSRExchange} will either capture or replay results.\n   * When `true`, it’s in client-side mode and results will be serialized. When `false`, it’ll\n   * use its deserialized data and replay results from it.\n   */\n  isClient?: boolean;\n  /** May be used on the client-side to pass the {@link SSRExchange} serialized data from the server-side.\n   *\n   * @remarks\n   * Alternatively, {@link SSRExchange.restoreData} may be called to imperatively add serialized data to\n   * the exchange.\n   *\n   * Hint: This method also works on the server-side to add to the initial serialized data, which enables\n   * you to combine multiple {@link SSRExchange} results, as needed.\n   */\n  initialState?: SSRData;\n  /** Forces a new API request to be sent in the background after replaying the deserialized result.\n   *\n   * @remarks\n   * Similarly to the `cache-and-network` {@link RequestPolicy}, this option tells the {@link SSRExchange}\n   * to send a new API request for the {@link Operation} after replaying a serialized result.\n   *\n   * Hint: This is useful when you're caching SSR results and need the client-side to update itself after\n   * rendering the initial serialized SSR results.\n   */\n  staleWhileRevalidate?: boolean;\n  /** Forces {@link OperationResult.extensions} to be serialized alongside the rest of a result.\n   *\n   * @remarks\n   * Entries in the `extension` object of a GraphQL result are often non-standard metdata, and many\n   * APIs use it for data that changes between every request. As such, the {@link SSRExchange} will\n   * not serialize this data by default, unless this flag is set.\n   */\n  includeExtensions?: boolean;\n}\n\n/** An `SSRExchange` either in server-side mode, serializing results, or client-side mode, deserializing and replaying results..\n *\n * @remarks\n * This same {@link Exchange} is used in your code both for the client-side and server-side as it’s “universal”\n * and can be put into either client-side or server-side mode using the {@link SSRExchangeParams.isClient} flag.\n *\n * In server-side mode, the `ssrExchange` will “record” results it sees from your API and provide them for you\n * to send to the client-side using the {@link SSRExchange.extractData} method.\n *\n * In client-side mode, the `ssrExchange` will use these serialized results, rehydrated either using\n * {@link SSRExchange.restoreData} or {@link SSRexchangeParams.initialState}, to replay results the\n * server-side has seen and sent before.\n *\n * Each serialized result will only be replayed once, as it’s assumed that your cache exchange will have the\n * results cached afterwards.\n */\nexport interface SSRExchange extends Exchange {\n  /** Client-side method to add serialized results to the {@link SSRExchange}.\n   * @param data - {@link SSRData},\n   */\n  restoreData(data: SSRData): void;\n  /** Server-side method to get all serialized results the {@link SSRExchange} has captured.\n   * @returns an {@link SSRData} dictionary.\n   */\n  extractData(): SSRData;\n}\n\n/** Serialize an OperationResult to plain JSON */\nconst serializeResult = (\n  result: OperationResult,\n  includeExtensions: boolean\n): SerializedResult => {\n  const serialized: SerializedResult = {\n    data: JSON.stringify(result.data),\n    hasNext: result.hasNext,\n  };\n\n  if (result.data !== undefined) {\n    serialized.data = JSON.stringify(result.data);\n  }\n\n  if (includeExtensions && result.extensions !== undefined) {\n    serialized.extensions = JSON.stringify(result.extensions);\n  }\n\n  if (result.error) {\n    serialized.error = {\n      graphQLErrors: result.error.graphQLErrors.map(error => {\n        if (!error.path && !error.extensions) return error.message;\n\n        return {\n          message: error.message,\n          path: error.path,\n          extensions: error.extensions,\n        };\n      }),\n    };\n\n    if (result.error.networkError) {\n      serialized.error.networkError = '' + result.error.networkError;\n    }\n  }\n\n  return serialized;\n};\n\n/** Deserialize plain JSON to an OperationResult\n * @internal\n */\nconst deserializeResult = (\n  operation: Operation,\n  result: SerializedResult,\n  includeExtensions: boolean\n): OperationResult => ({\n  operation,\n  data: result.data ? JSON.parse(result.data) : undefined,\n  extensions:\n    includeExtensions && result.extensions\n      ? JSON.parse(result.extensions)\n      : undefined,\n  error: result.error\n    ? new CombinedError({\n        networkError: result.error.networkError\n          ? new Error(result.error.networkError)\n          : undefined,\n        graphQLErrors: result.error.graphQLErrors,\n      })\n    : undefined,\n  stale: false,\n  hasNext: !!result.hasNext,\n});\n\nconst revalidated = new Set<number>();\n\n/** Creates a server-side rendering `Exchange` that either captures responses on the server-side or replays them on the client-side.\n *\n * @param params - An {@link SSRExchangeParams} configuration object.\n * @returns the created {@link SSRExchange}\n *\n * @remarks\n * When dealing with server-side rendering, we essentially have two {@link Client | Clients} making requests,\n * the server-side client, and the client-side one. The `ssrExchange` helps implementing a tiny cache on both\n * sides that:\n *\n * - captures results on the server-side which it can serialize,\n * - replays results on the client-side that it deserialized from the server-side.\n *\n * Hint: The `ssrExchange` is basically an exchange that acts like a replacement for any fetch exchange\n * temporarily. As such, you should place it after your cache exchange but in front of any fetch exchange.\n */\nexport const ssrExchange = (params: SSRExchangeParams = {}): SSRExchange => {\n  const staleWhileRevalidate = !!params.staleWhileRevalidate;\n  const includeExtensions = !!params.includeExtensions;\n  const data: Record<string, SerializedResult | null> = {};\n\n  // On the client-side, we delete results from the cache as they're resolved\n  // this is delayed so that concurrent queries don't delete each other's data\n  const invalidateQueue: number[] = [];\n  const invalidate = (result: OperationResult) => {\n    invalidateQueue.push(result.operation.key);\n    if (invalidateQueue.length === 1) {\n      Promise.resolve().then(() => {\n        let key: number | void;\n        while ((key = invalidateQueue.shift())) {\n          data[key] = null;\n        }\n      });\n    }\n  };\n\n  // The SSR Exchange is a temporary cache that can populate results into data for suspense\n  // On the client it can be used to retrieve these temporary results from a rehydrated cache\n  const ssr: SSRExchange =\n    ({ client, forward }) =>\n    ops$ => {\n      // params.isClient tells us whether we're on the client-side\n      // By default we assume that we're on the client if suspense-mode is disabled\n      const isClient =\n        params && typeof params.isClient === 'boolean'\n          ? !!params.isClient\n          : !client.suspense;\n\n      let forwardedOps$ = pipe(\n        ops$,\n        filter(\n          operation =>\n            operation.kind === 'teardown' ||\n            !data[operation.key] ||\n            !!data[operation.key]!.hasNext ||\n            operation.context.requestPolicy === 'network-only'\n        ),\n        map(mapTypeNames),\n        forward\n      );\n\n      // NOTE: Since below we might delete the cached entry after accessing\n      // it once, cachedOps$ needs to be merged after forwardedOps$\n      let cachedOps$ = pipe(\n        ops$,\n        filter(\n          operation =>\n            operation.kind !== 'teardown' &&\n            !!data[operation.key] &&\n            operation.context.requestPolicy !== 'network-only'\n        ),\n        map(op => {\n          const serialized = data[op.key]!;\n          const cachedResult = deserializeResult(\n            op,\n            serialized,\n            includeExtensions\n          );\n\n          if (staleWhileRevalidate && !revalidated.has(op.key)) {\n            cachedResult.stale = true;\n            revalidated.add(op.key);\n            reexecuteOperation(client, op);\n          }\n\n          const result: OperationResult = {\n            ...cachedResult,\n            operation: addMetadata(op, {\n              cacheOutcome: 'hit',\n            }),\n          };\n          return result;\n        })\n      );\n\n      if (!isClient) {\n        // On the server we cache results in the cache as they're resolved\n        forwardedOps$ = pipe(\n          forwardedOps$,\n          tap((result: OperationResult) => {\n            const { operation } = result;\n            if (operation.kind !== 'mutation') {\n              const serialized = serializeResult(result, includeExtensions);\n              data[operation.key] = serialized;\n            }\n          })\n        );\n      } else {\n        // On the client we delete results from the cache as they're resolved\n        cachedOps$ = pipe(cachedOps$, tap(invalidate));\n      }\n\n      return merge([forwardedOps$, cachedOps$]);\n    };\n\n  ssr.restoreData = (restore: SSRData) => {\n    for (const key in restore) {\n      // We only restore data that hasn't been previously invalidated\n      if (data[key] !== null) {\n        data[key] = restore[key];\n      }\n    }\n  };\n\n  ssr.extractData = () => {\n    const result: SSRData = {};\n    for (const key in data) if (data[key] != null) result[key] = data[key]!;\n    return result;\n  };\n\n  if (params && params.initialState) {\n    ssr.restoreData(params.initialState);\n  }\n\n  return ssr;\n};\n", "import type { Subscription, Source } from 'wonka';\nimport { filter, make, merge, mergeMap, pipe, takeUntil } from 'wonka';\n\nimport {\n  makeResult,\n  mergeResultPatch,\n  makeErrorResult,\n  makeOperation,\n} from '../utils';\n\nimport type {\n  Exchange,\n  ExecutionResult,\n  Operation,\n  OperationResult,\n} from '../types';\n\nimport type { FetchBody } from '../internal';\nimport { makeFetchBody } from '../internal';\n\n/** An abstract observer-like interface.\n *\n * @remarks\n * Observer-like interfaces are passed to {@link ObservableLike.subscribe} to provide them\n * with callbacks for their events.\n *\n * @see {@link https://github.com/tc39/proposal-observable} for the full TC39 Observable proposal.\n */\nexport interface ObserverLike<T> {\n  /** Callback for values an {@link ObservableLike} emits. */\n  next: (value: T) => void;\n  /** Callback for an error an {@link ObservableLike} emits, which ends the subscription. */\n  error: (err: any) => void;\n  /** Callback for the completion of an {@link ObservableLike}, which ends the subscription. */\n  complete: () => void;\n}\n\n/** An abstract observable-like interface.\n *\n * @remarks\n * Observable, or Observable-like interfaces, are often used by GraphQL transports to abstract\n * how they send {@link ExecutionResult | ExecutionResults} to consumers. These generally contain\n * a `subscribe` method accepting an {@link ObserverLike} structure.\n *\n * @see {@link https://github.com/tc39/proposal-observable} for the full TC39 Observable proposal.\n */\nexport interface ObservableLike<T> {\n  /** Start the Observable-like subscription and returns a subscription handle.\n   *\n   * @param observer - an {@link ObserverLike} object with result, error, and completion callbacks.\n   * @returns a subscription handle providing an `unsubscribe` method to stop the subscription.\n   */\n  subscribe(observer: ObserverLike<T>): {\n    unsubscribe: () => void;\n  };\n}\n\n/** A more cross-compatible version of the {@link GraphQLRequest} structure.\n * {@link FetchBody} for more details\n */\nexport type SubscriptionOperation = FetchBody;\n\n/** A subscription forwarding function, which must accept a {@link SubscriptionOperation}.\n *\n * @param operation - A {@link SubscriptionOperation}\n * @returns An {@link ObservableLike} object issuing {@link ExecutionResult | ExecutionResults}.\n */\nexport type SubscriptionForwarder = (\n  request: FetchBody,\n  operation: Operation\n) => ObservableLike<ExecutionResult>;\n\n/** This is called to create a subscription and needs to be hooked up to a transport client. */\nexport interface SubscriptionExchangeOpts {\n  /** A subscription forwarding function, which must accept a {@link SubscriptionOperation}.\n   *\n   * @param operation - A {@link SubscriptionOperation}\n   * @returns An {@link ObservableLike} object issuing {@link ExecutionResult | ExecutionResults}.\n   *\n   * @remarks\n   * This callback is called for each {@link Operation} that this `subscriptionExchange` will\n   * handle. It receives the {@link SubscriptionOperation}, which is a more compatible version\n   * of the raw {@link Operation} objects and must return an {@link ObservableLike} of results.\n   */\n  forwardSubscription: SubscriptionForwarder;\n\n  /** Flag to enable this exchange to handle all types of GraphQL operations.\n   *\n   * @remarks\n   * When you aren’t using fetch exchanges and GraphQL over HTTP as a transport for your GraphQL requests,\n   * or you have a third-party GraphQL transport implementation, which must also be used for queries and\n   * mutations, this flag may be used to allow this exchange to handle all kinds of GraphQL operations.\n   *\n   * By default, this flag is `false` and the exchange will only handle GraphQL subscription operations.\n   */\n  enableAllOperations?: boolean;\n\n  /** A predicate function that causes an operation to be handled by this `subscriptionExchange` if `true` is returned.\n   *\n   * @param operation - an {@link Operation}\n   * @returns true when the operation is handled by this exchange.\n   *\n   * @remarks\n   * In some cases, a `subscriptionExchange` will be used to only handle some {@link Operation | Operations},\n   * e.g. all that contain `@live` directive. For these cases, this function may be passed to precisely\n   * determine which `Operation`s this exchange should handle, instead of forwarding.\n   *\n   * When specified, the {@link SubscriptionExchangeOpts.enableAllOperations} flag is disregarded.\n   */\n  isSubscriptionOperation?: (operation: Operation) => boolean;\n}\n\n/** Generic subscription exchange factory used to either create an exchange handling just subscriptions or all operation kinds.\n *\n * @remarks\n * `subscriptionExchange` can be used to create an {@link Exchange} that either\n * handles just GraphQL subscription operations, or optionally all operations,\n * when the {@link SubscriptionExchangeOpts.enableAllOperations} flag is passed.\n *\n * The {@link SubscriptionExchangeOpts.forwardSubscription} function must\n * be provided and provides a generic input that's based on {@link Operation}\n * but is compatible with many libraries implementing GraphQL request or\n * subscription interfaces.\n */\nexport const subscriptionExchange =\n  ({\n    forwardSubscription,\n    enableAllOperations,\n    isSubscriptionOperation,\n  }: SubscriptionExchangeOpts): Exchange =>\n  ({ client, forward }) => {\n    const createSubscriptionSource = (\n      operation: Operation\n    ): Source<OperationResult> => {\n      const observableish = forwardSubscription(\n        makeFetchBody(operation),\n        operation\n      );\n\n      return make<OperationResult>(observer => {\n        let isComplete = false;\n        let sub: Subscription | void;\n        let result: OperationResult | void;\n\n        function nextResult(value: ExecutionResult) {\n          observer.next(\n            (result = result\n              ? mergeResultPatch(result, value)\n              : makeResult(operation, value))\n          );\n        }\n\n        Promise.resolve().then(() => {\n          if (isComplete) return;\n\n          sub = observableish.subscribe({\n            next: nextResult,\n            error(error) {\n              if (Array.isArray(error)) {\n                // NOTE: This is an exception for transports that deliver `GraphQLError[]`, as part\n                // of the observer’s error callback (may happen as part of `graphql-ws`).\n                // We only check for arrays here, as this is an extremely “unexpected” case as the\n                // shape of `ExecutionResult` is instead strictly defined.\n                nextResult({ errors: error });\n              } else {\n                observer.next(makeErrorResult(operation, error));\n              }\n              observer.complete();\n            },\n            complete() {\n              if (!isComplete) {\n                isComplete = true;\n                if (operation.kind === 'subscription') {\n                  client.reexecuteOperation(\n                    makeOperation('teardown', operation, operation.context)\n                  );\n                }\n                if (result && result.hasNext) {\n                  nextResult({ hasNext: false });\n                }\n                observer.complete();\n              }\n            },\n          });\n        });\n\n        return () => {\n          isComplete = true;\n          if (sub) sub.unsubscribe();\n        };\n      });\n    };\n\n    const isSubscriptionOperationFn =\n      isSubscriptionOperation ||\n      (operation =>\n        operation.kind === 'subscription' ||\n        (!!enableAllOperations &&\n          (operation.kind === 'query' || operation.kind === 'mutation')));\n\n    return ops$ => {\n      const subscriptionResults$ = pipe(\n        ops$,\n        filter(\n          operation =>\n            operation.kind !== 'teardown' &&\n            isSubscriptionOperationFn(operation)\n        ),\n        mergeMap(operation => {\n          const { key } = operation;\n          const teardown$ = pipe(\n            ops$,\n            filter(op => op.kind === 'teardown' && op.key === key)\n          );\n\n          return pipe(\n            createSubscriptionSource(operation),\n            takeUntil(teardown$)\n          );\n        })\n      );\n\n      const forward$ = pipe(\n        ops$,\n        filter(\n          operation =>\n            operation.kind === 'teardown' ||\n            !isSubscriptionOperationFn(operation)\n        ),\n        forward\n      );\n\n      return merge([subscriptionResults$, forward$]);\n    };\n  };\n", "import { pipe, tap } from 'wonka';\nimport type { Exchange } from '../types';\n\n/** Simple log debugger exchange.\n *\n * @remarks\n * An exchange that logs incoming {@link Operation | Operations} and\n * {@link OperationResult | OperationResults} in development.\n *\n * This exchange is a no-op in production and often used in issue reporting\n * to understand certain usage patterns of `urql` without having access to\n * the original source code.\n *\n * Hint: When you report an issue you’re having with `urql`, adding\n * this as your first exchange and posting its output can speed up\n * issue triaging a lot!\n */\nexport const debugExchange: Exchange = ({ forward }) => {\n  if (process.env.NODE_ENV === 'production') {\n    return ops$ => forward(ops$);\n  } else {\n    return ops$ =>\n      pipe(\n        ops$,\n        // eslint-disable-next-line no-console\n        tap(op => console.log('[Exchange debug]: Incoming operation: ', op)),\n        forward,\n        tap(result =>\n          // eslint-disable-next-line no-console\n          console.log('[Exchange debug]: Completed operation: ', result)\n        )\n      );\n  }\n};\n", "import type { Exchange } from '../types';\n\n/** Default deduplication exchange.\n * @deprecated\n * This exchange's functionality is now built into the {@link Client}.\n */\nexport const dedupExchange: Exchange =\n  ({ forward }) =>\n  ops$ =>\n    forward(ops$);\n", "/* eslint-disable @typescript-eslint/no-use-before-define */\nimport { filter, merge, mergeMap, pipe, takeUntil, onPush } from 'wonka';\n\nimport type { Exchange } from '../types';\nimport {\n  makeFetchBody,\n  makeFetchURL,\n  makeFetchOptions,\n  makeFetchSource,\n} from '../internal';\n\n/** Default GraphQL over HTTP fetch exchange.\n *\n * @remarks\n * The default fetch exchange in `urql` supports sending GraphQL over HTTP\n * requests, can optionally send GraphQL queries as GET requests, and\n * handles incremental multipart responses.\n *\n * This exchange does not handle persisted queries or multipart uploads.\n * Support for the former can be added using `@urql/exchange-persisted-fetch`\n * and the latter using `@urql/exchange-multipart-fetch`.\n *\n * Hint: The `fetchExchange` and the two other exchanges all use the built-in fetch\n * utilities in `@urql/core/internal`, which you can also use to implement\n * a customized fetch exchange.\n *\n * @see {@link makeFetchSource} for the shared utility calling the Fetch API.\n */\nexport const fetchExchange: Exchange = ({ forward, dispatchDebug }) => {\n  return ops$ => {\n    const fetchResults$ = pipe(\n      ops$,\n      filter(operation => {\n        return (\n          operation.kind !== 'teardown' &&\n          (operation.kind !== 'subscription' ||\n            !!operation.context.fetchSubscriptions)\n        );\n      }),\n      mergeMap(operation => {\n        const body = makeFetchBody(operation);\n        const url = makeFetchURL(operation, body);\n        const fetchOptions = makeFetchOptions(operation, body);\n\n        dispatchDebug({\n          type: 'fetchRequest',\n          message: 'A fetch request is being executed.',\n          operation,\n          data: {\n            url,\n            fetchOptions,\n          },\n        });\n\n        const source = pipe(\n          makeFetchSource(operation, url, fetchOptions),\n          takeUntil(\n            pipe(\n              ops$,\n              filter(op => op.kind === 'teardown' && op.key === operation.key)\n            )\n          )\n        );\n\n        if (process.env.NODE_ENV !== 'production') {\n          return pipe(\n            source,\n            onPush(result => {\n              const error = !result.data ? result.error : undefined;\n\n              dispatchDebug({\n                type: error ? 'fetchError' : 'fetchSuccess',\n                message: `A ${\n                  error ? 'failed' : 'successful'\n                } fetch response has been returned.`,\n                operation,\n                data: {\n                  url,\n                  fetchOptions,\n                  value: error || result,\n                },\n              });\n            })\n          );\n        }\n\n        return source;\n      })\n    );\n\n    const forward$ = pipe(\n      ops$,\n      filter(operation => {\n        return (\n          operation.kind === 'teardown' ||\n          (operation.kind === 'subscription' &&\n            !operation.context.fetchSubscriptions)\n        );\n      }),\n      forward\n    );\n\n    return merge([fetchResults$, forward$]);\n  };\n};\n", "import { share } from 'wonka';\nimport type { ExchangeIO, Exchange, ExchangeInput } from '../types';\n\n/** Composes an array of Exchanges into a single one.\n *\n * @param exchanges - An array of {@link Exchange | Exchanges}.\n * @returns - A composed {@link Exchange}.\n *\n * @remarks\n * `composeExchanges` returns an {@link Exchange} that when instantiated\n * composes the array of passed `Exchange`s into one, calling them from\n * right to left, with the prior `Exchange`’s {@link ExchangeIO} function\n * as the {@link ExchangeInput.forward} input.\n *\n * This simply merges all exchanges into one and is used by the {@link Client}\n * to merge the `exchanges` option it receives.\n *\n * @throws\n * In development, if {@link ExchangeInput.forward} is called repeatedly\n * by an {@link Exchange} an error is thrown, since `forward()` must only\n * be called once per `Exchange`.\n */\nexport const composeExchanges =\n  (exchanges: Exchange[]): Exchange =>\n  ({ client, forward, dispatchDebug }: ExchangeInput): ExchangeIO =>\n    exchanges.reduceRight((forward, exchange) => {\n      let forwarded = false;\n      return exchange({\n        client,\n        forward(operations$) {\n          if (process.env.NODE_ENV !== 'production') {\n            if (forwarded)\n              throw new Error(\n                'forward() must only be called once in each Exchange.'\n              );\n            forwarded = true;\n          }\n          return share(forward(share(operations$)));\n        },\n        dispatchDebug(event) {\n          dispatchDebug({\n            timestamp: Date.now(),\n            source: exchange.name,\n            ...event,\n          });\n        },\n      });\n    }, forward);\n", "import { mergeMap, fromValue, fromPromise, pipe } from 'wonka';\nimport type { Operation, OperationResult, Exchange } from '../types';\nimport type { CombinedError } from '../utils';\n\n/** Options for the `mapExchange` allowing it to react to incoming operations, results, or errors. */\nexport interface MapExchangeOpts {\n  /** Accepts a callback for incoming `Operation`s.\n   *\n   * @param operation - An {@link Operation} that the {@link mapExchange} received.\n   * @returns optionally a new {@link Operation} replacing the original.\n   *\n   * @remarks\n   * You may return new {@link Operation | Operations} from this function replacing\n   * the original that the {@link mapExchange} received.\n   * It’s recommended that you use the {@link makeOperation} utility to create a copy\n   * of the original when you do this. (However, this isn’t required)\n   *\n   * Hint: The callback may also be promisified and return a new {@link Operation} asynchronously,\n   * provided you place your {@link mapExchange} after all synchronous {@link Exchange | Exchanges},\n   * like after your `cacheExchange`.\n   */\n  onOperation?(operation: Operation): Promise<Operation> | Operation | void;\n  /** Accepts a callback for incoming `OperationResult`s.\n   *\n   * @param result - An {@link OperationResult} that the {@link mapExchange} received.\n   * @returns optionally a new {@link OperationResult} replacing the original.\n   *\n   * @remarks\n   * This callback may optionally return a new {@link OperationResult} that replaces the original,\n   * which you can use to modify incoming API results.\n   *\n   * Hint: The callback may also be promisified and return a new {@link Operation} asynchronously,\n   * provided you place your {@link mapExchange} after all synchronous {@link Exchange | Exchanges},\n   * like after your `cacheExchange`.\n   */\n  onResult?(\n    result: OperationResult\n  ): Promise<OperationResult> | OperationResult | void;\n  /** Accepts a callback for incoming `CombinedError`s.\n   *\n   * @param error - A {@link CombinedError} that an incoming {@link OperationResult} contained.\n   * @param operation - The {@link Operation} of the incoming {@link OperationResult}.\n   *\n   * @remarks\n   * The callback may also be promisified and return a new {@link Operation} asynchronously,\n   * provided you place your {@link mapExchange} after all synchronous {@link Exchange | Exchanges},\n   * like after your `cacheExchange`.\n   */\n  onError?(error: CombinedError, operation: Operation): void;\n}\n\n/** Creates an `Exchange` mapping over incoming operations, results, and/or errors.\n *\n * @param opts - A {@link MapExchangeOpts} configuration object, containing the callbacks the `mapExchange` will use.\n * @returns the created {@link Exchange}\n *\n * @remarks\n * The `mapExchange` may be used to react to or modify incoming {@link Operation | Operations}\n * and {@link OperationResult | OperationResults}. Optionally, it can also modify these\n * asynchronously, when a promise is returned from the callbacks.\n *\n * This is useful to, for instance, add an authentication token to a given request, when\n * the `@urql/exchange-auth` package would be overkill.\n *\n * It can also accept an `onError` callback, which can be used to react to incoming\n * {@link CombinedError | CombinedErrors} on results, and trigger side-effects.\n *\n */\nexport const mapExchange = ({\n  onOperation,\n  onResult,\n  onError,\n}: MapExchangeOpts): Exchange => {\n  return ({ forward }) =>\n    ops$ => {\n      return pipe(\n        pipe(\n          ops$,\n          mergeMap(operation => {\n            const newOperation =\n              (onOperation && onOperation(operation)) || operation;\n            return 'then' in newOperation\n              ? fromPromise(newOperation)\n              : fromValue(newOperation);\n          })\n        ),\n        forward,\n        mergeMap(result => {\n          if (onError && result.error) onError(result.error, result.operation);\n          const newResult = (onResult && onResult(result)) || result;\n          return 'then' in newResult\n            ? fromPromise(newResult)\n            : fromValue(newResult);\n        })\n      );\n    };\n};\n", "import { filter, pipe, tap } from 'wonka';\nimport type { ExchangeIO, ExchangeInput } from '../types';\n\n/** Used by the `Client` as the last exchange to warn about unhandled operations.\n *\n * @remarks\n * In a normal setup, some operations may go unhandled when a {@link Client} isn’t set up\n * with the right exchanges.\n * For instance, a `Client` may be missing a fetch exchange, or an exchange handling subscriptions.\n * This {@link Exchange} is added by the `Client` automatically to log warnings about unhandled\n * {@link Operaiton | Operations} in development.\n */\nexport const fallbackExchange: ({\n  dispatchDebug,\n}: Pick<ExchangeInput, 'dispatchDebug'>) => ExchangeIO =\n  ({ dispatchDebug }) =>\n  ops$ => {\n    if (process.env.NODE_ENV !== 'production') {\n      ops$ = pipe(\n        ops$,\n        tap(operation => {\n          if (\n            operation.kind !== 'teardown' &&\n            process.env.NODE_ENV !== 'production'\n          ) {\n            const message = `No exchange has handled operations of kind \"${operation.kind}\". Check whether you've added an exchange responsible for these operations.`;\n\n            dispatchDebug({\n              type: 'fallbackCatch',\n              message,\n              operation,\n            });\n            console.warn(message);\n          }\n        })\n      );\n    }\n\n    // All operations that skipped through the entire exchange chain should be filtered from the output\n    return filter((_x): _x is never => false)(ops$);\n  };\n", "/* eslint-disable @typescript-eslint/no-use-before-define */\n\nimport type { Source, Subscription } from 'wonka';\nimport {\n  lazy,\n  filter,\n  makeSubject,\n  onEnd,\n  onPush,\n  onStart,\n  pipe,\n  share,\n  take,\n  takeUntil,\n  takeWhile,\n  publish,\n  subscribe,\n  switchMap,\n  fromValue,\n  merge,\n  map,\n} from 'wonka';\n\nimport { composeExchanges } from './exchanges';\nimport { fallbackExchange } from './exchanges/fallback';\n\nimport type {\n  DocumentInput,\n  AnyVariables,\n  Exchange,\n  ExchangeInput,\n  GraphQLRequest,\n  Operation,\n  OperationInstance,\n  OperationContext,\n  OperationResult,\n  OperationResultSource,\n  OperationType,\n  RequestPolicy,\n  DebugEvent,\n} from './types';\n\nimport {\n  createRequest,\n  withPromise,\n  maskTypename,\n  noop,\n  makeOperation,\n  getOperationType,\n} from './utils';\n\n/** Configuration options passed when creating a new {@link Client}.\n *\n * @remarks\n * The `ClientOptions` are passed when creating a new {@link Client}, and\n * are used to instantiate the pipeline of {@link Exchange | Exchanges}, configure\n * options used to initialize {@link OperationContext | OperationContexts}, or to\n * change the general behaviour of the {@link Client}.\n */\nexport interface ClientOptions {\n  /** Target URL used by fetch exchanges to make GraphQL API requests to.\n   *\n   * @remarks\n   * This is the URL that fetch exchanges will call to make GraphQL API requests.\n   * This value is copied to {@link OperationContext.url}.\n   */\n  url: string;\n  /** Additional options used by fetch exchanges that'll be passed to the `fetch` call on API requests.\n   *\n   * @remarks\n   * The options in this object or an object returned by a callback function will be merged into the\n   * {@link RequestInit} options passed to the `fetch` call.\n   *\n   * Hint: If you're trying to implement more complex changes per {@link Operation}, it's worth considering\n   * to use the {@link mapExchange} instead, which allows you to change `Operation`s and `OperationResult`s.\n   *\n   * Hint: If you're trying to use this as a function for authentication, consider checking out\n   * `@urql/exchange-auth` instead, which allows you to handle refresh auth flows, and more\n   * complex auth flows.\n   *\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/fetch} for a description of this object.\n   */\n  fetchOptions?: RequestInit | (() => RequestInit);\n  /** A `fetch` function polyfill used by fetch exchanges to make API calls.\n   *\n   * @remarks\n   * This is the fetch polyfill used by any fetch exchange to make an API request. By default, when this\n   * option isn't set, any fetch exchange will attempt to use the globally available `fetch` function\n   * to make a request instead.\n   *\n   * It's recommended to only pass a polyfill, if any of the environments you're running the {@link Client}\n   * in don't support the Fetch API natively.\n   *\n   * Hint: If you're using the \"Incremental Delivery\" multipart spec, for instance with `@defer` directives,\n   * you're better off using the native `fetch` function, or must ensure that your polyfill supports streamed\n   * results. However, a \"Streaming requests unsupported\" error will be thrown, to let you know that your `fetch`\n   * API doesn't support incrementally streamed responses, if this mode is used.\n   *\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API} for the Fetch API spec.\n   */\n  fetch?: typeof fetch;\n  /** Allows a subscription to be executed using a `fetch` API request.\n   *\n   * @remarks\n   * If your API supports the `text/event-stream` and/or `multipart/mixed` response protocol, and you use\n   * this protocol to handle subscriptions, then you may switch this flag to `true`.\n   *\n   * This means you won’t have to create a {@link subscriptionExchange} to handle subscriptions with an\n   * external transport, and will instead be able to use GraphQL over HTTP transports.\n   */\n  fetchSubscriptions?: boolean;\n  /** A list of `Exchange`s that will be used to create the `Client`'s execution pipeline.\n   *\n   * @remarks\n   * The {@link Client} accepts and composes a list of {@link Exchange | Exchanges} into an “exchange pipeline”\n   * which receive a stream of {@link Operation | Operations} the `Client` wishes to execute, and return a stream\n   * of {@link OperationResult | OperationResults}.\n   *\n   * This is the basis for how `urql` handles GraphQL operations, and exchanges handle the creation, execution,\n   * and control flow of exchanges for the `Client`.\n   *\n   * To easily get started you should consider using the {@link dedupExchange}, {@link cacheExchange} and {@link fetchExchange}\n   * these are all exported from the core package.\n   *\n   * @see {@link https://urql.dev/goto/docs/architecture/#the-client-and-exchanges} for more information\n   * on what `Exchange`s are and how they work.\n   */\n  exchanges: Exchange[];\n  /** A configuration flag indicating whether support for \"Suspense\" is activated.\n   *\n   * @remarks\n   * This configuration flag is only relevant for using `urql` with the React or Preact bindings.\n   * When activated it allows `useQuery` to \"suspend\" instead of returning a loading state, which\n   * will stop updates in a querying component and instead cascade\n   * to a higher suspense boundary for a loading state.\n   *\n   * Hint: While, when this option is enabled, by default all `useQuery` hooks will suspense, you can\n   * disable Suspense selectively for each hook.\n   *\n   * @see {@link https://beta.reactjs.org/blog/2022/03/29/react-v18#new-suspense-features} for more information on React Suspense.\n   */\n  suspense?: boolean;\n  /** The request and caching strategy that all `Operation`s on this `Client` will use by default.\n   *\n   * @remarks\n   * The {@link RequestPolicy} instructs cache exchanges how to use and treat their cached results.\n   * By default `cache-first` is set and used, which will use cache results, and only make an API request\n   * on a cache miss.\n   *\n   * The `requestPolicy` can be overriden per operation, since it's added to the {@link OperationContext},\n   * which allows you to change the policy per `Operation`, rather than changing it by default here.\n   *\n   * Hint: We don’t recommend changing this from the default `cache-first` option, unless you know what\n   * you‘re doing. Setting this to `cache-and-network` is not recommend and may not lead to the behaviour\n   * you expect. If you’re looking to always update your cache frequently, use `@urql/exchange-request-policy`\n   * instead.\n   */\n  requestPolicy?: RequestPolicy;\n  /** Instructs fetch exchanges to use a GET request.\n   *\n   * @remarks\n   * This changes the {@link OperationContext.preferGetMethod} option, which tells fetch exchanges\n   * to use GET requests for queries instead of POST requests.\n   *\n   * When set to `true` or `'within-url-limit'`, built-in fetch exchanges will always attempt to send query\n   * operations as GET requests, unless the resulting URL exceeds a length of 2,048 characters.\n   * If you want to bypass this restriction, set this option to `'force'` instead, to always send GET.\n   * requests for queries.\n   */\n  preferGetMethod?: boolean | 'force' | 'within-url-limit';\n  /** Instructs the `Client` to remove `__typename` properties on all results.\n   *\n   * @deprecated Not recommended over modelling inputs manually (See #3299)\n   *\n   * @remarks\n   * By default, cache exchanges will alter your GraphQL documents to request `__typename` fields\n   * for all selections. However, this means that your GraphQL data will now contain `__typename` fields you\n   * didn't ask for. This is why the {@link Client} supports “masking” this field by marking it\n   * as non-enumerable via this option.\n   *\n   * Only use this option if you absolutely have to. It's popular to model mutation inputs in\n   * GraphQL schemas after the object types they modify, and if you're using this option to make\n   * it possible to directly pass objects from results as inputs to your mutation variables, it's\n   * more performant and idomatic to instead create a new input object.\n   *\n   * Hint: With `@urql/exchange-graphcache` you will never need this option, as it selects fields on\n   * the client-side according to which fields you specified, rather than the fields it modified.\n   *\n   * @see {@link https://spec.graphql.org/October2021/#sec-Type-Name-Introspection} for more information\n   * on typename introspection via the `__typename` field.\n   */\n  maskTypename?: boolean;\n}\n\n/** The `Client` is the central hub for your GraphQL operations and holds `urql`'s state.\n *\n * @remarks\n * The `Client` manages your active GraphQL operations and their state, and contains the\n * {@link Exchange} pipeline to execute your GraphQL operations.\n *\n * It contains methods that allow you to execute GraphQL operations manually, but the `Client`\n * is also interacted with by bindings (for React, Preact, Vue, Svelte, etc) to execute GraphQL\n * operations.\n *\n * While {@link Exchange | Exchanges} are ultimately responsible for the control flow of operations,\n * sending API requests, and caching, the `Client` still has the important responsibility for\n * creating operations, managing consumers of active operations, sharing results for operations,\n * and more tasks as a “central hub”.\n *\n * @see {@link https://urql.dev/goto/docs/architecture/#requests-and-operations-on-the-client} for more information\n * on what the `Client` is and does.\n */\nexport interface Client {\n  new (options: ClientOptions): Client;\n\n  /** Exposes the stream of `Operation`s that is passed to the `Exchange` pipeline.\n   *\n   * @remarks\n   * This is a Wonka {@link Source} that issues the {@link Operation | Operations} going into\n   * the exchange pipeline.\n   * @internal\n   */\n  operations$: Source<Operation>;\n\n  /** Flag indicating whether support for “Suspense” is activated.\n   *\n   * @remarks\n   * This flag indicates whether support for “Suspense” has been activated via the\n   * {@link ClientOptions.suspense} flag.\n   *\n   * When this is enabled, the {@link Client} itself doesn’t function any differently, and the flag\n   * only serves as an instructions for the React/Preact bindings to change their behaviour.\n   *\n   * @see {@link ClientOptions.suspense} for more information.\n   * @internal\n   */\n  suspense: boolean;\n\n  /** Dispatches an `Operation` to the `Exchange` pipeline, if this `Operation` is active.\n   *\n   * @remarks\n   * This method is frequently used in {@link Exchange | Exchanges}, for instance caches, to reexecute\n   * an operation. It’s often either called because an `Operation` will need to be queried against the\n   * cache again, if a cache result has changed or been invalidated, or it’s called with an {@link Operation}'s\n   * {@link RequestPolicy} set to `network-only` to issue a network request.\n   *\n   * This method will only dispatch an {@link Operation} if it has active consumers, meaning,\n   * active subscribers to the sources of {@link OperationResult}. For instance, if no bindings\n   * (e.g. `useQuery`) is subscribed to the `Operation`, then `reexecuteOperation` will do nothing.\n   *\n   * All operations are put onto a queue and executed after a micro-tick. The queue of operations is\n   * emptied eagerly and synchronously, similar to a trampoline scheduler.\n   */\n  reexecuteOperation(operation: Operation): void;\n\n  /** Subscribe method to add an event listener to debug events.\n   *\n   * @param onEvent - A callback called with new debug events, each time an `Exchange` issues them.\n   * @returns A Wonka {@link Subscription} which is used to optionally terminate the event listener.\n   *\n   * @remarks\n   * This is a method that's only available in development, and allows the `urql-devtools` to receive\n   * to debug events that are issued by exchanges, giving the devtools more information about the flow\n   * and execution of {@link Operation | Operations}.\n   *\n   * @see {@link DebugEventTypes} for a description of all debug events.\n   * @internal\n   */\n  subscribeToDebugTarget?(onEvent: (event: DebugEvent) => void): Subscription;\n\n  /** Creates an `Operation` from a `GraphQLRequest` and optionally, overriding `OperationContext` options.\n   *\n   * @param kind - The {@link OperationType} of GraphQL operation, i.e. `query`, `mutation`, or `subscription`.\n   * @param request - A {@link GraphQLRequest} created prior to calling this method.\n   * @param opts - {@link OperationContext} options that'll override and be merged with options from the {@link ClientOptions}.\n   * @returns An {@link Operation} created from the parameters.\n   *\n   * @remarks\n   * This method is expected to be called with a `kind` set to the `OperationType` of the GraphQL operation.\n   * In development, this is enforced by checking that the GraphQL document's operation matches this `kind`.\n   *\n   * Hint: While bindings will use this method combined with {@link Client.executeRequestOperation}, if\n   * you’re executing operations manually, you can use one of the other convenience methods instead.\n   *\n   * @see {@link Client.executeRequestOperation} for the method used to execute operations.\n   * @see {@link createRequest} which creates a `GraphQLRequest` from a `DocumentNode` and variables.\n   */\n  createRequestOperation<\n    Data = any,\n    Variables extends AnyVariables = AnyVariables,\n  >(\n    kind: OperationType,\n    request: GraphQLRequest<Data, Variables>,\n    opts?: Partial<OperationContext> | undefined\n  ): Operation<Data, Variables>;\n\n  /** Creates a `Source` that executes the `Operation` and issues `OperationResult`s for this `Operation`.\n   *\n   * @param operation - {@link Operation} that will be executed.\n   * @returns A Wonka {@link Source} of {@link OperationResult | OperationResults} for the passed `Operation`.\n   *\n   * @remarks\n   * The {@link Operation} will be dispatched to the pipeline of {@link Exchange | Exchanges} when\n   * subscribing to the returned {@link Source}, which issues {@link OperationResult | OperationResults}\n   * belonging to this `Operation`.\n   *\n   * Internally, {@link OperationResult | OperationResults} are filtered and deliverd to this source by\n   * comparing the {@link Operation.key} on the operation and the {@link OperationResult.operation}.\n   * For mutations, the {@link OperationContext._instance | `OperationContext._instance`} will additionally be compared, since two mutations\n   * with, even given the same variables, will have two distinct results and will be executed separately.\n   *\n   * The {@link Client} dispatches the {@link Operation} when we subscribe to the returned {@link Source}\n   * and will from then on consider the `Operation` as “active” until we unsubscribe. When all consumers unsubscribe\n   * from an `Operation` and it becomes “inactive” a `teardown` signal will be dispatched to the\n   * {@link Exchange | Exchanges}.\n   *\n   * Hint: While bindings will use this method, if you’re executing operations manually, you can use one\n   * of the other convenience methods instead, like {@link Client.executeQuery} et al.\n   */\n  executeRequestOperation<\n    Data = any,\n    Variables extends AnyVariables = AnyVariables,\n  >(\n    operation: Operation<Data, Variables>\n  ): OperationResultSource<OperationResult<Data, Variables>>;\n\n  /** Creates a `Source` that executes the GraphQL query operation created from the passed parameters.\n   *\n   * @param query - a GraphQL document containing the query operation that will be executed.\n   * @param variables - the variables used to execute the operation.\n   * @param opts - {@link OperationContext} options that'll override and be merged with options from the {@link ClientOptions}.\n   * @returns A {@link OperationResultSource} issuing the {@link OperationResult | OperationResults} for the GraphQL operation.\n   *\n   * @remarks\n   * The `Client.query` method is useful to programmatically create and issue a GraphQL query operation.\n   * It automatically calls {@link createRequest}, {@link client.createRequestOperation}, and\n   * {@link client.executeRequestOperation} for you, and is a convenience method.\n   *\n   * Since it returns a {@link OperationResultSource} it may be chained with a `toPromise()` call to only\n   * await a single result in an async function.\n   *\n   * Hint: This is the recommended way to create queries programmatically when not using the bindings,\n   * or when you’re trying to get a single, promisified result.\n   *\n   * @example\n   * ```ts\n   * const getBookQuery = gql`\n   *   query GetBook($id: ID!) {\n   *     book(id: $id) {\n   *       id\n   *       name\n   *       author {\n   *         name\n   *       }\n   *     }\n   *   }\n   * `;\n   *\n   * async function getBook(id) {\n   *   const result = await client.query(getBookQuery, { id }).toPromise();\n   *   if (result.error) {\n   *     throw result.error;\n   *   }\n   *\n   *   return result.data.book;\n   * }\n   * ```\n   */\n  query<Data = any, Variables extends AnyVariables = AnyVariables>(\n    query: DocumentInput<Data, Variables>,\n    variables: Variables,\n    context?: Partial<OperationContext>\n  ): OperationResultSource<OperationResult<Data, Variables>>;\n\n  /** Returns the first synchronous result a `Client` provides for a given operation.\n   *\n   * @param query - a GraphQL document containing the query operation that will be executed.\n   * @param variables - the variables used to execute the operation.\n   * @param opts - {@link OperationContext} options that'll override and be merged with options from the {@link ClientOptions}.\n   * @returns An {@link OperationResult} if one became available synchronously or `null`.\n   *\n   * @remarks\n   * The `Client.readQuery` method returns a result synchronously or defaults to `null`. This is useful\n   * as it limits the result for a query operation to whatever the cache {@link Exchange} of a {@link Client}\n   * had stored and available at that moment.\n   *\n   * In `urql`, it's expected that cache exchanges return their results synchronously. The bindings\n   * and this method exploit this by using synchronous results, like these, to check what data is already\n   * in the cache.\n   *\n   * This method is similar to what all bindings do to synchronously provide the initial state for queries,\n   * regardless of whether effects afterwards that subscribe to the query operation update this state synchronously\n   * or asynchronously.\n   */\n  readQuery<Data = any, Variables extends AnyVariables = AnyVariables>(\n    query: DocumentInput<Data, Variables>,\n    variables: Variables,\n    context?: Partial<OperationContext>\n  ): OperationResult<Data, Variables> | null;\n\n  /** Creates a `Source` that executes the GraphQL query operation for the passed `GraphQLRequest`.\n   *\n   * @param query - a {@link GraphQLRequest}\n   * @param opts - {@link OperationContext} options that'll override and be merged with options from the {@link ClientOptions}.\n   * @returns A {@link PromisifiedSource} issuing the {@link OperationResult | OperationResults} for the GraphQL operation.\n   *\n   * @remarks\n   * The `Client.executeQuery` method is used to programmatically issue a GraphQL query operation.\n   * It automatically calls {@link client.createRequestOperation} and {@link client.executeRequestOperation} for you,\n   * but requires you to create a {@link GraphQLRequest} using {@link createRequest} yourself first.\n   *\n   * @see {@link Client.query} for a method that doesn't require calling {@link createRequest} yourself.\n   */\n  executeQuery<Data = any, Variables extends AnyVariables = AnyVariables>(\n    query: GraphQLRequest<Data, Variables>,\n    opts?: Partial<OperationContext> | undefined\n  ): OperationResultSource<OperationResult<Data, Variables>>;\n\n  /** Creates a `Source` that executes the GraphQL subscription operation created from the passed parameters.\n   *\n   * @param query - a GraphQL document containing the subscription operation that will be executed.\n   * @param variables - the variables used to execute the operation.\n   * @param opts - {@link OperationContext} options that'll override and be merged with options from the {@link ClientOptions}.\n   * @returns A Wonka {@link Source} issuing the {@link OperationResult | OperationResults} for the GraphQL operation.\n   *\n   * @remarks\n   * The `Client.subscription` method is useful to programmatically create and issue a GraphQL subscription operation.\n   * It automatically calls {@link createRequest}, {@link client.createRequestOperation}, and\n   * {@link client.executeRequestOperation} for you, and is a convenience method.\n   *\n   * Hint: This is the recommended way to create subscriptions programmatically when not using the bindings.\n   *\n   * @example\n   * ```ts\n   * import { pipe, subscribe } from 'wonka';\n   *\n   * const getNewsSubscription = gql`\n   *   subscription GetNews {\n   *     breakingNews {\n   *       id\n   *       text\n   *       createdAt\n   *     }\n   *   }\n   * `;\n   *\n   * function subscribeToBreakingNews() {\n   *   const subscription = pipe(\n   *     client.subscription(getNewsSubscription, {}),\n   *     subscribe(result => {\n   *       if (result.data) {\n   *         console.log(result.data.breakingNews.text);\n   *       }\n   *     })\n   *   );\n   *\n   *   return subscription.unsubscribe;\n   * }\n   * ```\n   */\n  subscription<Data = any, Variables extends AnyVariables = AnyVariables>(\n    query: DocumentInput<Data, Variables>,\n    variables: Variables,\n    context?: Partial<OperationContext>\n  ): OperationResultSource<OperationResult<Data, Variables>>;\n\n  /** Creates a `Source` that executes the GraphQL subscription operation for the passed `GraphQLRequest`.\n   *\n   * @param query - a {@link GraphQLRequest}\n   * @param opts - {@link OperationContext} options that'll override and be merged with options from the {@link ClientOptions}.\n   * @returns A {@link PromisifiedSource} issuing the {@link OperationResult | OperationResults} for the GraphQL operation.\n   *\n   * @remarks\n   * The `Client.executeSubscription` method is used to programmatically issue a GraphQL subscription operation.\n   * It automatically calls {@link client.createRequestOperation} and {@link client.executeRequestOperation} for you,\n   * but requires you to create a {@link GraphQLRequest} using {@link createRequest} yourself first.\n   *\n   * @see {@link Client.subscription} for a method that doesn't require calling {@link createRequest} yourself.\n   */\n  executeSubscription<\n    Data = any,\n    Variables extends AnyVariables = AnyVariables,\n  >(\n    query: GraphQLRequest<Data, Variables>,\n    opts?: Partial<OperationContext> | undefined\n  ): OperationResultSource<OperationResult<Data, Variables>>;\n\n  /** Creates a `Source` that executes the GraphQL mutation operation created from the passed parameters.\n   *\n   * @param query - a GraphQL document containing the mutation operation that will be executed.\n   * @param variables - the variables used to execute the operation.\n   * @param opts - {@link OperationContext} options that'll override and be merged with options from the {@link ClientOptions}.\n   * @returns A {@link PromisifiedSource} issuing the {@link OperationResult | OperationResults} for the GraphQL operation.\n   *\n   * @remarks\n   * The `Client.mutation` method is useful to programmatically create and issue a GraphQL mutation operation.\n   * It automatically calls {@link createRequest}, {@link client.createRequestOperation}, and\n   * {@link client.executeRequestOperation} for you, and is a convenience method.\n   *\n   * Since it returns a {@link PromisifiedSource} it may be chained with a `toPromise()` call to only\n   * await a single result in an async function. Since mutations will only typically issue one result,\n   * using this method is recommended.\n   *\n   * Hint: This is the recommended way to create mutations programmatically when not using the bindings,\n   * or when you’re trying to get a single, promisified result.\n   *\n   * @example\n   * ```ts\n   * const createPostMutation = gql`\n   *   mutation CreatePost($text: String!) {\n   *     createPost(text: $text) {\n   *       id\n   *       text\n   *     }\n   *   }\n   * `;\n   *\n   * async function createPost(text) {\n   *   const result = await client.mutation(createPostMutation, {\n   *     text,\n   *   }).toPromise();\n   *   if (result.error) {\n   *     throw result.error;\n   *   }\n   *\n   *   return result.data.createPost;\n   * }\n   * ```\n   */\n  mutation<Data = any, Variables extends AnyVariables = AnyVariables>(\n    query: DocumentInput<Data, Variables>,\n    variables: Variables,\n    context?: Partial<OperationContext>\n  ): OperationResultSource<OperationResult<Data, Variables>>;\n\n  /** Creates a `Source` that executes the GraphQL mutation operation for the passed `GraphQLRequest`.\n   *\n   * @param query - a {@link GraphQLRequest}\n   * @param opts - {@link OperationContext} options that'll override and be merged with options from the {@link ClientOptions}.\n   * @returns A {@link PromisifiedSource} issuing the {@link OperationResult | OperationResults} for the GraphQL operation.\n   *\n   * @remarks\n   * The `Client.executeMutation` method is used to programmatically issue a GraphQL mutation operation.\n   * It automatically calls {@link client.createRequestOperation} and {@link client.executeRequestOperation} for you,\n   * but requires you to create a {@link GraphQLRequest} using {@link createRequest} yourself first.\n   *\n   * @see {@link Client.mutation} for a method that doesn't require calling {@link createRequest} yourself.\n   */\n  executeMutation<Data = any, Variables extends AnyVariables = AnyVariables>(\n    query: GraphQLRequest<Data, Variables>,\n    opts?: Partial<OperationContext> | undefined\n  ): OperationResultSource<OperationResult<Data, Variables>>;\n}\n\nexport const Client: new (opts: ClientOptions) => Client = function Client(\n  this: Client | {},\n  opts: ClientOptions\n) {\n  if (process.env.NODE_ENV !== 'production' && !opts.url) {\n    throw new Error('You are creating an urql-client without a url.');\n  }\n\n  let ids = 0;\n\n  const replays = new Map<number, OperationResult>();\n  const active: Map<number, Source<OperationResult>> = new Map();\n  const dispatched = new Set<number>();\n  const queue: Operation[] = [];\n\n  const baseOpts = {\n    url: opts.url,\n    fetchSubscriptions: opts.fetchSubscriptions,\n    fetchOptions: opts.fetchOptions,\n    fetch: opts.fetch,\n    preferGetMethod: opts.preferGetMethod,\n    requestPolicy: opts.requestPolicy || 'cache-first',\n  };\n\n  // This subject forms the input of operations; executeOperation may be\n  // called to dispatch a new operation on the subject\n  const operations = makeSubject<Operation>();\n\n  function nextOperation(operation: Operation) {\n    if (\n      operation.kind === 'mutation' ||\n      operation.kind === 'teardown' ||\n      !dispatched.has(operation.key)\n    ) {\n      if (operation.kind === 'teardown') {\n        dispatched.delete(operation.key);\n      } else if (operation.kind !== 'mutation') {\n        dispatched.add(operation.key);\n      }\n      operations.next(operation);\n    }\n  }\n\n  // We define a queued dispatcher on the subject, which empties the queue when it's\n  // activated to allow `reexecuteOperation` to be trampoline-scheduled\n  let isOperationBatchActive = false;\n  function dispatchOperation(operation?: Operation | void) {\n    if (operation) nextOperation(operation);\n\n    if (!isOperationBatchActive) {\n      isOperationBatchActive = true;\n      while (isOperationBatchActive && (operation = queue.shift()))\n        nextOperation(operation);\n      isOperationBatchActive = false;\n    }\n  }\n\n  /** Defines how result streams are created */\n  const makeResultSource = (operation: Operation) => {\n    let result$ = pipe(\n      results$,\n      // Filter by matching key (or _instance if it’s set)\n      filter(\n        (res: OperationResult) =>\n          res.operation.kind === operation.kind &&\n          res.operation.key === operation.key &&\n          (!res.operation.context._instance ||\n            res.operation.context._instance === operation.context._instance)\n      ),\n      // End the results stream when an active teardown event is sent\n      takeUntil(\n        pipe(\n          operations.source,\n          filter(op => op.kind === 'teardown' && op.key === operation.key)\n        )\n      )\n    );\n\n    // Mask typename properties if the option for it is turned on\n    if (opts.maskTypename) {\n      result$ = pipe(\n        result$,\n        map(res => ({ ...res, data: maskTypename(res.data, true) }))\n      );\n    }\n\n    if (operation.kind !== 'query') {\n      // Interrupt subscriptions and mutations when they have no more results\n      result$ = pipe(\n        result$,\n        takeWhile(result => !!result.hasNext, true)\n      );\n    } else {\n      result$ = pipe(\n        result$,\n        // Add `stale: true` flag when a new operation is sent for queries\n        switchMap(result => {\n          const value$ = fromValue(result);\n          return result.stale || result.hasNext\n            ? value$\n            : merge([\n                value$,\n                pipe(\n                  operations.source,\n                  filter(op => op.key === operation.key),\n                  take(1),\n                  map(() => {\n                    result.stale = true;\n                    return result;\n                  })\n                ),\n              ]);\n        })\n      );\n    }\n\n    if (operation.kind !== 'mutation') {\n      result$ = pipe(\n        result$,\n        // Store replay result\n        onPush(result => {\n          if (result.stale) {\n            // If the current result has queued up an operation of the same\n            // key, then `stale` refers to it\n            for (const operation of queue) {\n              if (operation.key === result.operation.key) {\n                dispatched.delete(operation.key);\n                break;\n              }\n            }\n          } else if (!result.hasNext) {\n            dispatched.delete(operation.key);\n          }\n          replays.set(operation.key, result);\n        }),\n        // Cleanup active states on end of source\n        onEnd(() => {\n          // Delete the active operation handle\n          dispatched.delete(operation.key);\n          replays.delete(operation.key);\n          active.delete(operation.key);\n          // Interrupt active queue\n          isOperationBatchActive = false;\n          // Delete all queued up operations of the same key on end\n          for (let i = queue.length - 1; i >= 0; i--)\n            if (queue[i].key === operation.key) queue.splice(i, 1);\n          // Dispatch a teardown signal for the stopped operation\n          nextOperation(\n            makeOperation('teardown', operation, operation.context)\n          );\n        })\n      );\n    } else {\n      result$ = pipe(\n        result$,\n        // Send mutation operation on start\n        onStart(() => {\n          nextOperation(operation);\n        })\n      );\n    }\n\n    return share(result$);\n  };\n\n  const instance: Client =\n    this instanceof Client ? this : Object.create(Client.prototype);\n  const client: Client = Object.assign(instance, {\n    suspense: !!opts.suspense,\n    operations$: operations.source,\n\n    reexecuteOperation(operation: Operation) {\n      // Reexecute operation only if any subscribers are still subscribed to the\n      // operation's exchange results\n      if (operation.kind === 'teardown') {\n        dispatchOperation(operation);\n      } else if (operation.kind === 'mutation' || active.has(operation.key)) {\n        let queued = false;\n        for (let i = 0; i < queue.length; i++)\n          queued = queued || queue[i].key === operation.key;\n        if (!queued) dispatched.delete(operation.key);\n        queue.push(operation);\n        Promise.resolve().then(dispatchOperation);\n      }\n    },\n\n    createRequestOperation(kind, request, opts) {\n      if (!opts) opts = {};\n\n      let requestOperationType: string | undefined;\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        kind !== 'teardown' &&\n        (requestOperationType = getOperationType(request.query)) !== kind\n      ) {\n        throw new Error(\n          `Expected operation of type \"${kind}\" but found \"${requestOperationType}\"`\n        );\n      }\n\n      return makeOperation(kind, request, {\n        _instance:\n          kind === 'mutation'\n            ? ((ids = (ids + 1) | 0) as OperationInstance)\n            : undefined,\n        ...baseOpts,\n        ...opts,\n        requestPolicy: opts.requestPolicy || baseOpts.requestPolicy,\n        suspense: opts.suspense || (opts.suspense !== false && client.suspense),\n      });\n    },\n\n    executeRequestOperation(operation) {\n      if (operation.kind === 'mutation') {\n        return withPromise(makeResultSource(operation));\n      }\n\n      return withPromise(\n        lazy<OperationResult>(() => {\n          let source = active.get(operation.key);\n          if (!source) {\n            active.set(operation.key, (source = makeResultSource(operation)));\n          }\n\n          source = pipe(\n            source,\n            onStart(() => {\n              dispatchOperation(operation);\n            })\n          );\n\n          const replay = replays.get(operation.key);\n          if (\n            operation.kind === 'query' &&\n            replay &&\n            (replay.stale || replay.hasNext)\n          ) {\n            return pipe(\n              merge([\n                source,\n                pipe(\n                  fromValue(replay),\n                  filter(replay => replay === replays.get(operation.key))\n                ),\n              ]),\n              switchMap(fromValue)\n            );\n          } else {\n            return source;\n          }\n        })\n      );\n    },\n\n    executeQuery(query, opts) {\n      const operation = client.createRequestOperation('query', query, opts);\n      return client.executeRequestOperation(operation);\n    },\n\n    executeSubscription(query, opts) {\n      const operation = client.createRequestOperation(\n        'subscription',\n        query,\n        opts\n      );\n      return client.executeRequestOperation(operation);\n    },\n\n    executeMutation(query, opts) {\n      const operation = client.createRequestOperation('mutation', query, opts);\n      return client.executeRequestOperation(operation);\n    },\n\n    readQuery(query, variables, context) {\n      let result: OperationResult | null = null;\n\n      pipe(\n        client.query(query, variables, context),\n        subscribe(res => {\n          result = res;\n        })\n      ).unsubscribe();\n\n      return result;\n    },\n\n    query(query, variables, context) {\n      return client.executeQuery(createRequest(query, variables), context);\n    },\n\n    subscription(query, variables, context) {\n      return client.executeSubscription(\n        createRequest(query, variables),\n        context\n      );\n    },\n\n    mutation(query, variables, context) {\n      return client.executeMutation(createRequest(query, variables), context);\n    },\n  } as Client);\n\n  let dispatchDebug: ExchangeInput['dispatchDebug'] = noop;\n  if (process.env.NODE_ENV !== 'production') {\n    const { next, source } = makeSubject<DebugEvent>();\n    client.subscribeToDebugTarget = (onEvent: (e: DebugEvent) => void) =>\n      pipe(source, subscribe(onEvent));\n    dispatchDebug = next as ExchangeInput['dispatchDebug'];\n  }\n\n  // All exchange are composed into a single one and are called using the constructed client\n  // and the fallback exchange stream\n  const composedExchange = composeExchanges(opts.exchanges);\n\n  // All exchanges receive inputs using which they can forward operations to the next exchange\n  // and receive a stream of results in return, access the client, or dispatch debugging events\n  // All operations then run through the Exchange IOs in a pipeline-like fashion\n  const results$ = share(\n    composedExchange({\n      client,\n      dispatchDebug,\n      forward: fallbackExchange({ dispatchDebug }),\n    })(operations.source)\n  );\n\n  // Prevent the `results$` exchange pipeline from being closed by active\n  // cancellations cascading up from components\n  pipe(results$, publish);\n\n  return client;\n} as any;\n\n/** Accepts `ClientOptions` and creates a `Client`.\n * @param opts - A {@link ClientOptions} objects with options for the `Client`.\n * @returns A {@link Client} instantiated with `opts`.\n */\nexport const createClient = Client as any as (opts: ClientOptions) => Client;\n", "export interface FieldSelection {\n  [key: string]: boolean | null | undefined | FieldCall | FieldSelection;\n}\n\nexport interface BuilderOperation {\n  type: \"query\" | \"subscription\" | \"mutation\";\n  fields: FieldSelection;\n  name?: string;\n  directives?: string[];\n}\n\nconst compileFieldSelection = (fields: FieldSelection): string[] => {\n  return Object.entries(fields)\n    .flatMap(([field, value]) => {\n      if (typeof value === \"boolean\") {\n        return value ? field : false;\n      } else if (value instanceof FieldCall) {\n        let args = \"\";\n        const signatures = Object.entries(value.args)\n          .filter(([_, value]) => value !== null && value !== undefined)\n          .map(([name, value]) => {\n            return `${name}: ${value instanceof Variable ? `$${value.name ?? name}` : JSON.stringify(value)}`;\n          });\n\n        if (signatures.length > 0) {\n          args = `(${signatures.join(\", \")})`;\n        }\n\n        if (value.subselection) {\n          return [`${field}${args} {`, ...compileFieldSelection(value.subselection), `}`];\n        } else {\n          return `${field}${args}`;\n        }\n      } else {\n        return [`${field} {`, ...compileFieldSelection(value as FieldSelection), `}`];\n      }\n    })\n    .filter((value) => !!value)\n    .map((line) => \"  \" + line);\n};\n\nconst extractVariables = (fields: FieldSelection): Record<string, Variable> => {\n  const variables: Record<string, Variable> = {};\n  const nextName = (name: string) => {\n    let count = 1;\n    if (variables[name]) {\n      while (variables[`${name}${count}`]) {\n        count++;\n      }\n      return `${name}${count}`;\n    }\n    return name;\n  };\n\n  Object.entries(fields).forEach(([_field, value]) => {\n    if (value instanceof FieldCall) {\n      Object.entries(value.args).forEach(([name, value]) => {\n        if (value instanceof Variable) {\n          variables[value.name ?? nextName(name)] = value;\n        }\n      });\n\n      if (value.subselection) {\n        Object.assign(variables, extractVariables(value.subselection));\n      }\n    } else if (typeof value === \"object\" && value !== null) {\n      Object.assign(variables, extractVariables(value));\n    }\n  });\n\n  return variables;\n};\n\nconst compileVariables = (operation: BuilderOperation) => {\n  const variables = extractVariables(operation.fields);\n\n  if (Object.keys(variables).length === 0) return \"\";\n  const signatures = Object.entries(variables).map(([name, variable]) => {\n    return `$${name}: ${variable.type}`;\n  });\n\n  return `(${signatures.join(\", \")})`;\n};\n\nclass FieldCall {\n  constructor(readonly args: Record<string, any>, readonly subselection?: FieldSelection) {}\n}\n\nexport interface VariableOptions {\n  type: string;\n  name?: string;\n  value?: any;\n  required?: boolean;\n}\n\n/** Represents one reference to a variable somewhere in a selection */\nexport class Variable {\n  constructor(readonly type: string, readonly name?: string, readonly value?: any) {}\n  present() {\n    return this.value != null;\n  }\n}\n\n/** Used for calling a field with arguments within the main body of a query */\nexport const Call = (args: Record<string, Variable | any>, subselection?: FieldSelection) => new FieldCall(args, subselection);\n\n/** Used for calling a field with a variable within the args to a field */\nexport const Var = (options: VariableOptions) => new Variable(options.type + (options.required ? \"!\" : \"\"), options.name, options.value);\n\n/** Compiles one JS object describing a query into a GraphQL string */\nexport const compile = (operation: BuilderOperation): string => {\n  const signature = compileVariables(operation);\n  const directives = operation.directives && operation.directives.length > 0 ? ` ${operation.directives.join(\" \")}` : \"\";\n\n  return `${operation.type} ${operation.name ?? \"\"}${signature}${directives} {\n${compileFieldSelection(operation.fields).join(\"\\n\")}\n}`;\n};\n\n/** Compiles one JS object describing a query into a GraphQL string and set of variable values for passing alongside the query */\nexport const compileWithVariableValues = (operation: BuilderOperation): { query: string; variables: Record<string, any> } => {\n  const variables = extractVariables(operation.fields);\n\n  return {\n    query: compile(operation),\n    variables: Object.entries(variables ?? {}).reduce((acc, [name, variable]) => {\n      if (typeof variable.value !== \"undefined\") {\n        acc[name] = variable.value;\n      }\n      return acc;\n    }, {} as Record<string, any>),\n  };\n};\n", "export const Hydrators = {\n  DateTime(value: string) {\n    return new Date(value);\n  },\n};\n\nexport type Hydration = keyof typeof Hydrators;\n\n/** Instructions for a client to turn raw transport types (like strings) into useful client side types (like Dates). Unstable and not intended for developer use. */\nexport interface HydrationPlan {\n  [key: string]: Hydration;\n}\n\n/**\n * Utility for declaratively transforming object trees.\n * Useful for turning API date strings into real Date objects, etc.\n * Declarative so that the operations it peforms can be serialized.\n */\nexport class DataHydrator {\n  constructor(readonly plan: HydrationPlan) {}\n\n  apply(source: Record<string, any> | Record<string, any>[]) {\n    if (Array.isArray(source)) {\n      return source.map((object) => this.hydrateObject(object));\n    } else {\n      return this.hydrateObject(source);\n    }\n  }\n\n  private hydrateObject(object: Record<string, any>) {\n    const hydrated = { ...object };\n    for (const [key, hydrator] of Object.entries(this.plan)) {\n      const value = hydrated[key];\n      if (value != null) {\n        hydrated[key] = Hydrators[hydrator](value);\n      }\n    }\n    return hydrated;\n  }\n}\n", "export function klona(x) {\n\tif (typeof x !== 'object') return x;\n\n\tvar k, tmp, str=Object.prototype.toString.call(x);\n\n\tif (str === '[object Object]') {\n\t\tif (x.constructor !== Object && typeof x.constructor === 'function') {\n\t\t\ttmp = new x.constructor();\n\t\t\tfor (k in x) {\n\t\t\t\tif (x.hasOwnProperty(k) && tmp[k] !== x[k]) {\n\t\t\t\t\ttmp[k] = klona(x[k]);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\ttmp = {}; // null\n\t\t\tfor (k in x) {\n\t\t\t\tif (k === '__proto__') {\n\t\t\t\t\tObject.defineProperty(tmp, k, {\n\t\t\t\t\t\tvalue: klona(x[k]),\n\t\t\t\t\t\tconfigurable: true,\n\t\t\t\t\t\tenumerable: true,\n\t\t\t\t\t\twritable: true,\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\ttmp[k] = klona(x[k]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn tmp;\n\t}\n\n\tif (str === '[object Array]') {\n\t\tk = x.length;\n\t\tfor (tmp=Array(k); k--;) {\n\t\t\ttmp[k] = klona(x[k]);\n\t\t}\n\t\treturn tmp;\n\t}\n\n\tif (str === '[object Set]') {\n\t\ttmp = new Set;\n\t\tx.forEach(function (val) {\n\t\t\ttmp.add(klona(val));\n\t\t});\n\t\treturn tmp;\n\t}\n\n\tif (str === '[object Map]') {\n\t\ttmp = new Map;\n\t\tx.forEach(function (val, key) {\n\t\t\ttmp.set(klona(key), klona(val));\n\t\t});\n\t\treturn tmp;\n\t}\n\n\tif (str === '[object Date]') {\n\t\treturn new Date(+x);\n\t}\n\n\tif (str === '[object RegExp]') {\n\t\ttmp = new RegExp(x.source, x.flags);\n\t\ttmp.lastIndex = x.lastIndex;\n\t\treturn tmp;\n\t}\n\n\tif (str === '[object DataView]') {\n\t\treturn new x.constructor( klona(x.buffer) );\n\t}\n\n\tif (str === '[object ArrayBuffer]') {\n\t\treturn x.slice(0);\n\t}\n\n\t// ArrayBuffer.isView(x)\n\t// ~> `new` bcuz `Buffer.slice` => ref\n\tif (str.slice(-6) === 'Array]') {\n\t\treturn new x.constructor(x);\n\t}\n\n\treturn x;\n}\n", "import { klona as cloneDeep } from \"klona\";\nimport type { Jsonify } from \"type-fest\";\nimport { isEqual, toPrimitiveObject } from \"./support.js\";\n\nexport enum ChangeTracking {\n  SinceLoaded,\n  SinceLastPersisted,\n}\n\nexport type RecordShape = Record<string, any> | null | undefined | void;\n\nconst kFields = Symbol.for(\"g/fields\");\nconst kInstantiatedFields = Symbol.for(\"g/if\");\nconst kPersistedFields = Symbol.for(\"g/pf\");\nconst kFieldKeys = Symbol.for(\"g/fk\");\nconst kTouched = Symbol.for(\"g/t\");\n\n/** Represents one record returned from a high level Gadget API call */\nexport class GadgetRecord_<Shape extends RecordShape> {\n  /** Storage of the actual keys and values of this record */\n  [kFields]: Record<string, any> = {};\n  /** Storage of the keys and values of this record at the time it was instantiated */\n  [kInstantiatedFields]: Record<string, any> = {};\n  /** Storage of the keys and values of this record at the time it was last persisted */\n  [kPersistedFields]: Record<string, any> = {};\n  /** Storage of the keys and values of this record at the time it was last persisted */\n  [kFieldKeys]: Set<string>;\n  [kTouched] = false;\n\n  private empty = false;\n\n  constructor(data: Shape) {\n    this[kInstantiatedFields] = cloneDeep(data) ?? {};\n    this[kPersistedFields] = cloneDeep(data) ?? {};\n    Object.assign(this[kFields], data);\n\n    if (!data || Object.keys(data).length === 0) {\n      this.empty = true;\n      this[kFieldKeys] = new Set<string>();\n    } else {\n      this[kFieldKeys] = new Set(Object.keys(this[kFields]));\n    }\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const self = this;\n\n    const handler = {\n      get: (obj: any, prop: string | symbol) => {\n        if (prop in self || typeof prop == \"symbol\") {\n          // if the GadgetRecord responds to the property or function, call that prioritize that\n          let val = (self as any)[prop];\n          if (typeof val == \"function\") {\n            val = val.bind(self);\n          }\n          return val;\n        } else if (prop in obj) {\n          // otherwise proxy it to this [kFields] object\n          return obj[prop];\n        }\n      },\n      set: (obj: Record<string, any>, prop: string | symbol, value: any) => {\n        self.trackKey(prop);\n        obj[prop.toString()] = value;\n        return true;\n      },\n    };\n\n    return new Proxy(this[kFields], handler);\n  }\n\n  /** Makes sure our data keys are all tracked, to avoid repeated runtime object-to-array conversions */\n  private trackKey(key: string | symbol) {\n    const trackingKey = key.toString();\n    this[kFieldKeys].add(trackingKey);\n  }\n\n  /** Helper method to compare values with special handling for Date vs string comparisons in either direction */\n  private hasValueChanged(current: any, previous: any): boolean {\n    if ((current instanceof Date && typeof previous === \"string\") || (previous instanceof Date && typeof current === \"string\")) {\n      const currentDate = current instanceof Date ? current : new Date(current);\n      const previousDate = previous instanceof Date ? previous : new Date(previous);\n\n      // Check if both dates are valid before comparing\n      if (!isNaN(currentDate.getTime()) && !isNaN(previousDate.getTime())) {\n        return currentDate.getTime() !== previousDate.getTime();\n      }\n      return true; // If either can't be converted to a valid date, they're different\n    }\n    return !isEqual(current, previous);\n  }\n\n  /** Returns true if even a single field has changed */\n  private hasChanges(tracking = ChangeTracking.SinceLoaded) {\n    if (this[kTouched]) return true;\n    const diffFields = tracking == ChangeTracking.SinceLoaded ? this[kInstantiatedFields] : this[kPersistedFields];\n\n    return [...this[kFieldKeys]].some((key) => this.hasValueChanged(this[kFields][key], diffFields[key]));\n  }\n\n  /** Checks if the original constructor data was empty or not */\n  isEmpty(): boolean {\n    return this.empty;\n  }\n\n  /** Returns the value of the field for the given `apiIdentifier`. These properties may also be accessed on this record directly. This method can be used if your model field `apiIdentifier` conflicts with the `GadgetRecord` helper functions. */\n  getField(apiIdentifier: string) {\n    return this[kFields][apiIdentifier];\n  }\n\n  /** Sets the value of the field for the given `apiIdentifier`. These properties may also be accessed on this record directly. This method can be used if your model field `apiIdentifier` conflicts with the `GadgetRecord` helper functions. */\n  setField(apiIdentifier: string, value: any) {\n    this.trackKey(apiIdentifier);\n    return (this[kFields][apiIdentifier] = value);\n  }\n\n  /** Returns the `current` and `previous` values for any changed fields, keyed by field `apiIdentifier`.  */\n  changes(): { [prop: string]: { current: any; previous: any } };\n  changes(tracking: ChangeTracking): { [prop: string]: { current: any; previous: any } };\n  /** Returns the `current` and `previous` values if they have `changed`, otherwise `changed` is `false`. */\n  changes(prop: string): { changed: true; current: any; previous: any } | { changed: false };\n  changes(prop: string, tracking: ChangeTracking): { changed: true; current: any; previous: any } | { changed: false };\n  changes(prop?: string | ChangeTracking, tracking = ChangeTracking.SinceLoaded) {\n    const trackChangesSince: ChangeTracking = typeof prop == \"string\" ? tracking : prop || tracking;\n    const diffFields = trackChangesSince == ChangeTracking.SinceLoaded ? this[kInstantiatedFields] : this[kPersistedFields];\n\n    if (prop && typeof prop == \"string\") {\n      const previous = diffFields[prop];\n      const current = this[kFields][prop];\n\n      const changed = this.hasValueChanged(current, previous);\n      return changed ? { changed, current, previous } : { changed };\n    } else {\n      const diff = {} as Record<string, { current: any; previous: any }>;\n      for (const key of this[kFieldKeys]) {\n        if (!isEqual(diffFields[key], this[kFields][key])) {\n          diff[key] = { current: this[kFields][key], previous: diffFields[key] };\n        }\n      }\n      return diff;\n    }\n  }\n\n  /** Returns all current values for fields that have changed */\n  toChangedJSON(tracking = ChangeTracking.SinceLoaded): { [prop: string]: any } {\n    const diffFields = tracking == ChangeTracking.SinceLoaded ? this[kInstantiatedFields] : this[kPersistedFields];\n    const current = {} as Record<string, any>;\n\n    for (const key of this[kFieldKeys]) {\n      if (!isEqual(diffFields[key], this[kFields][key])) {\n        current[key] = this[kFields][key];\n      }\n    }\n\n    return current;\n  }\n\n  /** Returns `true` if any field has changed on this record. */\n  changed(): boolean;\n  changed(tracking: ChangeTracking): boolean;\n  /** Returns `true` if the specified field has changed on this record. */\n  changed(prop: string): boolean;\n  changed(prop: string, tracking: ChangeTracking): boolean;\n  changed(prop?: string | ChangeTracking, tracking = ChangeTracking.SinceLoaded) {\n    if (prop && typeof prop == \"string\") {\n      return this.changes(prop, tracking).changed;\n    } else {\n      return this.hasChanges(prop === undefined ? tracking : (prop as ChangeTracking));\n    }\n  }\n\n  /** Flushes all `changes` and starts tracking new changes from the current state of the record. */\n  flushChanges(tracking = ChangeTracking.SinceLoaded) {\n    if (tracking == ChangeTracking.SinceLoaded) {\n      this[kInstantiatedFields] = cloneDeep(this[kFields]);\n    } else if (tracking == ChangeTracking.SinceLastPersisted) {\n      this[kPersistedFields] = cloneDeep(this[kFields]);\n    }\n    this[kTouched] = false;\n  }\n\n  /** Reverts all `changes` on the record, and returns to either the values this record were instantiated with, or the values at the time of the last `flushChanges` call. */\n  revertChanges(tracking = ChangeTracking.SinceLoaded) {\n    let persistedKeys: string[];\n\n    if (tracking == ChangeTracking.SinceLoaded) {\n      persistedKeys = Object.keys(this[kInstantiatedFields]);\n    } else {\n      persistedKeys = Object.keys(this[kPersistedFields]);\n    }\n\n    for (const key of this[kFieldKeys]) {\n      if (!persistedKeys.includes(key)) delete this[kFields][key];\n    }\n\n    if (tracking == ChangeTracking.SinceLoaded) {\n      Object.assign(this[kFields], cloneDeep(this[kInstantiatedFields]));\n    } else {\n      Object.assign(this[kFields], cloneDeep(this[kPersistedFields]));\n    }\n    this[kTouched] = false;\n  }\n\n  /** Returns a JSON representation of all fields on this record. */\n  toJSON(): Jsonify<Shape> {\n    return toPrimitiveObject({ ...this[kFields] });\n  }\n\n  /** Marks this record as changed so that the next save will save it and adjust any `updatedAt` timestamps */\n  touch(): void {\n    this[kTouched] = true;\n  }\n}\n\n/**\n * The overridden constructor below is TypeScript hijinx to make the generic GadgetRecord class include all the members of the wrapped generic Shape object\n * `GadgetRecord`s are generic because they can hold data of an arbitrary shape from the API, but TypeScript doesn't let the the class extend or implement anything without statically known members. The parameter is generic, so it's not statically known. So, we fake TypeScript out and create this pair of constructor and instance types that unions the instance of the class with the shape itself, making dot access of properties on the shape typecheck fine.\n */\n\n/** One record from the backend of a particular model */\nexport type GadgetRecord<Shape extends RecordShape> = GadgetRecord_<Shape> & Shape;\n\n/**\n * Instantiates a `GadgetRecord` with the attributes of your model. A `GadgetRecord` can be used to track changes to your model and persist those changes via Gadget actions.\n **/\nexport const GadgetRecord: new <Shape extends RecordShape>(data: Shape) => GadgetRecord_<Shape> & Shape = GadgetRecord_ as any;\n\n/**\n * Legacy export for old generated clients expecting to find the class named this\n * @hidden\n */\nexport const GadgetRecordImplementation = GadgetRecord_;\n", "import type { OperationResult } from \"@urql/core\";\nimport { CombinedError } from \"@urql/core\";\nimport { Call, type FieldSelection as BuilderFieldSelection } from \"tiny-graphql-query-compiler\";\nimport { DataHydrator } from \"./DataHydrator.js\";\nimport type { ActionFunctionMetadata, AnyActionFunction } from \"./GadgetFunctions.js\";\nimport type { RecordShape } from \"./GadgetRecord.js\";\nimport { GadgetRecord } from \"./GadgetRecord.js\";\nimport type { VariablesOptions } from \"./types.js\";\n\n/**\n * Generic type of the state of any record of a Gadget model\n **/\nexport type AnyState = string | { [key: string]: AnyState };\n\n/**\n * Error caused by a violated internal expectation that isn't the users fault, but the Gadget platform's. Often the best way to handle is to just retry.\n **/\nexport class GadgetInternalError extends Error {\n  code = \"GGT_INTERNAL_ERROR\";\n  name = \"InternalError\";\n\n  /** @private */\n  statusCode = 500;\n  /** @private */\n  causedByClient = false;\n}\n\n/**\n * An error representing misuse or a violation of the assumptions of the Gadget Client.\n */\nexport class GadgetClientError extends Error {\n  code = \"GGT_CLIENT_ERROR\";\n  name = \"ClientError\";\n\n  /** @private */\n  statusCode = 500;\n  /** @private */\n  causedByClient = true;\n}\n\n/**\n * A Gadget API error with an `code` and `message` describing the error. Most often these errors are caused by invalid input data or by misconfigured Gadget models. Consult the documentation for the specific `code` to learn more.\n **/\nexport class GadgetOperationError extends Error {\n  constructor(incomingMessage: string, readonly code: string) {\n    super(incomingMessage.startsWith(\"GGT_\") ? incomingMessage : `${code}: ${incomingMessage}`);\n  }\n}\n\n/**\n * Interface representing one message on one invalid field for a `InvalidRecordError`\n */\nexport interface InvalidFieldError {\n  /** Which field of a record this error is for */\n  apiIdentifier: string;\n  /** Human facing string representing the error */\n  message: string;\n}\n\n/**\n * A client error when the Gadget API closes the connection unexpectedly.\n */\nexport class GadgetUnexpectedCloseError extends Error {\n  code = \"GGT_UNKNOWN\";\n  name = \"UnexpectedCloseError\";\n\n  /** @private */\n  statusCode = 500;\n  /** @private */\n  causedByClient = false;\n\n  /** The event that caused the unexpected close */\n  readonly event: unknown;\n\n  constructor(event: unknown) {\n    let message: string;\n    if (isCloseEvent(event)) {\n      message = `GraphQL websocket closed unexpectedly by the server with error code ${event.code} and reason \"${event.reason}\"`;\n    } else {\n      message = \"GraphQL websocket closed unexpectedly by the server\";\n    }\n\n    super(message);\n    this.event = event;\n  }\n}\n\n/**\n * A client error when the client times out waiting for the Gadget API to open websocket connection.\n */\nexport class GadgetWebsocketConnectionTimeoutError extends Error {\n  code = \"GGT_WEBSOCKET_CONNECTION_TIMEOUT\";\n  name = \"WebsocketConnectionTimeoutError\";\n\n  /** @private */\n  statusCode = 500;\n  /** @private */\n  causedByClient = false;\n}\n\n/**\n * A Gadget API error when there are more requests sent in the alloted time window then permitted\n */\nexport class GadgetTooManyRequestsError extends Error {\n  code = \"GGT_TOO_MANY_REQUESTS\";\n  name = \"TooManyRequestsError\";\n\n  /** @private */\n  statusCode = 429;\n  /** @private */\n  causedByClient = false;\n}\n\n/**\n * A Gadget API error representing a backend validation error on the input data for an action. Thrown when any of the validations configured on a model fail for the given input data. Has a `validationErrors` property describing which fields failed validation, with messages for each.\n */\nexport class InvalidRecordError extends Error {\n  code = \"GGT_INVALID_RECORD\";\n  name = \"InvalidRecordError\";\n\n  /** @private */\n  statusCode = 422;\n  /** @private */\n  causedByClient = true;\n  /**\n   * A list of validation errors for each field that failed validation.\n   */\n  readonly validationErrors: InvalidFieldError[];\n  /**\n   * The API identifier of the model for this record which failed to validate\n   */\n  readonly modelApiIdentifier?: string;\n  /**\n   * The record that failed to validate, if available\n   */\n  readonly record?: Record<string, any>;\n\n  constructor(message: string | null, validationErrors: InvalidFieldError[], modelApiIdentifier?: string, record?: Record<string, any>) {\n    const firstErrors = validationErrors.slice(0, 3);\n    const extraErrorMessage =\n      validationErrors.length > 3\n        ? `, and ${validationErrors.length - 3} more error${validationErrors.length > 4 ? \"s\" : \"\"} need${\n            validationErrors.length > 4 ? \"\" : \"s\"\n          } to be corrected`\n        : \"\";\n\n    super(\n      message ??\n        `GGT_INVALID_RECORD: ${modelApiIdentifier ?? \"Record\"} is invalid and can't be saved. ${firstErrors\n          .map(({ apiIdentifier, message }) => `${apiIdentifier} ${message}`)\n          .join(\", \")}${extraErrorMessage}.`\n    );\n\n    this.validationErrors = validationErrors;\n    this.modelApiIdentifier = modelApiIdentifier;\n    this.record = record;\n  }\n}\n\n/**\n * @deprecated Use `InvalidRecordError` instead, here for backwards compatability\n */\nexport const GadgetValidationError = InvalidRecordError;\n\n/**\n * A Gadget API error that represents an error from the server. Thrown when the server encounters data that is not unique despite the existence of unique validation on a field. If you receive this error, it is likely that you added a unique validation to a field that has duplicate data.\n */\nexport class GadgetNonUniqueDataError extends Error {\n  code = \"GGT_NON_UNIQUE_DATA\";\n  name = \"NonUniqueDataError\";\n\n  /** @private */\n  statusCode = 417;\n  /** @private */\n  causedByClient = false;\n}\n\n/**\n * A Gadget API error that represents an error where the client asked the server for data that doesn't exist server side.\n */\nexport class GadgetNotFoundError extends Error {\n  code = \"GGT_RECORD_NOT_FOUND\";\n  name = \"RecordNotFoundError\";\n\n  /** @private */\n  statusCode = 404;\n  /** @private */\n  causedByClient = false;\n}\n\n/**\n * Represents a group of errors that occurred when running a number of operations at once */\nexport class GadgetErrorGroup<Result> extends Error {\n  constructor(\n    /** The list of inner errors that occurred */\n    public readonly errors: GadgetError[],\n    /* Any objects that were successfully processed during the bulk operation (the ones that didn't throw errors) */\n    public readonly results: Result[] | undefined\n  ) {\n    super(errors.length > 1 ? \"Multiple errors occurred\" : errors[0].message);\n  }\n\n  get code(): string {\n    return `GGT_ERROR_GROUP(${this.errors\n      .slice(0, 10)\n      .map((error) => error.code ?? \"GGT_UNKNOWN\")\n      .join(\",\")})`;\n  }\n\n  name = \"ErrorGroup\";\n\n  /** @private */\n  get statusCode() {\n    return Math.max(...this.errors.map((error) => (error as any).statusCode ?? 500));\n  }\n}\n\n/** All the errors a Gadget operation can throw */\nexport type GadgetError =\n  | GadgetOperationError\n  | GadgetInternalError\n  | InvalidRecordError\n  | GadgetNonUniqueDataError\n  | GadgetNotFoundError\n  | GadgetUnexpectedCloseError\n  | GadgetWebsocketConnectionTimeoutError\n  | GadgetErrorGroup<any>;\n\nexport function assert<T>(value: T | undefined | null, message?: string): T {\n  if (!value) {\n    throw new Error(\"assertion error\" + (message ? `: ${message}` : \"\"));\n  }\n  return value;\n}\n\nexport const get = (object: Record<string, any> | null | undefined, path: string[]): any => {\n  const length = path.length;\n  let index = 0;\n  while (object != null && index < length) {\n    object = object[path[index++]];\n  }\n\n  return index && index == length ? object : undefined;\n};\n\nexport const isCloseEvent = (event: any): event is CloseEvent => event?.type == \"close\";\n\n/**\n * Converts a string to camel case, optionally capitalizing the first character.\n * Defaults to capitalizing the first character.\n * @param str\n * @param capitalizeFirstCharacter\n * @returns Camelize string\n */\nexport const capitalizeIdentifier = (str: string | undefined | null, capitalizeFirstCharacter?: boolean): string => {\n  if (typeof str !== \"string\") return \"\";\n  return camelize(str, capitalizeFirstCharacter);\n};\n\nconst capitalizeFirstCharacter = (str: string) => {\n  const result = str === null || str === undefined ? \"\" : String(str);\n  return result.charAt(0).toUpperCase() + result.slice(1);\n};\n\nexport const camelize = (term: string, uppercaseFirstLetter = true) => {\n  let result = \"\" + term;\n\n  if (uppercaseFirstLetter) {\n    result = result.replace(/^[a-z\\d]*/, (a) => {\n      return capitalizeFirstCharacter(a);\n    });\n  } else {\n    result = result.replace(new RegExp(\"^(?:(?=\\\\b|[A-Z_])|\\\\w)\"), (a) => {\n      return a.toLowerCase();\n    });\n  }\n\n  result = result.replace(/(?:_|(\\/))([a-z\\d]*)/gi, (_match, a, b, _idx, _string) => {\n    a || (a = \"\");\n    return \"\" + a + capitalizeFirstCharacter(b);\n  });\n\n  return result;\n};\n\nexport const namespacedGraphQLTypeName = (modelApiIdentifier: string, givenNamespaces: string | string[] | null | undefined) => {\n  const namespaces: string[] = Array.isArray(givenNamespaces) ? givenNamespaces : givenNamespaces ? [givenNamespaces] : [];\n  const segments = [...namespaces, modelApiIdentifier];\n  return segments.map((segment) => camelize(segment)).join(\"\");\n};\n\nexport const sortTypeName = (modelApiIdentifier: string, namespace: string | string[] | null | undefined) =>\n  `${namespacedGraphQLTypeName(modelApiIdentifier, namespace)}Sort`;\n\nexport const filterTypeName = (modelApiIdentifier: string, namespace: string | string[] | null | undefined) =>\n  `${namespacedGraphQLTypeName(modelApiIdentifier, namespace)}Filter`;\n\nexport const getNonUniqueDataError = (modelApiIdentifier: string, fieldName: string, fieldValue: string) =>\n  new GadgetNonUniqueDataError(\n    `More than one record found for ${modelApiIdentifier}.${fieldName} = ${fieldValue}. Please confirm your unique validation is not reporting an error.`\n  );\n\nexport const getNonNullableError = (response: Result & { fetching: boolean }, dataPath: string[]) => {\n  if (response.fetching) {\n    return;\n  }\n  const result = get(response.data, dataPath);\n  if (result === undefined) {\n    return new GadgetInternalError(\n      `Internal Error: Gadget API didn't return expected data. Nothing found in response at ${dataPath.join(\".\")}`\n    );\n  } else if (result === null) {\n    return new GadgetNotFoundError(`Record Not Found Error: Gadget API returned no data at ${dataPath.join(\".\")}`);\n  }\n};\n\nexport const assertOperationSuccess = (response: OperationResult<any>, dataPath: string[], throwOnEmptyData = false) => {\n  if (response.error) {\n    if (response.error instanceof CombinedError && (response.error.networkError as any as Error[])?.length) {\n      response.error.message = (response.error.networkError as any as Error[]).map((error) => \"[Network] \" + error.message).join(\"\\n\");\n    }\n    throw response.error;\n  }\n\n  const result = get(response.data, dataPath);\n  const edges = get(result, [\"edges\"]);\n  const dataArray = edges ?? result;\n  if (result === undefined) {\n    throw new GadgetInternalError(\n      `Internal Error: Gadget API didn't return expected data. Nothing found in response at ${dataPath.join(\".\")}`\n    );\n  } else if (result === null || (throwOnEmptyData && Array.isArray(dataArray) && dataArray.length === 0)) {\n    throw new GadgetNotFoundError(`Record Not Found Error: Gadget API returned no data at ${dataPath.join(\".\")}`);\n  }\n\n  return result;\n};\n\nexport const assertNullableOperationSuccess = (response: OperationResult<any>, dataPath: string[]) => {\n  if (response.error) {\n    if (response.error instanceof CombinedError && (response.error.networkError as any as Error[])?.length) {\n      response.error.message = (response.error.networkError as any as Error[]).map((error) => \"[Network] \" + error.message).join(\"\\n\");\n    }\n    throw response.error;\n  }\n\n  const result = get(response.data, dataPath);\n  return result ?? null;\n};\n\nexport const gadgetErrorFor = (error: Record<string, any>) => {\n  if (error.code == \"GGT_INVALID_RECORD\") {\n    return new InvalidRecordError(error.message, error.validationErrors, error.model?.apiIdentifier, error.record);\n  } else if (error.code == \"GGT_UNKNOWN\" && error.message.includes(\"duplicate key value violates unique constraint\")) {\n    return new GadgetNonUniqueDataError(error.message);\n  } else {\n    return new GadgetOperationError(error.message, error.code);\n  }\n};\n\nexport const assertMutationSuccess = (response: OperationResult<any>, dataPath: string[]) => {\n  const operationResponse = assertOperationSuccess(response, dataPath);\n\n  return assertResponseSuccess(operationResponse);\n};\n\nexport const assertResponseSuccess = (operationResponse: any) => {\n  if (!operationResponse.success) {\n    const firstErrorBlob = operationResponse.errors && operationResponse.errors[0];\n    if (firstErrorBlob) {\n      throw gadgetErrorFor(firstErrorBlob);\n    } else {\n      throw new GadgetOperationError(`Gadget API operation not successful.`, \"GGT_UNKNOWN\");\n    }\n  }\n\n  return operationResponse;\n};\n\n// All of these functions only need the data bit, so narrow the type to make it easier to use these functions\ntype Result = Pick<OperationResult<any>, \"data\">;\n\nexport const getHydrator = (response: Result) => {\n  if (response.data?.gadgetMeta?.hydrations) {\n    return new DataHydrator(response.data?.gadgetMeta?.hydrations);\n  }\n};\n\nexport const hydrateRecord = <Shape extends RecordShape = RecordShape>(response: Result, record: any): GadgetRecord<Shape> => {\n  const hydrator = getHydrator(response);\n  if (hydrator) {\n    record = hydrator.apply(record);\n  }\n  return new GadgetRecord<Shape>(record);\n};\n\nexport const hydrateRecordArray = <Shape extends RecordShape = any>(response: Result, records: Array<any>) => {\n  const hydrator = getHydrator(response);\n  if (hydrator) {\n    records = hydrator.apply(records) as any;\n  }\n  return records?.map((record) => new GadgetRecord<Shape>(record));\n};\n\nexport const hydrateConnection = <Shape extends RecordShape = any>(response: Result, connection: { edges: { node: Node }[] }) => {\n  const nodes = connection.edges.map((edge) => edge.node);\n  return hydrateRecordArray<Shape>(response, nodes);\n};\n\nconst objObjType = \"[object Object]\";\nconst stringObjType = \"[object String]\";\n\nexport const toPrimitiveObject = (value: any): any => {\n  if (value != null && typeof value.toJSON === \"function\") value = value.toJSON();\n  if (value === undefined) return undefined;\n  if (value === null) return null;\n  if (typeof value === \"boolean\") return value;\n  if (typeof value === \"string\") return value;\n  if (typeof value === \"number\") return Number.isFinite(value) ? value : null;\n  if (typeof value === \"object\") {\n    if (Array.isArray(value)) {\n      const arr = [];\n\n      for (let i = 0; i < value.length; i++) {\n        const v = value[i];\n        arr[i] = v === undefined ? null : toPrimitiveObject(v);\n      }\n\n      return arr;\n    }\n    if (Object.prototype.toString.call(value) === \"[object Error]\") return {};\n    if (Object.prototype.toString.call(value) === objObjType) {\n      const obj: any = {};\n      for (const key of Object.keys(value)) {\n        const parsed = toPrimitiveObject(value[key]);\n        // Remove undefined fields\n        if (parsed !== undefined) obj[key] = parsed;\n      }\n      return obj;\n    }\n  }\n};\n\n/**\n * Get a string representing an error that is an `Error` object or anything else that might be `throw`n\n */\nexport const errorMessage = (error: unknown) => {\n  if (typeof error == \"string\") {\n    return error;\n  } else if (error && (error as any)?.message) {\n    return (error as any).message;\n  } else {\n    return String(error);\n  }\n};\n\n// Gadget Storage Test Key that minifies well\nconst key = \"gstk\";\n\n/** Detect if the window object and window.localStorage or window.sessionStorage objects are functional */\nexport const storageAvailable = (type: \"localStorage\" | \"sessionStorage\") => {\n  try {\n    const storage = window[type];\n    storage.setItem(key, key);\n    storage.removeItem(key);\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n\n// smaller implementation of lodash's isEqual from https://github.com/NickGard/tiny-isequal but made a bit more performant and typesafe\nconst toString = Object.prototype.toString,\n  getPrototypeOf = Object.getPrototypeOf,\n  getOwnProperties = Object.getOwnPropertySymbols\n    ? (c: any) => (Object.keys(c) as any[]).concat(Object.getOwnPropertySymbols(c))\n    : Object.keys;\n\nconst checkEquality = (a: any, b: any, refs: any[]): boolean => {\n  // trivial case: primitives and referentially equal objects\n  if (a === b) return true;\n\n  // if both are null/undefined, the above check would have returned true\n  if (a == null || b == null) return false;\n\n  // check to see if we've seen this reference before; if yes, return true\n  // eslint-disable-next-line lodash/prefer-includes\n  if (refs.indexOf(a) > -1 && refs.indexOf(b) > -1) return true;\n\n  const aType = toString.call(a);\n  const bType = toString.call(b);\n\n  let aElements, bElements, element;\n\n  // save results for circular checks\n  refs.push(a, b);\n\n  // gadget-specific check for _link equality -- this is a special case for GadgetRecord\n  if (aType == objObjType && bType == stringObjType && \"_link\" in a && Object.keys(a).length == 1) {\n    return a._link === b;\n  } else if (bType == objObjType && aType == stringObjType && \"_link\" in b && Object.keys(b).length == 1) {\n    return b._link === a;\n  }\n\n  if (aType != bType) return false; // not the same type of objects\n\n  // for non-null objects, check all custom properties\n  aElements = getOwnProperties(a);\n  bElements = getOwnProperties(b);\n  if (\n    aElements.length != bElements.length ||\n    aElements.some(function (key) {\n      return !checkEquality(a[key], b[key], refs);\n    })\n  ) {\n    return false;\n  }\n\n  switch (aType.slice(8, -1)) {\n    case \"Symbol\":\n      return a.valueOf() == b.valueOf();\n    case \"Date\":\n    case \"Number\":\n      return +a == +b || (+a != +a && +b != +b); // convert Dates to ms, check for NaN\n    case \"RegExp\":\n    case \"Function\":\n    case \"String\":\n    case \"Boolean\":\n      return \"\" + a == \"\" + b;\n    case \"Set\":\n    case \"Map\": {\n      aElements = a.entries();\n      bElements = b.entries();\n      do {\n        element = aElements.next();\n        if (!checkEquality(element.value, bElements.next().value, refs)) {\n          return false;\n        }\n      } while (!element.done);\n      return true;\n    }\n    case \"ArrayBuffer\":\n      (a = new Uint8Array(a)), (b = new Uint8Array(b)); // fall through to be handled as an Array\n    case \"DataView\":\n      (a = new Uint8Array(a.buffer)), (b = new Uint8Array(b.buffer)); // fall through to be handled as an Array\n    case \"Float32Array\":\n    case \"Float64Array\":\n    case \"Int8Array\":\n    case \"Int16Array\":\n    case \"Int32Array\":\n    case \"Uint8Array\":\n    case \"Uint16Array\":\n    case \"Uint32Array\":\n    case \"Uint8ClampedArray\":\n    case \"Arguments\":\n    case \"Array\":\n      if (a.length != b.length) return false;\n      for (element = 0; element < a.length; element++) {\n        if (!(element in a) && !(element in b)) continue; // empty slots are equal\n        // either one slot is empty but not both OR the elements are not equal\n        if (element in a != element in b || !checkEquality(a[element], b[element], refs)) return false;\n      }\n      return true;\n    case \"Object\":\n      return checkEquality(getPrototypeOf(a), getPrototypeOf(b), refs);\n    default:\n      return false;\n  }\n};\n\nexport const isEqual = (a: any, b: any) => checkEquality(a, b, []);\n\n/**\n * Processes the flexible, convenient JS-land inputs for an action to the fully qualified GraphQL API inputs\n * @internal\n **/\nexport const disambiguateActionVariables = (action: AnyActionFunction, variables: Record<string, any> | undefined) => {\n  variables ??= {};\n  if (!(\"hasAmbiguousIdentifier\" in action) && !(\"acceptsModelInput\" in action)) return variables;\n\n  if (action.hasAmbiguousIdentifier) {\n    if (\n      Object.keys(variables).some((key) => key !== \"id\" && !action.paramOnlyVariables?.includes(key) && key !== action.modelApiIdentifier)\n    ) {\n      throw Error(`Invalid arguments found in variables. Did you mean to use ({ ${action.modelApiIdentifier}: { ... } })?`);\n    }\n  }\n\n  let newVariables: Record<string, any>;\n\n  // for backwards compatibilty, actions without the operatesWithRecordIdentity metadata should extract the id from the variables\n  const shouldExtractId = action.operatesWithRecordIdentity ?? true;\n\n  if (action.acceptsModelInput ?? action.hasCreateOrUpdateEffect) {\n    if (\n      action.modelApiIdentifier in variables &&\n      typeof variables[action.modelApiIdentifier] === \"object\" &&\n      variables[action.modelApiIdentifier] != null\n    ) {\n      newVariables = variables;\n    } else {\n      newVariables = {\n        [action.modelApiIdentifier]: {},\n      };\n      for (const [key, value] of Object.entries(variables)) {\n        if (action.paramOnlyVariables?.includes(key)) {\n          newVariables[key] = value;\n        } else {\n          if (key == \"id\" && shouldExtractId) {\n            newVariables.id = value;\n          } else {\n            newVariables[action.modelApiIdentifier][key] = value;\n          }\n        }\n      }\n    }\n  } else {\n    newVariables = variables;\n  }\n\n  return newVariables;\n};\n\n/**\n * Normalizes incoming params from JS land into the variable format the GraphQL API is expecting\n * Some bulk actions take GraphQL variables like `{ids: [\"1\",\"2\",\"3\"]}`, and others take `{inputs: [{field: \"value\"}, {field: \"value\"}]}`. In JS land, we accept the fully qualified variables that look like that, as well as the inner array shorthands.\n **/\nexport const disambiguateBulkActionVariables = (\n  action: ActionFunctionMetadata<any, any, any, any, any, true>,\n  inputs: Record<string, any> | Record<string, any>[] = {}\n) => {\n  if (action.variables[\"ids\"]) {\n    // for actions which accept ids only, normalize the array shorthand into the full GraphQL variables\n    return Array.isArray(inputs) ? { ids: inputs } : inputs;\n  } else {\n    // for actions which accept inputs, normalize each element of the array of inputs, and then normalize arrays into the object form\n    const inputsArray: Record<string, any>[] = (Array.isArray(inputs) ? inputs : inputs.inputs) ?? [];\n    return {\n      inputs: inputsArray.map((input) => disambiguateActionVariables(action, input)),\n    };\n  }\n};\n\n/**\n * Given a set of variables defined with their types and requiredness and whatnot, return the same options with the values for each variable filled in, suitable for passing to one invocation\n */\nexport const setVariableOptionValues = (variableOptions: VariablesOptions, values: Record<string, unknown>) => {\n  const result: VariablesOptions = {};\n  for (const [key, variable] of Object.entries(variableOptions)) {\n    result[key] = { ...variable, value: values[key] };\n  }\n  return result;\n};\n\nexport const namespaceDataPath = (dataPath: string[], namespace?: string[] | string | null) => {\n  if (namespace) {\n    dataPath.unshift(...(Array.isArray(namespace) ? namespace : [namespace]));\n  }\n  return dataPath;\n};\n\n/**\n * Build a selection object to retrieve the hydrations for a model from the `gadgetMeta` API\n **/\nexport const hydrationSelection = (modelApiIdentifier: string, namespace?: string | string[] | null): BuilderFieldSelection => {\n  const fullyQualifiedIdentifier = namespace\n    ? [...(Array.isArray(namespace) ? namespace : [namespace]), modelApiIdentifier].join(\".\")\n    : modelApiIdentifier;\n\n  return {\n    gadgetMeta: {\n      hydrations: Call({ modelName: fullyQualifiedIdentifier }),\n    },\n  };\n};\n\n/**\n * Wrap a field selection in a set of namespaces\n **/\nexport function namespacify(namespace: string[] | string | undefined | null, fields: any) {\n  if (!namespace) return fields;\n  if (!Array.isArray(namespace)) {\n    namespace = [namespace];\n  }\n  if (namespace) {\n    for (let i = namespace.length - 1; i >= 0; i--) {\n      fields = {\n        [namespace[i]]: fields,\n      };\n    }\n  }\n  return fields;\n}\n\nexport const ErrorsSelection: BuilderFieldSelection = {\n  errors: {\n    message: true,\n    code: true,\n    \"... on InvalidRecordError\": {\n      model: {\n        apiIdentifier: true,\n      },\n      validationErrors: {\n        message: true,\n        apiIdentifier: true,\n      },\n    },\n  },\n};\n\n/**\n * Formats error messages into a structured object.\n *\n * @param {Error} error - The error object to format.\n * @returns {Record<string, any>} An object containing formatted error messages.\n *   For InvalidRecordError, it structures validation errors by model and field.\n *   For other errors, it returns a single root message.\n *\n * @example\n * // For an InvalidRecordError:\n * // {\n * //   modelName: {\n * //     fieldName: { message: \"Error message\" }\n * //   }\n * // }\n *\n * @example\n * // For other errors:\n * // {\n * //   root: { message: \"Error message\" }\n * // }\n */\nexport const formatErrorMessages = (error: Error) => {\n  const result: Record<string, any> = {};\n\n  if (\"validationErrors\" in error) {\n    const invalidRecordError = error as InvalidRecordError;\n    for (const validationError of invalidRecordError.validationErrors) {\n      if (invalidRecordError.modelApiIdentifier) {\n        result[invalidRecordError.modelApiIdentifier] ??= {};\n        result[invalidRecordError.modelApiIdentifier][validationError.apiIdentifier] = { message: validationError.message };\n      } else {\n        result[validationError.apiIdentifier] = { message: validationError.message };\n      }\n    }\n  } else {\n    const codeToReplace = \"code\" in error ? `${error.code}: ` : \"\";\n    const message = error.message.replace(codeToReplace, \"\");\n\n    result.root = { message };\n  }\n\n  return result;\n};\n", "/* eslint-disable no-throw-literal */\n/* eslint-disable @typescript-eslint/require-await */\nimport type { Jsonify } from \"type-fest\";\nimport type { GadgetRecord, RecordShape } from \"./GadgetRecord.js\";\nimport type { InternalModelManager } from \"./InternalModelManager.js\";\nimport type { AnyModelManager } from \"./ModelManager.js\";\nimport { GadgetClientError, GadgetOperationError } from \"./support.js\";\nimport type { PaginateOptions } from \"./types.js\";\n\ntype PaginationConfig = {\n  pageInfo: { hasNextPage: boolean; hasPreviousPage: boolean; startCursor: string; endCursor: string };\n  options?: PaginateOptions;\n};\n\n/** Represents a list of objects returned from the API. Facilitates iterating and paginating. */\nexport class GadgetRecordList<Shape extends RecordShape> extends Array<GadgetRecord<Shape>> {\n  modelManager!: AnyModelManager | InternalModelManager<Shape>;\n  pagination!: PaginationConfig;\n\n  /** Internal method used to create a list. Should not be used by applications. */\n  static boot<Shape extends RecordShape>(\n    modelManager: AnyModelManager | InternalModelManager<Shape>,\n    records: GadgetRecord<Shape>[],\n    pagination: PaginationConfig\n  ) {\n    const list = new GadgetRecordList<Shape>();\n    list.push(...records);\n    list.modelManager = modelManager;\n    list.pagination = pagination;\n    Object.freeze(list);\n    return list;\n  }\n\n  static get [Symbol.species]() {\n    return Array;\n  }\n\n  firstOrThrow() {\n    if (!this[0]) {\n      throw new GadgetOperationError(\"No records found.\", \"GGT_RECORD_NOT_FOUND\");\n    }\n    return this[0];\n  }\n\n  toJSON(): Jsonify<Shape>[] {\n    return this.map((record) => record.toJSON());\n  }\n\n  get hasNextPage() {\n    return this.pagination.pageInfo.hasNextPage;\n  }\n\n  get hasPreviousPage() {\n    return this.pagination.pageInfo.hasPreviousPage;\n  }\n\n  get startCursor() {\n    return this.pagination.pageInfo.startCursor;\n  }\n\n  get endCursor() {\n    return this.pagination.pageInfo.endCursor;\n  }\n\n  async nextPage() {\n    if (!this.hasNextPage)\n      throw new GadgetClientError(\"Cannot request next page because there isn't one, should check 'hasNextPage' to see if it exists\");\n    // Our current implementation of paging determines paging direction based on if \"first\" is defined. We can pass both \"before\" and \"after\" as options but only after is respected if first is sent. One of \"before\" or \"after\" is ignored depending on whether \"first\" is defined.\n    const { first, last, before: _before, ...options } = this.pagination.options ?? {};\n    const nextPage = this.modelManager.findMany({\n      ...options,\n      after: this.pagination.pageInfo.endCursor,\n      first: first || last,\n    }) as Promise<GadgetRecordList<Shape>>;\n    return await nextPage;\n  }\n\n  async previousPage() {\n    if (!this.hasPreviousPage)\n      throw new GadgetClientError(\n        \"Cannot request previous page because there isn't one, should check 'hasPreviousPage' to see if it exists\"\n      );\n    // Our current implementation of paging determines paging direction based on if \"first\" is defined. We can pass both \"before\" and \"after\" as options but only after is respected if first is sent. One of \"before\" or \"after\" is ignored depending on whether \"first\" is defined.\n    const { first, last, after: _after, ...options } = this.pagination.options ?? {};\n    const prevPage = this.modelManager.findMany({\n      ...options,\n      before: this.pagination.pageInfo.startCursor,\n      last: last || first,\n    }) as Promise<GadgetRecordList<Shape>>;\n    return await prevPage;\n  }\n}\n", "import type { FieldSelection as BuilderFieldSelection, BuilderOperation, Variable } from \"tiny-graphql-query-compiler\";\nimport { Call, Var, compileWithVariableValues } from \"tiny-graphql-query-compiler\";\nimport type { FieldSelection } from \"./FieldSelection.js\";\nimport type { AnyActionFunction, HasReturnType } from \"./index.js\";\nimport {\n  ErrorsSelection,\n  camelize,\n  capitalizeIdentifier,\n  filterTypeName,\n  hydrationSelection,\n  namespacify,\n  sortTypeName,\n} from \"./support.js\";\nimport type { ActionFunctionOptions, BaseFindOptions, EnqueueBackgroundActionOptions, FindManyOptions, VariablesOptions } from \"./types.js\";\n\n/**\n * Converts Selection nested object format to the tiny-graphql-query-compiler shape\n **/\nconst fieldSelectionToQueryCompilerFields = (selection: FieldSelection, includeTypename = false): BuilderFieldSelection => {\n  const output: BuilderFieldSelection = { ...selection };\n  if (includeTypename) output.__typename = true;\n  return output;\n};\n\nexport type FindFirstPaginationOptions = Omit<FindManyOptions, \"first\" | \"last\" | \"before\" | \"after\">;\n\nconst directivesForOptions = (options?: BaseFindOptions | null) => {\n  if (options?.live) return [\"@live\"];\n  return undefined;\n};\n\nexport const findOneOperation = (\n  operation: string,\n  id: string | undefined,\n  defaultSelection: FieldSelection,\n  modelApiIdentifier: string,\n  options?: BaseFindOptions | null,\n  namespace?: string | string[] | null\n) => {\n  const variables: Record<string, Variable> = {};\n  if (typeof id !== \"undefined\") variables.id = Var({ type: \"GadgetID!\", value: id });\n\n  let fields = {\n    [operation]: Call(variables, fieldSelectionToQueryCompilerFields(options?.select || defaultSelection, true)),\n  };\n\n  fields = namespacify(namespace, fields);\n\n  return compileWithVariableValues({\n    type: \"query\",\n    name: operation,\n    fields: {\n      ...fields,\n      ...hydrationSelection(modelApiIdentifier, namespace),\n    },\n    directives: directivesForOptions(options),\n  });\n};\n\nexport const findOneByFieldOperation = (\n  operation: string,\n  fieldName: string,\n  fieldValue: string,\n  defaultSelection: FieldSelection,\n  modelApiIdentifier: string,\n  options?: BaseFindOptions | null,\n  namespace?: string | string[] | null\n) => {\n  return findManyOperation(\n    operation,\n    defaultSelection,\n    modelApiIdentifier,\n    {\n      ...options,\n      first: 2,\n      filter: {\n        [fieldName]: {\n          equals: fieldValue,\n        },\n      },\n    },\n    namespace\n  );\n};\n\nexport const findManyOperation = (\n  operation: string,\n  defaultSelection: FieldSelection,\n  modelApiIdentifier: string,\n  options?: FindManyOptions,\n  namespace?: string | string[] | null\n) => {\n  let fields = {\n    [operation]: Call(\n      {\n        after: Var({ value: options?.after, type: \"String\" }),\n        first: Var({ value: options?.first, type: \"Int\" }),\n        before: Var({ value: options?.before, type: \"String\" }),\n        last: Var({ value: options?.last, type: \"Int\" }),\n        sort: options?.sort ? Var({ value: options.sort, type: `[${sortTypeName(modelApiIdentifier, namespace)}!]` }) : undefined,\n        filter: options?.filter ? Var({ value: options.filter, type: `[${filterTypeName(modelApiIdentifier, namespace)}!]` }) : undefined,\n        search: options?.search ? Var({ value: options.search, type: \"String\" }) : undefined,\n      },\n      {\n        pageInfo: { hasNextPage: true, hasPreviousPage: true, startCursor: true, endCursor: true },\n        edges: {\n          cursor: true,\n          node: fieldSelectionToQueryCompilerFields(options?.select || defaultSelection, true),\n        },\n      }\n    ),\n  };\n\n  if (namespace) {\n    fields = namespacify(namespace, fields);\n  }\n\n  return compileWithVariableValues({\n    type: \"query\",\n    name: operation,\n    fields: {\n      ...fields,\n      ...hydrationSelection(modelApiIdentifier, namespace),\n    },\n    directives: directivesForOptions(options),\n  });\n};\n\nconst variableOptionsToVariables = (variables: VariablesOptions) => {\n  return Object.fromEntries(Object.entries(variables).map(([name, options]) => [name, Var(options)]));\n};\n\nconst actionResultFieldSelection = (\n  modelSelectionField: string,\n  selection: FieldSelection,\n  isBulkAction?: boolean | null,\n  hasReturnType?: HasReturnType | null,\n  depth = 0\n) => {\n  const fieldSelection: BuilderFieldSelection =\n    depth == 0\n      ? {\n          success: true,\n          ...ErrorsSelection,\n        }\n      : {};\n\n  if (hasReturnType && typeof hasReturnType != \"boolean\") {\n    for (const [selectionField, returnTypeSelection] of Object.entries(hasReturnType)) {\n      if (\"select\" in returnTypeSelection) {\n        fieldSelection[selectionField] = fieldSelectionToQueryCompilerFields(selection, true);\n      } else {\n        fieldSelection[selectionField] = {\n          __typename: selectionField.includes(\"... on\"),\n          ...actionResultFieldSelection(modelSelectionField, selection, isBulkAction, returnTypeSelection.hasReturnType, depth + 1),\n        };\n      }\n    }\n  } else if (hasReturnType) {\n    fieldSelection[isBulkAction && depth == 0 ? \"results\" : \"result\"] = true;\n  } else if (selection) {\n    fieldSelection[modelSelectionField] = fieldSelectionToQueryCompilerFields(selection, true);\n  }\n\n  return fieldSelection as FieldSelection;\n};\n\nexport const actionOperation = (\n  operation: string,\n  defaultSelection: FieldSelection | null,\n  modelApiIdentifier: string,\n  modelSelectionField: string,\n  variables: VariablesOptions,\n  options?: BaseFindOptions | null,\n  namespace?: string | string[] | null,\n  isBulkAction?: boolean | null,\n  hasReturnType?: HasReturnType | null\n) => {\n  const selection = options?.select || defaultSelection;\n\n  let fields: BuilderFieldSelection = {\n    [operation]: Call(\n      variableOptionsToVariables(variables),\n      actionResultFieldSelection(modelSelectionField, selection, isBulkAction, hasReturnType)\n    ),\n  };\n\n  fields = namespacify(namespace, fields);\n\n  const actionOperation: BuilderOperation = {\n    type: \"mutation\",\n    name: operation,\n    fields: {\n      ...fields,\n      ...hydrationSelection(modelApiIdentifier, namespace),\n    },\n    directives: directivesForOptions(options),\n  };\n\n  return compileWithVariableValues(actionOperation);\n};\n\nexport const backgroundActionResultOperation = <Action extends AnyActionFunction, Options extends ActionFunctionOptions<Action>>(\n  id: string,\n  action: Action,\n  options?: Options\n) => {\n  let fields: FieldSelection = {};\n  let resultType: string;\n\n  const backgroundAction = action.isBulk && action.singleAction ? action.singleAction : action;\n\n  let operationName = backgroundAction.operationName;\n  if (backgroundAction.isBulk) {\n    operationName = backgroundAction.operationName.replace(/^bulk/, \"\").replace(/s$/, \"\");\n  }\n\n  if (!backgroundAction.operationReturnType) {\n    resultType = `${camelize(operationName)}Result`;\n  } else {\n    resultType = `${backgroundAction.operationReturnType}Result`;\n  }\n\n  switch (backgroundAction.type) {\n    case \"action\": {\n      const selection = options?.select || backgroundAction.defaultSelection;\n\n      fields = {\n        [`... on ${resultType}`]: actionResultFieldSelection(\n          backgroundAction.modelApiIdentifier,\n          selection,\n          backgroundAction.isBulk,\n          backgroundAction.hasReturnType\n        ),\n      };\n      break;\n    }\n    case \"globalAction\": {\n      fields = {\n        [`... on ${resultType}`]: globalActionFieldSelection(),\n      };\n    }\n  }\n\n  const actionResultOperation: BuilderOperation = {\n    type: \"subscription\",\n    name: capitalizeIdentifier(operationName) + \"BackgroundResult\",\n    fields: {\n      backgroundAction: Call(\n        { id: Var({ value: id, type: \"String!\" }) },\n        {\n          id: true,\n          outcome: true,\n          result: {\n            ...fields,\n          },\n        }\n      ),\n    },\n  };\n\n  return compileWithVariableValues(actionResultOperation);\n};\n\n/** @deprecated previous export name, @see backgroundActionResultOperation */\nexport const actionResultOperation = backgroundActionResultOperation;\n\nconst globalActionFieldSelection = () => {\n  return {\n    success: true,\n    ...ErrorsSelection,\n    result: true,\n  } as FieldSelection;\n};\n\nexport const globalActionOperation = (\n  operation: string,\n  variables: VariablesOptions,\n  namespace?: string | string[] | null,\n  options?: { live?: boolean }\n) => {\n  let fields: BuilderFieldSelection = {\n    [operation]: Call(variableOptionsToVariables(variables), globalActionFieldSelection()),\n  };\n\n  fields = namespacify(namespace, fields);\n\n  return compileWithVariableValues({\n    type: \"mutation\",\n    name: operation,\n    fields,\n    directives: directivesForOptions(options),\n  });\n};\n\nexport interface GraphQLBackgroundActionOptions {\n  retries?: { retryCount: number };\n  queue?: { name: string; maxConcurrency?: number };\n  priority?: \"LOW\" | \"DEFAULT\" | \"HIGH\";\n  startAt?: string;\n}\n\nexport const graphqlizeBackgroundOptions = (options?: EnqueueBackgroundActionOptions<any> | null) => {\n  if (!options) return null;\n\n  const obj = { ...options };\n  if (typeof obj.retries == \"number\") {\n    obj.retries = {\n      retryCount: obj.retries,\n    };\n  }\n\n  if (typeof obj.queue == \"string\") {\n    obj.queue = {\n      name: obj.queue,\n    };\n  }\n\n  if (obj.startAt instanceof Date) {\n    obj.startAt = obj.startAt.toISOString();\n  }\n\n  for (const key of Object.keys(obj)) {\n    if ([\"id\", \"retries\", \"queue\", \"priority\", \"startAt\"].includes(key)) continue;\n    delete obj[key];\n  }\n\n  return obj as GraphQLBackgroundActionOptions;\n};\n\nexport const enqueueActionOperation = (\n  operation: string,\n  variables: VariablesOptions,\n  namespace?: string | string[] | null,\n  options?: EnqueueBackgroundActionOptions<any> | null,\n  isBulk?: boolean\n) => {\n  let fields: BuilderFieldSelection = {\n    [operation]: Call(\n      {\n        ...variableOptionsToVariables(variables),\n        backgroundOptions: Var({\n          type: \"EnqueueBackgroundActionOptions\",\n          value: graphqlizeBackgroundOptions(options),\n        }),\n      },\n      {\n        success: true,\n        errors: {\n          message: true,\n          code: true,\n        },\n        [isBulk ? \"backgroundActions\" : \"backgroundAction\"]: {\n          id: true,\n        },\n      }\n    ),\n  };\n\n  fields = namespacify(namespace, fields);\n\n  return compileWithVariableValues({\n    type: \"mutation\",\n    name: \"enqueue\" + camelize(operation),\n    fields: {\n      background: fields,\n    },\n  });\n};\n", "import { filter, pipe, take, toAsyncIterable, toPromise } from \"wonka\";\nimport type { BackgroundActionResult, BackgroundActionResultData } from \"./BackgroundActionHandle.js\";\nimport { BackgroundActionHandle } from \"./BackgroundActionHandle.js\";\n/* eslint-disable @typescript-eslint/ban-types */\nimport type { OperationResult } from \"@urql/core\";\nimport type { Source } from \"wonka\";\nimport type { FieldSelection } from \"./FieldSelection.js\";\nimport type { GadgetConnection } from \"./GadgetConnection.js\";\nimport type {\n  ActionFunctionMetadata,\n  AnyActionFunction,\n  AnyBulkActionFunction,\n  GlobalActionFunction,\n  HasReturnType,\n} from \"./GadgetFunctions.js\";\nimport type { GadgetRecord, RecordShape } from \"./GadgetRecord.js\";\nimport { GadgetRecordList } from \"./GadgetRecordList.js\";\nimport type { AnyModelManager } from \"./ModelManager.js\";\nimport {\n  actionOperation,\n  backgroundActionResultOperation,\n  enqueueActionOperation,\n  findManyOperation,\n  findOneByFieldOperation,\n  findOneOperation,\n  globalActionOperation,\n} from \"./operationBuilders.js\";\nimport {\n  GadgetErrorGroup,\n  GadgetNotFoundError,\n  assertMutationSuccess,\n  assertNullableOperationSuccess,\n  assertOperationSuccess,\n  assertResponseSuccess,\n  disambiguateActionVariables,\n  disambiguateBulkActionVariables,\n  gadgetErrorFor,\n  get,\n  getNonUniqueDataError,\n  hydrateConnection,\n  hydrateRecord,\n  hydrateRecordArray,\n  namespaceDataPath,\n  setVariableOptionValues,\n} from \"./support.js\";\nimport type { ActionFunctionOptions, BaseFindOptions, EnqueueBackgroundActionOptions, FindManyOptions, VariablesOptions } from \"./types.js\";\n\ntype LiveResultForOptions<T, LiveOptions extends { live?: boolean | null }> = LiveOptions extends { live: true }\n  ? AsyncIterable<T>\n  : Promise<T>;\n\nconst mapAsyncIterable = <T, U>(source: AsyncIterable<T>, mapper: (item: T) => U): AsyncIterable<U> => {\n  return {\n    [Symbol.asyncIterator]() {\n      const iter = source[Symbol.asyncIterator]();\n\n      return {\n        async next(): Promise<IteratorResult<U>> {\n          const { done, value } = await iter.next();\n\n          return {\n            done,\n            value: typeof value != \"undefined\" ? mapper(value) : undefined,\n          } as any;\n        },\n        async return(value: any): Promise<IteratorReturnResult<any>> {\n          return (await iter.return?.(value)) as any;\n        },\n      };\n    },\n  };\n};\n\n/** Given a stream, return an async iterable when live querying, and a promise resolving to the last value otherwise */\nfunction maybeLiveStream<T extends OperationResult, U, LiveOptions extends { live?: boolean | null }>(\n  $result: Source<T>,\n  mapper: (value: T) => U,\n  options?: LiveOptions | null\n): LiveResultForOptions<U, LiveOptions> {\n  if (options?.live) {\n    return mapAsyncIterable<T, U>(toAsyncIterable($result), mapper) as unknown as LiveResultForOptions<U, LiveOptions>;\n  } else {\n    const promise = pipe(\n      $result,\n      filter((result) => !result.stale && !result.hasNext),\n      take(1),\n      toPromise\n    );\n\n    return promise.then((value) => mapper(value)) as LiveResultForOptions<U, LiveOptions>;\n  }\n}\n\nexport const findOneRunner = <Shape extends RecordShape = any, Options extends BaseFindOptions = {}>(\n  modelManager: { connection: GadgetConnection },\n  operation: string,\n  id: string | undefined,\n  defaultSelection: FieldSelection,\n  modelApiIdentifier: string,\n  options?: Options | null,\n  throwOnEmptyData = true,\n  namespace?: string | string[] | null\n) => {\n  const plan = findOneOperation(operation, id, defaultSelection, modelApiIdentifier, options, namespace);\n  const $results = modelManager.connection.currentClient.query(plan.query, plan.variables);\n\n  return maybeLiveStream(\n    $results,\n    (response) => {\n      const assertSuccess = throwOnEmptyData ? assertOperationSuccess : assertNullableOperationSuccess;\n      const dataPath = namespaceDataPath([operation], namespace);\n      const record = assertSuccess(response, dataPath);\n      return hydrateRecord<Shape>(response, record);\n    },\n    options\n  );\n};\n\nexport const findOneByFieldRunner = <Shape extends RecordShape = any, Options extends FindManyOptions = {}>(\n  modelManager: { connection: GadgetConnection },\n  operation: string,\n  fieldName: string,\n  fieldValue: string,\n  defaultSelection: FieldSelection,\n  modelApiIdentifier: string,\n  options?: Options | null,\n  throwOnEmptyData = true,\n  namespace?: string | string[] | null\n) => {\n  const plan = findOneByFieldOperation(operation, fieldName, fieldValue, defaultSelection, modelApiIdentifier, options, namespace);\n  const dataPath = namespaceDataPath([operation], namespace);\n  const $results = modelManager.connection.currentClient.query(plan.query, plan.variables);\n\n  return maybeLiveStream(\n    $results,\n    (response) => {\n      const connectionObject = assertOperationSuccess(response, dataPath);\n      const records = hydrateConnection<Shape>(response, connectionObject);\n\n      if (records.length > 1) {\n        throw getNonUniqueDataError(modelApiIdentifier, fieldName, fieldValue);\n      }\n      const result = records[0];\n      if (!result && throwOnEmptyData) {\n        throw new GadgetNotFoundError(`${modelApiIdentifier} record with ${fieldName}=${fieldValue} not found`);\n      }\n      return result ?? null;\n    },\n    options\n  );\n};\n\nexport const findManyRunner = <Shape extends RecordShape = any, Options extends FindManyOptions = {}>(\n  modelManager: AnyModelManager,\n  operation: string,\n  defaultSelection: FieldSelection,\n  modelApiIdentifier: string,\n  options?: Options,\n  throwOnEmptyData?: boolean,\n  namespace?: string | string[] | null\n) => {\n  const plan = findManyOperation(operation, defaultSelection, modelApiIdentifier, options, namespace);\n  const $results = modelManager.connection.currentClient.query(plan.query, plan.variables);\n  const dataPath = namespaceDataPath([operation], namespace);\n\n  return maybeLiveStream(\n    $results,\n    (response) => {\n      let connectionObject;\n      if (throwOnEmptyData === false) {\n        // If this is a nullable operation, don't throw errors on empty\n        connectionObject = assertNullableOperationSuccess(response, dataPath);\n      } else {\n        // Otherwise, passthrough the `throwOnEmptyData` flag, to account for\n        // `findMany` (allows empty arrays) vs `findFirst` (no empty result) usage.\n        connectionObject = assertOperationSuccess(response, dataPath, throwOnEmptyData);\n      }\n\n      const records = hydrateConnection<Shape>(response, connectionObject);\n      return GadgetRecordList.boot<Shape>(modelManager, records, { options, pageInfo: connectionObject.pageInfo });\n    },\n    options\n  );\n};\n\nexport interface ActionRunner {\n  (\n    modelManager: { connection: GadgetConnection },\n    operation: string,\n    defaultSelection: FieldSelection | null,\n    modelApiIdentifier: string,\n    modelSelectionField: string,\n    isBulkAction: false,\n    variables: VariablesOptions,\n    options?: BaseFindOptions | null,\n    namespace?: string | string[] | null,\n    hasReturnType?: HasReturnType\n  ): Promise<any>;\n\n  <Shape extends RecordShape = any>(\n    modelManager: { connection: GadgetConnection },\n    operation: string,\n    defaultSelection: FieldSelection | null,\n    modelApiIdentifier: string,\n    modelSelectionField: string,\n    isBulkAction: false,\n    variables: VariablesOptions,\n    options?: BaseFindOptions | null,\n    namespace?: string | string[] | null,\n    hasReturnType?: false | null\n  ): Promise<Shape extends void ? void : GadgetRecord<Shape>>;\n\n  <Shape extends RecordShape = any>(\n    modelManager: { connection: GadgetConnection },\n    operation: string,\n    defaultSelection: FieldSelection | null,\n    modelApiIdentifier: string,\n    modelSelectionField: string,\n    isBulkAction: false,\n    variables: VariablesOptions,\n    options?: BaseFindOptions | null,\n    namespace?: string | string[] | null\n  ): Promise<Shape extends void ? void : GadgetRecord<Shape>>;\n\n  <Shape extends RecordShape = any>(\n    modelManager: { connection: GadgetConnection },\n    operation: string,\n    defaultSelection: FieldSelection | null,\n    modelApiIdentifier: string,\n    modelSelectionField: string,\n    isBulkAction: true,\n    variables: VariablesOptions,\n    options?: BaseFindOptions | null,\n    namespace?: string | string[] | null\n  ): Promise<Shape extends void ? void : GadgetRecord<Shape>[]>;\n\n  (\n    modelManager: { connection: GadgetConnection },\n    operation: string,\n    defaultSelection: FieldSelection | null,\n    modelApiIdentifier: string,\n    modelSelectionField: string,\n    isBulkAction: true,\n    variables: VariablesOptions,\n    options?: BaseFindOptions | null,\n    namespace?: string | string[] | null,\n    hasReturnType?: HasReturnType\n  ): Promise<any[]>;\n\n  <Shape extends RecordShape = any>(\n    modelManager: { connection: GadgetConnection },\n    operation: string,\n    defaultSelection: FieldSelection | null,\n    modelApiIdentifier: string,\n    modelSelectionField: string,\n    isBulkAction: true,\n    variables: VariablesOptions,\n    options?: BaseFindOptions | null,\n    namespace?: string | string[] | null,\n    hasReturnType?: false | null\n  ): Promise<Shape extends void ? void : GadgetRecord<Shape>[]>;\n}\n\nexport const actionRunner: ActionRunner = async (\n  modelManager: { connection: GadgetConnection },\n  operation: string,\n  defaultSelection: FieldSelection | null,\n  modelApiIdentifier: string,\n  modelSelectionField: string,\n  isBulkAction: boolean,\n  variables: VariablesOptions,\n  options?: BaseFindOptions | null,\n  namespace?: string | string[] | null,\n  hasReturnType?: HasReturnType | null\n) => {\n  const plan = actionOperation(\n    operation,\n    defaultSelection,\n    modelApiIdentifier,\n    modelSelectionField,\n    variables,\n    options,\n    namespace,\n    isBulkAction,\n    hasReturnType\n  );\n\n  const response = await modelManager.connection.currentClient.mutation(plan.query, plan.variables).toPromise();\n  const dataPath = namespaceDataPath([operation], namespace);\n\n  // pass bulk responses through without any assertions since we can have a success: false response but still want\n  // to process it in a similar fashion since some of the records could have been processed\n  if (!isBulkAction) {\n    const mutationTriple = assertMutationSuccess(response, dataPath);\n\n    return processActionResponse(defaultSelection, response, mutationTriple, modelSelectionField, hasReturnType);\n  } else {\n    const mutationTriple = get(response.data, dataPath);\n\n    const results = processBulkActionResponse(defaultSelection, response, mutationTriple, modelSelectionField, hasReturnType);\n    if (mutationTriple.errors) {\n      const errors = mutationTriple.errors.map((error: any) => gadgetErrorFor(error));\n      throw new GadgetErrorGroup(errors, results);\n    }\n\n    return results;\n  }\n};\n\nconst processBulkActionResponse = <Shape extends RecordShape = any>(\n  defaultSelection: FieldSelection | null,\n  response: any,\n  records: any,\n  modelSelectionField: string,\n  hasReturnType?: HasReturnType | null\n) => {\n  if (defaultSelection == null) return;\n  if (!hasReturnType) {\n    return hydrateRecordArray<Shape>(response, records[modelSelectionField]);\n  } else if (typeof hasReturnType == \"boolean\") {\n    return records.results;\n  } else {\n    return Object.entries(hasReturnType).flatMap(([returnTypeField, innerHasReturnType]) => {\n      const results = records[returnTypeField];\n\n      if (!Array.isArray(results)) {\n        return [];\n      }\n\n      return results.map((result) => {\n        const returnTypeForResult =\n          \"hasReturnType\" in innerHasReturnType ? returnTypeForRecord(result, innerHasReturnType.hasReturnType) : false;\n\n        if (!returnTypeForResult) {\n          return hydrateRecord<Shape>(response, result);\n        } else {\n          return processActionResponse(defaultSelection, response, result, modelSelectionField, returnTypeForResult);\n        }\n      });\n    });\n  }\n};\n\nexport const processActionResponse = <Shape extends RecordShape = any>(\n  defaultSelection: FieldSelection | null,\n  response: any,\n  record: any,\n  modelSelectionField: string,\n  hasReturnType?: HasReturnType | null\n): any => {\n  // Delete actions have a null selection. We do an early return for this because `hydrateRecordArray` will fail\n  // if there's nothing at `mutationResult[modelSelectionField]`, but the caller isn't expecting a return (void).\n  if (defaultSelection == null) return;\n  if (!hasReturnType) {\n    return hydrateRecord<Shape>(response, record[modelSelectionField]);\n  } else if (typeof hasReturnType == \"boolean\") {\n    return record.result;\n  } else {\n    const innerReturnType = returnTypeForRecord(record, hasReturnType);\n\n    return processActionResponse(defaultSelection, response, record, modelSelectionField, innerReturnType);\n  }\n};\n\nconst returnTypeForRecord = (record: any, hasReturnType: HasReturnType) => {\n  if (typeof hasReturnType == \"boolean\") {\n    return hasReturnType;\n  }\n\n  const innerReturnTypeForTypename = hasReturnType[`... on ${record.__typename}`];\n\n  return innerReturnTypeForTypename && \"hasReturnType\" in innerReturnTypeForTypename ? innerReturnTypeForTypename.hasReturnType : false;\n};\n\nexport const globalActionRunner = async (\n  connection: GadgetConnection,\n  operation: string,\n  variables: VariablesOptions,\n  namespace?: string | string[] | null\n) => {\n  const plan = globalActionOperation(operation, variables, namespace);\n  const response = await connection.currentClient.mutation(plan.query, plan.variables).toPromise();\n  const dataPath = namespaceDataPath([operation], namespace);\n  return assertMutationSuccess(response, dataPath).result;\n};\n\nexport async function enqueueActionRunner<SchemaT, Action extends AnyBulkActionFunction, Result = BackgroundActionHandle<SchemaT, Action>>(\n  connection: GadgetConnection,\n  action: Action,\n  variables: Action[\"variablesType\"],\n  options?: EnqueueBackgroundActionOptions<Action>\n): Promise<Result[]>;\nexport async function enqueueActionRunner<SchemaT, Action extends AnyActionFunction, Result = BackgroundActionHandle<SchemaT, Action>>(\n  connection: GadgetConnection,\n  action: Action,\n  variables: Action[\"variablesType\"],\n  options?: EnqueueBackgroundActionOptions<Action>\n): Promise<Result>;\nexport async function enqueueActionRunner<SchemaT, Action extends AnyActionFunction, Result = BackgroundActionHandle<SchemaT, Action>>(\n  connection: GadgetConnection,\n  action: Action,\n  variables: Action[\"variablesType\"],\n  options: EnqueueBackgroundActionOptions<Action> = {}\n): Promise<Result | Result[]> {\n  const normalizedVariableValues = action.isBulk\n    ? disambiguateBulkActionVariables(action, variables)\n    : disambiguateActionVariables(action, variables);\n  const variableOptions = setVariableOptionValues(action.variables, normalizedVariableValues);\n\n  const plan = enqueueActionOperation(action.operationName, variableOptions, action.namespace, options, action.isBulk);\n  const response = await connection.currentClient.mutation(plan.query, plan.variables, options).toPromise();\n  const dataPath = [\"background\", ...namespaceDataPath([action.operationName], action.namespace)];\n\n  try {\n    const result = assertMutationSuccess(response, dataPath);\n    if (action.isBulk) {\n      return result.backgroundActions.map((result: { id: string }) => new BackgroundActionHandle(connection, action, result.id));\n    } else {\n      return new BackgroundActionHandle(connection, action, result.backgroundAction.id) as Result;\n    }\n  } catch (error: any) {\n    if (\"code\" in error && error.code == \"GGT_DUPLICATE_BACKGROUND_ACTION_ID\" && options?.id && options.onDuplicateID == \"ignore\") {\n      return new BackgroundActionHandle(connection, action, options.id) as Result;\n    }\n    throw error;\n  }\n}\n\nexport const backgroundActionResultRunner = async <\n  SchemaT,\n  Action extends ActionFunctionMetadata<any, any, any, SchemaT, any, any> | GlobalActionFunction<any>,\n  Options extends ActionFunctionOptions<Action>,\n  ResultData = BackgroundActionResultData<Action, Options>\n>(\n  connection: GadgetConnection,\n  id: string,\n  action: Action,\n  options?: Options\n): Promise<BackgroundActionResult<ResultData>> => {\n  const plan = backgroundActionResultOperation(id, action, options);\n  const subscription = connection.currentClient.subscription(plan.query, plan.variables);\n\n  const response = await pipe(\n    subscription,\n    filter((operation) => operation.error || operation.data?.backgroundAction?.outcome),\n    take(1),\n    toPromise\n  );\n\n  const backgroundAction = assertOperationSuccess(response, [\"backgroundAction\"]);\n\n  assertResponseSuccess(backgroundAction.result);\n\n  switch (action.type) {\n    case \"action\": {\n      backgroundAction.result = processActionResponse(\n        action.defaultSelection,\n        response.data,\n        backgroundAction.result,\n        action.isBulk ? action.modelApiIdentifier : action.modelSelectionField,\n        action.hasReturnType\n      );\n      break;\n    }\n    case \"globalAction\": {\n      backgroundAction.result = backgroundAction.result.result;\n      break;\n    }\n  }\n\n  return backgroundAction as BackgroundActionResult<ResultData>;\n};\n\n/** @deprecated previous export name, @see backgroundActionResultRunner */\nexport const actionResultRunner = backgroundActionResultRunner;\n", "import type { GadgetConnection } from \"./GadgetConnection.js\";\nimport type { ActionFunction, ActionFunctionMetadata, GlobalActionFunction } from \"./GadgetFunctions.js\";\nimport type { GadgetRecord } from \"./GadgetRecord.js\";\nimport { backgroundActionResultRunner } from \"./operationRunners.js\";\nimport type { ActionFunctionOptions, DefaultSelection, Select } from \"./types.js\";\n\nexport type BackgroundActionResultData<\n  F extends ActionFunctionMetadata<any, any, any, any, any, any> | GlobalActionFunction<any>,\n  Selection\n> = F extends ActionFunction<any, any, any, any, any>\n  ? F[\"hasReturnType\"] extends true\n    ? any\n    : GadgetRecord<\n        Select<\n          Exclude<F[\"schemaType\"], null | undefined>,\n          DefaultSelection<\n            F[\"selectionType\"],\n            Selection extends { select?: F[\"selectionType\"] | null | undefined } ? Selection : never,\n            F[\"defaultSelection\"]\n          >\n        >\n      >\n  : any;\n\nexport type BackgroundActionResult<Data = any> = {\n  id: string;\n  outcome: string | null;\n  result: Data | null;\n};\n\n/** Represents a handle to a background action which has been enqueued */\nexport class BackgroundActionHandle<\n  SchemaT,\n  Action extends ActionFunctionMetadata<any, any, any, SchemaT, any, any> | GlobalActionFunction<any>\n> {\n  constructor(readonly connection: GadgetConnection, readonly action: Action, readonly id: string) {}\n\n  /** Wait for this background action to complete and return the result. */\n  async result<Options extends ActionFunctionOptions<Action>, ResultData = BackgroundActionResultData<Action, Options>>(options?: Options) {\n    return (await backgroundActionResultRunner<SchemaT, Action, Options, ResultData>(this.connection, this.id, this.action, options))\n      .result;\n  }\n}\n", "import type { Exchange } from \"@urql/core\";\nimport type { GadgetSubscriptionClientOptions } from \"./GadgetConnection.js\";\n\n/** All the options for a Gadget client */\nexport interface ClientOptions {\n  /**\n   *  The HTTP GraphQL endpoint this connection should connect to\n   **/\n  endpoint?: string;\n  /**\n   * The authentication strategy for connecting to the upstream API\n   **/\n  authenticationMode?: AuthenticationModeOptions;\n  /**\n   * The Websockets GraphQL endpoint this connection should connect to for transactional processing\n   **/\n  websocketsEndpoint?: string;\n  /**\n   * Custom options to pass along to the WS clients when creating them\n   **/\n  subscriptionClientOptions?: GadgetSubscriptionClientOptions;\n  /**\n   * The `WebSocket` constructor to use for building websockets. Defaults to `globalThis.WebSocket`.\n   **/\n  websocketImplementation?: any;\n  /**\n   * The `fetch` function to use for making HTTP requests. Defaults to `globalThis.fetch`.\n   **/\n  fetchImplementation?: typeof fetch;\n  /**\n   * Which of the Gadget application's environments this connection should connect to\n   **/\n  environment?: string;\n  /**\n   * The ID of the application. Not required -- only used for emitting telemetry\n   **/\n  applicationId?: string;\n  /**\n   * The root URL of the app's public HTTP surface. Used for building fully-qualified URLs when `api.fetch` is called with relative paths.\n   *\n   * This only needs to be passed if you are overriding the `endpoint` parameter to something that can't be used for building fully-qualified URLs from relative imports.\n   **/\n  baseRouteURL?: string;\n  /**\n   * A list of exchanges to merge into the default exchanges used by the client.\n   */\n  exchanges?: Exchanges;\n}\n\n/** Options to configure a specific browser-based authentication mode */\nexport interface BrowserSessionAuthenticationModeOptions {\n  /**\n   * The initial token to set for browser authentication.\n   * This is useful when your session is initialized by some external authentication system, like OAuth.\n   */\n  initialToken?: string;\n\n  /**\n   * Configures how the authentication token is persisted. See `BrowserSessionStorageType`.\n   */\n  storageType: BrowserSessionStorageType;\n}\n\n/**\n * If using the `browserSession` authentication mode, sets how long the stored authentication information will last for for each user.\n */\nexport enum BrowserSessionStorageType {\n  /**\n   * `Durable` authentications ask the browser to keep the user's authentication information around for as long as it can, like the \"Remember Me\" button on a lot of webpages. Uses `window.localStorage` to store authentication tokens.\n   */\n  Durable = \"Durable\",\n  /**\n   * `Session` authentications ask the browser to keep the user's authentication information around for a given browser tab, and then remove it when the tab is closed. Useful for high security scenarios where authenticated sessions are sensitive and should be forgotten quickly, or where the user's identity is temporary and only needs to last a short while. Uses `window.sessionStorage` to store authentication tokens.\n   */\n  Session = \"session\",\n  /**\n   * `Temporary` authentications don't ask the browser to keep the user's authentication information around at all, such that refreshing the page will result in the user having no saved authentication state and likely being logged out. Useful for high security scenarios where authenticated sessions are sensitive and should be forgotten quickly.\n   */\n  Temporary = \"temporary\",\n}\n\n/** Describes how to authenticate an instance of the client with the Gadget platform */\nexport interface AuthenticationModeOptions {\n  // Use an API key to authenticate with Gadget.\n  // Not strictly required, but without this the client might be useless depending on the app's permissions.\n  apiKey?: string;\n\n  // Use a web browser's `localStorage` or `sessionStorage` to persist authentication information.\n  // This allows the browser to have a persistent identity as the user navigates around and logs in and out.\n  browserSession?: boolean | BrowserSessionAuthenticationModeOptions;\n\n  // Use no authentication at all, and get access only to the data that the Unauthenticated backend role has access to.\n  anonymous?: true;\n\n  // @deprecated Use internal instead\n  internalAuthToken?: string;\n\n  // @private Use an internal platform auth token for authentication\n  // This is used to communicate within Gadget itself and shouldn't be used to connect to Gadget from other systems\n  internal?: {\n    authToken: string;\n    actAsSession?: boolean;\n    getSessionId?: () => Promise<string | undefined>;\n  };\n\n  // @private Use a passed custom function for managing authentication. For some fancy integrations that the API client supports, like embedded Shopify apps, we use platform native features to authenticate with the Gadget backend.\n  custom?: {\n    processFetch(input: RequestInfo | URL, init: RequestInit): Promise<void>;\n    processTransactionConnectionParams(params: Record<string, any>): Promise<void>;\n  };\n}\n\nexport interface Exchanges {\n  /**\n   * Exchanges to add before all other exchanges.\n   */\n  beforeAll?: Exchange[];\n  /**\n   * Exchanges to add before any async exchanges.\n   */\n  beforeAsync?: Exchange[];\n  /**\n   * Exchanges to add after all other exchanges.\n   */\n  afterAll?: Exchange[];\n}\n", "/** @private */\nexport function extendedTypeof(val) {\n    if (val === null) {\n        return 'null';\n    }\n    if (Array.isArray(val)) {\n        return 'array';\n    }\n    return typeof val;\n}\n/** @private */\nexport function isObject(val) {\n    return extendedTypeof(val) === 'object';\n}\n/** @private */\nexport function isAsyncIterable(val) {\n    return typeof Object(val)[Symbol.asyncIterator] === 'function';\n}\n/** @private */\nexport function isAsyncGenerator(val) {\n    return (isObject(val) &&\n        typeof Object(val)[Symbol.asyncIterator] === 'function' &&\n        typeof val.return === 'function'\n    // for lazy ones, we only need the return anyway\n    // typeof val.throw === 'function' &&\n    // typeof val.next === 'function'\n    );\n}\n/** @private */\nexport function areGraphQLErrors(obj) {\n    return (Array.isArray(obj) &&\n        // must be at least one error\n        obj.length > 0 &&\n        // error has at least a message\n        obj.every((ob) => 'message' in ob));\n}\n/**\n * Limits the WebSocket close event reason to not exceed a length of one frame.\n * Reference: https://datatracker.ietf.org/doc/html/rfc6455#section-5.2.\n *\n * @private\n */\nexport function limitCloseReason(reason, whenTooLong) {\n    return reason.length < 124 ? reason : whenTooLong;\n}\n", "/**\n *\n * common\n *\n */\nimport { areGraphQLErrors, extendedTypeof, isObject } from './utils.mjs';\n/**\n * The WebSocket sub-protocol used for the [GraphQL over WebSocket Protocol](https://github.com/graphql/graphql-over-http/blob/main/rfcs/GraphQLOverWebSocket.md).\n *\n * @category Common\n */\nexport const GRAPHQL_TRANSPORT_WS_PROTOCOL = 'graphql-transport-ws';\n/**\n * The deprecated subprotocol used by [subscriptions-transport-ws](https://github.com/apollographql/subscriptions-transport-ws).\n *\n * @private\n */\nexport const DEPRECATED_GRAPHQL_WS_PROTOCOL = 'graphql-ws';\n/**\n * `graphql-ws` expected and standard close codes of the [GraphQL over WebSocket Protocol](https://github.com/graphql/graphql-over-http/blob/main/rfcs/GraphQLOverWebSocket.md).\n *\n * @category Common\n */\nexport var CloseCode;\n(function (CloseCode) {\n    CloseCode[CloseCode[\"InternalServerError\"] = 4500] = \"InternalServerError\";\n    CloseCode[CloseCode[\"InternalClientError\"] = 4005] = \"InternalClientError\";\n    CloseCode[CloseCode[\"BadRequest\"] = 4400] = \"BadRequest\";\n    CloseCode[CloseCode[\"BadResponse\"] = 4004] = \"BadResponse\";\n    /** Tried subscribing before connect ack */\n    CloseCode[CloseCode[\"Unauthorized\"] = 4401] = \"Unauthorized\";\n    CloseCode[CloseCode[\"Forbidden\"] = 4403] = \"Forbidden\";\n    CloseCode[CloseCode[\"SubprotocolNotAcceptable\"] = 4406] = \"SubprotocolNotAcceptable\";\n    CloseCode[CloseCode[\"ConnectionInitialisationTimeout\"] = 4408] = \"ConnectionInitialisationTimeout\";\n    CloseCode[CloseCode[\"ConnectionAcknowledgementTimeout\"] = 4504] = \"ConnectionAcknowledgementTimeout\";\n    /** Subscriber distinction is very important */\n    CloseCode[CloseCode[\"SubscriberAlreadyExists\"] = 4409] = \"SubscriberAlreadyExists\";\n    CloseCode[CloseCode[\"TooManyInitialisationRequests\"] = 4429] = \"TooManyInitialisationRequests\";\n})(CloseCode || (CloseCode = {}));\n/**\n * Types of messages allowed to be sent by the client/server over the WS protocol.\n *\n * @category Common\n */\nexport var MessageType;\n(function (MessageType) {\n    MessageType[\"ConnectionInit\"] = \"connection_init\";\n    MessageType[\"ConnectionAck\"] = \"connection_ack\";\n    MessageType[\"Ping\"] = \"ping\";\n    MessageType[\"Pong\"] = \"pong\";\n    MessageType[\"Subscribe\"] = \"subscribe\";\n    MessageType[\"Next\"] = \"next\";\n    MessageType[\"Error\"] = \"error\";\n    MessageType[\"Complete\"] = \"complete\";\n})(MessageType || (MessageType = {}));\n/**\n * Validates the message against the GraphQL over WebSocket Protocol.\n *\n * Invalid messages will throw descriptive errors.\n *\n * @category Common\n */\nexport function validateMessage(val) {\n    if (!isObject(val)) {\n        throw new Error(`Message is expected to be an object, but got ${extendedTypeof(val)}`);\n    }\n    if (!val.type) {\n        throw new Error(`Message is missing the 'type' property`);\n    }\n    if (typeof val.type !== 'string') {\n        throw new Error(`Message is expects the 'type' property to be a string, but got ${extendedTypeof(val.type)}`);\n    }\n    switch (val.type) {\n        case MessageType.ConnectionInit:\n        case MessageType.ConnectionAck:\n        case MessageType.Ping:\n        case MessageType.Pong: {\n            if (val.payload != null && !isObject(val.payload)) {\n                throw new Error(`\"${val.type}\" message expects the 'payload' property to be an object or nullish or missing, but got \"${val.payload}\"`);\n            }\n            break;\n        }\n        case MessageType.Subscribe: {\n            if (typeof val.id !== 'string') {\n                throw new Error(`\"${val.type}\" message expects the 'id' property to be a string, but got ${extendedTypeof(val.id)}`);\n            }\n            if (!val.id) {\n                throw new Error(`\"${val.type}\" message requires a non-empty 'id' property`);\n            }\n            if (!isObject(val.payload)) {\n                throw new Error(`\"${val.type}\" message expects the 'payload' property to be an object, but got ${extendedTypeof(val.payload)}`);\n            }\n            if (typeof val.payload.query !== 'string') {\n                throw new Error(`\"${val.type}\" message payload expects the 'query' property to be a string, but got ${extendedTypeof(val.payload.query)}`);\n            }\n            if (val.payload.variables != null && !isObject(val.payload.variables)) {\n                throw new Error(`\"${val.type}\" message payload expects the 'variables' property to be a an object or nullish or missing, but got ${extendedTypeof(val.payload.variables)}`);\n            }\n            if (val.payload.operationName != null &&\n                extendedTypeof(val.payload.operationName) !== 'string') {\n                throw new Error(`\"${val.type}\" message payload expects the 'operationName' property to be a string or nullish or missing, but got ${extendedTypeof(val.payload.operationName)}`);\n            }\n            if (val.payload.extensions != null && !isObject(val.payload.extensions)) {\n                throw new Error(`\"${val.type}\" message payload expects the 'extensions' property to be a an object or nullish or missing, but got ${extendedTypeof(val.payload.extensions)}`);\n            }\n            break;\n        }\n        case MessageType.Next: {\n            if (typeof val.id !== 'string') {\n                throw new Error(`\"${val.type}\" message expects the 'id' property to be a string, but got ${extendedTypeof(val.id)}`);\n            }\n            if (!val.id) {\n                throw new Error(`\"${val.type}\" message requires a non-empty 'id' property`);\n            }\n            if (!isObject(val.payload)) {\n                throw new Error(`\"${val.type}\" message expects the 'payload' property to be an object, but got ${extendedTypeof(val.payload)}`);\n            }\n            break;\n        }\n        case MessageType.Error: {\n            if (typeof val.id !== 'string') {\n                throw new Error(`\"${val.type}\" message expects the 'id' property to be a string, but got ${extendedTypeof(val.id)}`);\n            }\n            if (!val.id) {\n                throw new Error(`\"${val.type}\" message requires a non-empty 'id' property`);\n            }\n            if (!areGraphQLErrors(val.payload)) {\n                throw new Error(`\"${val.type}\" message expects the 'payload' property to be an array of GraphQL errors, but got ${JSON.stringify(val.payload)}`);\n            }\n            break;\n        }\n        case MessageType.Complete: {\n            if (typeof val.id !== 'string') {\n                throw new Error(`\"${val.type}\" message expects the 'id' property to be a string, but got ${extendedTypeof(val.id)}`);\n            }\n            if (!val.id) {\n                throw new Error(`\"${val.type}\" message requires a non-empty 'id' property`);\n            }\n            break;\n        }\n        default:\n            throw new Error(`Invalid message 'type' property \"${val.type}\"`);\n    }\n    return val;\n}\n/**\n * Checks if the provided value is a valid GraphQL over WebSocket message.\n *\n * @deprecated Use `validateMessage` instead.\n *\n * @category Common\n */\nexport function isMessage(val) {\n    try {\n        validateMessage(val);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\n/**\n * Parses the raw websocket message data to a valid message.\n *\n * @category Common\n */\nexport function parseMessage(data, reviver) {\n    return validateMessage(typeof data === 'string' ? JSON.parse(data, reviver) : data);\n}\n/**\n * Stringifies a valid message ready to be sent through the socket.\n *\n * @category Common\n */\nexport function stringifyMessage(msg, replacer) {\n    validateMessage(msg);\n    return JSON.stringify(msg, replacer);\n}\n", "/**\n *\n * client\n *\n */\nvar __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }\nvar __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n    function fulfill(value) { resume(\"next\", value); }\n    function reject(value) { resume(\"throw\", value); }\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n};\nimport { GRAPHQL_TRANSPORT_WS_PROTOCOL, CloseCode, MessageType, parseMessage, stringifyMessage, } from './common.mjs';\nimport { isObject, limitCloseReason } from './utils.mjs';\n/** This file is the entry point for browsers, re-export common elements. */\nexport * from './common.mjs';\n/**\n * Creates a disposable GraphQL over WebSocket client.\n *\n * @category Client\n */\nexport function createClient(options) {\n    const { url, connectionParams, lazy = true, onNonLazyError = console.error, lazyCloseTimeout: lazyCloseTimeoutMs = 0, keepAlive = 0, disablePong, connectionAckWaitTimeout = 0, retryAttempts = 5, retryWait = async function randomisedExponentialBackoff(retries) {\n        let retryDelay = 1000; // start with 1s delay\n        for (let i = 0; i < retries; i++) {\n            retryDelay *= 2;\n        }\n        await new Promise((resolve) => setTimeout(resolve, retryDelay +\n            // add random timeout from 300ms to 3s\n            Math.floor(Math.random() * (3000 - 300) + 300)));\n    }, shouldRetry = isLikeCloseEvent, isFatalConnectionProblem, on, webSocketImpl, \n    /**\n     * Generates a v4 UUID to be used as the ID using `Math`\n     * as the random number generator. Supply your own generator\n     * in case you need more uniqueness.\n     *\n     * Reference: https://gist.github.com/jed/982883\n     */\n    generateID = function generateUUID() {\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n            const r = (Math.random() * 16) | 0, v = c == 'x' ? r : (r & 0x3) | 0x8;\n            return v.toString(16);\n        });\n    }, jsonMessageReplacer: replacer, jsonMessageReviver: reviver, } = options;\n    let ws;\n    if (webSocketImpl) {\n        if (!isWebSocket(webSocketImpl)) {\n            throw new Error('Invalid WebSocket implementation provided');\n        }\n        ws = webSocketImpl;\n    }\n    else if (typeof WebSocket !== 'undefined') {\n        ws = WebSocket;\n    }\n    else if (typeof global !== 'undefined') {\n        ws =\n            global.WebSocket ||\n                // @ts-expect-error: Support more browsers\n                global.MozWebSocket;\n    }\n    else if (typeof window !== 'undefined') {\n        ws =\n            window.WebSocket ||\n                // @ts-expect-error: Support more browsers\n                window.MozWebSocket;\n    }\n    if (!ws)\n        throw new Error(\"WebSocket implementation missing; on Node you can `import WebSocket from 'ws';` and pass `webSocketImpl: WebSocket` to `createClient`\");\n    const WebSocketImpl = ws;\n    // websocket status emitter, subscriptions are handled differently\n    const emitter = (() => {\n        const message = (() => {\n            const listeners = {};\n            return {\n                on(id, listener) {\n                    listeners[id] = listener;\n                    return () => {\n                        delete listeners[id];\n                    };\n                },\n                emit(message) {\n                    var _a;\n                    if ('id' in message)\n                        (_a = listeners[message.id]) === null || _a === void 0 ? void 0 : _a.call(listeners, message);\n                },\n            };\n        })();\n        const listeners = {\n            connecting: (on === null || on === void 0 ? void 0 : on.connecting) ? [on.connecting] : [],\n            opened: (on === null || on === void 0 ? void 0 : on.opened) ? [on.opened] : [],\n            connected: (on === null || on === void 0 ? void 0 : on.connected) ? [on.connected] : [],\n            ping: (on === null || on === void 0 ? void 0 : on.ping) ? [on.ping] : [],\n            pong: (on === null || on === void 0 ? void 0 : on.pong) ? [on.pong] : [],\n            message: (on === null || on === void 0 ? void 0 : on.message) ? [message.emit, on.message] : [message.emit],\n            closed: (on === null || on === void 0 ? void 0 : on.closed) ? [on.closed] : [],\n            error: (on === null || on === void 0 ? void 0 : on.error) ? [on.error] : [],\n        };\n        return {\n            onMessage: message.on,\n            on(event, listener) {\n                const l = listeners[event];\n                l.push(listener);\n                return () => {\n                    l.splice(l.indexOf(listener), 1);\n                };\n            },\n            emit(event, ...args) {\n                // we copy the listeners so that unlistens dont \"pull the rug under our feet\"\n                for (const listener of [...listeners[event]]) {\n                    // @ts-expect-error: The args should fit\n                    listener(...args);\n                }\n            },\n        };\n    })();\n    // invokes the callback either when an error or closed event is emitted,\n    // first one that gets called prevails, other emissions are ignored\n    function errorOrClosed(cb) {\n        const listening = [\n            // errors are fatal and more critical than close events, throw them first\n            emitter.on('error', (err) => {\n                listening.forEach((unlisten) => unlisten());\n                cb(err);\n            }),\n            // closes can be graceful and not fatal, throw them second (if error didnt throw)\n            emitter.on('closed', (event) => {\n                listening.forEach((unlisten) => unlisten());\n                cb(event);\n            }),\n        ];\n    }\n    let connecting, locks = 0, lazyCloseTimeout, retrying = false, retries = 0, disposed = false;\n    async function connect() {\n        // clear the lazy close timeout immediatelly so that close gets debounced\n        // see: https://github.com/enisdenjo/graphql-ws/issues/388\n        clearTimeout(lazyCloseTimeout);\n        const [socket, throwOnClose] = await (connecting !== null && connecting !== void 0 ? connecting : (connecting = new Promise((connected, denied) => (async () => {\n            if (retrying) {\n                await retryWait(retries);\n                // subscriptions might complete while waiting for retry\n                if (!locks) {\n                    connecting = undefined;\n                    return denied({ code: 1000, reason: 'All Subscriptions Gone' });\n                }\n                retries++;\n            }\n            emitter.emit('connecting', retrying);\n            const socket = new WebSocketImpl(typeof url === 'function' ? await url() : url, GRAPHQL_TRANSPORT_WS_PROTOCOL);\n            let connectionAckTimeout, queuedPing;\n            function enqueuePing() {\n                if (isFinite(keepAlive) && keepAlive > 0) {\n                    clearTimeout(queuedPing); // in case where a pong was received before a ping (this is valid behaviour)\n                    queuedPing = setTimeout(() => {\n                        if (socket.readyState === WebSocketImpl.OPEN) {\n                            socket.send(stringifyMessage({ type: MessageType.Ping }));\n                            emitter.emit('ping', false, undefined);\n                        }\n                    }, keepAlive);\n                }\n            }\n            errorOrClosed((errOrEvent) => {\n                connecting = undefined;\n                clearTimeout(connectionAckTimeout);\n                clearTimeout(queuedPing);\n                denied(errOrEvent);\n                if (errOrEvent instanceof TerminatedCloseEvent) {\n                    socket.close(4499, 'Terminated'); // close event is artificial and emitted manually, see `Client.terminate()` below\n                    socket.onerror = null;\n                    socket.onclose = null;\n                }\n            });\n            socket.onerror = (err) => emitter.emit('error', err);\n            socket.onclose = (event) => emitter.emit('closed', event);\n            socket.onopen = async () => {\n                try {\n                    emitter.emit('opened', socket);\n                    const payload = typeof connectionParams === 'function'\n                        ? await connectionParams()\n                        : connectionParams;\n                    // connectionParams might take too long causing the server to kick off the client\n                    // the necessary error/close event is already reported - simply stop execution\n                    if (socket.readyState !== WebSocketImpl.OPEN)\n                        return;\n                    socket.send(stringifyMessage(payload\n                        ? {\n                            type: MessageType.ConnectionInit,\n                            payload,\n                        }\n                        : {\n                            type: MessageType.ConnectionInit,\n                            // payload is completely absent if not provided\n                        }, replacer));\n                    if (isFinite(connectionAckWaitTimeout) &&\n                        connectionAckWaitTimeout > 0) {\n                        connectionAckTimeout = setTimeout(() => {\n                            socket.close(CloseCode.ConnectionAcknowledgementTimeout, 'Connection acknowledgement timeout');\n                        }, connectionAckWaitTimeout);\n                    }\n                    enqueuePing(); // enqueue ping (noop if disabled)\n                }\n                catch (err) {\n                    emitter.emit('error', err);\n                    socket.close(CloseCode.InternalClientError, limitCloseReason(err instanceof Error ? err.message : new Error(err).message, 'Internal client error'));\n                }\n            };\n            let acknowledged = false;\n            socket.onmessage = ({ data }) => {\n                try {\n                    const message = parseMessage(data, reviver);\n                    emitter.emit('message', message);\n                    if (message.type === 'ping' || message.type === 'pong') {\n                        emitter.emit(message.type, true, message.payload); // received\n                        if (message.type === 'pong') {\n                            enqueuePing(); // enqueue next ping (noop if disabled)\n                        }\n                        else if (!disablePong) {\n                            // respond with pong on ping\n                            socket.send(stringifyMessage(message.payload\n                                ? {\n                                    type: MessageType.Pong,\n                                    payload: message.payload,\n                                }\n                                : {\n                                    type: MessageType.Pong,\n                                    // payload is completely absent if not provided\n                                }));\n                            emitter.emit('pong', false, message.payload);\n                        }\n                        return; // ping and pongs can be received whenever\n                    }\n                    if (acknowledged)\n                        return; // already connected and acknowledged\n                    if (message.type !== MessageType.ConnectionAck)\n                        throw new Error(`First message cannot be of type ${message.type}`);\n                    clearTimeout(connectionAckTimeout);\n                    acknowledged = true;\n                    emitter.emit('connected', socket, message.payload, retrying); // connected = socket opened + acknowledged\n                    retrying = false; // future lazy connects are not retries\n                    retries = 0; // reset the retries on connect\n                    connected([\n                        socket,\n                        new Promise((_, reject) => errorOrClosed(reject)),\n                    ]);\n                }\n                catch (err) {\n                    socket.onmessage = null; // stop reading messages as soon as reading breaks once\n                    emitter.emit('error', err);\n                    socket.close(CloseCode.BadResponse, limitCloseReason(err instanceof Error ? err.message : new Error(err).message, 'Bad response'));\n                }\n            };\n        })())));\n        // if the provided socket is in a closing state, wait for the throw on close\n        if (socket.readyState === WebSocketImpl.CLOSING)\n            await throwOnClose;\n        let release = () => {\n            // releases this connection\n        };\n        const released = new Promise((resolve) => (release = resolve));\n        return [\n            socket,\n            release,\n            Promise.race([\n                // wait for\n                released.then(() => {\n                    if (!locks) {\n                        // and if no more locks are present, complete the connection\n                        const complete = () => socket.close(1000, 'Normal Closure');\n                        if (isFinite(lazyCloseTimeoutMs) && lazyCloseTimeoutMs > 0) {\n                            // if the keepalive is set, allow for the specified calmdown time and\n                            // then complete if the socket is still open.\n                            lazyCloseTimeout = setTimeout(() => {\n                                if (socket.readyState === WebSocketImpl.OPEN)\n                                    complete();\n                            }, lazyCloseTimeoutMs);\n                        }\n                        else {\n                            // otherwise complete immediately\n                            complete();\n                        }\n                    }\n                }),\n                // or\n                throwOnClose,\n            ]),\n        ];\n    }\n    /**\n     * Checks the `connect` problem and evaluates if the client should retry.\n     */\n    function shouldRetryConnectOrThrow(errOrCloseEvent) {\n        // some close codes are worth reporting immediately\n        if (isLikeCloseEvent(errOrCloseEvent) &&\n            (isFatalInternalCloseCode(errOrCloseEvent.code) ||\n                [\n                    CloseCode.InternalServerError,\n                    CloseCode.InternalClientError,\n                    CloseCode.BadRequest,\n                    CloseCode.BadResponse,\n                    CloseCode.Unauthorized,\n                    // CloseCode.Forbidden, might grant access out after retry\n                    CloseCode.SubprotocolNotAcceptable,\n                    // CloseCode.ConnectionInitialisationTimeout, might not time out after retry\n                    // CloseCode.ConnectionAcknowledgementTimeout, might not time out after retry\n                    CloseCode.SubscriberAlreadyExists,\n                    CloseCode.TooManyInitialisationRequests,\n                    // 4499, // Terminated, probably because the socket froze, we want to retry\n                ].includes(errOrCloseEvent.code)))\n            throw errOrCloseEvent;\n        // client was disposed, no retries should proceed regardless\n        if (disposed)\n            return false;\n        // normal closure (possibly all subscriptions have completed)\n        // if no locks were acquired in the meantime, shouldnt try again\n        if (isLikeCloseEvent(errOrCloseEvent) && errOrCloseEvent.code === 1000)\n            return locks > 0;\n        // retries are not allowed or we tried to many times, report error\n        if (!retryAttempts || retries >= retryAttempts)\n            throw errOrCloseEvent;\n        // throw non-retryable connection problems\n        if (!shouldRetry(errOrCloseEvent))\n            throw errOrCloseEvent;\n        // @deprecated throw fatal connection problems immediately\n        if (isFatalConnectionProblem === null || isFatalConnectionProblem === void 0 ? void 0 : isFatalConnectionProblem(errOrCloseEvent))\n            throw errOrCloseEvent;\n        // looks good, start retrying\n        return (retrying = true);\n    }\n    // in non-lazy (hot?) mode always hold one connection lock to persist the socket\n    if (!lazy) {\n        (async () => {\n            locks++;\n            for (;;) {\n                try {\n                    const [, , throwOnClose] = await connect();\n                    await throwOnClose; // will always throw because releaser is not used\n                }\n                catch (errOrCloseEvent) {\n                    try {\n                        if (!shouldRetryConnectOrThrow(errOrCloseEvent))\n                            return;\n                    }\n                    catch (errOrCloseEvent) {\n                        // report thrown error, no further retries\n                        return onNonLazyError === null || onNonLazyError === void 0 ? void 0 : onNonLazyError(errOrCloseEvent);\n                    }\n                }\n            }\n        })();\n    }\n    function subscribe(payload, sink) {\n        const id = generateID(payload);\n        let done = false, errored = false, releaser = () => {\n            // for handling completions before connect\n            locks--;\n            done = true;\n        };\n        (async () => {\n            locks++;\n            for (;;) {\n                try {\n                    const [socket, release, waitForReleaseOrThrowOnClose] = await connect();\n                    // if done while waiting for connect, release the connection lock right away\n                    if (done)\n                        return release();\n                    const unlisten = emitter.onMessage(id, (message) => {\n                        switch (message.type) {\n                            case MessageType.Next: {\n                                // eslint-disable-next-line @typescript-eslint/no-explicit-any -- payload will fit type\n                                sink.next(message.payload);\n                                return;\n                            }\n                            case MessageType.Error: {\n                                (errored = true), (done = true);\n                                sink.error(message.payload);\n                                releaser();\n                                return;\n                            }\n                            case MessageType.Complete: {\n                                done = true;\n                                releaser(); // release completes the sink\n                                return;\n                            }\n                        }\n                    });\n                    socket.send(stringifyMessage({\n                        id,\n                        type: MessageType.Subscribe,\n                        payload,\n                    }, replacer));\n                    releaser = () => {\n                        if (!done && socket.readyState === WebSocketImpl.OPEN)\n                            // if not completed already and socket is open, send complete message to server on release\n                            socket.send(stringifyMessage({\n                                id,\n                                type: MessageType.Complete,\n                            }, replacer));\n                        locks--;\n                        done = true;\n                        release();\n                    };\n                    // either the releaser will be called, connection completed and\n                    // the promise resolved or the socket closed and the promise rejected.\n                    // whatever happens though, we want to stop listening for messages\n                    await waitForReleaseOrThrowOnClose.finally(unlisten);\n                    return; // completed, shouldnt try again\n                }\n                catch (errOrCloseEvent) {\n                    if (!shouldRetryConnectOrThrow(errOrCloseEvent))\n                        return;\n                }\n            }\n        })()\n            .then(() => {\n            // delivering either an error or a complete terminates the sequence\n            if (!errored)\n                sink.complete();\n        }) // resolves on release or normal closure\n            .catch((err) => {\n            sink.error(err);\n        }); // rejects on close events and errors\n        return () => {\n            // dispose only of active subscriptions\n            if (!done)\n                releaser();\n        };\n    }\n    return {\n        on: emitter.on,\n        subscribe,\n        iterate(request) {\n            const pending = [];\n            const deferred = {\n                done: false,\n                error: null,\n                resolve: () => {\n                    // noop\n                },\n            };\n            const dispose = subscribe(request, {\n                next(val) {\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    pending.push(val);\n                    deferred.resolve();\n                },\n                error(err) {\n                    deferred.done = true;\n                    deferred.error = err;\n                    deferred.resolve();\n                },\n                complete() {\n                    deferred.done = true;\n                    deferred.resolve();\n                },\n            });\n            const iterator = (function iterator() {\n                return __asyncGenerator(this, arguments, function* iterator_1() {\n                    for (;;) {\n                        if (!pending.length) {\n                            // only wait if there are no pending messages available\n                            yield __await(new Promise((resolve) => (deferred.resolve = resolve)));\n                        }\n                        // first flush\n                        while (pending.length) {\n                            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                            yield yield __await(pending.shift());\n                        }\n                        // then error\n                        if (deferred.error) {\n                            throw deferred.error;\n                        }\n                        // or complete\n                        if (deferred.done) {\n                            return yield __await(void 0);\n                        }\n                    }\n                });\n            })();\n            iterator.throw = async (err) => {\n                if (!deferred.done) {\n                    deferred.done = true;\n                    deferred.error = err;\n                    deferred.resolve();\n                }\n                return { done: true, value: undefined };\n            };\n            iterator.return = async () => {\n                dispose();\n                return { done: true, value: undefined };\n            };\n            return iterator;\n        },\n        async dispose() {\n            disposed = true;\n            if (connecting) {\n                // if there is a connection, close it\n                const [socket] = await connecting;\n                socket.close(1000, 'Normal Closure');\n            }\n        },\n        terminate() {\n            if (connecting) {\n                // only if there is a connection\n                emitter.emit('closed', new TerminatedCloseEvent());\n            }\n        },\n    };\n}\n/**\n * A syntetic close event `4499: Terminated` is issued to the current to immediately\n * close the connection without waiting for the one coming from `WebSocket.onclose`.\n *\n * Terminating is not considered fatal and a connection retry will occur as expected.\n *\n * Useful in cases where the WebSocket is stuck and not emitting any events;\n * can happen on iOS Safari, see: https://github.com/enisdenjo/graphql-ws/discussions/290.\n */\nexport class TerminatedCloseEvent extends Error {\n    constructor() {\n        super(...arguments);\n        this.name = 'TerminatedCloseEvent';\n        this.message = '4499: Terminated';\n        this.code = 4499;\n        this.reason = 'Terminated';\n        this.wasClean = false;\n    }\n}\nfunction isLikeCloseEvent(val) {\n    return isObject(val) && 'code' in val && 'reason' in val;\n}\nfunction isFatalInternalCloseCode(code) {\n    if ([\n        1000,\n        1001,\n        1006,\n        1005,\n        1012,\n        1013,\n        1014, // Bad Gateway\n    ].includes(code))\n        return false;\n    // all other internal errors are fatal\n    return code >= 1000 && code <= 1999;\n}\nfunction isWebSocket(val) {\n    return (typeof val === 'function' &&\n        'constructor' in val &&\n        'CLOSED' in val &&\n        'CLOSING' in val &&\n        'CONNECTING' in val &&\n        'OPEN' in val);\n}\n", "// https://github.com/maxogden/websocket-stream/blob/48dc3ddf943e5ada668c31ccd94e9186f02fafbd/ws-fallback.js\n\nvar ws = null\n\nif (typeof WebSocket !== 'undefined') {\n  ws = WebSocket\n} else if (typeof MozWebSocket !== 'undefined') {\n  ws = MozWebSocket\n} else if (typeof global !== 'undefined') {\n  ws = global.WebSocket || global.MozWebSocket\n} else if (typeof window !== 'undefined') {\n  ws = window.WebSocket || window.MozWebSocket\n} else if (typeof self !== 'undefined') {\n  ws = self.WebSocket || self.MozWebSocket\n}\n\nexport default ws\n", "import type { Client } from \"@urql/core\";\nimport type { Client as SubscriptionClient } from \"graphql-ws\";\nimport { assertOperationSuccess } from \"./support.js\";\n\n/** Represents the error thrown when a transaction is explicity rolled back, sometimes due to another inner error */\nexport class TransactionRolledBack extends Error {}\n\n/** Represents an open transaction against the Gadget API */\nexport class GadgetTransaction {\n  open = false;\n  constructor(readonly client: Client, readonly subscriptionClient: SubscriptionClient) {}\n\n  /** Shut down this transaction by closing the connection to the backend. */\n  close() {\n    if (this.open) {\n      void this.rollback().catch(() => null);\n    }\n    void this.subscriptionClient.dispose();\n  }\n\n  /** Explicitly roll back this transaction, preventing any of the changes made during it from being committed. */\n  async rollback() {\n    assertOperationSuccess(await this.client.mutation(`mutation RollbackTransaction { internal { rollbackTransaction }}`, {}).toPromise(), [\n      \"internal\",\n      \"rollbackTransaction\",\n    ]);\n    this.open = false;\n    throw new TransactionRolledBack(\"Transaction rolled back.\");\n  }\n\n  /**\n   * @private\n   */\n  async start() {\n    assertOperationSuccess(await this.client.mutation(`mutation StartTransaction { internal { startTransaction }}`, {}).toPromise(), [\n      \"internal\",\n      \"startTransaction\",\n    ]);\n    this.open = true;\n  }\n\n  /**\n   * @private\n   */\n  async commit() {\n    assertOperationSuccess(await this.client.mutation(`mutation CommitTransaction { internal { commitTransaction }}`, {}).toPromise(), [\n      \"internal\",\n      \"commitTransaction\",\n    ]);\n    this.open = false;\n  }\n}\n", "export interface BrowserStorage {\n  getItem(key: string): string | null;\n  setItem(key: string, value: string): void;\n}\n\n/**\n * Implements part of the `window.localStorage` api, but in memory such that the stored values are lost as soon as the JS VM's life ends\n **/\nexport class InMemoryStorage implements BrowserStorage {\n  values: Record<string, string> = {};\n\n  getItem(key: string) {\n    return this.values[key] || null;\n  }\n\n  setItem(key: string, value: string) {\n    this.values[key] = value;\n  }\n}\n", "import type { Exchange, Operation } from \"@urql/core\";\nimport { filter, merge, pipe, tap } from \"wonka\";\nimport { isLiveQueryOperationDefinitionNode } from \"../GadgetConnection.js\";\n\n/**\n * Exchange that prevents duplicate execution of live queries while allowing proper teardown and re-establishment.\n *\n * Live queries are long-running special subscriptions that receive real-time updates from the server. When mutations occur, urql's cache exchange tries to re-execute any mounted queries that could be affected and so re-executes live queries. Live queries automatically update their own data using their own persistent connection, so they shouldn't be re-executed if already mounted.\n */\nexport const liveQueryExchange: Exchange = ({ forward }) => {\n  const executed = new Set<number>();\n\n  const getOperationId = (op: Operation<any, any>) => {\n    return op.key;\n  };\n\n  return (operations$) => {\n    const notLive = pipe(\n      operations$,\n      filter((op) => !op.query.definitions.some(isLiveQueryOperationDefinitionNode))\n    );\n\n    const live = pipe(\n      operations$,\n      filter((op) => op.query.definitions.some(isLiveQueryOperationDefinitionNode)),\n      filter((op) => {\n        const opId = getOperationId(op);\n        return !executed.has(opId) || op.kind !== \"query\";\n      }),\n      tap((op) => {\n        const opId = getOperationId(op);\n        if (op.kind === \"query\") {\n          executed.add(opId);\n        } else if (op.kind === \"teardown\") {\n          executed.delete(opId);\n        }\n      })\n    );\n\n    return forward(merge([live, notLive]));\n  };\n};\n", "import type { Exchange } from \"@urql/core\";\nimport { mapExchange } from \"@urql/core\";\nimport type { DocumentNode, OperationDefinitionNode } from \"graphql\";\n\nconst graphqlDocumentName = (doc: DocumentNode) => {\n  const lastDefinition: OperationDefinitionNode | undefined = [...doc.definitions]\n    .reverse()\n    .find((definition) => definition.kind == \"OperationDefinition\") as any;\n  if (lastDefinition) {\n    if (lastDefinition.name) {\n      return lastDefinition.name.value;\n    }\n    const firstSelection = lastDefinition.selectionSet.selections.find((node) => node.kind == \"Field\") as any;\n    return firstSelection.name.value;\n  }\n};\n\nexport const operationNameExchange: Exchange = mapExchange({\n  onOperation: (operation) => {\n    operation.context.operationName ??= graphqlDocumentName(operation.query) || \"unknown\";\n  },\n});\n", "import type { Exchange } from \"@urql/core\";\nimport { mapExchange } from \"@urql/core\";\n\nexport const addUrlParams = (url: string, paramsToAdd: Record<string, any>) => {\n  const [start, params] = url.split(\"?\");\n  const paramsObj = new URLSearchParams(params);\n  for (const [key, value] of Object.entries(paramsToAdd)) {\n    paramsObj.set(key, value);\n  }\n  return `${start}?${paramsObj.toString()}`;\n};\n\nexport const urlParamExchange: Exchange = mapExchange({\n  onOperation: (operation) => {\n    if (operation.context.url && operation.context.operationName) {\n      try {\n        operation.context.url = addUrlParams(operation.context.url, { operation: operation.context.operationName });\n      } catch (error) {\n        // not able to parse URL params, just don't add this optional param and let the rest of the system react to the invalid URL\n      }\n    }\n  },\n});\n", "/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport type { DefinitionNode, DirectiveNode, OperationDefinitionNode } from \"@0no-co/graphql.web\";\nimport type { ClientOptions, RequestPolicy } from \"@urql/core\";\nimport { Client, cacheExchange, fetchExchange, subscriptionExchange } from \"@urql/core\";\nimport type { ExecutionResult } from \"graphql\";\nimport type { Sink, Client as SubscriptionClient, ClientOptions as SubscriptionClientOptions } from \"graphql-ws\";\nimport { CloseCode, createClient as createSubscriptionClient } from \"graphql-ws\";\nimport type { Maybe } from \"graphql/jsutils/Maybe.js\";\nimport WebSocket from \"isomorphic-ws\";\nimport type { AuthenticationModeOptions, BrowserSessionAuthenticationModeOptions, Exchanges } from \"./ClientOptions.js\";\nimport { BrowserSessionStorageType } from \"./ClientOptions.js\";\nimport { GadgetTransaction, TransactionRolledBack } from \"./GadgetTransaction.js\";\nimport type { BrowserStorage } from \"./InMemoryStorage.js\";\nimport { InMemoryStorage } from \"./InMemoryStorage.js\";\nimport { liveQueryExchange } from \"./exchanges/liveQueryExchange.js\";\nimport { operationNameExchange } from \"./exchanges/operationNameExchange.js\";\nimport { addUrlParams, urlParamExchange } from \"./exchanges/urlParamExchange.js\";\nimport {\n  GadgetTooManyRequestsError,\n  GadgetUnexpectedCloseError,\n  GadgetWebsocketConnectionTimeoutError,\n  isCloseEvent,\n  storageAvailable,\n} from \"./support.js\";\n\nexport type TransactionRun<T> = (transaction: GadgetTransaction) => Promise<T>;\n\nexport enum GadgetGraphQLCloseCode {\n  TooManyRequests = 4294,\n}\nexport interface GadgetSubscriptionClientOptions extends Partial<SubscriptionClientOptions> {\n  urlParams?: Record<string, string | null | undefined>;\n  connectionAttempts?: number;\n  connectionGlobalTimeoutMs?: number;\n}\n\nconst DEFAULT_CONN_ATTEMPTS = 2;\nconst DEFAULT_CONN_ACK_TIMEOUT = 4_800;\nconst DEFAULT_CONN_GLOBAL_TIMEOUT = 10_000;\n\nconst RETRYABLE_CLOSE_CODES = [CloseCode.ConnectionAcknowledgementTimeout, CloseCode.ConnectionInitialisationTimeout];\n\nexport const $transaction = Symbol.for(\"gadget/transaction\");\nexport const $gadgetConnection = Symbol.for(\"gadget/connection\");\n\nconst sessionStorageKey = \"token\";\nconst base64 = typeof btoa !== \"undefined\" ? btoa : (str: string) => Buffer.from(str).toString(\"base64\");\n\nexport interface GadgetConnectionOptions {\n  endpoint: string;\n  authenticationMode?: AuthenticationModeOptions;\n  websocketsEndpoint?: string;\n  subscriptionClientOptions?: GadgetSubscriptionClientOptions;\n  websocketImplementation?: typeof globalThis.WebSocket;\n  fetchImplementation?: typeof globalThis.fetch;\n  environment?: string;\n  requestPolicy?: ClientOptions[\"requestPolicy\"];\n  applicationId?: string;\n  baseRouteURL?: string;\n  exchanges?: Exchanges;\n  createSubscriptionClient?: typeof createSubscriptionClient;\n}\n\n/**\n * Represents the current strategy for authenticating with the Gadget platform.\n * For individual users in web browsers, we authenticate using a session token stored client side, like a cookie, but with cross domain support.\n * For server to server communication, or traceable access from the browser, we use pre shared secrets called API Keys\n * And when within the Gadget platform itself, we use a private secret token called an Internal Auth Token. Internal Auth Tokens are managed by Gadget and should never be used by external developers.\n **/\nexport enum AuthenticationMode {\n  BrowserSession = \"browser-session\",\n  APIKey = \"api-key\",\n  Internal = \"internal\",\n  InternalAuthToken = \"internal-auth-token\",\n  Anonymous = \"anonymous\",\n  Custom = \"custom\",\n}\n\nconst objectForGlobals = typeof globalThis != \"undefined\" ? globalThis : typeof window != \"undefined\" ? window : undefined;\n\n/**\n * Root level database connection that Actions can use to mutate data in a Gadget database.\n * Manages transactions and the connection to a Gadget API\n */\nexport class GadgetConnection {\n  static version = \"0.15.43\" as const;\n\n  // Options used when generating new GraphQL clients for the base connection and for for transactions\n  readonly endpoint: string;\n  private subscriptionClientOptions?: SubscriptionClientOptions;\n  private websocketsEndpoint: string;\n  private websocketImplementation?: typeof globalThis.WebSocket;\n  private _fetchImplementation: typeof globalThis.fetch;\n  private environment: string;\n  private exchanges: Required<Exchanges>;\n\n  // the base client using HTTP requests that non-transactional operations will use\n  private baseClient: Client;\n\n  /** @private (but accessible for testing purposes) */\n  baseSubscriptionClient?: SubscriptionClient;\n\n  // the transactional websocket client that will be used inside a transaction block\n  private currentTransaction: GadgetTransaction | null = null;\n\n  // How this client will authenticate (if at all) against the Gadget backed\n  authenticationMode: AuthenticationMode = AuthenticationMode.Anonymous;\n  private sessionTokenStore?: BrowserStorage;\n  private requestPolicy: RequestPolicy;\n  createSubscriptionClient: typeof createSubscriptionClient;\n\n  constructor(readonly options: GadgetConnectionOptions) {\n    if (!options.endpoint) throw new Error(\"Must provide an `endpoint` option for a GadgetConnection to connect to\");\n    this.endpoint = options.endpoint;\n    if (options.fetchImplementation) {\n      this._fetchImplementation = options.fetchImplementation;\n    } else if (typeof objectForGlobals != \"undefined\" && objectForGlobals.fetch) {\n      this._fetchImplementation = objectForGlobals.fetch.bind(objectForGlobals);\n    } else {\n      this._fetchImplementation = async (...args: [any]) => {\n        // lazily import cross-fetch to avoid bundling it in the client\n        let fetch: typeof globalThis.fetch = (await import(\"cross-fetch\")) as any;\n\n        // when compiled to CJS, the dynamic import above returns the default export right away. in ESM though, we need to access it ourselves\n        if ((fetch as any).default) {\n          fetch = (fetch as any).default;\n        }\n        return await fetch(...args);\n      };\n    }\n    this.websocketImplementation = options.websocketImplementation ?? globalThis?.WebSocket ?? WebSocket;\n    this.websocketsEndpoint = options.websocketsEndpoint ?? options.endpoint + \"/batch\";\n    this.websocketsEndpoint = this.websocketsEndpoint.replace(/^http/, \"ws\");\n    this.environment = options.environment ?? \"Development\";\n    this.requestPolicy = options.requestPolicy ?? \"cache-and-network\";\n    this.exchanges = {\n      beforeAll: [],\n      beforeAsync: [],\n      afterAll: [],\n      ...options.exchanges,\n    };\n    this.createSubscriptionClient = options.createSubscriptionClient ?? createSubscriptionClient;\n\n    this.setAuthenticationMode(options.authenticationMode);\n\n    this.baseClient = this.newBaseClient();\n  }\n\n  private get sessionStorageKey() {\n    return `${sessionStorageKey}-${this.endpoint}`;\n  }\n\n  get currentClient() {\n    return this.currentTransaction?.client || this.baseClient;\n  }\n\n  set fetchImplementation(implementation: typeof globalThis.fetch) {\n    this._fetchImplementation = implementation;\n    this.resetClients();\n  }\n\n  /**\n   * Change the authentication mode settings for this connection imperatively.\n   * @private This function is generally not required for use by external developers, but is useful for those building integrations against the Gadget API to configure passed in `api` objects.\n   */\n  setAuthenticationMode(options?: AuthenticationModeOptions) {\n    if (options) {\n      if (options.browserSession) {\n        this.enableSessionMode(options.browserSession);\n      } else if (options.internal) {\n        this.authenticationMode = AuthenticationMode.Internal;\n      } else if (options.internalAuthToken) {\n        this.authenticationMode = AuthenticationMode.InternalAuthToken;\n      } else if (options.apiKey) {\n        this.authenticationMode = AuthenticationMode.APIKey;\n      } else if (options.custom) {\n        this.authenticationMode = AuthenticationMode.Custom;\n      }\n      this.options.authenticationMode = options;\n    }\n\n    this.authenticationMode ??= AuthenticationMode.Anonymous;\n  }\n\n  enableSessionMode(options?: true | BrowserSessionAuthenticationModeOptions) {\n    this.authenticationMode = AuthenticationMode.BrowserSession;\n\n    const desiredMode = !options || typeof options == \"boolean\" ? BrowserSessionStorageType.Durable : options.storageType;\n    let sessionTokenStore;\n    if (desiredMode == BrowserSessionStorageType.Durable && storageAvailable(\"localStorage\")) {\n      sessionTokenStore = window.localStorage;\n    } else if (desiredMode == BrowserSessionStorageType.Session && storageAvailable(\"sessionStorage\")) {\n      sessionTokenStore = window.sessionStorage;\n    } else {\n      sessionTokenStore = new InMemoryStorage();\n    }\n\n    if (options !== null && typeof options === \"object\" && \"initialToken\" in options && options.initialToken) {\n      sessionTokenStore.setItem(this.sessionStorageKey, options.initialToken);\n    }\n\n    this.sessionTokenStore = sessionTokenStore;\n    this.resetClients();\n  }\n\n  transaction: {\n    <T>(options: GadgetSubscriptionClientOptions, run: TransactionRun<T>): Promise<T>;\n    <T>(run: TransactionRun<T>): Promise<T>;\n  } = async <T>(optionsOrRun: GadgetSubscriptionClientOptions | TransactionRun<T>, maybeRun?: TransactionRun<T>): Promise<T> => {\n    let run: TransactionRun<T>;\n    let options: GadgetSubscriptionClientOptions;\n\n    if (maybeRun) {\n      run = maybeRun;\n      options = optionsOrRun as GadgetSubscriptionClientOptions;\n    } else {\n      run = optionsOrRun as TransactionRun<T>;\n      options = {};\n    }\n\n    if (this.currentTransaction) {\n      return await run(this.currentTransaction);\n    }\n\n    let subscriptionClient: SubscriptionClient | null = null;\n    let transaction;\n    try {\n      // The server will error if it receives any operations before the auth dance has been completed, so we block on that happening before sending our first operation. It's important that this happens synchronously after instantiating the client so we don't miss any messages\n      subscriptionClient = await this.waitForOpenedConnection({\n        isFatalConnectionProblem(errorOrCloseEvent) {\n          // any interruption of the transaction is fatal to the transaction\n          console.warn(\"Transport error encountered during transaction processing\", errorOrCloseEvent);\n          return true;\n        },\n        connectionAckWaitTimeout: DEFAULT_CONN_ACK_TIMEOUT,\n        ...options,\n        lazy: false,\n        // super ultra critical option that ensures graphql-ws doesn't automatically close the websocket connection when there are no outstanding operations. this is key so we can start a transaction then make mutations within it\n        lazyCloseTimeout: 100000,\n        retryAttempts: 0,\n      });\n\n      const client = new Client({\n        url: \"/-\", // not used because there's no fetch exchange, set for clarity\n        requestPolicy: \"network-only\", // skip any cached data during transactions\n        exchanges: [\n          ...this.exchanges.beforeAll,\n          operationNameExchange,\n          ...this.exchanges.beforeAsync,\n          subscriptionExchange({\n            forwardSubscription(request) {\n              const input = { ...request, query: request.query || \"\" };\n              return {\n                subscribe: (sink) => {\n                  const dispose = subscriptionClient!.subscribe(input, sink as Sink<ExecutionResult>);\n                  return {\n                    unsubscribe: dispose,\n                  };\n                },\n              };\n            },\n            enableAllOperations: true,\n          }),\n          ...this.exchanges.afterAll,\n        ],\n      });\n      (client as any)[$gadgetConnection] = this;\n\n      transaction = new GadgetTransaction(client, subscriptionClient);\n      this.currentTransaction = transaction;\n      await transaction.start();\n      const result = await run(transaction);\n      await transaction.commit();\n      return result;\n    } catch (error) {\n      try {\n        if (transaction?.open) await transaction.rollback();\n      } catch (rollbackError) {\n        if (!(rollbackError instanceof TransactionRolledBack)) {\n          console.warn(\"Encountered another error while rolling back a Gadget transaction that errored. The other error:\", rollbackError);\n        }\n      }\n      if (isCloseEvent(error)) {\n        throw new GadgetUnexpectedCloseError(error);\n      } else {\n        throw error;\n      }\n    } finally {\n      await subscriptionClient?.dispose();\n      this.currentTransaction = null;\n    }\n  };\n\n  close() {\n    if (this.baseSubscriptionClient) this.disposeClient(this.baseSubscriptionClient);\n    if (this.currentTransaction) {\n      this.currentTransaction.close();\n    }\n  }\n\n  /**\n   * `fetch` function that works the same as the built-in `fetch` function, but automatically passes authentication information for this API client.\n   *\n   * @example\n   * await api.connection.fetch(\"https://myapp--development.gadget.app/foo/bar\");\n   *\n   * @example\n   * // fetch a relative URL from the endpoint this API client is configured to fetch from\n   * await api.connection.fetch(\"/foo/bar\");\n   **/\n  fetch = async (input: RequestInfo | URL, init: RequestInit = {}) => {\n    input = processMaybeRelativeInput(input, this.options.baseRouteURL ?? this.options.endpoint);\n\n    if (this.isGadgetRequest(input)) {\n      const requestHeaders = await this.requestHeaders();\n      init.headers = { ...requestHeaders, ...init.headers };\n\n      if (this.authenticationMode == AuthenticationMode.Custom) {\n        await this.options.authenticationMode!.custom!.processFetch(input, init);\n      }\n    }\n\n    const response = await this._fetchImplementation(input, init);\n    if (this.authenticationMode == AuthenticationMode.BrowserSession) {\n      const headerValue = response.headers.get(\"x-set-authorization\");\n      const sessionToken = headerValue?.startsWith(\"Session \") ? headerValue.replace(\"Session \", \"\") : null;\n      if (sessionToken) {\n        this.sessionTokenStore!.setItem(this.sessionStorageKey, sessionToken);\n      }\n    }\n\n    return response;\n  };\n\n  private isGadgetRequest(input: RequestInfo | URL) {\n    let requestUrl;\n\n    if (typeof input === \"string\") {\n      requestUrl = input;\n    } else if (typeof input === \"object\" && \"url\" in input) {\n      requestUrl = input.url;\n    } else {\n      requestUrl = String(input);\n    }\n    if (isRelativeUrl(this.options.endpoint)) {\n      if (isRelativeUrl(requestUrl)) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    const host = new URL(this.options.endpoint).host;\n    return requestUrl.includes(host);\n  }\n\n  private resetClients() {\n    if (this.currentTransaction) {\n      throw new Error(\"Can't reset clients while a transaction is open\");\n    }\n\n    if (this.baseSubscriptionClient) this.disposeClient(this.baseSubscriptionClient);\n    if (this.baseClient) this.baseClient = this.newBaseClient();\n  }\n\n  private newBaseClient() {\n    const exchanges = [...this.exchanges.beforeAll, operationNameExchange, urlParamExchange];\n\n    // apply urql's default caching behaviour when client side (but skip it server side)\n    if (typeof window != \"undefined\") {\n      exchanges.push(cacheExchange);\n      exchanges.push(liveQueryExchange);\n    }\n    exchanges.push(\n      ...this.exchanges.beforeAsync,\n      // standard subscriptions for normal GraphQL subscriptions\n      subscriptionExchange({\n        forwardSubscription: (request) => {\n          return {\n            subscribe: (sink) => {\n              const input = { ...request, query: request.query || \"\" };\n\n              const dispose = this.getBaseSubscriptionClient().subscribe(input, sink as Sink<ExecutionResult>);\n              return {\n                unsubscribe: dispose,\n              };\n            },\n          };\n        },\n      }),\n      // another subscription exchange for live queries\n      // live queries pass through the same WS client, but use jsondiffs for patching in results\n      subscriptionExchange({\n        isSubscriptionOperation: (request) => {\n          return request.query.definitions.some((definition) => isLiveQueryOperationDefinitionNode(definition));\n        },\n        forwardSubscription: (request) => {\n          return {\n            subscribe: (sink) => {\n              let unsubscribe: (() => void) | undefined = undefined;\n\n              // dynamic import on first subscription the live utils to keep the base bundle size small\n              const loadAndSubscribe = import(\"./graphql-live-query-utils/index.js\")\n                .then(({ applyAsyncIterableIteratorToSink, applyLiveQueryJSONDiffPatch, makeAsyncIterableIteratorFromSink }) => {\n                  const input = { ...request, query: request.query || \"\" };\n                  unsubscribe = applyAsyncIterableIteratorToSink(\n                    applyLiveQueryJSONDiffPatch(\n                      makeAsyncIterableIteratorFromSink<ExecutionResult>((sink) =>\n                        this.getBaseSubscriptionClient().subscribe(input, sink as Sink<ExecutionResult>)\n                      )\n                    ),\n                    sink\n                  );\n                  return unsubscribe;\n                })\n                .catch((error) => sink.error(error));\n\n              return {\n                unsubscribe: () => {\n                  if (unsubscribe) {\n                    unsubscribe();\n                  } else {\n                    void loadAndSubscribe.then((unsubscribe) => {\n                      if (unsubscribe) {\n                        unsubscribe();\n                      }\n                    });\n                  }\n                },\n              };\n            },\n          };\n        },\n      }),\n      fetchExchange,\n      ...this.exchanges.afterAll\n    );\n\n    const client = new Client({\n      url: this.endpoint,\n      fetch: this.fetch,\n      exchanges,\n      requestPolicy: this.requestPolicy,\n    });\n    (client as any)[$gadgetConnection] = this;\n\n    return client;\n  }\n\n  newSubscriptionClient(overrides?: GadgetSubscriptionClientOptions) {\n    if (!this.websocketImplementation) {\n      throw new Error(\n        \"Can't use this GadgetClient for this subscription-based operation as there's no global WebSocket implementation available. Please pass one as the `websocketImplementation` option to the GadgetClient constructor.\"\n      );\n    }\n\n    let url = this.websocketsEndpoint;\n    if (overrides?.urlParams) {\n      url = addUrlParams(url, overrides.urlParams);\n    }\n\n    let activeSocket: globalThis.WebSocket;\n    let timedOut: NodeJS.Timeout;\n\n    return this.createSubscriptionClient({\n      url,\n      webSocketImpl: this.websocketImplementation,\n      keepAlive: 7_000,\n      connectionParams: async () => {\n        // In the browser, we can't set arbitrary headers on the websocket request, so we don't use the same auth mechanism that we use for normal HTTP requests. Instead we use graphql-ws' connectionParams to send the auth information in the connection setup message to the server.\n        const connectionParams: Record<string, any> = { environment: this.environment, auth: { type: this.authenticationMode } };\n        if (this.authenticationMode == AuthenticationMode.APIKey) {\n          connectionParams.auth.key = this.options.authenticationMode!.apiKey!;\n        } else if (\n          this.authenticationMode == AuthenticationMode.Internal ||\n          this.authenticationMode == AuthenticationMode.InternalAuthToken\n        ) {\n          const authToken =\n            this.authenticationMode == AuthenticationMode.Internal\n              ? this.options.authenticationMode!.internal!.authToken\n              : this.options.authenticationMode!.internalAuthToken!;\n          connectionParams.auth.token = authToken;\n          if (this.authenticationMode == AuthenticationMode.Internal && this.options.authenticationMode!.internal!.actAsSession) {\n            connectionParams.auth.actAsInternalSession = true;\n            connectionParams.auth.internalSessionId = await this.options.authenticationMode!.internal!.getSessionId?.();\n          }\n        } else if (this.authenticationMode == AuthenticationMode.BrowserSession) {\n          connectionParams.auth.sessionToken = this.sessionTokenStore!.getItem(this.sessionStorageKey);\n        } else if (this.authenticationMode == AuthenticationMode.Custom) {\n          await this.options.authenticationMode?.custom?.processTransactionConnectionParams(connectionParams);\n        }\n        return connectionParams;\n      },\n      onNonLazyError: () => {\n        // we catch this outside in the runner function\n      },\n      on: {\n        connected: (socket, payload) => {\n          // If we're using session token authorization, we don't use request headers to exchange the session token, we use graphql-ws' ConnectionAck payload to persist the token. When the subscription client first starts, the server will send us session token identifying this client, and we persist it to the session token store\n          if (this.authenticationMode == AuthenticationMode.BrowserSession && payload?.sessionToken) {\n            const browserSession = this.options.authenticationMode?.browserSession;\n            const initialToken = browserSession !== null && typeof browserSession === \"object\" ? browserSession.initialToken : null;\n            if (!initialToken) {\n              this.sessionTokenStore!.setItem(this.sessionStorageKey, payload.sessionToken as string);\n            }\n          }\n          this.subscriptionClientOptions?.on?.connected?.(socket, payload);\n          overrides?.on?.connected?.(socket, payload);\n          activeSocket = socket as globalThis.WebSocket;\n        },\n        ping: (received) => {\n          if (!received) {\n            timedOut = setTimeout(() => {\n              if (activeSocket.readyState === WebSocket.OPEN) {\n                activeSocket.close(4408, \"Request Timeout\");\n              }\n            }, 3_000);\n          }\n        },\n        pong: (received) => {\n          if (received) clearTimeout(timedOut);\n        },\n      },\n      ...this.subscriptionClientOptions,\n      ...overrides,\n    });\n  }\n\n  private async requestHeaders() {\n    const headers: Record<string, string> = {};\n\n    if (this.authenticationMode == AuthenticationMode.Internal || this.authenticationMode == AuthenticationMode.InternalAuthToken) {\n      const authToken =\n        this.authenticationMode == AuthenticationMode.Internal\n          ? this.options.authenticationMode!.internal!.authToken\n          : this.options.authenticationMode!.internalAuthToken!;\n\n      headers.authorization = \"Basic \" + base64(\"gadget-internal\" + \":\" + authToken);\n\n      if (this.authenticationMode == AuthenticationMode.Internal && this.options.authenticationMode!.internal!.actAsSession) {\n        headers[\"x-gadget-act-as-internal-session\"] = \"true\";\n\n        const sessionId = await this.options.authenticationMode!.internal!.getSessionId?.();\n        if (sessionId) {\n          headers[\"x-gadget-internal-session-id\"] = sessionId;\n        }\n      }\n    } else if (this.authenticationMode == AuthenticationMode.APIKey) {\n      headers.authorization = `Bearer ${this.options.authenticationMode?.apiKey}`;\n    } else if (this.authenticationMode == AuthenticationMode.BrowserSession) {\n      const val = this.sessionTokenStore!.getItem(this.sessionStorageKey);\n      if (val) {\n        headers.authorization = `Session ${val}`;\n      }\n    }\n\n    headers[\"x-gadget-environment\"] = this.environment;\n\n    return headers;\n  }\n\n  private async waitForOpenedConnection(options: GadgetSubscriptionClientOptions): Promise<SubscriptionClient> {\n    let subscriptionClient = this.newSubscriptionClient(options);\n    let unsubscribes: Function[] = []; // eslint-disable-line @typescript-eslint/ban-types\n\n    let attempts = options.connectionAttempts || DEFAULT_CONN_ATTEMPTS;\n    const globalTimeout = options.connectionGlobalTimeoutMs || DEFAULT_CONN_GLOBAL_TIMEOUT;\n\n    const clearListeners = () => {\n      unsubscribes.forEach((fn) => fn());\n      unsubscribes = [];\n    };\n\n    return await new Promise<SubscriptionClient>((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        this.disposeClient(subscriptionClient);\n        wrappedReject(new GadgetWebsocketConnectionTimeoutError(\"Timeout opening websocket connection to Gadget API\"));\n      }, globalTimeout);\n\n      const retryOnClose = (event: unknown) => {\n        if (isCloseEvent(event)) {\n          if (event.code == GadgetGraphQLCloseCode.TooManyRequests) {\n            clearListeners();\n            return wrappedReject(new GadgetTooManyRequestsError(event.reason));\n          }\n\n          if (RETRYABLE_CLOSE_CODES.includes(event.code) && attempts > 0) {\n            attempts -= 1;\n            this.disposeClient(subscriptionClient);\n            subscriptionClient = this.newSubscriptionClient(options);\n            resetListeners();\n            return;\n          }\n        }\n\n        clearTimeout(timeout);\n        reject(new GadgetUnexpectedCloseError(event));\n      };\n\n      const wrappedReject = (err: any) => {\n        clearTimeout(timeout);\n        reject(err);\n      };\n\n      const wrappedResolve = () => {\n        clearTimeout(timeout);\n        resolve(subscriptionClient);\n      };\n\n      const resetListeners = () => {\n        clearListeners();\n        unsubscribes.push(subscriptionClient.on(\"connected\", wrappedResolve));\n        unsubscribes.push(subscriptionClient.on(\"closed\", retryOnClose));\n        unsubscribes.push(subscriptionClient.on(\"error\", wrappedReject));\n      };\n\n      resetListeners();\n    }).finally(clearListeners);\n  }\n\n  private disposeClient(client: SubscriptionClient) {\n    const maybePromise = client.dispose();\n    if (maybePromise) {\n      maybePromise.catch((err: any) => console.error(`Error closing SubscriptionClient: ${err.message}`));\n    }\n  }\n\n  private getBaseSubscriptionClient() {\n    if (!this.baseSubscriptionClient) {\n      this.baseSubscriptionClient = this.newSubscriptionClient({ lazy: true });\n    }\n    return this.baseSubscriptionClient;\n  }\n}\n\nfunction processMaybeRelativeInput(input: RequestInfo | URL, endpoint: string): RequestInfo | URL {\n  if (typeof input != \"string\") return input;\n  if (isRelativeUrl(input)) {\n    try {\n      return String(new URL(input, endpoint));\n    } catch (err) {\n      return input;\n    }\n  }\n  return input;\n}\n\nfunction isRelativeUrl(url: string) {\n  return url.startsWith(\"/\") && !url.startsWith(\"//\");\n}\n\nconst getLiveDirectiveNode = (input: DefinitionNode): Maybe<DirectiveNode> => {\n  if (input.kind !== \"OperationDefinition\" || input.operation !== \"query\") {\n    return null;\n  }\n  return input.directives?.find((d) => d.name.value === \"live\");\n};\n\nexport const isLiveQueryOperationDefinitionNode = (input: DefinitionNode): input is OperationDefinitionNode => {\n  return !!getLiveDirectiveNode(input);\n};\n", "import { Call, Var, compileWithVariableValues } from \"tiny-graphql-query-compiler\";\nimport type { GadgetConnection } from \"./GadgetConnection.js\";\nimport type { GadgetRecord, RecordShape } from \"./GadgetRecord.js\";\nimport { GadgetRecordList } from \"./GadgetRecordList.js\";\nimport {\n  ErrorsSelection,\n  GadgetClientError,\n  GadgetOperationError,\n  assert,\n  assertMutationSuccess,\n  assertNullableOperationSuccess,\n  assertOperationSuccess,\n  camelize,\n  capitalizeIdentifier,\n  filterTypeName,\n  hydrateConnection,\n  hydrateRecord,\n  hydrateRecordArray,\n  hydrationSelection,\n  namespaceDataPath,\n  namespacedGraphQLTypeName,\n  namespacify,\n  sortTypeName,\n} from \"./support.js\";\nimport type {\n  AnyFilter,\n  InternalFieldSelection,\n  InternalFindListOptions,\n  InternalFindManyOptions,\n  InternalFindOneOptions,\n} from \"./types.js\";\n\nexport const internalFindOneQuery = (apiIdentifier: string, id: string, namespace: string[], select?: InternalFieldSelection) => {\n  const capitalizedApiIdentifier = capitalizeIdentifier(apiIdentifier);\n\n  return compileWithVariableValues({\n    type: \"query\",\n    name: `InternalFind${capitalizedApiIdentifier}`,\n    fields: {\n      internal: namespacify(namespace, {\n        [apiIdentifier]: Call({\n          id: Var({ value: id, type: \"GadgetID!\" }),\n          select: Var({ value: formatInternalSelectVariable(select), type: `[String!]` }),\n        }),\n      }),\n      ...hydrationSelection(apiIdentifier, namespace),\n    },\n  });\n};\n\nconst internalFindListVariables = (apiIdentifier: string, namespace: string[], options?: InternalFindListOptions) => {\n  return {\n    search: options?.search ? Var({ value: options?.search, type: \"String\" }) : undefined,\n    sort: options?.sort ? Var({ value: options?.sort, type: `[${sortTypeName(apiIdentifier, namespace)}!]` }) : undefined,\n    filter: options?.filter ? Var({ value: options?.filter, type: `[${filterTypeName(apiIdentifier, namespace)}!]` }) : undefined,\n    select: options?.select ? Var({ value: formatInternalSelectVariable(options?.select), type: `[String!]` }) : undefined,\n  };\n};\n\nexport const internalFindFirstQuery = (apiIdentifier: string, namespace: string[], options?: InternalFindListOptions) => {\n  const capitalizedApiIdentifier = capitalizeIdentifier(apiIdentifier);\n  const defaultVariables = internalFindListVariables(capitalizedApiIdentifier, namespace, options);\n\n  return compileWithVariableValues({\n    type: \"query\",\n    name: `InternalFindFirst${capitalizedApiIdentifier}`,\n    fields: {\n      internal: namespacify(namespace, {\n        [`list${capitalizedApiIdentifier}`]: Call(\n          {\n            ...defaultVariables,\n            first: Var({ value: 1, type: \"Int\" }),\n          },\n          {\n            edges: {\n              node: true,\n            },\n          }\n        ),\n      }),\n      ...hydrationSelection(apiIdentifier, namespace),\n    },\n  });\n};\n\nexport const internalFindManyQuery = (apiIdentifier: string, namespace: string[], options?: InternalFindManyOptions) => {\n  const capitalizedApiIdentifier = capitalizeIdentifier(apiIdentifier);\n  const defaultVariables = internalFindListVariables(capitalizedApiIdentifier, namespace, options);\n\n  return compileWithVariableValues({\n    type: \"query\",\n    name: `InternalFindMany${capitalizedApiIdentifier}`,\n    fields: {\n      internal: namespacify(namespace, {\n        [`list${capitalizedApiIdentifier}`]: Call(\n          {\n            ...defaultVariables,\n            after: options?.after ? Var({ value: options.after, type: \"String\" }) : undefined,\n            before: options?.before ? Var({ value: options?.before, type: \"String\" }) : undefined,\n            first: options?.first ? Var({ value: options?.first, type: \"Int\" }) : undefined,\n            last: options?.last ? Var({ value: options?.last, type: \"Int\" }) : undefined,\n          },\n          {\n            pageInfo: { hasNextPage: true, hasPreviousPage: true, startCursor: true, endCursor: true },\n            edges: { cursor: true, node: true },\n          }\n        ),\n      }),\n      ...hydrationSelection(apiIdentifier, namespace),\n    },\n  });\n};\n\nconst internalInputTypeName = (apiIdentifier: string, namespace: string[]) =>\n  `Internal${namespacedGraphQLTypeName(apiIdentifier, namespace)}Input`;\n\nexport const internalCreateMutation = (apiIdentifier: string, namespace: string[], record: RecordData) => {\n  const capitalizedApiIdentifier = capitalizeIdentifier(apiIdentifier);\n\n  return compileWithVariableValues({\n    type: \"mutation\",\n    name: `InternalCreate${capitalizedApiIdentifier}`,\n    fields: {\n      internal: namespacify(namespace, {\n        [`create${capitalizedApiIdentifier}`]: Call(\n          {\n            [apiIdentifier]: Var({ value: record, type: internalInputTypeName(apiIdentifier, namespace) }),\n          },\n          {\n            success: true,\n            ...ErrorsSelection,\n            [apiIdentifier]: true,\n          }\n        ),\n      }),\n      ...hydrationSelection(apiIdentifier, namespace),\n    },\n  });\n};\n\nexport const internalBulkCreateMutation = (\n  apiIdentifier: string,\n  pluralApiIdentifier: string,\n  namespace: string[],\n  records: RecordData[]\n) => {\n  const capitalizedPluralApiIdentifier = capitalizeIdentifier(pluralApiIdentifier);\n\n  return compileWithVariableValues({\n    type: \"mutation\",\n    name: `InternalBulkCreate${capitalizedPluralApiIdentifier}`,\n    fields: {\n      internal: namespacify(namespace, {\n        [`bulkCreate${capitalizedPluralApiIdentifier}`]: Call(\n          {\n            [pluralApiIdentifier]: Var({ value: records, type: `[${internalInputTypeName(apiIdentifier, namespace)}]!` }),\n          },\n          {\n            success: true,\n            ...ErrorsSelection,\n            [pluralApiIdentifier]: true,\n          }\n        ),\n      }),\n      ...hydrationSelection(apiIdentifier, namespace),\n    },\n  });\n};\n\nexport const internalUpdateMutation = (apiIdentifier: string, namespace: string[], id: string, record: RecordData) => {\n  const capitalizedApiIdentifier = capitalizeIdentifier(apiIdentifier);\n\n  return compileWithVariableValues({\n    type: \"mutation\",\n    name: `InternalUpdate${capitalizedApiIdentifier}`,\n    fields: {\n      internal: namespacify(namespace, {\n        [`update${capitalizedApiIdentifier}`]: Call(\n          {\n            id: Var({ value: id, type: \"GadgetID!\" }),\n            [apiIdentifier]: Var({ value: record, type: internalInputTypeName(apiIdentifier, namespace) }),\n          },\n          {\n            success: true,\n            ...ErrorsSelection,\n            [apiIdentifier]: true,\n          }\n        ),\n      }),\n      ...hydrationSelection(apiIdentifier, namespace),\n    },\n  });\n};\n\nexport const internalUpsertMutation = (apiIdentifier: string, namespace: string[], on: string[] | undefined, record: RecordData) => {\n  const capitalizedApiIdentifier = capitalizeIdentifier(apiIdentifier);\n\n  return compileWithVariableValues({\n    type: \"mutation\",\n    name: `InternalUpsert${capitalizedApiIdentifier}`,\n    fields: {\n      internal: namespacify(namespace, {\n        [`upsert${capitalizedApiIdentifier}`]: Call(\n          {\n            on: Var({ value: on, type: \"[String!]\" }),\n            [apiIdentifier]: Var({ value: record, type: internalInputTypeName(apiIdentifier, namespace) }),\n          },\n          {\n            success: true,\n            ...ErrorsSelection,\n            [apiIdentifier]: true,\n          }\n        ),\n      }),\n      ...hydrationSelection(apiIdentifier, namespace),\n    },\n  });\n};\n\nexport const internalDeleteMutation = (apiIdentifier: string, namespace: string[], id: string) => {\n  const capitalizedApiIdentifier = capitalizeIdentifier(apiIdentifier);\n\n  return compileWithVariableValues({\n    type: \"mutation\",\n    name: `InternalDelete${capitalizedApiIdentifier}`,\n    fields: {\n      internal: namespacify(namespace, {\n        [`delete${capitalizedApiIdentifier}`]: Call(\n          {\n            id: Var({ value: id, type: \"GadgetID!\" }),\n          },\n          {\n            success: true,\n            ...ErrorsSelection,\n          }\n        ),\n      }),\n    },\n  });\n};\n\nexport const internalDeleteManyMutation = (\n  apiIdentifier: string,\n  namespace: string[],\n  options?: { search?: string; filter?: AnyFilter }\n) => {\n  const capitalizedApiIdentifier = capitalizeIdentifier(apiIdentifier);\n\n  return compileWithVariableValues({\n    type: \"mutation\",\n    name: `InternalDeleteMany${capitalizedApiIdentifier}`,\n    fields: {\n      internal: namespacify(namespace, {\n        [`deleteMany${capitalizedApiIdentifier}`]: Call(\n          {\n            search: options?.search ? Var({ value: options?.search, type: \"String\" }) : undefined,\n            filter: options?.filter ? Var({ value: options?.filter, type: `[${filterTypeName(apiIdentifier, namespace)}!]` }) : undefined,\n          },\n          {\n            success: true,\n            ...ErrorsSelection,\n          }\n        ),\n      }),\n    },\n  });\n};\n\n/** The fields for a given record to send to the backend */\nexport type RecordData = Record<string, any>;\n\n/**\n * Model specific manager for a given model's internal representation. Used to access the inner, raw data in the Gadget database. Use with caution -- it's easy to break stuff, and the Public API should be used when possible!\n */\nexport class InternalModelManager<Shape extends RecordShape = RecordData> {\n  private readonly capitalizedApiIdentifier: string;\n  private readonly namespace: string[];\n\n  constructor(\n    private readonly apiIdentifier: string,\n    readonly connection: GadgetConnection,\n    readonly options?: { pluralApiIdentifier: string; hasAmbiguousIdentifiers?: boolean; namespace?: string[] }\n  ) {\n    this.capitalizedApiIdentifier = camelize(apiIdentifier);\n    this.namespace = options?.namespace || [];\n  }\n\n  private validateRecord(record: RecordData) {\n    if (!this.options || !this.options.hasAmbiguousIdentifiers) {\n      return true;\n    }\n    const keys = Object.keys(record);\n\n    // any keys that aren't the apiIdentifier are invalid\n    return keys.every((key) => key === this.apiIdentifier);\n  }\n\n  private getRecordFromData(record: RecordData, functionName: string) {\n    let recordData = record;\n\n    if (!this.validateRecord(record)) {\n      throw new GadgetOperationError(\n        `Invalid arguments found in variables. Did you mean to use ${functionName}({ ${this.apiIdentifier}: { ... } })?`,\n        \"GGT_INVALID_RECORD_DATA\"\n      );\n    }\n\n    if (this.apiIdentifier in record) {\n      recordData = recordData[this.apiIdentifier];\n    }\n\n    return recordData;\n  }\n\n  /**\n   * Find a single record by ID. Throws an error by default if the record with the given ID is not found.\n   *\n   * @example\n   * // returns post with id 10\n   * const post = await api.internal.post.findOne(10);\n   *\n   * @param id The ID of the record to find\n   * @param options Options for the find operation\n   * @param throwOnEmptyData Whether or not to throw an error if the record is not found\n   * @returns The record, if found\n   */\n  async findOne(id: string, options?: InternalFindOneOptions, throwOnEmptyData = true): Promise<GadgetRecord<Shape>> {\n    const plan = internalFindOneQuery(this.apiIdentifier, id, this.namespace, formatInternalSelectVariable(options?.select));\n    const response = await this.connection.currentClient.query(plan.query, plan.variables).toPromise();\n    const assertSuccess = throwOnEmptyData ? assertOperationSuccess : assertNullableOperationSuccess;\n    const result = assertSuccess(response, this.dataPath(this.apiIdentifier));\n    return hydrateRecord<Shape>(response, result);\n  }\n\n  /**\n   * Find a single record by ID. Returns null if the record doesn't exist.\n   *\n   * @example\n   * // returns post with id 10 if it exists, null otherwise\n   * const post = await api.internal.post.maybeFindOne(10);\n   *\n   * @param id The ID of the record to find\n   * @param options Options for the find operation\n   * @returns The record, if found, null otherwise\n   */\n  async maybeFindOne(id: string, options?: InternalFindOneOptions): Promise<GadgetRecord<Shape> | null> {\n    const record = await this.findOne(id, options, false);\n    return record.isEmpty() ? null : record;\n  }\n\n  /**\n   * Find a list of records matching the given options\n   *\n   * @example\n   * // returns the first page of published posts\n   * const posts = await api.internal.post.findMany({ filter: { published: { equals: true }}});\n   *\n   * @param options Options for the find operation, like sorts, filters, and pagination\n   * @returns The record, if found, null otherwise\n   */\n  async findMany(options?: InternalFindManyOptions): Promise<GadgetRecordList<Shape>> {\n    const plan = internalFindManyQuery(this.apiIdentifier, this.namespace, options);\n    const response = await this.connection.currentClient.query(plan.query, plan.variables).toPromise();\n    const connection = assertNullableOperationSuccess(response, this.dataPath(`list${this.capitalizedApiIdentifier}`));\n    const records = hydrateConnection(response, connection);\n\n    return GadgetRecordList.boot(this, records, { options, pageInfo: connection.pageInfo });\n  }\n\n  /**\n   * Find the first record matching the given options. Throws an error by default if no records matching the options are found.\n   *\n   * @example\n   * // returns the first published post or throws if none found\n   * const post = await api.internal.post.findFirst({ filter: { published: { equals: true }}});\n   *\n   * @param options Options for the find operation, like sorts, filters, and pagination\n   * @returns The first record matching the options\n   */\n  async findFirst(options?: InternalFindListOptions, throwOnEmptyData = true): Promise<GadgetRecord<Shape>> {\n    const plan = internalFindFirstQuery(this.apiIdentifier, this.namespace, options);\n    const response = await this.connection.currentClient.query(plan.query, plan.variables).toPromise();\n    const dataPath = this.dataPath(`list${this.capitalizedApiIdentifier}`);\n\n    let connection;\n    if (throwOnEmptyData === false) {\n      // If this is a nullable operation, don't throw errors on empty\n      connection = assertNullableOperationSuccess(response, dataPath);\n    } else {\n      // Otherwise, passthrough the `throwOnEmptyData` flag, to account for\n      // `findMany` (allows empty arrays) vs `findFirst` (no empty result) usage.\n      connection = assertOperationSuccess(response, dataPath, throwOnEmptyData);\n    }\n\n    const records = hydrateConnection(response, connection);\n    const recordList = GadgetRecordList.boot(this, records, { options, pageInfo: connection.pageInfo });\n    return recordList[0];\n  }\n\n  /**\n   * Find the first record matching the given options. Returns null if no records matching the options are found.\n   *\n   * @example\n   * // returns the first published post or null if none are published\n   * const post = await api.internal.post.maybeFindFirst({ filter: { published: { equals: true }}});\n   *\n   * @param options Options for the find operation, like sorts, filters, and pagination\n   * @returns The first record matching the options, null otherwise\n   */\n  async maybeFindFirst(options?: InternalFindListOptions): Promise<GadgetRecord<Shape> | null> {\n    return await this.findFirst(options, false);\n  }\n\n  /**\n   * Creates a new record in the backend datastore for this model using the Internal API\n   *\n   * Does *not* run actions -- use the Public API for that.\n   *\n   * @example\n   * // creates a new post record in the database\n   * const post = await api.internal.post.create({ title: \"A new post\" });\n   *\n   * @param record The data for the record to create\n   * @returns The created record\n   */\n  async create(record: RecordData): Promise<GadgetRecord<Shape>> {\n    const plan = internalCreateMutation(this.apiIdentifier, this.namespace, this.getRecordFromData(record, \"create\"));\n    const response = await this.connection.currentClient.mutation(plan.query, plan.variables).toPromise();\n    const result = assertMutationSuccess(response, this.dataPath(`create${this.capitalizedApiIdentifier}`));\n    return hydrateRecord(response, result[this.apiIdentifier]);\n  }\n\n  /**\n   * Creates a set of new records in the backend datastore for this model using the Internal API. Creates in bulk within the same database transaction for performance.\n   *\n   * Does *not* run actions -- use the Public API for that.\n   *\n   * @example\n   * // creates 2 new post records in the database\n   * const posts = await api.internal.post.bulkCreate([\n   *   { title: \"A new post\" },\n   *   { title: \"Another new post\" }\n   * ]);\n   *\n   * @param record An array of data for the records to create\n   * @returns The created records\n   */\n  async bulkCreate(records: RecordData[]): Promise<GadgetRecord<Shape>[]> {\n    if (!this.options?.pluralApiIdentifier) {\n      throw new GadgetClientError(\"Cannot perform bulkCreate without a pluralApiIdentifier\");\n    }\n\n    const capitalizedPluralApiIdentifier = capitalizeIdentifier(this.options.pluralApiIdentifier);\n    const plan = internalBulkCreateMutation(this.apiIdentifier, this.options.pluralApiIdentifier, this.namespace, records);\n    const response = await this.connection.currentClient.mutation(plan.query, plan.variables).toPromise();\n    const result = assertMutationSuccess(response, this.dataPath(`bulkCreate${capitalizedPluralApiIdentifier}`));\n    return hydrateRecordArray(response, result[this.options.pluralApiIdentifier]);\n  }\n\n  /**\n   * Updates an existing record in the backend datastore for this model using the Internal API\n   *\n   * Does *not* run actions -- use the Public API for that.\n   *\n   * @example\n   * // updates post with id 10 in the database\n   * const post = await api.internal.post.update(10, { title: \"A new post title\" });\n   *\n   * @param record The data for the record to update\n   * @returns The updated record\n   */\n  async update(id: string, record: RecordData): Promise<GadgetRecord<Shape>> {\n    assert(id, `Can't update a record without an ID passed`);\n    const plan = internalUpdateMutation(this.apiIdentifier, this.namespace, id, this.getRecordFromData(record, \"update\"));\n    const response = await this.connection.currentClient.mutation(plan.query, plan.variables).toPromise();\n    const result = assertMutationSuccess(response, this.dataPath(`update${this.capitalizedApiIdentifier}`));\n\n    return hydrateRecord(response, result[this.apiIdentifier]);\n  }\n\n  /**\n   * Upserts a record in the backend datastore for this model using the Internal API.\n   * If a matching record exists, it will be updated. If it doesn't exist, it will be created.\n   * By default records will be matched by the `id` field, but you can specify a different field to match on.\n   *\n   * Does *not* run actions -- use the Public API for that.\n   *\n   * @example\n   * // upserts post with id 10 in the database\n   * // if a post with id 10 exists, it will be updated\n   * // if a post with id 10 does not exist, it will be created\n   * const post = await api.internal.post.upsert({ id: \"10\", title: \"A new post title\" });\n   *\n   * @example\n   * // upserts post with slug \"new-post\" in the database\n   * // if a post with slug \"new-post\" exists, it will be updated\n   * // if a post with slug \"new-post\" does not exist, it will be created\n   * const post = await api.internal.post.upsert({ post: {slug: \"new-post\", title: \"A new post title\" }, on: [\"slug\"] });\n   *\n   * @param record The data for the record to update\n   * @returns The upserted record\n   */\n  async upsert(record: RecordData & { on?: string[] }): Promise<GadgetRecord<Shape>> {\n    const { on, ...recordData } = record;\n    on && assert(on.length > 0, `Must specify at least one field to upsert on`);\n    const plan = internalUpsertMutation(this.apiIdentifier, this.namespace, on, this.getRecordFromData(recordData, \"upsert\"));\n    const response = await this.connection.currentClient.mutation(plan.query, plan.variables).toPromise();\n    const result = assertMutationSuccess(response, this.dataPath(`upsert${this.capitalizedApiIdentifier}`));\n\n    return hydrateRecord(response, result[this.apiIdentifier]);\n  }\n\n  /**\n   * Deletes an existing record in the backend datastore for this model using the Internal API\n   *\n   * Does *not* run actions -- use the Public API for that.\n   *\n   * @example\n   * // removes the post with id 10 in the database\n   * await api.internal.post.delete(10);\n   *\n   * @param id The id of the record to delete\n   */\n  async delete(id: string): Promise<void> {\n    assert(id, `Can't delete a record without an ID`);\n    const plan = internalDeleteMutation(this.apiIdentifier, this.namespace, id);\n    const response = await this.connection.currentClient.mutation(plan.query, plan.variables).toPromise();\n    assertMutationSuccess(response, this.dataPath(`delete${this.capitalizedApiIdentifier}`));\n  }\n\n  /**\n   * Deletes the records in the backend datastore that match the given filter criteria. Uses the Internal API.\n   *\n   * Does *not* run actions -- use the Public API for that.\n   *\n   * @example\n   * // removes all unpublished posts from the database\n   * await api.internal.post.deleteMany({filter: { published: { equals: false } } });\n   *\n   * @param options Search and filter options for the records to delete\n   */\n  async deleteMany(options: { search?: string; filter: AnyFilter }): Promise<void> {\n    const plan = internalDeleteManyMutation(this.apiIdentifier, this.namespace, options);\n    const response = await this.connection.currentClient.mutation(plan.query, plan.variables).toPromise();\n    assertMutationSuccess(response, this.dataPath(`deleteMany${this.capitalizedApiIdentifier}`));\n  }\n\n  private dataPath(dataPath: string): string[] {\n    return [\"internal\", ...namespaceDataPath([dataPath], this.namespace)];\n  }\n}\n\nfunction formatInternalSelectVariable(select: InternalFieldSelection | undefined): undefined | string[] {\n  if (!select) return;\n  if (Array.isArray(select)) return select;\n  const result: string[] = [];\n  for (const [key, value] of Object.entries(select)) {\n    if (value) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n", "/**\n * Most of these utility types are straight duplicates or refined versions of the types with the same name from api-client-core.\n * Eventually these should probably supersede the api-client-core ones.\n */\n\nimport { type FieldSelection, type VariablesOptions } from \"@gadgetinc/api-client-core\";\nimport type { FieldSelection as BuilderFieldSelection, Variable } from \"tiny-graphql-query-compiler\";\nimport { Var } from \"tiny-graphql-query-compiler\";\n\n/**\n * Allows detecting an any type, this is rather tricky:\n * The type constraint 0 extends 1 is not satisfied (0 is not assignable to 1),\n * so it should be impossible for 0 extends (1 & T) to be satisfied either, since (1 & T) should be even narrower than 1.\n * However, when T is any, it reduces 0 extends (1 & any) to 0 extends any, which is satisfied.\n * That's because any is intentionally unsound and acts as both a supertype and subtype of almost every other type.\n * source: https://stackoverflow.com/questions/49927523/disallow-call-with-any/49928360#49928360\n */\n\ntype IfAny<T, Y, N> = 0 extends 1 & T ? Y : N;\n\n/**\n * Convert a schema type into the type that a selection of it must extend\n *\n * Example Schema:\n *\n * {\n *   foo: boolean;\n *   bar?: string;\n *   nested?: {\n *     count: number\n *   }\n * }\n *\n * Example available selection:\n *\n * {\n *   foo?: boolean | null | undefined;\n *   bar?: boolean | null | undefined;\n *   nested?: {\n *     count: boolean | null | undefined\n *   }\n * }\n */\nexport type AvailableSelection<Schema> = Schema extends Array<infer T>\n  ? AvailableSelection<T>\n  : Schema extends object\n  ? { [key in keyof Schema]?: AvailableSelection<Schema[key]> }\n  : boolean | null | undefined;\n\n/**\n * Given an options object from a find method, default the type of the selection to a default if no selection is passed\n */\nexport type DefaultSelection<\n  Available extends FieldSelection,\n  Options extends { select?: Available | null },\n  Defaults extends SomeFieldsSelected<Available>\n> = IfAny<Options, Defaults, IfAny<Options[\"select\"], Defaults, Options[\"select\"] extends Available ? Options[\"select\"] : Defaults>>;\n\n/**\n * Take a FieldSelection type and construct a type with all its fields required and selected.\n */\nexport type AllFieldsSelected<Selection extends FieldSelection> = {\n  [K in keyof Selection]-?: NonNullable<Selection[K]> extends FieldSelection ? AllFieldsSelected<NonNullable<Selection[K]>> : true;\n};\n\n/**\n * Take a FieldSelection type and construct a type with its fields set to true\n * rather than (boolean | null | undefined)\n */\nexport type SomeFieldsSelected<Selection extends FieldSelection> = {\n  [K in keyof Selection]?: NonNullable<Selection[K]> extends FieldSelection ? SomeFieldsSelected<NonNullable<Selection[K]>> : true;\n};\n\n/**\n * Filter out any keys in `T` that are mapped to `never` recursively. Any nested objects that are empty after having never valued keys removed are also removed.\n *\n * ```typescript\n * type Thing = DeepFilterNever<\n *  { a: { b: never }, c: string }\n * >;  // { c: string; }\n * ```\n */\n\n/**\n * Get any keys of `Selection` that are not mapped to `never`\n */\nexport type NonNeverKeys<Selection> = {\n  [Key in keyof Selection]: Selection[Key] extends never ? never : Key;\n}[keyof Selection];\n\n/**\n * Filter out any keys in `T` that are mapped to `never`.\n */\n\nexport type FilterNever<T extends Record<string, unknown>> = NonNeverKeys<T> extends never ? never : { [Key in NonNeverKeys<T>]: T[Key] };\n\n/**\n * Filter out any keys in `T` that are mapped to `never` recursively. Any nested objects that are empty after having never valued keys removed are also removed.\n *\n * ```typescript\n * type Thing = DeepFilterNever<\n *  { a: { b: never }, c: string }\n * >;  // { c: string; }\n * ```\n */\n\nexport type DeepFilterNever<T> = T extends Record<string, unknown>\n  ? FilterNever<{\n      [Key in keyof T]: T[Key] extends Record<string, unknown> ? DeepFilterNever<T[Key]> : T[Key];\n    }>\n  : T;\n/**\n * Extract a subset of a schema given a selection\n *\n * ```typescript\n * type Selection = Select<\n *  { apple: \"red\", banana: \"yellow\", orange: \"orange\" },\n *  { apple: true, banana: false }\n * >;  // { apple: \"red\" }\n * ```\n */\n\ntype InnerSelect<Schema, Selection extends FieldSelection | null | undefined> = IfAny<\n  Selection,\n  never,\n  Selection extends null | undefined\n    ? never\n    : Schema extends (infer T)[]\n    ? InnerSelect<T, Selection>[]\n    : Schema extends null\n    ? InnerSelect<Exclude<Schema, null>, Selection> | null\n    : {\n        [Key in keyof Selection & keyof Schema]: Selection[Key] extends true\n          ? Schema[Key]\n          : Selection[Key] extends FieldSelection\n          ? InnerSelect<Schema[Key], Selection[Key]>\n          : never;\n      }\n>;\n\nexport type Select<Schema, Selection extends FieldSelection | null | undefined> = DeepFilterNever<InnerSelect<Schema, Selection>>;\n\n/**\n * Converts Selection nested object format to the tiny-graphql-query-compiler shape\n **/\nexport const fieldSelectionToQueryCompilerFields = (selection: FieldSelection, includeTypename = false): BuilderFieldSelection => {\n  const output: BuilderFieldSelection = { ...selection };\n  if (includeTypename) output.__typename = true;\n  return output;\n};\n\nexport const variableOptionsToVariables = (variables: VariablesOptions): Record<string, Variable> => {\n  return Object.fromEntries(Object.entries(variables).map(([name, options]) => [name, Var(options)]));\n};\n", "import { assertOperationSuccess, type GadgetConnection, type VariablesOptions } from \"@gadgetinc/api-client-core\";\nimport { Call, compile, compileWithVariableValues, Var, type Variable } from \"tiny-graphql-query-compiler\";\nimport { variableOptionsToVariables } from \"./utils.js\";\n\n// This is a function that represents a computed view that doesn't take any input parameters/variables.\n// Result is an explicit type parameter defining the shape of the full result.\nexport type ComputedViewFunctionWithoutVariables<Result> = () => Promise<Result>;\n\n// Represents a computed view that doesn't take any input parameters/variables.\n// It includes the view function and the view metadata.\nexport interface ComputedViewWithoutVariables<Result> extends ComputedViewFunctionWithoutVariables<Result> {\n  type: \"computedView\";\n  operationName: string;\n  gqlFieldName: string;\n  namespace: string | string[] | null;\n  resultType: Result;\n  plan(): {\n    query: string;\n  };\n}\n\n// This is a function that represents a computed view that takes input parameters/variables.\n// Result is an explicit type parameter defining the shape of the full result.\n// Variables is an explicit type parameter that describes the shape of the variables parameter.\nexport type ComputedViewFunctionWithVariables<Variables, Result> = (variables?: Variables) => Promise<Result>;\n\n// Represents a computed view that takes input parameters/variables.\n// It includes the view function and the view metadata.\nexport interface ComputedViewWithVariables<Variables, Result> extends ComputedViewFunctionWithVariables<Variables, Result> {\n  type: \"computedView\";\n  operationName: string;\n  gqlFieldName: string;\n  namespace: string | string[] | null;\n  variables: VariablesOptions;\n  variablesType: Variables;\n  resultType: Result;\n  plan(variables?: Variables): {\n    query: string;\n    variables?: Record<string, any>;\n  };\n}\n\nexport const computedViewOperation = (\n  gqlFieldName: string,\n  variablesOptions: VariablesOptions = {},\n  namespace?: string | string[] | null\n): {\n  query: string;\n  variables: Record<string, any>;\n} => {\n  let fields = {\n    [gqlFieldName]: Call(variableOptionsToVariables(variablesOptions)),\n  };\n\n  if (namespace) {\n    fields = namespacify(namespace, fields);\n  }\n\n  return variablesOptions\n    ? compileWithVariableValues({ type: \"query\", name: gqlFieldName, fields })\n    : { query: compile({ type: \"query\", name: gqlFieldName, fields }), variables: {} };\n};\n\nexport const computedViewRunner = async (\n  connection: GadgetConnection,\n  gqlFieldName: string,\n  variablesOptions?: VariablesOptions,\n  namespace?: string | string[] | null\n): Promise<any> => {\n  const { query, variables } = computedViewOperation(gqlFieldName, variablesOptions, namespace);\n  const response = await connection.currentClient.query(query, variables);\n  const dataPath = namespaceDataPath([gqlFieldName], namespace);\n  return assertOperationSuccess(response, dataPath);\n};\n\nexport const inlineComputedViewOperation = (\n  query: string,\n  gqlFieldName: string,\n  variables?: Record<string, any>,\n  namespace?: string | string[] | null\n): {\n  query: string;\n  variables: Record<string, any>;\n} => {\n  const vars: Record<string, Variable> = {\n    query: Var({ type: \"String\", value: query, required: true }),\n  };\n  if (variables) vars[\"variables\"] = Var({ type: \"JSONObject\", value: variables });\n  let fields = {\n    [gqlFieldName]: Call(variableOptionsToVariables(vars)),\n  };\n  if (namespace) fields = namespacify(namespace, fields);\n  return compileWithVariableValues({ type: \"query\", name: gqlFieldName, fields });\n};\n\nexport const inlineComputedViewRunner = async (\n  connection: GadgetConnection,\n  gqlFieldName: string,\n  viewQuery: string,\n  variables?: Record<string, any>,\n  namespace?: string | string[] | null\n): Promise<unknown> => {\n  const { query, variables: vars } = inlineComputedViewOperation(viewQuery, gqlFieldName, variables, namespace);\n  const response = await connection.currentClient.query(query, vars);\n  const dataPath = namespaceDataPath([gqlFieldName], namespace);\n  return assertOperationSuccess(response, dataPath);\n};\n\n/**\n * Had to duplicate these from api-client-core to make 0.15.20 tests happy,\n * Hopefully we can get rid of this duplication at some point\n *\n * Wrap a field selection in a set of namespaces\n **/\nfunction namespacify(namespace: string[] | string | undefined | null, fields: any) {\n  if (!namespace) return fields;\n  if (!Array.isArray(namespace)) {\n    namespace = [namespace];\n  }\n  if (namespace) {\n    for (let i = namespace.length - 1; i >= 0; i--) {\n      fields = {\n        [namespace[i]]: fields,\n      };\n    }\n  }\n  return fields;\n}\n\nconst namespaceDataPath = (dataPath: string[], namespace?: string[] | string | null) => {\n  if (namespace) {\n    dataPath.unshift(...(Array.isArray(namespace) ? namespace : [namespace]));\n  }\n  return dataPath;\n};\n", "import type {\n  ActionFunctionMetadata,\n  AnyActionFunction,\n  AnyModelFinderMetadata,\n  AnyModelManager,\n  BaseFindOptions,\n  FieldSelection,\n  FindManyOptions,\n  GadgetConnection,\n  GadgetRecord,\n  VariablesOptions,\n} from \"@gadgetinc/api-client-core\";\nimport {\n  actionOperation,\n  actionRunner,\n  findManyOperation,\n  findManyRunner,\n  findOneByFieldOperation,\n  findOneByFieldRunner,\n  findOneOperation,\n  findOneRunner,\n  globalActionOperation,\n  globalActionRunner,\n} from \"@gadgetinc/api-client-core\";\nimport type { ComputedViewWithoutVariables, ComputedViewWithVariables } from \"./computedViews.js\";\nimport { computedViewOperation, computedViewRunner, inlineComputedViewRunner } from \"./computedViews.js\";\n\n/**\n * The metadata that we need for building the runtime version of a finderoperation\n * Excludes the type-time only keys\n */\nexport type AnyModelFinderRuntimeMetadata = Omit<AnyModelFinderMetadata, \"schemaType\" | \"optionsType\" | \"variablesType\" | \"selectionType\">;\n\n/**\n * The metadata that we need for building the runtime version of a finder operation\n * Excludes the type-time only keys\n */\nexport type AnyActionFunctionRuntimeMetadata = Omit<\n  ActionFunctionMetadata<any, any, any, any, any, any>,\n  \"schemaType\" | \"optionsType\" | \"variablesType\" | \"selectionType\"\n>;\n\nexport type FindOneOperation = {\n  type: \"findOne\";\n  findByVariableName: \"id\";\n} & AnyModelFinderRuntimeMetadata;\n\nexport type MaybeFindOneOperation = {\n  type: \"maybeFindOne\";\n  findByVariableName: \"id\";\n} & AnyModelFinderRuntimeMetadata;\n\nexport type FindManyOperation = {\n  type: \"findMany\";\n} & AnyModelFinderRuntimeMetadata;\n\nexport type FindFirstOperation = {\n  type: \"findFirst\";\n} & AnyModelFinderRuntimeMetadata;\n\nexport type MaybeFindFirstOperation = {\n  type: \"maybeFindFirst\";\n} & AnyModelFinderRuntimeMetadata;\n\nexport type FindOneByFieldOperation = {\n  type: \"findOne\";\n  findByVariableName: string;\n  findByField: string;\n  functionName: string;\n} & AnyModelFinderRuntimeMetadata;\n\nexport type MaybeFindOneByFieldOperation = {\n  type: \"maybeFindOne\";\n  findByVariableName: string;\n  findByField: string;\n  functionName: string;\n} & AnyModelFinderRuntimeMetadata;\n\nexport type SingletonGetOperation = {\n  type: \"get\";\n} & AnyModelFinderRuntimeMetadata;\n\nexport type ActionOperation = {\n  type: \"action\";\n  functionName: string;\n  isBulk: false;\n  isDeleter: boolean;\n} & AnyActionFunctionRuntimeMetadata;\n\nexport type BulkActionOperation = {\n  type: \"action\";\n  functionName: string;\n  isBulk: true;\n  singleActionFunctionName: string;\n  isDeleter: boolean;\n} & AnyActionFunctionRuntimeMetadata;\n\nexport type GlobalActionOperation = {\n  type: \"globalAction\";\n  functionName: string;\n  operationName: string;\n  operationReturnType?: string;\n  namespace: string | string[] | null;\n  variables: VariablesOptions;\n};\n\nexport type ComputedViewOperation = {\n  type: \"computedView\";\n  operationName: string;\n  functionName: string; // Same as operationName, but required by ModelManagers\n  gqlFieldName: string; // The field name of the operation in GQL schema (includes model for model views)\n  namespace: string | string[] | null;\n  /**\n   * The list of GraphQL typenames that contribute to this view's expression\n   * The view should be invalidated and refreshed client side when changes are made to these typenames\n   */\n  referencedTypenames?: string[];\n  /**\n   * List of model keys that contribute to this view's expression\n   */\n  referencedModelKeys?: string[];\n  variables?: VariablesOptions;\n};\n\nexport type StubbedComputedViewOperation = {\n  type: \"stubbedComputedView\";\n  operationName: string;\n  functionName: string; // Same as operationName, but required by ModelManagers\n  gqlFieldName: string; // The field name of the operation in GQL schema (includes model for model views)\n  namespace: string | string[] | null;\n  errorMessage: string;\n};\n\nexport type StubbedActionReason = \"MissingApiTrigger\";\n\nexport type StubbedActionOperation = {\n  type: \"stubbedAction\";\n  functionName: string;\n  operationName?: string;\n  errorMessage: string;\n  actionApiIdentifier: string;\n  modelApiIdentifier?: string;\n  variables: VariablesOptions;\n  reason: StubbedActionReason;\n  dataPath: string;\n};\n\nexport type ModelManagerOperation =\n  | FindOneOperation\n  | MaybeFindOneOperation\n  | FindManyOperation\n  | FindFirstOperation\n  | MaybeFindFirstOperation\n  | FindOneByFieldOperation\n  | MaybeFindOneByFieldOperation\n  | SingletonGetOperation\n  | ActionOperation\n  | BulkActionOperation\n  | StubbedActionOperation\n  | ComputedViewOperation\n  | StubbedComputedViewOperation;\n\n/**\n * Construct a model manager class out of the metadatas generated on the server\n **/\nexport const buildModelManager = (\n  apiIdentifier: string,\n  pluralApiIdentifier: string,\n  defaultSelection: FieldSelection,\n  operationGroup: ModelManagerOperation[] | readonly ModelManagerOperation[]\n): AnyModelManager => {\n  const modelManagerClass = class {\n    constructor(public readonly connection: GadgetConnection) {}\n  } as unknown as { prototype: AnyModelManager; new (connection: GadgetConnection): AnyModelManager };\n  Object.defineProperty(modelManagerClass, \"name\", { value: `${apiIdentifier}Manager` });\n\n  for (const operation of operationGroup) {\n    switch (operation.type) {\n      case \"maybeFindOne\":\n      case \"findOne\": {\n        const throwOnRecordNotFound = !operation.type.startsWith(\"maybe\");\n\n        if (\"functionName\" in operation) {\n          (modelManagerClass.prototype as any)[operation.functionName] = Object.assign(\n            function (this: AnyModelManager, value: string, options?: BaseFindOptions) {\n              return findOneByFieldRunner(\n                this,\n                operation.operationName,\n                operation.findByField,\n                value,\n                defaultSelection,\n                apiIdentifier,\n\n                options,\n                throwOnRecordNotFound,\n                operation.namespace\n              );\n            },\n            operation as unknown as AnyModelFinderMetadata,\n            {\n              plan: function (fieldName: string, fieldValue: string, options?: BaseFindOptions) {\n                return findOneByFieldOperation(\n                  operation.operationName,\n                  fieldName,\n                  fieldValue,\n                  defaultSelection,\n                  apiIdentifier,\n                  options,\n                  operation.namespace\n                );\n              },\n            }\n          );\n        } else {\n          modelManagerClass.prototype[operation.type] = Object.assign(\n            function (this: AnyModelManager, id: string, options?: BaseFindOptions) {\n              const response = findOneRunner(\n                this,\n                apiIdentifier,\n                id,\n                defaultSelection,\n                apiIdentifier,\n                options,\n                throwOnRecordNotFound,\n                operation.namespace\n              );\n              return forEachMaybeLiveResponse(response, (record: GadgetRecord<any>) => (record.isEmpty() ? null : record));\n            },\n            operation as unknown as AnyModelFinderMetadata,\n            {\n              plan: function (value: string, options?: BaseFindOptions) {\n                return findOneOperation(operation.operationName, value, defaultSelection, apiIdentifier, options, operation.namespace);\n              },\n            }\n          );\n        }\n        break;\n      }\n\n      case \"findMany\": {\n        modelManagerClass.prototype.findMany = Object.assign(\n          function (this: AnyModelManager, options?: FindManyOptions) {\n            return findManyRunner(this, pluralApiIdentifier, defaultSelection, apiIdentifier, options, undefined, operation.namespace);\n          },\n          operation as unknown as AnyModelFinderMetadata,\n          {\n            plan: function (options?: FindManyOptions) {\n              return findManyOperation(pluralApiIdentifier, defaultSelection, apiIdentifier, options, operation.namespace);\n            },\n          }\n        );\n        break;\n      }\n      case \"maybeFindFirst\":\n      case \"findFirst\": {\n        modelManagerClass.prototype[operation.type] = Object.assign(\n          function (this: AnyModelManager, options?: BaseFindOptions) {\n            const response = findManyRunner(\n              this,\n              pluralApiIdentifier,\n              defaultSelection,\n              apiIdentifier,\n              {\n                ...options,\n                first: 1,\n                last: undefined,\n                before: undefined,\n                after: undefined,\n              },\n              operation.type != \"maybeFindFirst\",\n              operation.namespace\n            );\n            return forEachMaybeLiveResponse(response, (list: GadgetRecord<any>[]) => list?.[0] ?? null);\n          },\n          operation as unknown as AnyModelFinderMetadata,\n          {\n            plan: function (options?: BaseFindOptions) {\n              return findManyOperation(\n                pluralApiIdentifier,\n                defaultSelection,\n                apiIdentifier,\n                {\n                  ...options,\n                  first: 1,\n                  last: undefined,\n                  before: undefined,\n                  after: undefined,\n                },\n                operation.namespace\n              );\n            },\n          }\n        );\n        break;\n      }\n\n      case \"get\": {\n        (modelManagerClass.prototype as any).get = Object.assign(function (this: AnyModelManager, options?: BaseFindOptions) {\n          return findOneRunner(\n            this,\n            operation.operationName,\n            undefined,\n            defaultSelection,\n            apiIdentifier,\n            options,\n            undefined,\n            operation.namespace\n          );\n        }, operation as unknown as AnyModelFinderMetadata);\n        break;\n      }\n      case \"action\": {\n        if (operation.isBulk) {\n          const bulkInvokedByIDOnly = !!operation.variables[\"ids\"];\n\n          (modelManagerClass.prototype as any)[operation.functionName] = Object.assign(\n            async function (this: AnyModelManager, inputs: string[] | Record<string, unknown>[], options?: BaseFindOptions) {\n              let variables;\n              if (bulkInvokedByIDOnly) {\n                variables = {\n                  ids: {\n                    ...operation.variables[\"ids\"],\n                    value: inputs,\n                  },\n                };\n              } else {\n                variables = {\n                  inputs: {\n                    ...operation.variables[\"inputs\"],\n                    value: (inputs as Record<string, unknown>[]).map((input) =>\n                      disambiguateActionParams((this as any)[(operation as BulkActionOperation).singleActionFunctionName], undefined, input)\n                    ),\n                  },\n                };\n              }\n\n              return await actionRunner(\n                this,\n                operation.operationName,\n                operation.isDeleter ? null : defaultSelection,\n                apiIdentifier,\n                operation.modelSelectionField,\n                true,\n                variables,\n                options,\n                operation.namespace,\n                operation.hasReturnType as any\n              );\n            },\n            operation as unknown as AnyModelFinderMetadata,\n            {\n              plan: function (options?: BaseFindOptions) {\n                return actionOperation(\n                  operation.operationName,\n                  operation.isDeleter ? null : operation.defaultSelection,\n                  apiIdentifier,\n                  operation.modelSelectionField,\n                  operation.variables,\n                  options,\n                  operation.namespace,\n                  true,\n                  operation.hasReturnType\n                );\n              },\n              get singleAction() {\n                return (modelManagerClass.prototype as any)[(operation as BulkActionOperation).singleActionFunctionName];\n              },\n            }\n          );\n        } else {\n          const hasId = !!operation.variables[\"id\"];\n          const hasOthers = Object.keys(operation.variables).filter((key) => key != \"id\").length > 0;\n          (modelManagerClass.prototype as any)[operation.functionName] = Object.assign(\n            async function (this: AnyModelManager, ...args: (string | Record<string, unknown> | BaseFindOptions)[]) {\n              const [variables, options] = actionArgs(operation, hasId, hasOthers, args);\n\n              return await actionRunner(\n                this,\n                operation.operationName,\n                operation.isDeleter ? null : defaultSelection,\n                apiIdentifier,\n                operation.modelSelectionField,\n                false,\n                variables,\n                options,\n                operation.namespace,\n                operation.hasReturnType as any\n              );\n            },\n            operation as unknown as AnyModelFinderMetadata,\n            {\n              plan: function (options?: BaseFindOptions) {\n                return actionOperation(\n                  operation.operationName,\n                  operation.isDeleter ? null : operation.defaultSelection,\n                  apiIdentifier,\n                  operation.modelSelectionField,\n                  operation.variables,\n                  options,\n                  operation.namespace,\n                  false,\n                  operation.hasReturnType\n                );\n              },\n            }\n          );\n        }\n        break;\n      }\n      case \"stubbedAction\": {\n        (modelManagerClass.prototype as any)[operation.functionName] = Object.assign(function (this: AnyModelManager, ..._args: any) {\n          sendDevHarnessStubbedActionEvent(operation);\n          throw new Error(operation.errorMessage);\n        }, operation as unknown as AnyModelFinderMetadata);\n        break;\n      }\n      case \"computedView\": {\n        (modelManagerClass.prototype as any)[operation.operationName] = isInlineComputedView(operation)\n          ? buildInlineModelComputedView(operation)\n          : buildModelComputedView(operation);\n        break;\n      }\n      case \"stubbedComputedView\": {\n        (modelManagerClass.prototype as any)[operation.operationName] = buildStubbedComputedView(operation);\n        break;\n      }\n    }\n  }\n\n  return modelManagerClass as any;\n};\n\nexport const buildGlobalAction = (\n  client: { connection: GadgetConnection },\n  operation: GlobalActionOperation | StubbedActionOperation\n): AnyActionFunction => {\n  if (operation.type == \"stubbedAction\") {\n    return Object.assign((..._args: any[]) => {\n      sendDevHarnessStubbedActionEvent(operation);\n      throw new Error(operation.errorMessage);\n    }, operation) as any;\n  } else {\n    return Object.assign(\n      async (variables: Record<string, any> = {}) => {\n        const resultVariables: VariablesOptions = {};\n        for (const [name, variable] of Object.entries(operation.variables)) {\n          resultVariables[name] = {\n            value: variables[name],\n            ...variable,\n          };\n        }\n\n        return await globalActionRunner(client.connection, operation.operationName, resultVariables, operation.namespace);\n      },\n      operation,\n      {\n        plan: function (operationName: string, variables: VariablesOptions, namespace: string) {\n          return globalActionOperation(operationName, variables, namespace);\n        },\n      }\n    ) as any;\n  }\n};\n\nexport function buildStubbedComputedView(operation: StubbedComputedViewOperation): () => Promise<never> {\n  return Object.assign(async () => {\n    throw new Error(operation.errorMessage);\n  }, operation);\n}\n\nexport function buildComputedView<ResultT>(\n  client: { connection: GadgetConnection },\n  operation: ComputedViewOperation\n): ComputedViewWithoutVariables<ResultT>;\nexport function buildComputedView<VariablesT, ResultT>(\n  client: { connection: GadgetConnection },\n  operation: ComputedViewOperation\n): ComputedViewWithVariables<VariablesT, ResultT>;\nexport function buildComputedView<VariablesT, ResultT>(\n  client: { connection: GadgetConnection },\n  operation: ComputedViewOperation\n): ComputedViewWithVariables<VariablesT, ResultT> | ComputedViewWithoutVariables<ResultT> {\n  const f = operation.variables\n    ? async (variables: Record<string, any> = {}) => {\n        let variablesOptions: VariablesOptions | undefined;\n        if (operation.variables) {\n          variablesOptions = {};\n          for (const [name, variable] of Object.entries(operation.variables)) {\n            variablesOptions[name] = {\n              value: variables[name],\n              ...variable,\n            };\n          }\n        }\n        return await computedViewRunner(client.connection, operation.gqlFieldName, variablesOptions, operation.namespace);\n      }\n    : async () => {\n        return await computedViewRunner(client.connection, operation.gqlFieldName, undefined, operation.namespace);\n      };\n\n  return Object.assign(f, operation, {\n    plan: function (variables: VariablesOptions) {\n      return computedViewOperation(operation.gqlFieldName, variables, operation.namespace);\n    },\n  }) as any;\n}\n\nexport function buildModelComputedView<ResultT>(operation: ComputedViewOperation): ComputedViewWithoutVariables<ResultT>;\nexport function buildModelComputedView<VariablesT, ResultT>(\n  operation: ComputedViewOperation\n): ComputedViewWithVariables<VariablesT, ResultT>;\nexport function buildModelComputedView<VariablesT, ResultT>(\n  operation: ComputedViewOperation\n): ComputedViewWithVariables<VariablesT, ResultT> | ComputedViewWithoutVariables<ResultT> {\n  const f = operation.variables\n    ? async function (this: AnyModelManager, variables: Record<string, any> = {}) {\n        let resultVariables: VariablesOptions | undefined;\n        if (operation.variables) {\n          resultVariables = {};\n          for (const [name, variable] of Object.entries(operation.variables)) {\n            resultVariables[name] = {\n              value: variables[name],\n              ...variable,\n            };\n          }\n        }\n        return await computedViewRunner(this.connection, operation.gqlFieldName, resultVariables, operation.namespace);\n      }\n    : async function (this: AnyModelManager) {\n        return await computedViewRunner(this.connection, operation.gqlFieldName, undefined, operation.namespace);\n      };\n\n  return Object.assign(f, operation, {\n    plan: function (variables: VariablesOptions) {\n      return computedViewOperation(operation.gqlFieldName, variables, operation.namespace);\n    },\n  }) as any;\n}\n\nexport function buildInlineComputedView(client: { connection: GadgetConnection }, operation: ComputedViewOperation) {\n  const f = async function (query: string, variables?: Record<string, any>) {\n    return await inlineComputedViewRunner(client.connection, operation.gqlFieldName, query, variables, operation.namespace);\n  };\n  return Object.assign(f, operation) as any;\n}\n\nexport function buildInlineModelComputedView(operation: ComputedViewOperation) {\n  const f = async function (this: AnyModelManager, query: string, variables?: Record<string, any>) {\n    return await inlineComputedViewRunner(this.connection, operation.gqlFieldName, query, variables, operation.namespace);\n  };\n  return Object.assign(f, operation) as any;\n}\n\nexport function isInlineComputedView(operation: ComputedViewOperation): boolean {\n  return operation.functionName == \"view\";\n}\n\n/**\n * Maps the variables passed from a call to the client to the variables the GraphQL API is expecting\n *\n * For actions which accept a model input, the GraphQL API expects the variables to be passed like\n *  id: 123,\n *  widget: { fieldA: \"a\", fieldB: \"b\" },\n *  extraParam: \"C\"\n *\n * For convenience, we allow actions to be invoked like\n *   await api.widget.update(\"123\", {fieldA: \"a\", fieldB: \"b\", extraParam: \"C\"})\n *\n * This function re-nests the model input variables under a key for the model's api identifier, being careful to leave root level params alone.\n **/\nfunction disambiguateActionParams<Action extends AnyActionFunctionRuntimeMetadata>(\n  action: Action,\n  idValue: string | undefined,\n  variables: Record<string, any> = {}\n): Record<string, any> {\n  if (action.hasAmbiguousIdentifier) {\n    if (Object.keys(variables).some((key) => !action.paramOnlyVariables?.includes(key) && key !== action.modelApiIdentifier)) {\n      throw Error(`Invalid arguments found in variables. Did you mean to use ({ ${action.modelApiIdentifier}: { ... } })?`);\n    }\n  }\n\n  let newVariables: Record<string, any>;\n  const idVariable = Object.entries(action.variables).find(([key, value]) => key === \"id\" && value.type === \"GadgetID\");\n\n  if ((action as any).acceptsModelInput || action.hasCreateOrUpdateEffect) {\n    if (\n      (action.modelApiIdentifier in variables &&\n        typeof variables[action.modelApiIdentifier] === \"object\" &&\n        variables[action.modelApiIdentifier] !== null) ||\n      !action.variables[action.modelApiIdentifier]\n    ) {\n      newVariables = variables;\n    } else {\n      newVariables = {\n        [action.modelApiIdentifier]: {},\n      };\n      for (const [key, value] of Object.entries(variables)) {\n        if (action.paramOnlyVariables?.includes(key)) {\n          newVariables[key] = value;\n        } else {\n          if (idVariable && key === idVariable[0]) {\n            newVariables[\"id\"] = value;\n          } else {\n            newVariables[action.modelApiIdentifier][key] = value;\n          }\n        }\n      }\n    }\n  } else {\n    newVariables = variables;\n  }\n\n  newVariables[\"id\"] ??= idValue as any;\n\n  return newVariables;\n}\n\n/** Split out the arguments to a call to an action */\nfunction actionArgs(\n  operation: AnyActionFunctionRuntimeMetadata,\n  hasId: boolean,\n  hasOthers: boolean,\n  args: (string | Record<string, unknown> | BaseFindOptions)[]\n): [variables: VariablesOptions, options?: BaseFindOptions] {\n  let id: string | undefined = undefined;\n  let params: Record<string, unknown> | undefined = undefined;\n\n  if (hasId) {\n    id = args.shift() as string | undefined;\n  }\n  if (hasOthers) {\n    params = args.shift() as Record<string, unknown> | undefined;\n  }\n  const options = args.shift() as BaseFindOptions;\n\n  let unambiguousParams = params;\n  if (id || params) {\n    unambiguousParams = disambiguateActionParams(operation, id, params);\n  }\n\n  const resultVariables: VariablesOptions = {};\n  for (const [name, variable] of Object.entries(operation.variables)) {\n    resultVariables[name] = {\n      value: name == \"id\" ? id : unambiguousParams?.[name],\n      ...variable,\n    };\n  }\n\n  return [resultVariables, options];\n}\n\n/** Given a result from a finder function that is either a promise for one value or an async iterator over many values, transform each value using a function, returning the same cardinality as the input */\nfunction forEachMaybeLiveResponse<Item, Result>(response: AsyncIterable<Item>, transform: (item: Item) => Result): AsyncIterable<Result>;\nfunction forEachMaybeLiveResponse<Item, Result>(response: Promise<Item>, transform: (item: Item) => Result): Promise<Result>;\nfunction forEachMaybeLiveResponse<Item, Result>(\n  response: AsyncIterable<Item> | Promise<Item>,\n  transform: (item: Item) => Result\n): AsyncIterable<Result> | Promise<Result> {\n  if (Symbol.asyncIterator in response) {\n    return {\n      [Symbol.asyncIterator]: async function* () {\n        for await (const item of response) {\n          yield transform(item);\n        }\n      },\n    };\n  } else {\n    return response.then(transform);\n  }\n}\n\nconst sendDevHarnessStubbedActionEvent = (operation: StubbedActionOperation) => {\n  try {\n    if (typeof window !== \"undefined\" && typeof CustomEvent === \"function\") {\n      const event = new CustomEvent(\"gadget:devharness:stubbedActionError\", {\n        detail: {\n          reason: operation.reason,\n          action: {\n            functionName: operation.functionName,\n            actionApiIdentifier: operation.actionApiIdentifier,\n            modelApiIdentifier: operation.modelApiIdentifier,\n            dataPath: operation.dataPath,\n          },\n        },\n      });\n      window.dispatchEvent(event);\n    }\n  } catch (error: any) {\n    // gracefully handle environments where CustomEvent is misbehaved like jsdom\n    console.warn(\"[gadget] error dispatching gadget dev harness event\", error);\n  }\n};\n", "import {\n  GadgetConnection,\n  GadgetRecord,\n  GadgetRecordImplementation,\n  GadgetRecordList,\n  GadgetNonUniqueDataError,\n  actionRunner,\n  findManyRunner,\n  findOneRunner,\n  findOneByFieldRunner,\n  FieldSelection,\n  LimitToKnownKeys,\n  Selectable\n} from \"@gadgetinc/api-client-core\";\n\nimport {\n  Query,\n  ExplicitNestingRequired,\n\n  IDsList,\n  PromiseOrLiveIterator,\n  Session,\n  AvailableSessionSelection\n} from \"../types.js\";\n\nimport { buildModelManager } from \"../builder.js\";\nimport { AvailableSelection, AllFieldsSelected, DefaultSelection, Select, DeepFilterNever } from \"../utils.js\";\n\n/**\n* A type that holds only the selected fields (and nested fields) of session. The present fields in the result type of this are dynamic based on the options to each call that uses it.\n* The selected fields are sometimes given by the `Options` at `Options[\"select\"]`, and if a selection isn't made in the options, we use the default selection from above.\n*/\nexport type SelectedSessionOrDefault<Options extends Selectable<AvailableSessionSelection>> = DeepFilterNever<\n    Select<\n      Session,\n      DefaultSelection<\n        AvailableSessionSelection,\n        Options,\n        typeof DefaultSessionSelection\n      >\n    >\n  >;\n\n/**\n * A type that represents a `GadgetRecord` type for session.\n * It selects all fields of the model by default. If you want to represent a record type with a subset of fields, you could pass in an object in the `Selection` type parameter.\n *\n * @example\n * ```ts\n * const someFunction = (record: SessionRecord, recordWithName: SessionRecord<{ select: { name: true; } }>) => {\n *   // The type of the `record` variable will include all fields of the model.\n *   const name = record.name;\n *   const otherField = record.otherField;\n *\n *   // The type of the `recordWithName` variable will only include the selected fields.\n *   const name = recordWithName.name;\n *   const otherField = recordWithName.otherField; // Type error: Property 'otherField' does not exist on type 'GadgetRecord<{ name: true; }>'.\n * }\n * ```\n */\nexport type SessionRecord<Selection extends AvailableSessionSelection | undefined = typeof DefaultSessionSelection> = DeepFilterNever<\n  GadgetRecord<\n    SelectedSessionOrDefault<{\n      select: Selection;\n    }>\n  >\n>;\n\nexport const DefaultSessionSelection = {\n     __typename: true,\n     id: true,\n     createdAt: true,\n     roles: { key: true, name: true },\n     shopId: true,\n     shopifySID: true,\n     updatedAt: true\n   } as const;\nconst modelApiIdentifier = \"session\" as const;\nconst pluralModelApiIdentifier = \"sessions\" as const;\n/** Options that can be passed to the `SessionManager#findOne` method */\n export interface FindOneSessionOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableSessionSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `SessionManager#maybeFindOne` method */\n export interface MaybeFindOneSessionOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableSessionSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `SessionManager#findMany` method */\n export interface FindManySessionsOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableSessionSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  first?: number | null;\n  last?: number | null;\n  after?: string | null;\n  before?: string | null;\n};\n/** Options that can be passed to the `SessionManager#findFirst` method */\n export interface FindFirstSessionOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableSessionSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `SessionManager#maybeFindFirst` method */\n export interface MaybeFindFirstSessionOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableSessionSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n\n/**\n * A manager for the session model with all the available operations for reading and writing to it.*/\nexport type SessionManager = {\n  readonly connection: GadgetConnection;\n\n  findOne: {\n      /**\n       * Finds one session by ID. Returns a `Promise` that resolves to the record if found and rejects the promise if the record isn't found.\n       **/\n      <Options extends FindOneSessionOptions>(id: string, options?: LimitToKnownKeys<Options, FindOneSessionOptions>): PromiseOrLiveIterator<Options,SessionRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultSessionSelection;\n      namespace: null;\n      optionsType: FindOneSessionOptions;\n      selectionType: AvailableSessionSelection;\n      schemaType: Query[\"session\"];\n    }\n  maybeFindOne: {\n      /**\n       * Finds one session by ID. Returns a `Promise` that resolves to the record if found and returns null otherwise.\n       **/\n      <Options extends MaybeFindOneSessionOptions>(id: string, options?: LimitToKnownKeys<Options, MaybeFindOneSessionOptions>): PromiseOrLiveIterator<Options,SessionRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: MaybeFindOneSessionOptions;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultSessionSelection;\n      namespace: null;\n      selectionType: AvailableSessionSelection;\n      schemaType: Query[\"session\"];\n    }\n  findMany: {\n      /**\n       * Finds many session. Returns a `Promise` for a `GadgetRecordList` of objects according to the passed `options`. Optionally filters the returned records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindManySessionsOptions>(options?: LimitToKnownKeys<Options, FindManySessionsOptions>): PromiseOrLiveIterator<Options,GadgetRecordList<SessionRecord<Options[\"select\"]>>>;\n      type: 'findMany';\n      operationName: typeof pluralModelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: FindManySessionsOptions;\n      defaultSelection: typeof DefaultSessionSelection;\n      namespace: null;\n      selectionType: AvailableSessionSelection;\n      schemaType: Query[\"session\"];\n    }\n  findFirst: {\n      /**\n       * Finds the first matching session. Returns a `Promise` that resolves to a record if found and rejects the promise if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindFirstSessionOptions>(options?: LimitToKnownKeys<Options, FindFirstSessionOptions>): PromiseOrLiveIterator<Options,SessionRecord<Options[\"select\"]>>;\n      type: 'findFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: FindFirstSessionOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultSessionSelection;\n      namespace: null;\n      selectionType: AvailableSessionSelection;\n      schemaType: Query[\"session\"];\n    }\n  maybeFindFirst: {\n      /**\n       * Finds the first matching session. Returns a `Promise` that resolves to a record if found, or null if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` pagination options.\n       **/\n      <Options extends MaybeFindFirstSessionOptions>(options?: LimitToKnownKeys<Options, MaybeFindFirstSessionOptions>): PromiseOrLiveIterator<Options,SessionRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: MaybeFindFirstSessionOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultSessionSelection;\n      namespace: null;\n      selectionType: AvailableSessionSelection;\n      schemaType: Query[\"session\"];\n    }\n  findById: {\n      /**\n      * Finds one session by its id. Returns a Promise that resolves to the record if found and rejects the promise if the record isn't found.\n      **/\n      <Options extends FindOneSessionOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneSessionOptions>): PromiseOrLiveIterator<Options,SessionRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneSessionOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultSessionSelection;\n      namespace: null;\n      selectionType: AvailableSessionSelection;\n      schemaType: Query[\"session\"];\n    }\n  maybeFindById: {\n      /**\n      * Finds one session by its id. Returns a Promise that resolves to the record if found and returns null if the record isn't found.\n      **/\n      <Options extends FindOneSessionOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneSessionOptions>): Promise<SessionRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneSessionOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultSessionSelection;\n      namespace: null;\n      selectionType: AvailableSessionSelection;\n      schemaType: Query[\"session\"];\n    }\n  view: {\n      (query: string, variables?: Record<string, unknown>): Promise<unknown>\n      type: 'computedView';\n      operationName: 'view';\n      gqlFieldName: 'sessionGellyView';\n      namespace: null;\n      imports: [];\n      variables: {\n          query: { type: 'String', required: true },\n          args: { type: 'JSONObject' }\n        };\n      variablesType: Record<string, unknown>;\n      resultType: Promise<unknown>;\n      plan: never;\n    }\n};\n\n/**\n * A manager for the session model with all the available operations for reading and writing to it.*/\nexport const SessionManager = buildModelManager(\n  modelApiIdentifier,\n  pluralModelApiIdentifier,\n  DefaultSessionSelection,\n  [\n    {\n      type: 'findOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultSessionSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultSessionSelection,\n      namespace: null\n    },\n    {\n      type: 'findMany',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultSessionSelection,\n      namespace: null\n    },\n    {\n      type: 'findFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultSessionSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultSessionSelection,\n      namespace: null\n    },\n    {\n      type: 'findOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'findById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultSessionSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'maybeFindById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultSessionSelection,\n      namespace: null\n    },\n    {\n      type: 'computedView',\n      operationName: 'view',\n      functionName: 'view',\n      gqlFieldName: 'sessionGellyView',\n      namespace: null,\n      variables: {\n        query: { type: 'String', required: true },\n        args: { type: 'JSONObject' }\n      }\n    }\n  ] as const\n) as unknown as {\n  // Gadget generates these model manager classes at runtime dynamically, which means there is no source code for the class. This is done to make the bundle size of the client as small as possible, avoiding a bunch of repeated source code in favour of one small builder function. The TypeScript types above document the exact interface of the constructed class.\n  new(connection: GadgetConnection): SessionManager;\n};", "import {\n  GadgetConnection,\n  GadgetRecord,\n  GadgetRecordImplementation,\n  GadgetRecordList,\n  GadgetNonUniqueDataError,\n  actionRunner,\n  findManyRunner,\n  findOneRunner,\n  findOneByFieldRunner,\n  DefaultSelection,\n  LimitToKnownKeys,\n  Selectable\n} from \"@gadgetinc/api-client-core\";\n\nimport {\n  Query,\n  ExplicitNestingRequired,\n  Select,\n        DeepFilterNever,\n  IDsList,\n  PromiseOrLiveIterator,\n  Session,\n  AvailableSessionSelection\n} from \"../types.js\";\n\nimport { buildModelManager } from \"../builder.js\";\n\n\n/**\n* A type that holds only the selected fields (and nested fields) of session. The present fields in the result type of this are dynamic based on the options to each call that uses it.\n* The selected fields are sometimes given by the `Options` at `Options[\"select\"]`, and if a selection isn't made in the options, we use the default selection from above.\n*/\nexport type SelectedSessionOrDefault<Options extends Selectable<AvailableSessionSelection>> = DeepFilterNever<\n    Select<\n      Session,\n      DefaultSelection<\n        AvailableSessionSelection,\n        Options,\n        typeof DefaultSessionSelection\n      >\n    >\n  >;\n\n/**\n * A type that represents a `GadgetRecord` type for session.\n * It selects all fields of the model by default. If you want to represent a record type with a subset of fields, you could pass in an object in the `Selection` type parameter.\n *\n * @example\n * ```ts\n * const someFunction = (record: SessionRecord, recordWithName: SessionRecord<{ select: { name: true; } }>) => {\n *   // The type of the `record` variable will include all fields of the model.\n *   const name = record.name;\n *   const otherField = record.otherField;\n *\n *   // The type of the `recordWithName` variable will only include the selected fields.\n *   const name = recordWithName.name;\n *   const otherField = recordWithName.otherField; // Type error: Property 'otherField' does not exist on type 'GadgetRecord<{ name: true; }>'.\n * }\n * ```\n */\nexport type SessionRecord<Selection extends AvailableSessionSelection | undefined = typeof DefaultSessionSelection> = DeepFilterNever<\n  GadgetRecord<\n    SelectedSessionOrDefault<{\n      select: Selection;\n    }>\n  >\n>;\n\nexport const DefaultSessionSelection = {\n     __typename: true,\n     id: true,\n     createdAt: true,\n     roles: { key: true, name: true },\n     shopId: true,\n     shopifySID: true,\n     updatedAt: true\n   } as const;\nconst modelApiIdentifier = \"session\" as const;\nconst pluralModelApiIdentifier = \"sessions\" as const;\n/** Options that can be passed to the `SessionManager#findOne` method */\n export interface GetCurrentSessionOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableSessionSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n\n/**\n * A manager for the session model with all the available operations for reading and writing to it.*/\nexport type CurrentSessionManager = {\n  readonly connection: GadgetConnection;\n\n  get: {\n      /**\n       * Finds the current session for this client. Returns a `Promise` that resolves to the record if found and rejects the promise if the record isn't found.\n       **/\n      <Options extends GetCurrentSessionOptions>(options?: LimitToKnownKeys<Options, GetCurrentSessionOptions>): Promise<GadgetRecord<SelectedSessionOrDefault<Options>>>;\n      type: 'get';\n      operationName: 'currentSession';\n      defaultSelection: typeof DefaultSessionSelection;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      namespace: null;\n      optionsType: GetCurrentSessionOptions;\n      selectionType: AvailableSessionSelection;\n      schemaType: Query[\"session\"];\n    }\n};\n\n/**\n * A manager for the session model with all the available operations for reading and writing to it.*/\nexport const CurrentSessionManager = buildModelManager(\n  modelApiIdentifier,\n  pluralModelApiIdentifier,\n  DefaultSessionSelection,\n  [\n    {\n      type: 'get',\n      operationName: 'currentSession',\n      defaultSelection: DefaultSessionSelection,\n      modelApiIdentifier: modelApiIdentifier,\n      namespace: null\n    }\n  ] as const\n) as unknown as {\n  // Gadget generates these model manager classes at runtime dynamically, which means there is no source code for the class. This is done to make the bundle size of the client as small as possible, avoiding a bunch of repeated source code in favour of one small builder function. The TypeScript types above document the exact interface of the constructed class.\n  new(connection: GadgetConnection): CurrentSessionManager;\n};", "import {\n  GadgetConnection,\n  GadgetRecord,\n  GadgetRecordImplementation,\n  GadgetRecordList,\n  GadgetNonUniqueDataError,\n  actionRunner,\n  findManyRunner,\n  findOneRunner,\n  findOneByFieldRunner,\n  FieldSelection,\n  LimitToKnownKeys,\n  Selectable\n} from \"@gadgetinc/api-client-core\";\n\nimport {\n  Query,\n  ExplicitNestingRequired,\n\n  IDsList,\n  PromiseOrLiveIterator,\n  ShopifyGdprRequest,\n  AvailableShopifyGdprRequestSelection,\n  ShopifyGdprRequestSort,\n  ShopifyGdprRequestFilter\n} from \"../types.js\";\n\nimport { buildModelManager } from \"../builder.js\";\nimport { AvailableSelection, AllFieldsSelected, DefaultSelection, Select, DeepFilterNever } from \"../utils.js\";\n\n/**\n* A type that holds only the selected fields (and nested fields) of shopifyGdprRequest. The present fields in the result type of this are dynamic based on the options to each call that uses it.\n* The selected fields are sometimes given by the `Options` at `Options[\"select\"]`, and if a selection isn't made in the options, we use the default selection from above.\n*/\nexport type SelectedShopifyGdprRequestOrDefault<Options extends Selectable<AvailableShopifyGdprRequestSelection>> = DeepFilterNever<\n    Select<\n      ShopifyGdprRequest,\n      DefaultSelection<\n        AvailableShopifyGdprRequestSelection,\n        Options,\n        typeof DefaultShopifyGdprRequestSelection\n      >\n    >\n  >;\n\n/**\n * A type that represents a `GadgetRecord` type for shopifyGdprRequest.\n * It selects all fields of the model by default. If you want to represent a record type with a subset of fields, you could pass in an object in the `Selection` type parameter.\n *\n * @example\n * ```ts\n * const someFunction = (record: ShopifyGdprRequestRecord, recordWithName: ShopifyGdprRequestRecord<{ select: { name: true; } }>) => {\n *   // The type of the `record` variable will include all fields of the model.\n *   const name = record.name;\n *   const otherField = record.otherField;\n *\n *   // The type of the `recordWithName` variable will only include the selected fields.\n *   const name = recordWithName.name;\n *   const otherField = recordWithName.otherField; // Type error: Property 'otherField' does not exist on type 'GadgetRecord<{ name: true; }>'.\n * }\n * ```\n */\nexport type ShopifyGdprRequestRecord<Selection extends AvailableShopifyGdprRequestSelection | undefined = typeof DefaultShopifyGdprRequestSelection> = DeepFilterNever<\n  GadgetRecord<\n    SelectedShopifyGdprRequestOrDefault<{\n      select: Selection;\n    }>\n  >\n>;\n\nexport const DefaultShopifyGdprRequestSelection = {\n     __typename: true,\n     id: true,\n     createdAt: true,\n     payload: true,\n     shopId: true,\n     topic: true,\n     updatedAt: true\n   } as const;\nconst modelApiIdentifier = \"shopifyGdprRequest\" as const;\nconst pluralModelApiIdentifier = \"shopifyGdprRequests\" as const;\n/** Options that can be passed to the `ShopifyGdprRequestManager#findOne` method */\n export interface FindOneShopifyGdprRequestOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyGdprRequestSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `ShopifyGdprRequestManager#maybeFindOne` method */\n export interface MaybeFindOneShopifyGdprRequestOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyGdprRequestSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `ShopifyGdprRequestManager#findMany` method */\n export interface FindManyShopifyGdprRequestsOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyGdprRequestSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyGdprRequestSort | ShopifyGdprRequestSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyGdprRequestFilter | ShopifyGdprRequestFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n  first?: number | null;\n  last?: number | null;\n  after?: string | null;\n  before?: string | null;\n};\n/** Options that can be passed to the `ShopifyGdprRequestManager#findFirst` method */\n export interface FindFirstShopifyGdprRequestOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyGdprRequestSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyGdprRequestSort | ShopifyGdprRequestSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyGdprRequestFilter | ShopifyGdprRequestFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\n/** Options that can be passed to the `ShopifyGdprRequestManager#maybeFindFirst` method */\n export interface MaybeFindFirstShopifyGdprRequestOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyGdprRequestSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyGdprRequestSort | ShopifyGdprRequestSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyGdprRequestFilter | ShopifyGdprRequestFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\nexport interface CreateShopifyGdprRequestOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyGdprRequestSelection;\n};\nexport interface UpdateShopifyGdprRequestOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyGdprRequestSelection;\n};\n\n/**\n * A manager for the shopifyGdprRequest model with all the available operations for reading and writing to it.*/\nexport type ShopifyGdprRequestManager = {\n  readonly connection: GadgetConnection;\n\n  findOne: {\n      /**\n       * Finds one shopifyGdprRequest by ID. Returns a `Promise` that resolves to the record if found and rejects the promise if the record isn't found.\n       **/\n      <Options extends FindOneShopifyGdprRequestOptions>(id: string, options?: LimitToKnownKeys<Options, FindOneShopifyGdprRequestOptions>): PromiseOrLiveIterator<Options,ShopifyGdprRequestRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultShopifyGdprRequestSelection;\n      namespace: null;\n      optionsType: FindOneShopifyGdprRequestOptions;\n      selectionType: AvailableShopifyGdprRequestSelection;\n      schemaType: Query[\"shopifyGdprRequest\"];\n    }\n  maybeFindOne: {\n      /**\n       * Finds one shopifyGdprRequest by ID. Returns a `Promise` that resolves to the record if found and returns null otherwise.\n       **/\n      <Options extends MaybeFindOneShopifyGdprRequestOptions>(id: string, options?: LimitToKnownKeys<Options, MaybeFindOneShopifyGdprRequestOptions>): PromiseOrLiveIterator<Options,ShopifyGdprRequestRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: MaybeFindOneShopifyGdprRequestOptions;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultShopifyGdprRequestSelection;\n      namespace: null;\n      selectionType: AvailableShopifyGdprRequestSelection;\n      schemaType: Query[\"shopifyGdprRequest\"];\n    }\n  findMany: {\n      /**\n       * Finds many shopifyGdprRequest. Returns a `Promise` for a `GadgetRecordList` of objects according to the passed `options`. Optionally filters the returned records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindManyShopifyGdprRequestsOptions>(options?: LimitToKnownKeys<Options, FindManyShopifyGdprRequestsOptions>): PromiseOrLiveIterator<Options,GadgetRecordList<ShopifyGdprRequestRecord<Options[\"select\"]>>>;\n      type: 'findMany';\n      operationName: typeof pluralModelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: FindManyShopifyGdprRequestsOptions;\n      defaultSelection: typeof DefaultShopifyGdprRequestSelection;\n      namespace: null;\n      selectionType: AvailableShopifyGdprRequestSelection;\n      schemaType: Query[\"shopifyGdprRequest\"];\n    }\n  findFirst: {\n      /**\n       * Finds the first matching shopifyGdprRequest. Returns a `Promise` that resolves to a record if found and rejects the promise if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindFirstShopifyGdprRequestOptions>(options?: LimitToKnownKeys<Options, FindFirstShopifyGdprRequestOptions>): PromiseOrLiveIterator<Options,ShopifyGdprRequestRecord<Options[\"select\"]>>;\n      type: 'findFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: FindFirstShopifyGdprRequestOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyGdprRequestSelection;\n      namespace: null;\n      selectionType: AvailableShopifyGdprRequestSelection;\n      schemaType: Query[\"shopifyGdprRequest\"];\n    }\n  maybeFindFirst: {\n      /**\n       * Finds the first matching shopifyGdprRequest. Returns a `Promise` that resolves to a record if found, or null if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` pagination options.\n       **/\n      <Options extends MaybeFindFirstShopifyGdprRequestOptions>(options?: LimitToKnownKeys<Options, MaybeFindFirstShopifyGdprRequestOptions>): PromiseOrLiveIterator<Options,ShopifyGdprRequestRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: MaybeFindFirstShopifyGdprRequestOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyGdprRequestSelection;\n      namespace: null;\n      selectionType: AvailableShopifyGdprRequestSelection;\n      schemaType: Query[\"shopifyGdprRequest\"];\n    }\n  findById: {\n      /**\n      * Finds one shopifyGdprRequest by its id. Returns a Promise that resolves to the record if found and rejects the promise if the record isn't found.\n      **/\n      <Options extends FindOneShopifyGdprRequestOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneShopifyGdprRequestOptions>): PromiseOrLiveIterator<Options,ShopifyGdprRequestRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneShopifyGdprRequestOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyGdprRequestSelection;\n      namespace: null;\n      selectionType: AvailableShopifyGdprRequestSelection;\n      schemaType: Query[\"shopifyGdprRequest\"];\n    }\n  maybeFindById: {\n      /**\n      * Finds one shopifyGdprRequest by its id. Returns a Promise that resolves to the record if found and returns null if the record isn't found.\n      **/\n      <Options extends FindOneShopifyGdprRequestOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneShopifyGdprRequestOptions>): Promise<ShopifyGdprRequestRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneShopifyGdprRequestOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyGdprRequestSelection;\n      namespace: null;\n      selectionType: AvailableShopifyGdprRequestSelection;\n      schemaType: Query[\"shopifyGdprRequest\"];\n    }\n  create: {\n      /**\n       * @deprecated The action create on model shopifyGdprRequest does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'createShopifyGdprRequest';\n      errorMessage: string;\n      optionsType: CreateShopifyGdprRequestOptions;\n      actionApiIdentifier: 'create';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyGdprRequest.create';\n    }\n  bulkCreate: {\n      /**\n       * @deprecated The action create on model shopifyGdprRequest does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkCreateShopifyGdprRequests';\n      errorMessage: string;\n      optionsType: CreateShopifyGdprRequestOptions;\n      actionApiIdentifier: 'create';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyGdprRequest.bulkCreate';\n    }\n  update: {\n      /**\n       * @deprecated The action update on model shopifyGdprRequest does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'updateShopifyGdprRequest';\n      errorMessage: string;\n      optionsType: UpdateShopifyGdprRequestOptions;\n      actionApiIdentifier: 'update';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyGdprRequest.update';\n    }\n  bulkUpdate: {\n      /**\n       * @deprecated The action update on model shopifyGdprRequest does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkUpdateShopifyGdprRequests';\n      errorMessage: string;\n      optionsType: UpdateShopifyGdprRequestOptions;\n      actionApiIdentifier: 'update';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyGdprRequest.bulkUpdate';\n    }\n  view: {\n      (query: string, variables?: Record<string, unknown>): Promise<unknown>\n      type: 'computedView';\n      operationName: 'view';\n      gqlFieldName: 'shopifyGdprRequestGellyView';\n      namespace: null;\n      imports: [];\n      variables: {\n          query: { type: 'String', required: true },\n          args: { type: 'JSONObject' }\n        };\n      variablesType: Record<string, unknown>;\n      resultType: Promise<unknown>;\n      plan: never;\n    }\n};\n\n/**\n * A manager for the shopifyGdprRequest model with all the available operations for reading and writing to it.*/\nexport const ShopifyGdprRequestManager = buildModelManager(\n  modelApiIdentifier,\n  pluralModelApiIdentifier,\n  DefaultShopifyGdprRequestSelection,\n  [\n    {\n      type: 'findOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultShopifyGdprRequestSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultShopifyGdprRequestSelection,\n      namespace: null\n    },\n    {\n      type: 'findMany',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyGdprRequestSelection,\n      namespace: null\n    },\n    {\n      type: 'findFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyGdprRequestSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyGdprRequestSelection,\n      namespace: null\n    },\n    {\n      type: 'findOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'findById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyGdprRequestSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'maybeFindById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyGdprRequestSelection,\n      namespace: null\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'createShopifyGdprRequest',\n      functionName: 'create',\n      errorMessage: 'The action create on model shopifyGdprRequest does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'create',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyGdprRequest.create'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkCreateShopifyGdprRequests',\n      functionName: 'bulkCreate',\n      errorMessage: 'The action create on model shopifyGdprRequest does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'create',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyGdprRequest.bulkCreate'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'updateShopifyGdprRequest',\n      functionName: 'update',\n      errorMessage: 'The action update on model shopifyGdprRequest does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'update',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyGdprRequest.update'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkUpdateShopifyGdprRequests',\n      functionName: 'bulkUpdate',\n      errorMessage: 'The action update on model shopifyGdprRequest does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'update',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyGdprRequest.bulkUpdate'\n    },\n    {\n      type: 'computedView',\n      operationName: 'view',\n      functionName: 'view',\n      gqlFieldName: 'shopifyGdprRequestGellyView',\n      namespace: null,\n      variables: {\n        query: { type: 'String', required: true },\n        args: { type: 'JSONObject' }\n      }\n    }\n  ] as const\n) as unknown as {\n  // Gadget generates these model manager classes at runtime dynamically, which means there is no source code for the class. This is done to make the bundle size of the client as small as possible, avoiding a bunch of repeated source code in favour of one small builder function. The TypeScript types above document the exact interface of the constructed class.\n  new(connection: GadgetConnection): ShopifyGdprRequestManager;\n};", "import {\n  GadgetConnection,\n  GadgetRecord,\n  GadgetRecordImplementation,\n  GadgetRecordList,\n  GadgetNonUniqueDataError,\n  actionRunner,\n  findManyRunner,\n  findOneRunner,\n  findOneByFieldRunner,\n  FieldSelection,\n  LimitToKnownKeys,\n  Selectable\n} from \"@gadgetinc/api-client-core\";\n\nimport {\n  Query,\n  ExplicitNestingRequired,\n\n  IDsList,\n  PromiseOrLiveIterator,\n  ShopifySync,\n  AvailableShopifySyncSelection,\n  ShopifySyncSort,\n  ShopifySyncFilter,\n  AbortShopifySyncInput,\n  CompleteShopifySyncInput,\n  ErrorShopifySyncInput,\n  RunShopifySyncInput,\n  Scalars,\n  UpsertShopifySyncInput\n} from \"../types.js\";\n\nimport { buildModelManager } from \"../builder.js\";\nimport { AvailableSelection, AllFieldsSelected, DefaultSelection, Select, DeepFilterNever } from \"../utils.js\";\n\n/**\n* A type that holds only the selected fields (and nested fields) of shopifySync. The present fields in the result type of this are dynamic based on the options to each call that uses it.\n* The selected fields are sometimes given by the `Options` at `Options[\"select\"]`, and if a selection isn't made in the options, we use the default selection from above.\n*/\nexport type SelectedShopifySyncOrDefault<Options extends Selectable<AvailableShopifySyncSelection>> = DeepFilterNever<\n    Select<\n      ShopifySync,\n      DefaultSelection<\n        AvailableShopifySyncSelection,\n        Options,\n        typeof DefaultShopifySyncSelection\n      >\n    >\n  >;\n\n/**\n * A type that represents a `GadgetRecord` type for shopifySync.\n * It selects all fields of the model by default. If you want to represent a record type with a subset of fields, you could pass in an object in the `Selection` type parameter.\n *\n * @example\n * ```ts\n * const someFunction = (record: ShopifySyncRecord, recordWithName: ShopifySyncRecord<{ select: { name: true; } }>) => {\n *   // The type of the `record` variable will include all fields of the model.\n *   const name = record.name;\n *   const otherField = record.otherField;\n *\n *   // The type of the `recordWithName` variable will only include the selected fields.\n *   const name = recordWithName.name;\n *   const otherField = recordWithName.otherField; // Type error: Property 'otherField' does not exist on type 'GadgetRecord<{ name: true; }>'.\n * }\n * ```\n */\nexport type ShopifySyncRecord<Selection extends AvailableShopifySyncSelection | undefined = typeof DefaultShopifySyncSelection> = DeepFilterNever<\n  GadgetRecord<\n    SelectedShopifySyncOrDefault<{\n      select: Selection;\n    }>\n  >\n>;\n\nexport const DefaultShopifySyncSelection = {\n     __typename: true,\n     id: true,\n     state: true,\n     createdAt: true,\n     domain: true,\n     errorDetails: true,\n     errorMessage: true,\n     force: true,\n     models: true,\n     shopId: true,\n     syncSince: true,\n     syncSinceBy: true,\n     updatedAt: true\n   } as const;\nconst modelApiIdentifier = \"shopifySync\" as const;\nconst pluralModelApiIdentifier = \"shopifySyncs\" as const;\n/** Options that can be passed to the `ShopifySyncManager#findOne` method */\n export interface FindOneShopifySyncOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifySyncSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `ShopifySyncManager#maybeFindOne` method */\n export interface MaybeFindOneShopifySyncOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifySyncSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `ShopifySyncManager#findMany` method */\n export interface FindManyShopifySyncsOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifySyncSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifySyncSort | ShopifySyncSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifySyncFilter | ShopifySyncFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n  first?: number | null;\n  last?: number | null;\n  after?: string | null;\n  before?: string | null;\n};\n/** Options that can be passed to the `ShopifySyncManager#findFirst` method */\n export interface FindFirstShopifySyncOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifySyncSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifySyncSort | ShopifySyncSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifySyncFilter | ShopifySyncFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\n/** Options that can be passed to the `ShopifySyncManager#maybeFindFirst` method */\n export interface MaybeFindFirstShopifySyncOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifySyncSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifySyncSort | ShopifySyncSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifySyncFilter | ShopifySyncFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\nexport interface AbortShopifySyncOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifySyncSelection;\n};\nexport interface CompleteShopifySyncOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifySyncSelection;\n};\nexport interface ErrorShopifySyncOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifySyncSelection;\n};\nexport interface RunShopifySyncOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifySyncSelection;\n};\nexport interface UpsertShopifySyncOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifySyncSelection;\n};\n/**\n * The fully-qualified, expanded form of the inputs for executing the abort action.\n * The flattened style should be preferred over this style, but for models with ambiguous API identifiers, this style can be used to remove any ambiguity.\n **/\nexport type FullyQualifiedAbortShopifySyncVariables = {\n  shopifySync?: AbortShopifySyncInput;\n}\n/**\n * The inputs for executing abort on shopifySync.\n * This is the flattened style of inputs, suitable for general use, and should be preferred.\n **/\nexport type AbortShopifySyncVariables = AbortShopifySyncInput;\n/**\n * The return value from executing abort on shopifySync\n * Is a GadgetRecord of the model's type.\n **/\nexport type AbortShopifySyncResult<Options extends AbortShopifySyncOptions> = SelectedShopifySyncOrDefault<Options> extends void ?\n      void :\n      GadgetRecord<SelectedShopifySyncOrDefault<Options>>;\n/**\n * The fully-qualified, expanded form of the inputs for executing the complete action.\n * The flattened style should be preferred over this style, but for models with ambiguous API identifiers, this style can be used to remove any ambiguity.\n **/\nexport type FullyQualifiedCompleteShopifySyncVariables = {\n  shopifySync?: CompleteShopifySyncInput;\n}\n/**\n * The inputs for executing complete on shopifySync.\n * This is the flattened style of inputs, suitable for general use, and should be preferred.\n **/\nexport type CompleteShopifySyncVariables = CompleteShopifySyncInput;\n/**\n * The return value from executing complete on shopifySync\n * Is a GadgetRecord of the model's type.\n **/\nexport type CompleteShopifySyncResult<Options extends CompleteShopifySyncOptions> = SelectedShopifySyncOrDefault<Options> extends void ?\n      void :\n      GadgetRecord<SelectedShopifySyncOrDefault<Options>>;\n/**\n * The fully-qualified, expanded form of the inputs for executing the error action.\n * The flattened style should be preferred over this style, but for models with ambiguous API identifiers, this style can be used to remove any ambiguity.\n **/\nexport type FullyQualifiedErrorShopifySyncVariables = {\n  shopifySync?: ErrorShopifySyncInput;\n}\n/**\n * The inputs for executing error on shopifySync.\n * This is the flattened style of inputs, suitable for general use, and should be preferred.\n **/\nexport type ErrorShopifySyncVariables = ErrorShopifySyncInput;\n/**\n * The return value from executing error on shopifySync\n * Is a GadgetRecord of the model's type.\n **/\nexport type ErrorShopifySyncResult<Options extends ErrorShopifySyncOptions> = SelectedShopifySyncOrDefault<Options> extends void ?\n      void :\n      GadgetRecord<SelectedShopifySyncOrDefault<Options>>;\n/**\n * The fully-qualified, expanded form of the inputs for executing the run action.\n * The flattened style should be preferred over this style, but for models with ambiguous API identifiers, this style can be used to remove any ambiguity.\n **/\nexport type FullyQualifiedRunShopifySyncVariables = {\n  shopifySync?: RunShopifySyncInput;\n  startReason?: (Scalars['String'] | null) | null;\n}\n/**\n * The inputs for executing run on shopifySync.\n * This is the flattened style of inputs, suitable for general use, and should be preferred.\n **/\nexport type RunShopifySyncVariables = RunShopifySyncInput;\n/**\n * The return value from executing run on shopifySync\n * Is a GadgetRecord of the model's type.\n **/\nexport type RunShopifySyncResult<Options extends RunShopifySyncOptions> = SelectedShopifySyncOrDefault<Options> extends void ?\n      void :\n      GadgetRecord<SelectedShopifySyncOrDefault<Options>>;\n/**\n * The fully-qualified, expanded form of the inputs for executing the upsert action.\n * The flattened style should be preferred over this style, but for models with ambiguous API identifiers, this style can be used to remove any ambiguity.\n **/\nexport type FullyQualifiedUpsertShopifySyncVariables = {\n  on?: ((Scalars['String'] | null))[];\n  shopifySync?: UpsertShopifySyncInput;\n  startReason?: (Scalars['String'] | null) | null;\n}\n/**\n * The inputs for executing upsert on shopifySync.\n * This is the flattened style of inputs, suitable for general use, and should be preferred.\n **/\nexport type UpsertShopifySyncVariables = Omit<\n     UpsertShopifySyncInput,\n     \"on\"\n   > & {\n     on?: ((Scalars['String'] | null))[];\n   };\n/**\n * The return value from executing upsert on shopifySync\n *\n **/\nexport type UpsertShopifySyncResult<Options extends UpsertShopifySyncOptions> = SelectedShopifySyncOrDefault<Options> extends void ?\n      void :\n      GadgetRecord<SelectedShopifySyncOrDefault<Options>>;\n\n/**\n * A manager for the shopifySync model with all the available operations for reading and writing to it.*/\nexport type ShopifySyncManager = {\n  readonly connection: GadgetConnection;\n\n  findOne: {\n      /**\n       * Finds one shopifySync by ID. Returns a `Promise` that resolves to the record if found and rejects the promise if the record isn't found.\n       **/\n      <Options extends FindOneShopifySyncOptions>(id: string, options?: LimitToKnownKeys<Options, FindOneShopifySyncOptions>): PromiseOrLiveIterator<Options,ShopifySyncRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultShopifySyncSelection;\n      namespace: null;\n      optionsType: FindOneShopifySyncOptions;\n      selectionType: AvailableShopifySyncSelection;\n      schemaType: Query[\"shopifySync\"];\n    }\n  maybeFindOne: {\n      /**\n       * Finds one shopifySync by ID. Returns a `Promise` that resolves to the record if found and returns null otherwise.\n       **/\n      <Options extends MaybeFindOneShopifySyncOptions>(id: string, options?: LimitToKnownKeys<Options, MaybeFindOneShopifySyncOptions>): PromiseOrLiveIterator<Options,ShopifySyncRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: MaybeFindOneShopifySyncOptions;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultShopifySyncSelection;\n      namespace: null;\n      selectionType: AvailableShopifySyncSelection;\n      schemaType: Query[\"shopifySync\"];\n    }\n  findMany: {\n      /**\n       * Finds many shopifySync. Returns a `Promise` for a `GadgetRecordList` of objects according to the passed `options`. Optionally filters the returned records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindManyShopifySyncsOptions>(options?: LimitToKnownKeys<Options, FindManyShopifySyncsOptions>): PromiseOrLiveIterator<Options,GadgetRecordList<ShopifySyncRecord<Options[\"select\"]>>>;\n      type: 'findMany';\n      operationName: typeof pluralModelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: FindManyShopifySyncsOptions;\n      defaultSelection: typeof DefaultShopifySyncSelection;\n      namespace: null;\n      selectionType: AvailableShopifySyncSelection;\n      schemaType: Query[\"shopifySync\"];\n    }\n  findFirst: {\n      /**\n       * Finds the first matching shopifySync. Returns a `Promise` that resolves to a record if found and rejects the promise if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindFirstShopifySyncOptions>(options?: LimitToKnownKeys<Options, FindFirstShopifySyncOptions>): PromiseOrLiveIterator<Options,ShopifySyncRecord<Options[\"select\"]>>;\n      type: 'findFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: FindFirstShopifySyncOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifySyncSelection;\n      namespace: null;\n      selectionType: AvailableShopifySyncSelection;\n      schemaType: Query[\"shopifySync\"];\n    }\n  maybeFindFirst: {\n      /**\n       * Finds the first matching shopifySync. Returns a `Promise` that resolves to a record if found, or null if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` pagination options.\n       **/\n      <Options extends MaybeFindFirstShopifySyncOptions>(options?: LimitToKnownKeys<Options, MaybeFindFirstShopifySyncOptions>): PromiseOrLiveIterator<Options,ShopifySyncRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: MaybeFindFirstShopifySyncOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifySyncSelection;\n      namespace: null;\n      selectionType: AvailableShopifySyncSelection;\n      schemaType: Query[\"shopifySync\"];\n    }\n  findById: {\n      /**\n      * Finds one shopifySync by its id. Returns a Promise that resolves to the record if found and rejects the promise if the record isn't found.\n      **/\n      <Options extends FindOneShopifySyncOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneShopifySyncOptions>): PromiseOrLiveIterator<Options,ShopifySyncRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneShopifySyncOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifySyncSelection;\n      namespace: null;\n      selectionType: AvailableShopifySyncSelection;\n      schemaType: Query[\"shopifySync\"];\n    }\n  maybeFindById: {\n      /**\n      * Finds one shopifySync by its id. Returns a Promise that resolves to the record if found and returns null if the record isn't found.\n      **/\n      <Options extends FindOneShopifySyncOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneShopifySyncOptions>): Promise<ShopifySyncRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneShopifySyncOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifySyncSelection;\n      namespace: null;\n      selectionType: AvailableShopifySyncSelection;\n      schemaType: Query[\"shopifySync\"];\n    }\n  abort: {\n      /**\n       * Executes the abort actionon one record specified by `id`.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the flat style, all-params-together overload that most use cases should use.\n      *\n      * @example\n      * * const shopifySyncRecord = await api.shopifySync.abort(\"1\", {\n        *   domain: \"example value for domain\",\n        *   errorDetails: \"example value for errorDetails\",\n        *   errorMessage: \"example value for errorMessage\",\n        *   force: true,\n        *   syncSince: \"2025-08-01T00:00:00.000+00:00\",\n        * });\n      **/\n      <Options extends AbortShopifySyncOptions>(\n        id: string,\n        variables: AbortShopifySyncVariables,\n        options?: LimitToKnownKeys<Options, AbortShopifySyncOptions>\n      ): Promise<AbortShopifySyncResult<Options>>;\n      /**\n       * Executes the abort actionon one record specified by `id`.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the fully qualified, nested api identifier style overload that should be used when there's an ambiguity between an action param and a model field.\n      *\n      * @example\n      * * const shopifySyncRecord = await api.shopifySync.abort(\"1\", {\n        *   shopifySync: {\n        *     domain: \"example value for domain\",\n        *     errorDetails: \"example value for errorDetails\",\n        *     errorMessage: \"example value for errorMessage\",\n        *     force: true,\n        *     syncSince: \"2025-08-01T00:00:00.000+00:00\",\n        *   },\n        * });\n      **/\n      <Options extends AbortShopifySyncOptions>(\n        id: string,\n        variables: FullyQualifiedAbortShopifySyncVariables,\n        options?: LimitToKnownKeys<Options, AbortShopifySyncOptions>\n      ): Promise<AbortShopifySyncResult<Options>>;\n      type: 'action';\n      operationName: 'abortShopifySync';\n      operationReturnType: 'AbortShopifySync';\n      namespace: null;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      operatesWithRecordIdentity: true;\n      modelSelectionField: typeof modelApiIdentifier;\n      isBulk: false;\n      isDeleter: false;\n      variables: {\n          id: { required: true, type: 'GadgetID' },\n          shopifySync: { required: false, type: 'AbortShopifySyncInput' }\n        };\n      variablesType: (\n              { id: string }\n              & (FullyQualifiedAbortShopifySyncVariables | AbortShopifySyncVariables)\n            );\n      hasAmbiguousIdentifier: false;\n      paramOnlyVariables: [];\n      hasReturnType: false;\n      acceptsModelInput: true;\n      hasCreateOrUpdateEffect: true;\n      imports: [ 'AbortShopifySyncInput' ];\n      optionsType: AbortShopifySyncOptions;\n      selectionType: AvailableShopifySyncSelection;\n      schemaType: Query[\"shopifySync\"];\n      defaultSelection: typeof DefaultShopifySyncSelection;\n    }\n  bulkAbort: {\n      /**\n        * Executes the bulkAbort action with the given inputs.\n        */\n       <Options extends AbortShopifySyncOptions>(\n          inputs: (FullyQualifiedAbortShopifySyncVariables | AbortShopifySyncVariables & { id: string })[],\n          options?: LimitToKnownKeys<Options, AbortShopifySyncOptions>\n       ): Promise<AbortShopifySyncResult<Options>[]>\n      type: 'action';\n      operationName: 'bulkAbortShopifySyncs';\n      isBulk: true;\n      isDeleter: false;\n      hasReturnType: false;\n      acceptsModelInput: true;\n      operatesWithRecordIdentity: true;\n      singleActionFunctionName: 'abort';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      modelSelectionField: typeof pluralModelApiIdentifier;\n      optionsType: AbortShopifySyncOptions;\n      namespace: null;\n      variables: { inputs: { required: true, type: '[BulkAbortShopifySyncsInput!]' } };\n      variablesType: (FullyQualifiedAbortShopifySyncVariables | AbortShopifySyncVariables & { id: string })[];\n      paramOnlyVariables: [];\n      selectionType: AvailableShopifySyncSelection;\n      schemaType: Query[\"shopifySync\"];\n      defaultSelection: typeof DefaultShopifySyncSelection;\n    }\n  complete: {\n      /**\n       * Executes the complete actionon one record specified by `id`.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the flat style, all-params-together overload that most use cases should use.\n      *\n      * @example\n      * * const shopifySyncRecord = await api.shopifySync.complete(\"1\", {\n        *   domain: \"example value for domain\",\n        *   errorDetails: \"example value for errorDetails\",\n        *   errorMessage: \"example value for errorMessage\",\n        *   force: true,\n        *   syncSince: \"2025-08-01T00:00:00.000+00:00\",\n        * });\n      **/\n      <Options extends CompleteShopifySyncOptions>(\n        id: string,\n        variables: CompleteShopifySyncVariables,\n        options?: LimitToKnownKeys<Options, CompleteShopifySyncOptions>\n      ): Promise<CompleteShopifySyncResult<Options>>;\n      /**\n       * Executes the complete actionon one record specified by `id`.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the fully qualified, nested api identifier style overload that should be used when there's an ambiguity between an action param and a model field.\n      *\n      * @example\n      * * const shopifySyncRecord = await api.shopifySync.complete(\"1\", {\n        *   shopifySync: {\n        *     domain: \"example value for domain\",\n        *     errorDetails: \"example value for errorDetails\",\n        *     errorMessage: \"example value for errorMessage\",\n        *     force: true,\n        *     syncSince: \"2025-08-01T00:00:00.000+00:00\",\n        *   },\n        * });\n      **/\n      <Options extends CompleteShopifySyncOptions>(\n        id: string,\n        variables: FullyQualifiedCompleteShopifySyncVariables,\n        options?: LimitToKnownKeys<Options, CompleteShopifySyncOptions>\n      ): Promise<CompleteShopifySyncResult<Options>>;\n      type: 'action';\n      operationName: 'completeShopifySync';\n      operationReturnType: 'CompleteShopifySync';\n      namespace: null;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      operatesWithRecordIdentity: true;\n      modelSelectionField: typeof modelApiIdentifier;\n      isBulk: false;\n      isDeleter: false;\n      variables: {\n          id: { required: true, type: 'GadgetID' },\n          shopifySync: { required: false, type: 'CompleteShopifySyncInput' }\n        };\n      variablesType: (\n              { id: string }\n              & (FullyQualifiedCompleteShopifySyncVariables | CompleteShopifySyncVariables)\n            );\n      hasAmbiguousIdentifier: false;\n      paramOnlyVariables: [];\n      hasReturnType: false;\n      acceptsModelInput: true;\n      hasCreateOrUpdateEffect: true;\n      imports: [ 'CompleteShopifySyncInput' ];\n      optionsType: CompleteShopifySyncOptions;\n      selectionType: AvailableShopifySyncSelection;\n      schemaType: Query[\"shopifySync\"];\n      defaultSelection: typeof DefaultShopifySyncSelection;\n    }\n  bulkComplete: {\n      /**\n        * Executes the bulkComplete action with the given inputs.\n        */\n       <Options extends CompleteShopifySyncOptions>(\n          inputs: (FullyQualifiedCompleteShopifySyncVariables | CompleteShopifySyncVariables & { id: string })[],\n          options?: LimitToKnownKeys<Options, CompleteShopifySyncOptions>\n       ): Promise<CompleteShopifySyncResult<Options>[]>\n      type: 'action';\n      operationName: 'bulkCompleteShopifySyncs';\n      isBulk: true;\n      isDeleter: false;\n      hasReturnType: false;\n      acceptsModelInput: true;\n      operatesWithRecordIdentity: true;\n      singleActionFunctionName: 'complete';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      modelSelectionField: typeof pluralModelApiIdentifier;\n      optionsType: CompleteShopifySyncOptions;\n      namespace: null;\n      variables: {\n          inputs: { required: true, type: '[BulkCompleteShopifySyncsInput!]' }\n        };\n      variablesType: (FullyQualifiedCompleteShopifySyncVariables | CompleteShopifySyncVariables & { id: string })[];\n      paramOnlyVariables: [];\n      selectionType: AvailableShopifySyncSelection;\n      schemaType: Query[\"shopifySync\"];\n      defaultSelection: typeof DefaultShopifySyncSelection;\n    }\n  error: {\n      /**\n       * Executes the error actionon one record specified by `id`.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the flat style, all-params-together overload that most use cases should use.\n      *\n      * @example\n      * * const shopifySyncRecord = await api.shopifySync.error(\"1\", {\n        *   domain: \"example value for domain\",\n        *   errorDetails: \"example value for errorDetails\",\n        *   errorMessage: \"example value for errorMessage\",\n        *   force: true,\n        *   syncSince: \"2025-08-01T00:00:00.000+00:00\",\n        * });\n      **/\n      <Options extends ErrorShopifySyncOptions>(\n        id: string,\n        variables: ErrorShopifySyncVariables,\n        options?: LimitToKnownKeys<Options, ErrorShopifySyncOptions>\n      ): Promise<ErrorShopifySyncResult<Options>>;\n      /**\n       * Executes the error actionon one record specified by `id`.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the fully qualified, nested api identifier style overload that should be used when there's an ambiguity between an action param and a model field.\n      *\n      * @example\n      * * const shopifySyncRecord = await api.shopifySync.error(\"1\", {\n        *   shopifySync: {\n        *     domain: \"example value for domain\",\n        *     errorDetails: \"example value for errorDetails\",\n        *     errorMessage: \"example value for errorMessage\",\n        *     force: true,\n        *     syncSince: \"2025-08-01T00:00:00.000+00:00\",\n        *   },\n        * });\n      **/\n      <Options extends ErrorShopifySyncOptions>(\n        id: string,\n        variables: FullyQualifiedErrorShopifySyncVariables,\n        options?: LimitToKnownKeys<Options, ErrorShopifySyncOptions>\n      ): Promise<ErrorShopifySyncResult<Options>>;\n      type: 'action';\n      operationName: 'errorShopifySync';\n      operationReturnType: 'ErrorShopifySync';\n      namespace: null;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      operatesWithRecordIdentity: true;\n      modelSelectionField: typeof modelApiIdentifier;\n      isBulk: false;\n      isDeleter: false;\n      variables: {\n          id: { required: true, type: 'GadgetID' },\n          shopifySync: { required: false, type: 'ErrorShopifySyncInput' }\n        };\n      variablesType: (\n              { id: string }\n              & (FullyQualifiedErrorShopifySyncVariables | ErrorShopifySyncVariables)\n            );\n      hasAmbiguousIdentifier: false;\n      paramOnlyVariables: [];\n      hasReturnType: false;\n      acceptsModelInput: true;\n      hasCreateOrUpdateEffect: true;\n      imports: [ 'ErrorShopifySyncInput' ];\n      optionsType: ErrorShopifySyncOptions;\n      selectionType: AvailableShopifySyncSelection;\n      schemaType: Query[\"shopifySync\"];\n      defaultSelection: typeof DefaultShopifySyncSelection;\n    }\n  bulkError: {\n      /**\n        * Executes the bulkError action with the given inputs.\n        */\n       <Options extends ErrorShopifySyncOptions>(\n          inputs: (FullyQualifiedErrorShopifySyncVariables | ErrorShopifySyncVariables & { id: string })[],\n          options?: LimitToKnownKeys<Options, ErrorShopifySyncOptions>\n       ): Promise<ErrorShopifySyncResult<Options>[]>\n      type: 'action';\n      operationName: 'bulkErrorShopifySyncs';\n      isBulk: true;\n      isDeleter: false;\n      hasReturnType: false;\n      acceptsModelInput: true;\n      operatesWithRecordIdentity: true;\n      singleActionFunctionName: 'error';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      modelSelectionField: typeof pluralModelApiIdentifier;\n      optionsType: ErrorShopifySyncOptions;\n      namespace: null;\n      variables: { inputs: { required: true, type: '[BulkErrorShopifySyncsInput!]' } };\n      variablesType: (FullyQualifiedErrorShopifySyncVariables | ErrorShopifySyncVariables & { id: string })[];\n      paramOnlyVariables: [];\n      selectionType: AvailableShopifySyncSelection;\n      schemaType: Query[\"shopifySync\"];\n      defaultSelection: typeof DefaultShopifySyncSelection;\n    }\n  run: {\n      /**\n       * Executes the run action.Accepts the parameters for the action via the `variables` argument.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the flat style, all-params-together overload that most use cases should use.\n      *\n      * @example\n      * * const shopifySyncRecord = await api.shopifySync.run({\n        *   domain: \"example value for domain\",\n        *   errorDetails: \"example value for errorDetails\",\n        *   errorMessage: \"example value for errorMessage\",\n        *   shop: {\n        *     _link: \"1\",\n        *   },\n        *   startReason: \"example value for startReason\",\n        *   syncSince: \"2025-08-01T00:00:00.000+00:00\",\n        * });\n      **/\n      <Options extends RunShopifySyncOptions>(\n      \n        variables: RunShopifySyncVariables,\n        options?: LimitToKnownKeys<Options, RunShopifySyncOptions>\n      ): Promise<RunShopifySyncResult<Options>>;\n      /**\n       * Executes the run action.Accepts the parameters for the action via the `variables` argument.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the fully qualified, nested api identifier style overload that should be used when there's an ambiguity between an action param and a model field.\n      *\n      * @example\n      * * const shopifySyncRecord = await api.shopifySync.run({\n        *   shopifySync: {\n        *     domain: \"example value for domain\",\n        *     errorDetails: \"example value for errorDetails\",\n        *     errorMessage: \"example value for errorMessage\",\n        *     shop: {\n        *       _link: \"1\",\n        *     },\n        *     syncSince: \"2025-08-01T00:00:00.000+00:00\",\n        *   },\n        *   startReason: \"example value for startReason\",\n        * });\n      **/\n      <Options extends RunShopifySyncOptions>(\n      \n        variables: FullyQualifiedRunShopifySyncVariables,\n        options?: LimitToKnownKeys<Options, RunShopifySyncOptions>\n      ): Promise<RunShopifySyncResult<Options>>;\n      type: 'action';\n      operationName: 'runShopifySync';\n      operationReturnType: 'RunShopifySync';\n      namespace: null;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      operatesWithRecordIdentity: false;\n      modelSelectionField: typeof modelApiIdentifier;\n      isBulk: false;\n      isDeleter: false;\n      variables: {\n          shopifySync: { required: false, type: 'RunShopifySyncInput' },\n          startReason: { required: false, type: 'String' }\n        };\n      variablesType: ((\n               \n               & (FullyQualifiedRunShopifySyncVariables | RunShopifySyncVariables)\n             ) | undefined);\n      hasAmbiguousIdentifier: false;\n      paramOnlyVariables: [];\n      hasReturnType: false;\n      acceptsModelInput: true;\n      hasCreateOrUpdateEffect: true;\n      imports: [ 'RunShopifySyncInput', 'Scalars' ];\n      optionsType: RunShopifySyncOptions;\n      selectionType: AvailableShopifySyncSelection;\n      schemaType: Query[\"shopifySync\"];\n      defaultSelection: typeof DefaultShopifySyncSelection;\n    }\n  bulkRun: {\n      /**\n        * Executes the bulkRun action with the given inputs.\n        */\n       <Options extends RunShopifySyncOptions>(\n          inputs: (FullyQualifiedRunShopifySyncVariables | RunShopifySyncVariables)[],\n          options?: LimitToKnownKeys<Options, RunShopifySyncOptions>\n       ): Promise<RunShopifySyncResult<Options>[]>\n      type: 'action';\n      operationName: 'bulkRunShopifySyncs';\n      isBulk: true;\n      isDeleter: false;\n      hasReturnType: false;\n      acceptsModelInput: true;\n      operatesWithRecordIdentity: false;\n      singleActionFunctionName: 'run';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      modelSelectionField: typeof pluralModelApiIdentifier;\n      optionsType: RunShopifySyncOptions;\n      namespace: null;\n      variables: { inputs: { required: true, type: '[BulkRunShopifySyncsInput!]' } };\n      variablesType: (FullyQualifiedRunShopifySyncVariables | RunShopifySyncVariables)[];\n      paramOnlyVariables: [];\n      selectionType: AvailableShopifySyncSelection;\n      schemaType: Query[\"shopifySync\"];\n      defaultSelection: typeof DefaultShopifySyncSelection;\n    }\n  upsert: {\n      /**\n       * Executes the upsert action.Accepts the parameters for the action via the `variables` argument.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the flat style, all-params-together overload that most use cases should use.\n      *\n      * @example\n      * * const result = await api.shopifySync.upsert({\n        *   domain: \"example value for domain\",\n        *   errorDetails: \"example value for errorDetails\",\n        *   id: \"1\",\n        *   shop: {\n        *     _link: \"1\",\n        *   },\n        *   startReason: \"example value for startReason\",\n        *   syncSince: \"2025-08-01T00:00:00.000+00:00\",\n        * });\n      **/\n      <Options extends UpsertShopifySyncOptions>(\n      \n        variables: UpsertShopifySyncVariables,\n        options?: LimitToKnownKeys<Options, UpsertShopifySyncOptions>\n      ): Promise<UpsertShopifySyncResult<Options>>;\n      /**\n       * Executes the upsert action.Accepts the parameters for the action via the `variables` argument.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the fully qualified, nested api identifier style overload that should be used when there's an ambiguity between an action param and a model field.\n      *\n      * @example\n      * * const result = await api.shopifySync.upsert({\n        *   shopifySync: {\n        *     domain: \"example value for domain\",\n        *     errorDetails: \"example value for errorDetails\",\n        *     id: \"1\",\n        *     shop: {\n        *       _link: \"1\",\n        *     },\n        *     syncSince: \"2025-08-01T00:00:00.000+00:00\",\n        *   },\n        *   startReason: \"example value for startReason\",\n        * });\n      **/\n      <Options extends UpsertShopifySyncOptions>(\n      \n        variables: FullyQualifiedUpsertShopifySyncVariables,\n        options?: LimitToKnownKeys<Options, UpsertShopifySyncOptions>\n      ): Promise<UpsertShopifySyncResult<Options>>;\n      type: 'action';\n      operationName: 'upsertShopifySync';\n      operationReturnType: 'UpsertShopifySync';\n      namespace: null;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      operatesWithRecordIdentity: false;\n      modelSelectionField: typeof modelApiIdentifier;\n      isBulk: false;\n      isDeleter: false;\n      variables: {\n          on: { required: false, type: '[String!]' },\n          shopifySync: { required: false, type: 'UpsertShopifySyncInput' },\n          startReason: { required: false, type: 'String' }\n        };\n      variablesType: ((\n               \n               & (FullyQualifiedUpsertShopifySyncVariables | UpsertShopifySyncVariables)\n             ) | undefined);\n      hasAmbiguousIdentifier: false;\n      paramOnlyVariables: [ 'on' ];\n      hasReturnType: {\n          '... on RunShopifySyncResult': { hasReturnType: false },\n          '... on AbortShopifySyncResult': { hasReturnType: false }\n        };\n      acceptsModelInput: true;\n      hasCreateOrUpdateEffect: true;\n      imports: [ 'Scalars', 'UpsertShopifySyncInput' ];\n      optionsType: UpsertShopifySyncOptions;\n      selectionType: AvailableShopifySyncSelection;\n      schemaType: Query[\"shopifySync\"];\n      defaultSelection: typeof DefaultShopifySyncSelection;\n    }\n  bulkUpsert: {\n      /**\n        * Executes the bulkUpsert action with the given inputs.\n        */\n       <Options extends UpsertShopifySyncOptions>(\n          inputs: (FullyQualifiedUpsertShopifySyncVariables | UpsertShopifySyncVariables)[],\n          options?: LimitToKnownKeys<Options, UpsertShopifySyncOptions>\n       ): Promise<any[]>\n      type: 'action';\n      operationName: 'bulkUpsertShopifySyncs';\n      isBulk: true;\n      isDeleter: false;\n      hasReturnType: false;\n      acceptsModelInput: true;\n      operatesWithRecordIdentity: false;\n      singleActionFunctionName: 'upsert';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      modelSelectionField: typeof pluralModelApiIdentifier;\n      optionsType: UpsertShopifySyncOptions;\n      namespace: null;\n      variables: { inputs: { required: true, type: '[BulkUpsertShopifySyncsInput!]' } };\n      variablesType: (FullyQualifiedUpsertShopifySyncVariables | UpsertShopifySyncVariables)[];\n      paramOnlyVariables: [ 'on' ];\n      selectionType: AvailableShopifySyncSelection;\n      schemaType: Query[\"shopifySync\"];\n      defaultSelection: typeof DefaultShopifySyncSelection;\n    }\n  view: {\n      (query: string, variables?: Record<string, unknown>): Promise<unknown>\n      type: 'computedView';\n      operationName: 'view';\n      gqlFieldName: 'shopifySyncGellyView';\n      namespace: null;\n      imports: [];\n      variables: {\n          query: { type: 'String', required: true },\n          args: { type: 'JSONObject' }\n        };\n      variablesType: Record<string, unknown>;\n      resultType: Promise<unknown>;\n      plan: never;\n    }\n};\n\n/**\n * A manager for the shopifySync model with all the available operations for reading and writing to it.*/\nexport const ShopifySyncManager = buildModelManager(\n  modelApiIdentifier,\n  pluralModelApiIdentifier,\n  DefaultShopifySyncSelection,\n  [\n    {\n      type: 'findOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultShopifySyncSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultShopifySyncSelection,\n      namespace: null\n    },\n    {\n      type: 'findMany',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifySyncSelection,\n      namespace: null\n    },\n    {\n      type: 'findFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifySyncSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifySyncSelection,\n      namespace: null\n    },\n    {\n      type: 'findOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'findById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifySyncSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'maybeFindById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifySyncSelection,\n      namespace: null\n    },\n    {\n      type: 'action',\n      operationName: 'abortShopifySync',\n      operationReturnType: 'AbortShopifySync',\n      functionName: 'abort',\n      namespace: null,\n      modelApiIdentifier: modelApiIdentifier,\n      operatesWithRecordIdentity: true,\n      modelSelectionField: modelApiIdentifier,\n      isBulk: false,\n      isDeleter: false,\n      variables: {\n        id: { required: true, type: 'GadgetID' },\n        shopifySync: { required: false, type: 'AbortShopifySyncInput' }\n      },\n      hasAmbiguousIdentifier: false,\n      paramOnlyVariables: [],\n      hasReturnType: false,\n      acceptsModelInput: true,\n      hasCreateOrUpdateEffect: true,\n      defaultSelection: DefaultShopifySyncSelection\n    },\n    {\n      type: 'action',\n      operationName: 'bulkAbortShopifySyncs',\n      functionName: 'bulkAbort',\n      isBulk: true,\n      isDeleter: false,\n      hasReturnType: false,\n      acceptsModelInput: true,\n      operatesWithRecordIdentity: true,\n      singleActionFunctionName: 'abort',\n      modelApiIdentifier: modelApiIdentifier,\n      modelSelectionField: pluralModelApiIdentifier,\n      namespace: null,\n      variables: {\n        inputs: { required: true, type: '[BulkAbortShopifySyncsInput!]' }\n      },\n      paramOnlyVariables: [],\n      defaultSelection: DefaultShopifySyncSelection\n    },\n    {\n      type: 'action',\n      operationName: 'completeShopifySync',\n      operationReturnType: 'CompleteShopifySync',\n      functionName: 'complete',\n      namespace: null,\n      modelApiIdentifier: modelApiIdentifier,\n      operatesWithRecordIdentity: true,\n      modelSelectionField: modelApiIdentifier,\n      isBulk: false,\n      isDeleter: false,\n      variables: {\n        id: { required: true, type: 'GadgetID' },\n        shopifySync: { required: false, type: 'CompleteShopifySyncInput' }\n      },\n      hasAmbiguousIdentifier: false,\n      paramOnlyVariables: [],\n      hasReturnType: false,\n      acceptsModelInput: true,\n      hasCreateOrUpdateEffect: true,\n      defaultSelection: DefaultShopifySyncSelection\n    },\n    {\n      type: 'action',\n      operationName: 'bulkCompleteShopifySyncs',\n      functionName: 'bulkComplete',\n      isBulk: true,\n      isDeleter: false,\n      hasReturnType: false,\n      acceptsModelInput: true,\n      operatesWithRecordIdentity: true,\n      singleActionFunctionName: 'complete',\n      modelApiIdentifier: modelApiIdentifier,\n      modelSelectionField: pluralModelApiIdentifier,\n      namespace: null,\n      variables: {\n        inputs: { required: true, type: '[BulkCompleteShopifySyncsInput!]' }\n      },\n      paramOnlyVariables: [],\n      defaultSelection: DefaultShopifySyncSelection\n    },\n    {\n      type: 'action',\n      operationName: 'errorShopifySync',\n      operationReturnType: 'ErrorShopifySync',\n      functionName: 'error',\n      namespace: null,\n      modelApiIdentifier: modelApiIdentifier,\n      operatesWithRecordIdentity: true,\n      modelSelectionField: modelApiIdentifier,\n      isBulk: false,\n      isDeleter: false,\n      variables: {\n        id: { required: true, type: 'GadgetID' },\n        shopifySync: { required: false, type: 'ErrorShopifySyncInput' }\n      },\n      hasAmbiguousIdentifier: false,\n      paramOnlyVariables: [],\n      hasReturnType: false,\n      acceptsModelInput: true,\n      hasCreateOrUpdateEffect: true,\n      defaultSelection: DefaultShopifySyncSelection\n    },\n    {\n      type: 'action',\n      operationName: 'bulkErrorShopifySyncs',\n      functionName: 'bulkError',\n      isBulk: true,\n      isDeleter: false,\n      hasReturnType: false,\n      acceptsModelInput: true,\n      operatesWithRecordIdentity: true,\n      singleActionFunctionName: 'error',\n      modelApiIdentifier: modelApiIdentifier,\n      modelSelectionField: pluralModelApiIdentifier,\n      namespace: null,\n      variables: {\n        inputs: { required: true, type: '[BulkErrorShopifySyncsInput!]' }\n      },\n      paramOnlyVariables: [],\n      defaultSelection: DefaultShopifySyncSelection\n    },\n    {\n      type: 'action',\n      operationName: 'runShopifySync',\n      operationReturnType: 'RunShopifySync',\n      functionName: 'run',\n      namespace: null,\n      modelApiIdentifier: modelApiIdentifier,\n      operatesWithRecordIdentity: false,\n      modelSelectionField: modelApiIdentifier,\n      isBulk: false,\n      isDeleter: false,\n      variables: {\n        shopifySync: { required: false, type: 'RunShopifySyncInput' },\n        startReason: { required: false, type: 'String' }\n      },\n      hasAmbiguousIdentifier: false,\n      paramOnlyVariables: [],\n      hasReturnType: false,\n      acceptsModelInput: true,\n      hasCreateOrUpdateEffect: true,\n      defaultSelection: DefaultShopifySyncSelection\n    },\n    {\n      type: 'action',\n      operationName: 'bulkRunShopifySyncs',\n      functionName: 'bulkRun',\n      isBulk: true,\n      isDeleter: false,\n      hasReturnType: false,\n      acceptsModelInput: true,\n      operatesWithRecordIdentity: false,\n      singleActionFunctionName: 'run',\n      modelApiIdentifier: modelApiIdentifier,\n      modelSelectionField: pluralModelApiIdentifier,\n      namespace: null,\n      variables: { inputs: { required: true, type: '[BulkRunShopifySyncsInput!]' } },\n      paramOnlyVariables: [],\n      defaultSelection: DefaultShopifySyncSelection\n    },\n    {\n      type: 'action',\n      operationName: 'upsertShopifySync',\n      operationReturnType: 'UpsertShopifySync',\n      functionName: 'upsert',\n      namespace: null,\n      modelApiIdentifier: modelApiIdentifier,\n      operatesWithRecordIdentity: false,\n      modelSelectionField: modelApiIdentifier,\n      isBulk: false,\n      isDeleter: false,\n      variables: {\n        on: { required: false, type: '[String!]' },\n        shopifySync: { required: false, type: 'UpsertShopifySyncInput' },\n        startReason: { required: false, type: 'String' }\n      },\n      hasAmbiguousIdentifier: false,\n      paramOnlyVariables: [ 'on' ],\n      hasReturnType: {\n        '... on RunShopifySyncResult': { hasReturnType: false },\n        '... on AbortShopifySyncResult': { hasReturnType: false }\n      },\n      acceptsModelInput: true,\n      hasCreateOrUpdateEffect: true,\n      defaultSelection: DefaultShopifySyncSelection\n    },\n    {\n      type: 'action',\n      operationName: 'bulkUpsertShopifySyncs',\n      functionName: 'bulkUpsert',\n      isBulk: true,\n      isDeleter: false,\n      hasReturnType: false,\n      acceptsModelInput: true,\n      operatesWithRecordIdentity: false,\n      singleActionFunctionName: 'upsert',\n      modelApiIdentifier: modelApiIdentifier,\n      modelSelectionField: pluralModelApiIdentifier,\n      namespace: null,\n      variables: {\n        inputs: { required: true, type: '[BulkUpsertShopifySyncsInput!]' }\n      },\n      paramOnlyVariables: [ 'on' ],\n      defaultSelection: DefaultShopifySyncSelection\n    },\n    {\n      type: 'computedView',\n      operationName: 'view',\n      functionName: 'view',\n      gqlFieldName: 'shopifySyncGellyView',\n      namespace: null,\n      variables: {\n        query: { type: 'String', required: true },\n        args: { type: 'JSONObject' }\n      }\n    }\n  ] as const\n) as unknown as {\n  // Gadget generates these model manager classes at runtime dynamically, which means there is no source code for the class. This is done to make the bundle size of the client as small as possible, avoiding a bunch of repeated source code in favour of one small builder function. The TypeScript types above document the exact interface of the constructed class.\n  new(connection: GadgetConnection): ShopifySyncManager;\n};", "import {\n  GadgetConnection,\n  GadgetRecord,\n  GadgetRecordImplementation,\n  GadgetRecordList,\n  GadgetNonUniqueDataError,\n  actionRunner,\n  findManyRunner,\n  findOneRunner,\n  findOneByFieldRunner,\n  FieldSelection,\n  LimitToKnownKeys,\n  Selectable\n} from \"@gadgetinc/api-client-core\";\n\nimport {\n  Query,\n  ExplicitNestingRequired,\n\n  IDsList,\n  PromiseOrLiveIterator,\n  SmsTemplates,\n  AvailableSmsTemplatesSelection,\n  SmsTemplatesSort,\n  SmsTemplatesFilter,\n  CreateSmsTemplatesInput,\n  UpdateSmsTemplatesInput,\n  Scalars,\n  UpsertSmsTemplatesInput\n} from \"../types.js\";\n\nimport { buildModelManager } from \"../builder.js\";\nimport { AvailableSelection, AllFieldsSelected, DefaultSelection, Select, DeepFilterNever } from \"../utils.js\";\n\n/**\n* A type that holds only the selected fields (and nested fields) of smsTemplates. The present fields in the result type of this are dynamic based on the options to each call that uses it.\n* The selected fields are sometimes given by the `Options` at `Options[\"select\"]`, and if a selection isn't made in the options, we use the default selection from above.\n*/\nexport type SelectedSmsTemplatesOrDefault<Options extends Selectable<AvailableSmsTemplatesSelection>> = DeepFilterNever<\n    Select<\n      SmsTemplates,\n      DefaultSelection<\n        AvailableSmsTemplatesSelection,\n        Options,\n        typeof DefaultSmsTemplatesSelection\n      >\n    >\n  >;\n\n/**\n * A type that represents a `GadgetRecord` type for smsTemplates.\n * It selects all fields of the model by default. If you want to represent a record type with a subset of fields, you could pass in an object in the `Selection` type parameter.\n *\n * @example\n * ```ts\n * const someFunction = (record: SmsTemplatesRecord, recordWithName: SmsTemplatesRecord<{ select: { name: true; } }>) => {\n *   // The type of the `record` variable will include all fields of the model.\n *   const name = record.name;\n *   const otherField = record.otherField;\n *\n *   // The type of the `recordWithName` variable will only include the selected fields.\n *   const name = recordWithName.name;\n *   const otherField = recordWithName.otherField; // Type error: Property 'otherField' does not exist on type 'GadgetRecord<{ name: true; }>'.\n * }\n * ```\n */\nexport type SmsTemplatesRecord<Selection extends AvailableSmsTemplatesSelection | undefined = typeof DefaultSmsTemplatesSelection> = DeepFilterNever<\n  GadgetRecord<\n    SelectedSmsTemplatesOrDefault<{\n      select: Selection;\n    }>\n  >\n>;\n\nexport const DefaultSmsTemplatesSelection = {\n     __typename: true,\n     id: true,\n     createdAt: true,\n     smsText: true,\n     title: true,\n     updatedAt: true\n   } as const;\nconst modelApiIdentifier = \"smsTemplates\" as const;\nconst pluralModelApiIdentifier = \"smsTemplatess\" as const;\n/** Options that can be passed to the `SmsTemplatesManager#findOne` method */\n export interface FindOneSmsTemplatesOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableSmsTemplatesSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `SmsTemplatesManager#maybeFindOne` method */\n export interface MaybeFindOneSmsTemplatesOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableSmsTemplatesSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `SmsTemplatesManager#findMany` method */\n export interface FindManySmsTemplatessOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableSmsTemplatesSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: SmsTemplatesSort | SmsTemplatesSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: SmsTemplatesFilter | SmsTemplatesFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n  first?: number | null;\n  last?: number | null;\n  after?: string | null;\n  before?: string | null;\n};\n/** Options that can be passed to the `SmsTemplatesManager#findFirst` method */\n export interface FindFirstSmsTemplatesOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableSmsTemplatesSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: SmsTemplatesSort | SmsTemplatesSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: SmsTemplatesFilter | SmsTemplatesFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\n/** Options that can be passed to the `SmsTemplatesManager#maybeFindFirst` method */\n export interface MaybeFindFirstSmsTemplatesOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableSmsTemplatesSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: SmsTemplatesSort | SmsTemplatesSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: SmsTemplatesFilter | SmsTemplatesFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\nexport interface CreateSmsTemplatesOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableSmsTemplatesSelection;\n};\nexport interface UpdateSmsTemplatesOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableSmsTemplatesSelection;\n};\nexport interface DeleteSmsTemplatesOptions {\n\n};\nexport interface UpsertSmsTemplatesOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableSmsTemplatesSelection;\n};\n/**\n * The fully-qualified, expanded form of the inputs for executing the create action.\n * The flattened style should be preferred over this style, but for models with ambiguous API identifiers, this style can be used to remove any ambiguity.\n **/\nexport type FullyQualifiedCreateSmsTemplatesVariables = {\n  smsTemplates?: CreateSmsTemplatesInput;\n}\n/**\n * The inputs for executing create on smsTemplates.\n * This is the flattened style of inputs, suitable for general use, and should be preferred.\n **/\nexport type CreateSmsTemplatesVariables = CreateSmsTemplatesInput;\n/**\n * The return value from executing create on smsTemplates\n * Is a GadgetRecord of the model's type.\n **/\nexport type CreateSmsTemplatesResult<Options extends CreateSmsTemplatesOptions> = SelectedSmsTemplatesOrDefault<Options> extends void ?\n      void :\n      GadgetRecord<SelectedSmsTemplatesOrDefault<Options>>;\n/**\n * The fully-qualified, expanded form of the inputs for executing the update action.\n * The flattened style should be preferred over this style, but for models with ambiguous API identifiers, this style can be used to remove any ambiguity.\n **/\nexport type FullyQualifiedUpdateSmsTemplatesVariables = {\n  smsTemplates?: UpdateSmsTemplatesInput;\n}\n/**\n * The inputs for executing update on smsTemplates.\n * This is the flattened style of inputs, suitable for general use, and should be preferred.\n **/\nexport type UpdateSmsTemplatesVariables = UpdateSmsTemplatesInput;\n/**\n * The return value from executing update on smsTemplates\n * Is a GadgetRecord of the model's type.\n **/\nexport type UpdateSmsTemplatesResult<Options extends UpdateSmsTemplatesOptions> = SelectedSmsTemplatesOrDefault<Options> extends void ?\n      void :\n      GadgetRecord<SelectedSmsTemplatesOrDefault<Options>>;\n/**\n * The return value from executing delete on smsTemplates\n * Is void because this action deletes the record\n **/\nexport type DeleteSmsTemplatesResult<Options extends DeleteSmsTemplatesOptions> = void;\n/**\n * The fully-qualified, expanded form of the inputs for executing the upsert action.\n * The flattened style should be preferred over this style, but for models with ambiguous API identifiers, this style can be used to remove any ambiguity.\n **/\nexport type FullyQualifiedUpsertSmsTemplatesVariables = {\n  on?: ((Scalars['String'] | null))[];\n  smsTemplates?: UpsertSmsTemplatesInput;\n}\n/**\n * The inputs for executing upsert on smsTemplates.\n * This is the flattened style of inputs, suitable for general use, and should be preferred.\n **/\nexport type UpsertSmsTemplatesVariables = Omit<\n     UpsertSmsTemplatesInput,\n     \"on\"\n   > & {\n     on?: ((Scalars['String'] | null))[];\n   };\n/**\n * The return value from executing upsert on smsTemplates\n *\n **/\nexport type UpsertSmsTemplatesResult<Options extends UpsertSmsTemplatesOptions> = SelectedSmsTemplatesOrDefault<Options> extends void ?\n      void :\n      GadgetRecord<SelectedSmsTemplatesOrDefault<Options>>;\n\n/**\n * A manager for the smsTemplates model with all the available operations for reading and writing to it.*/\nexport type SmsTemplatesManager = {\n  readonly connection: GadgetConnection;\n\n  findOne: {\n      /**\n       * Finds one smsTemplates by ID. Returns a `Promise` that resolves to the record if found and rejects the promise if the record isn't found.\n       **/\n      <Options extends FindOneSmsTemplatesOptions>(id: string, options?: LimitToKnownKeys<Options, FindOneSmsTemplatesOptions>): PromiseOrLiveIterator<Options,SmsTemplatesRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultSmsTemplatesSelection;\n      namespace: null;\n      optionsType: FindOneSmsTemplatesOptions;\n      selectionType: AvailableSmsTemplatesSelection;\n      schemaType: Query[\"smsTemplates\"];\n    }\n  maybeFindOne: {\n      /**\n       * Finds one smsTemplates by ID. Returns a `Promise` that resolves to the record if found and returns null otherwise.\n       **/\n      <Options extends MaybeFindOneSmsTemplatesOptions>(id: string, options?: LimitToKnownKeys<Options, MaybeFindOneSmsTemplatesOptions>): PromiseOrLiveIterator<Options,SmsTemplatesRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: MaybeFindOneSmsTemplatesOptions;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultSmsTemplatesSelection;\n      namespace: null;\n      selectionType: AvailableSmsTemplatesSelection;\n      schemaType: Query[\"smsTemplates\"];\n    }\n  findMany: {\n      /**\n       * Finds many smsTemplates. Returns a `Promise` for a `GadgetRecordList` of objects according to the passed `options`. Optionally filters the returned records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindManySmsTemplatessOptions>(options?: LimitToKnownKeys<Options, FindManySmsTemplatessOptions>): PromiseOrLiveIterator<Options,GadgetRecordList<SmsTemplatesRecord<Options[\"select\"]>>>;\n      type: 'findMany';\n      operationName: typeof pluralModelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: FindManySmsTemplatessOptions;\n      defaultSelection: typeof DefaultSmsTemplatesSelection;\n      namespace: null;\n      selectionType: AvailableSmsTemplatesSelection;\n      schemaType: Query[\"smsTemplates\"];\n    }\n  findFirst: {\n      /**\n       * Finds the first matching smsTemplates. Returns a `Promise` that resolves to a record if found and rejects the promise if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindFirstSmsTemplatesOptions>(options?: LimitToKnownKeys<Options, FindFirstSmsTemplatesOptions>): PromiseOrLiveIterator<Options,SmsTemplatesRecord<Options[\"select\"]>>;\n      type: 'findFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: FindFirstSmsTemplatesOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultSmsTemplatesSelection;\n      namespace: null;\n      selectionType: AvailableSmsTemplatesSelection;\n      schemaType: Query[\"smsTemplates\"];\n    }\n  maybeFindFirst: {\n      /**\n       * Finds the first matching smsTemplates. Returns a `Promise` that resolves to a record if found, or null if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` pagination options.\n       **/\n      <Options extends MaybeFindFirstSmsTemplatesOptions>(options?: LimitToKnownKeys<Options, MaybeFindFirstSmsTemplatesOptions>): PromiseOrLiveIterator<Options,SmsTemplatesRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: MaybeFindFirstSmsTemplatesOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultSmsTemplatesSelection;\n      namespace: null;\n      selectionType: AvailableSmsTemplatesSelection;\n      schemaType: Query[\"smsTemplates\"];\n    }\n  findById: {\n      /**\n      * Finds one smsTemplates by its id. Returns a Promise that resolves to the record if found and rejects the promise if the record isn't found.\n      **/\n      <Options extends FindOneSmsTemplatesOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneSmsTemplatesOptions>): PromiseOrLiveIterator<Options,SmsTemplatesRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneSmsTemplatesOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultSmsTemplatesSelection;\n      namespace: null;\n      selectionType: AvailableSmsTemplatesSelection;\n      schemaType: Query[\"smsTemplates\"];\n    }\n  maybeFindById: {\n      /**\n      * Finds one smsTemplates by its id. Returns a Promise that resolves to the record if found and returns null if the record isn't found.\n      **/\n      <Options extends FindOneSmsTemplatesOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneSmsTemplatesOptions>): Promise<SmsTemplatesRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneSmsTemplatesOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultSmsTemplatesSelection;\n      namespace: null;\n      selectionType: AvailableSmsTemplatesSelection;\n      schemaType: Query[\"smsTemplates\"];\n    }\n  create: {\n      /**\n       * Executes the create action.Accepts the parameters for the action via the `variables` argument.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the flat style, all-params-together overload that most use cases should use.\n      *\n      * @example\n      * * const smsTemplatesRecord = await api.smsTemplates.create({\n        *   smsText: \"example value for smsText\",\n        *   title: \"example value for title\",\n        * });\n      **/\n      <Options extends CreateSmsTemplatesOptions>(\n      \n        variables: CreateSmsTemplatesVariables,\n        options?: LimitToKnownKeys<Options, CreateSmsTemplatesOptions>\n      ): Promise<CreateSmsTemplatesResult<Options>>;\n      /**\n       * Executes the create action.Accepts the parameters for the action via the `variables` argument.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the fully qualified, nested api identifier style overload that should be used when there's an ambiguity between an action param and a model field.\n      *\n      * @example\n      * * const smsTemplatesRecord = await api.smsTemplates.create({\n        *   smsTemplates: {\n        *     smsText: \"example value for smsText\",\n        *     title: \"example value for title\",\n        *   },\n        * });\n      **/\n      <Options extends CreateSmsTemplatesOptions>(\n      \n        variables: FullyQualifiedCreateSmsTemplatesVariables,\n        options?: LimitToKnownKeys<Options, CreateSmsTemplatesOptions>\n      ): Promise<CreateSmsTemplatesResult<Options>>;\n      type: 'action';\n      operationName: 'createSmsTemplates';\n      operationReturnType: 'CreateSmsTemplates';\n      namespace: null;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      operatesWithRecordIdentity: false;\n      modelSelectionField: typeof modelApiIdentifier;\n      isBulk: false;\n      isDeleter: false;\n      variables: { smsTemplates: { required: false, type: 'CreateSmsTemplatesInput' } };\n      variablesType: ((\n               \n               & (FullyQualifiedCreateSmsTemplatesVariables | CreateSmsTemplatesVariables)\n             ) | undefined);\n      hasAmbiguousIdentifier: false;\n      paramOnlyVariables: [];\n      hasReturnType: false;\n      acceptsModelInput: true;\n      hasCreateOrUpdateEffect: true;\n      imports: [ 'CreateSmsTemplatesInput' ];\n      optionsType: CreateSmsTemplatesOptions;\n      selectionType: AvailableSmsTemplatesSelection;\n      schemaType: Query[\"smsTemplates\"];\n      defaultSelection: typeof DefaultSmsTemplatesSelection;\n    }\n  bulkCreate: {\n      /**\n        * Executes the bulkCreate action with the given inputs.\n        */\n       <Options extends CreateSmsTemplatesOptions>(\n          inputs: (FullyQualifiedCreateSmsTemplatesVariables | CreateSmsTemplatesVariables)[],\n          options?: LimitToKnownKeys<Options, CreateSmsTemplatesOptions>\n       ): Promise<CreateSmsTemplatesResult<Options>[]>\n      type: 'action';\n      operationName: 'bulkCreateSmsTemplates';\n      isBulk: true;\n      isDeleter: false;\n      hasReturnType: false;\n      acceptsModelInput: true;\n      operatesWithRecordIdentity: false;\n      singleActionFunctionName: 'create';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      modelSelectionField: typeof pluralModelApiIdentifier;\n      optionsType: CreateSmsTemplatesOptions;\n      namespace: null;\n      variables: { inputs: { required: true, type: '[BulkCreateSmsTemplatesInput!]' } };\n      variablesType: (FullyQualifiedCreateSmsTemplatesVariables | CreateSmsTemplatesVariables)[];\n      paramOnlyVariables: [];\n      selectionType: AvailableSmsTemplatesSelection;\n      schemaType: Query[\"smsTemplates\"];\n      defaultSelection: typeof DefaultSmsTemplatesSelection;\n    }\n  update: {\n      /**\n       * Executes the update actionon one record specified by `id`.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the flat style, all-params-together overload that most use cases should use.\n      *\n      * @example\n      * * const smsTemplatesRecord = await api.smsTemplates.update(\"1\", {\n        *   smsText: \"example value for smsText\",\n        *   title: \"example value for title\",\n        * });\n      **/\n      <Options extends UpdateSmsTemplatesOptions>(\n        id: string,\n        variables: UpdateSmsTemplatesVariables,\n        options?: LimitToKnownKeys<Options, UpdateSmsTemplatesOptions>\n      ): Promise<UpdateSmsTemplatesResult<Options>>;\n      /**\n       * Executes the update actionon one record specified by `id`.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the fully qualified, nested api identifier style overload that should be used when there's an ambiguity between an action param and a model field.\n      *\n      * @example\n      * * const smsTemplatesRecord = await api.smsTemplates.update(\"1\", {\n        *   smsTemplates: {\n        *     smsText: \"example value for smsText\",\n        *     title: \"example value for title\",\n        *   },\n        * });\n      **/\n      <Options extends UpdateSmsTemplatesOptions>(\n        id: string,\n        variables: FullyQualifiedUpdateSmsTemplatesVariables,\n        options?: LimitToKnownKeys<Options, UpdateSmsTemplatesOptions>\n      ): Promise<UpdateSmsTemplatesResult<Options>>;\n      type: 'action';\n      operationName: 'updateSmsTemplates';\n      operationReturnType: 'UpdateSmsTemplates';\n      namespace: null;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      operatesWithRecordIdentity: true;\n      modelSelectionField: typeof modelApiIdentifier;\n      isBulk: false;\n      isDeleter: false;\n      variables: {\n          id: { required: true, type: 'GadgetID' },\n          smsTemplates: { required: false, type: 'UpdateSmsTemplatesInput' }\n        };\n      variablesType: (\n              { id: string }\n              & (FullyQualifiedUpdateSmsTemplatesVariables | UpdateSmsTemplatesVariables)\n            );\n      hasAmbiguousIdentifier: false;\n      paramOnlyVariables: [];\n      hasReturnType: false;\n      acceptsModelInput: true;\n      hasCreateOrUpdateEffect: true;\n      imports: [ 'UpdateSmsTemplatesInput' ];\n      optionsType: UpdateSmsTemplatesOptions;\n      selectionType: AvailableSmsTemplatesSelection;\n      schemaType: Query[\"smsTemplates\"];\n      defaultSelection: typeof DefaultSmsTemplatesSelection;\n    }\n  bulkUpdate: {\n      /**\n        * Executes the bulkUpdate action with the given inputs.\n        */\n       <Options extends UpdateSmsTemplatesOptions>(\n          inputs: (FullyQualifiedUpdateSmsTemplatesVariables | UpdateSmsTemplatesVariables & { id: string })[],\n          options?: LimitToKnownKeys<Options, UpdateSmsTemplatesOptions>\n       ): Promise<UpdateSmsTemplatesResult<Options>[]>\n      type: 'action';\n      operationName: 'bulkUpdateSmsTemplates';\n      isBulk: true;\n      isDeleter: false;\n      hasReturnType: false;\n      acceptsModelInput: true;\n      operatesWithRecordIdentity: true;\n      singleActionFunctionName: 'update';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      modelSelectionField: typeof pluralModelApiIdentifier;\n      optionsType: UpdateSmsTemplatesOptions;\n      namespace: null;\n      variables: { inputs: { required: true, type: '[BulkUpdateSmsTemplatesInput!]' } };\n      variablesType: (FullyQualifiedUpdateSmsTemplatesVariables | UpdateSmsTemplatesVariables & { id: string })[];\n      paramOnlyVariables: [];\n      selectionType: AvailableSmsTemplatesSelection;\n      schemaType: Query[\"smsTemplates\"];\n      defaultSelection: typeof DefaultSmsTemplatesSelection;\n    }\n  delete: {\n      /**\n       * Executes the delete actionon one record specified by `id`.Deletes the record on the server. Returns a Promise that resolves if the delete succeeds.\n      *\n      * This is the fully qualified, nested api identifier style overload that should be used when there's an ambiguity between an action param and a model field.\n      *\n      * @example\n      * * await api.smsTemplates.delete(\"1\");\n      **/\n      <Options extends DeleteSmsTemplatesOptions>(\n        id: string,\n      \n        options?: LimitToKnownKeys<Options, DeleteSmsTemplatesOptions>\n      ): Promise<DeleteSmsTemplatesResult<Options>>;\n      type: 'action';\n      operationName: 'deleteSmsTemplates';\n      operationReturnType: 'DeleteSmsTemplates';\n      namespace: null;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      operatesWithRecordIdentity: true;\n      modelSelectionField: typeof modelApiIdentifier;\n      isBulk: false;\n      isDeleter: true;\n      variables: { id: { required: true, type: 'GadgetID' } };\n      variablesType: (\n              { id: string }\n              \n            );\n      hasAmbiguousIdentifier: false;\n      paramOnlyVariables: [];\n      hasReturnType: false;\n      acceptsModelInput: false;\n      hasCreateOrUpdateEffect: false;\n      imports: [];\n      optionsType: DeleteSmsTemplatesOptions;\n      selectionType: Record<string, never>;\n      schemaType: null;\n      defaultSelection: null;\n    }\n  bulkDelete: {\n      /**\n        * Executes the bulkDelete action with the given inputs.Deletes the records on the server.\n        */\n       <Options extends DeleteSmsTemplatesOptions>(\n          ids: string[],\n          options?: LimitToKnownKeys<Options, DeleteSmsTemplatesOptions>\n       ): Promise<DeleteSmsTemplatesResult<Options>[]>\n      type: 'action';\n      operationName: 'bulkDeleteSmsTemplates';\n      isBulk: true;\n      isDeleter: true;\n      hasReturnType: false;\n      acceptsModelInput: false;\n      operatesWithRecordIdentity: true;\n      singleActionFunctionName: 'delete';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      modelSelectionField: typeof pluralModelApiIdentifier;\n      optionsType: DeleteSmsTemplatesOptions;\n      namespace: null;\n      variables: { ids: { required: true, type: '[GadgetID!]' } };\n      variablesType: IDsList | undefined;\n      paramOnlyVariables: [];\n      selectionType: Record<string, never>;\n      schemaType: null;\n      defaultSelection: null;\n    }\n  upsert: {\n      /**\n       * Executes the upsert action.Accepts the parameters for the action via the `variables` argument.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the flat style, all-params-together overload that most use cases should use.\n      *\n      * @example\n      * * const result = await api.smsTemplates.upsert({\n        *   id: \"1\",\n        *   smsText: \"example value for smsText\",\n        *   title: \"example value for title\",\n        * });\n      **/\n      <Options extends UpsertSmsTemplatesOptions>(\n      \n        variables: UpsertSmsTemplatesVariables,\n        options?: LimitToKnownKeys<Options, UpsertSmsTemplatesOptions>\n      ): Promise<UpsertSmsTemplatesResult<Options>>;\n      /**\n       * Executes the upsert action.Accepts the parameters for the action via the `variables` argument.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the fully qualified, nested api identifier style overload that should be used when there's an ambiguity between an action param and a model field.\n      *\n      * @example\n      * * const result = await api.smsTemplates.upsert({\n        *   smsTemplates: {\n        *     id: \"1\",\n        *     smsText: \"example value for smsText\",\n        *     title: \"example value for title\",\n        *   },\n        * });\n      **/\n      <Options extends UpsertSmsTemplatesOptions>(\n      \n        variables: FullyQualifiedUpsertSmsTemplatesVariables,\n        options?: LimitToKnownKeys<Options, UpsertSmsTemplatesOptions>\n      ): Promise<UpsertSmsTemplatesResult<Options>>;\n      type: 'action';\n      operationName: 'upsertSmsTemplates';\n      operationReturnType: 'UpsertSmsTemplates';\n      namespace: null;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      operatesWithRecordIdentity: false;\n      modelSelectionField: typeof modelApiIdentifier;\n      isBulk: false;\n      isDeleter: false;\n      variables: {\n          on: { required: false, type: '[String!]' },\n          smsTemplates: { required: false, type: 'UpsertSmsTemplatesInput' }\n        };\n      variablesType: ((\n               \n               & (FullyQualifiedUpsertSmsTemplatesVariables | UpsertSmsTemplatesVariables)\n             ) | undefined);\n      hasAmbiguousIdentifier: false;\n      paramOnlyVariables: [ 'on' ];\n      hasReturnType: {\n          '... on CreateSmsTemplatesResult': { hasReturnType: false },\n          '... on UpdateSmsTemplatesResult': { hasReturnType: false }\n        };\n      acceptsModelInput: true;\n      hasCreateOrUpdateEffect: true;\n      imports: [ 'Scalars', 'UpsertSmsTemplatesInput' ];\n      optionsType: UpsertSmsTemplatesOptions;\n      selectionType: AvailableSmsTemplatesSelection;\n      schemaType: Query[\"smsTemplates\"];\n      defaultSelection: typeof DefaultSmsTemplatesSelection;\n    }\n  bulkUpsert: {\n      /**\n        * Executes the bulkUpsert action with the given inputs.\n        */\n       <Options extends UpsertSmsTemplatesOptions>(\n          inputs: (FullyQualifiedUpsertSmsTemplatesVariables | UpsertSmsTemplatesVariables)[],\n          options?: LimitToKnownKeys<Options, UpsertSmsTemplatesOptions>\n       ): Promise<any[]>\n      type: 'action';\n      operationName: 'bulkUpsertSmsTemplates';\n      isBulk: true;\n      isDeleter: false;\n      hasReturnType: false;\n      acceptsModelInput: true;\n      operatesWithRecordIdentity: false;\n      singleActionFunctionName: 'upsert';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      modelSelectionField: typeof pluralModelApiIdentifier;\n      optionsType: UpsertSmsTemplatesOptions;\n      namespace: null;\n      variables: { inputs: { required: true, type: '[BulkUpsertSmsTemplatesInput!]' } };\n      variablesType: (FullyQualifiedUpsertSmsTemplatesVariables | UpsertSmsTemplatesVariables)[];\n      paramOnlyVariables: [ 'on' ];\n      selectionType: AvailableSmsTemplatesSelection;\n      schemaType: Query[\"smsTemplates\"];\n      defaultSelection: typeof DefaultSmsTemplatesSelection;\n    }\n  view: {\n      (query: string, variables?: Record<string, unknown>): Promise<unknown>\n      type: 'computedView';\n      operationName: 'view';\n      gqlFieldName: 'smsTemplatesGellyView';\n      namespace: null;\n      imports: [];\n      variables: {\n          query: { type: 'String', required: true },\n          args: { type: 'JSONObject' }\n        };\n      variablesType: Record<string, unknown>;\n      resultType: Promise<unknown>;\n      plan: never;\n    }\n};\n\n/**\n * A manager for the smsTemplates model with all the available operations for reading and writing to it.*/\nexport const SmsTemplatesManager = buildModelManager(\n  modelApiIdentifier,\n  pluralModelApiIdentifier,\n  DefaultSmsTemplatesSelection,\n  [\n    {\n      type: 'findOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultSmsTemplatesSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultSmsTemplatesSelection,\n      namespace: null\n    },\n    {\n      type: 'findMany',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultSmsTemplatesSelection,\n      namespace: null\n    },\n    {\n      type: 'findFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultSmsTemplatesSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultSmsTemplatesSelection,\n      namespace: null\n    },\n    {\n      type: 'findOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'findById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultSmsTemplatesSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'maybeFindById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultSmsTemplatesSelection,\n      namespace: null\n    },\n    {\n      type: 'action',\n      operationName: 'createSmsTemplates',\n      operationReturnType: 'CreateSmsTemplates',\n      functionName: 'create',\n      namespace: null,\n      modelApiIdentifier: modelApiIdentifier,\n      operatesWithRecordIdentity: false,\n      modelSelectionField: modelApiIdentifier,\n      isBulk: false,\n      isDeleter: false,\n      variables: {\n        smsTemplates: { required: false, type: 'CreateSmsTemplatesInput' }\n      },\n      hasAmbiguousIdentifier: false,\n      paramOnlyVariables: [],\n      hasReturnType: false,\n      acceptsModelInput: true,\n      hasCreateOrUpdateEffect: true,\n      defaultSelection: DefaultSmsTemplatesSelection\n    },\n    {\n      type: 'action',\n      operationName: 'bulkCreateSmsTemplates',\n      functionName: 'bulkCreate',\n      isBulk: true,\n      isDeleter: false,\n      hasReturnType: false,\n      acceptsModelInput: true,\n      operatesWithRecordIdentity: false,\n      singleActionFunctionName: 'create',\n      modelApiIdentifier: modelApiIdentifier,\n      modelSelectionField: pluralModelApiIdentifier,\n      namespace: null,\n      variables: {\n        inputs: { required: true, type: '[BulkCreateSmsTemplatesInput!]' }\n      },\n      paramOnlyVariables: [],\n      defaultSelection: DefaultSmsTemplatesSelection\n    },\n    {\n      type: 'action',\n      operationName: 'updateSmsTemplates',\n      operationReturnType: 'UpdateSmsTemplates',\n      functionName: 'update',\n      namespace: null,\n      modelApiIdentifier: modelApiIdentifier,\n      operatesWithRecordIdentity: true,\n      modelSelectionField: modelApiIdentifier,\n      isBulk: false,\n      isDeleter: false,\n      variables: {\n        id: { required: true, type: 'GadgetID' },\n        smsTemplates: { required: false, type: 'UpdateSmsTemplatesInput' }\n      },\n      hasAmbiguousIdentifier: false,\n      paramOnlyVariables: [],\n      hasReturnType: false,\n      acceptsModelInput: true,\n      hasCreateOrUpdateEffect: true,\n      defaultSelection: DefaultSmsTemplatesSelection\n    },\n    {\n      type: 'action',\n      operationName: 'bulkUpdateSmsTemplates',\n      functionName: 'bulkUpdate',\n      isBulk: true,\n      isDeleter: false,\n      hasReturnType: false,\n      acceptsModelInput: true,\n      operatesWithRecordIdentity: true,\n      singleActionFunctionName: 'update',\n      modelApiIdentifier: modelApiIdentifier,\n      modelSelectionField: pluralModelApiIdentifier,\n      namespace: null,\n      variables: {\n        inputs: { required: true, type: '[BulkUpdateSmsTemplatesInput!]' }\n      },\n      paramOnlyVariables: [],\n      defaultSelection: DefaultSmsTemplatesSelection\n    },\n    {\n      type: 'action',\n      operationName: 'deleteSmsTemplates',\n      operationReturnType: 'DeleteSmsTemplates',\n      functionName: 'delete',\n      namespace: null,\n      modelApiIdentifier: modelApiIdentifier,\n      operatesWithRecordIdentity: true,\n      modelSelectionField: modelApiIdentifier,\n      isBulk: false,\n      isDeleter: true,\n      variables: { id: { required: true, type: 'GadgetID' } },\n      hasAmbiguousIdentifier: false,\n      paramOnlyVariables: [],\n      hasReturnType: false,\n      acceptsModelInput: false,\n      hasCreateOrUpdateEffect: false,\n      defaultSelection: null\n    },\n    {\n      type: 'action',\n      operationName: 'bulkDeleteSmsTemplates',\n      functionName: 'bulkDelete',\n      isBulk: true,\n      isDeleter: true,\n      hasReturnType: false,\n      acceptsModelInput: false,\n      operatesWithRecordIdentity: true,\n      singleActionFunctionName: 'delete',\n      modelApiIdentifier: modelApiIdentifier,\n      modelSelectionField: pluralModelApiIdentifier,\n      namespace: null,\n      variables: { ids: { required: true, type: '[GadgetID!]' } },\n      paramOnlyVariables: [],\n      defaultSelection: null\n    },\n    {\n      type: 'action',\n      operationName: 'upsertSmsTemplates',\n      operationReturnType: 'UpsertSmsTemplates',\n      functionName: 'upsert',\n      namespace: null,\n      modelApiIdentifier: modelApiIdentifier,\n      operatesWithRecordIdentity: false,\n      modelSelectionField: modelApiIdentifier,\n      isBulk: false,\n      isDeleter: false,\n      variables: {\n        on: { required: false, type: '[String!]' },\n        smsTemplates: { required: false, type: 'UpsertSmsTemplatesInput' }\n      },\n      hasAmbiguousIdentifier: false,\n      paramOnlyVariables: [ 'on' ],\n      hasReturnType: {\n        '... on CreateSmsTemplatesResult': { hasReturnType: false },\n        '... on UpdateSmsTemplatesResult': { hasReturnType: false }\n      },\n      acceptsModelInput: true,\n      hasCreateOrUpdateEffect: true,\n      defaultSelection: DefaultSmsTemplatesSelection\n    },\n    {\n      type: 'action',\n      operationName: 'bulkUpsertSmsTemplates',\n      functionName: 'bulkUpsert',\n      isBulk: true,\n      isDeleter: false,\n      hasReturnType: false,\n      acceptsModelInput: true,\n      operatesWithRecordIdentity: false,\n      singleActionFunctionName: 'upsert',\n      modelApiIdentifier: modelApiIdentifier,\n      modelSelectionField: pluralModelApiIdentifier,\n      namespace: null,\n      variables: {\n        inputs: { required: true, type: '[BulkUpsertSmsTemplatesInput!]' }\n      },\n      paramOnlyVariables: [ 'on' ],\n      defaultSelection: DefaultSmsTemplatesSelection\n    },\n    {\n      type: 'computedView',\n      operationName: 'view',\n      functionName: 'view',\n      gqlFieldName: 'smsTemplatesGellyView',\n      namespace: null,\n      variables: {\n        query: { type: 'String', required: true },\n        args: { type: 'JSONObject' }\n      }\n    }\n  ] as const\n) as unknown as {\n  // Gadget generates these model manager classes at runtime dynamically, which means there is no source code for the class. This is done to make the bundle size of the client as small as possible, avoiding a bunch of repeated source code in favour of one small builder function. The TypeScript types above document the exact interface of the constructed class.\n  new(connection: GadgetConnection): SmsTemplatesManager;\n};", "import {\n  GadgetConnection,\n  GadgetRecord,\n  GadgetRecordImplementation,\n  GadgetRecordList,\n  GadgetNonUniqueDataError,\n  actionRunner,\n  findManyRunner,\n  findOneRunner,\n  findOneByFieldRunner,\n  FieldSelection,\n  LimitToKnownKeys,\n  Selectable\n} from \"@gadgetinc/api-client-core\";\n\nimport {\n  Query,\n  ExplicitNestingRequired,\n\n  IDsList,\n  PromiseOrLiveIterator,\n  AllowedTag,\n  AvailableAllowedTagSelection,\n  AllowedTagSort,\n  AllowedTagFilter,\n  CreateAllowedTagInput,\n  UpdateAllowedTagInput,\n  Scalars,\n  UpsertAllowedTagInput\n} from \"../types.js\";\n\nimport { buildModelManager } from \"../builder.js\";\nimport { AvailableSelection, AllFieldsSelected, DefaultSelection, Select, DeepFilterNever } from \"../utils.js\";\n\n/**\n* A type that holds only the selected fields (and nested fields) of allowedTag. The present fields in the result type of this are dynamic based on the options to each call that uses it.\n* The selected fields are sometimes given by the `Options` at `Options[\"select\"]`, and if a selection isn't made in the options, we use the default selection from above.\n*/\nexport type SelectedAllowedTagOrDefault<Options extends Selectable<AvailableAllowedTagSelection>> = DeepFilterNever<\n    Select<\n      AllowedTag,\n      DefaultSelection<\n        AvailableAllowedTagSelection,\n        Options,\n        typeof DefaultAllowedTagSelection\n      >\n    >\n  >;\n\n/**\n * A type that represents a `GadgetRecord` type for allowedTag.\n * It selects all fields of the model by default. If you want to represent a record type with a subset of fields, you could pass in an object in the `Selection` type parameter.\n *\n * @example\n * ```ts\n * const someFunction = (record: AllowedTagRecord, recordWithName: AllowedTagRecord<{ select: { name: true; } }>) => {\n *   // The type of the `record` variable will include all fields of the model.\n *   const name = record.name;\n *   const otherField = record.otherField;\n *\n *   // The type of the `recordWithName` variable will only include the selected fields.\n *   const name = recordWithName.name;\n *   const otherField = recordWithName.otherField; // Type error: Property 'otherField' does not exist on type 'GadgetRecord<{ name: true; }>'.\n * }\n * ```\n */\nexport type AllowedTagRecord<Selection extends AvailableAllowedTagSelection | undefined = typeof DefaultAllowedTagSelection> = DeepFilterNever<\n  GadgetRecord<\n    SelectedAllowedTagOrDefault<{\n      select: Selection;\n    }>\n  >\n>;\n\nexport const DefaultAllowedTagSelection = {\n     __typename: true,\n     id: true,\n     createdAt: true,\n     keyword: true,\n     updatedAt: true\n   } as const;\nconst modelApiIdentifier = \"allowedTag\" as const;\nconst pluralModelApiIdentifier = \"allowedTags\" as const;\n/** Options that can be passed to the `AllowedTagManager#findOne` method */\n export interface FindOneAllowedTagOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableAllowedTagSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `AllowedTagManager#maybeFindOne` method */\n export interface MaybeFindOneAllowedTagOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableAllowedTagSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `AllowedTagManager#findMany` method */\n export interface FindManyAllowedTagsOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableAllowedTagSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: AllowedTagSort | AllowedTagSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: AllowedTagFilter | AllowedTagFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n  first?: number | null;\n  last?: number | null;\n  after?: string | null;\n  before?: string | null;\n};\n/** Options that can be passed to the `AllowedTagManager#findFirst` method */\n export interface FindFirstAllowedTagOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableAllowedTagSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: AllowedTagSort | AllowedTagSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: AllowedTagFilter | AllowedTagFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\n/** Options that can be passed to the `AllowedTagManager#maybeFindFirst` method */\n export interface MaybeFindFirstAllowedTagOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableAllowedTagSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: AllowedTagSort | AllowedTagSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: AllowedTagFilter | AllowedTagFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\nexport interface CreateAllowedTagOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableAllowedTagSelection;\n};\nexport interface UpdateAllowedTagOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableAllowedTagSelection;\n};\nexport interface DeleteAllowedTagOptions {\n\n};\nexport interface UpsertAllowedTagOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableAllowedTagSelection;\n};\n/**\n * The fully-qualified, expanded form of the inputs for executing the create action.\n * The flattened style should be preferred over this style, but for models with ambiguous API identifiers, this style can be used to remove any ambiguity.\n **/\nexport type FullyQualifiedCreateAllowedTagVariables = {\n  allowedTag?: CreateAllowedTagInput;\n}\n/**\n * The inputs for executing create on allowedTag.\n * This is the flattened style of inputs, suitable for general use, and should be preferred.\n **/\nexport type CreateAllowedTagVariables = CreateAllowedTagInput;\n/**\n * The return value from executing create on allowedTag\n * Is a GadgetRecord of the model's type.\n **/\nexport type CreateAllowedTagResult<Options extends CreateAllowedTagOptions> = SelectedAllowedTagOrDefault<Options> extends void ?\n      void :\n      GadgetRecord<SelectedAllowedTagOrDefault<Options>>;\n/**\n * The fully-qualified, expanded form of the inputs for executing the update action.\n * The flattened style should be preferred over this style, but for models with ambiguous API identifiers, this style can be used to remove any ambiguity.\n **/\nexport type FullyQualifiedUpdateAllowedTagVariables = {\n  allowedTag?: UpdateAllowedTagInput;\n}\n/**\n * The inputs for executing update on allowedTag.\n * This is the flattened style of inputs, suitable for general use, and should be preferred.\n **/\nexport type UpdateAllowedTagVariables = UpdateAllowedTagInput;\n/**\n * The return value from executing update on allowedTag\n * Is a GadgetRecord of the model's type.\n **/\nexport type UpdateAllowedTagResult<Options extends UpdateAllowedTagOptions> = SelectedAllowedTagOrDefault<Options> extends void ?\n      void :\n      GadgetRecord<SelectedAllowedTagOrDefault<Options>>;\n/**\n * The return value from executing delete on allowedTag\n * Is void because this action deletes the record\n **/\nexport type DeleteAllowedTagResult<Options extends DeleteAllowedTagOptions> = void;\n/**\n * The fully-qualified, expanded form of the inputs for executing the upsert action.\n * The flattened style should be preferred over this style, but for models with ambiguous API identifiers, this style can be used to remove any ambiguity.\n **/\nexport type FullyQualifiedUpsertAllowedTagVariables = {\n  on?: ((Scalars['String'] | null))[];\n  allowedTag?: UpsertAllowedTagInput;\n}\n/**\n * The inputs for executing upsert on allowedTag.\n * This is the flattened style of inputs, suitable for general use, and should be preferred.\n **/\nexport type UpsertAllowedTagVariables = Omit<\n     UpsertAllowedTagInput,\n     \"on\"\n   > & {\n     on?: ((Scalars['String'] | null))[];\n   };\n/**\n * The return value from executing upsert on allowedTag\n *\n **/\nexport type UpsertAllowedTagResult<Options extends UpsertAllowedTagOptions> = SelectedAllowedTagOrDefault<Options> extends void ?\n      void :\n      GadgetRecord<SelectedAllowedTagOrDefault<Options>>;\n\n/**\n * A manager for the allowedTag model with all the available operations for reading and writing to it.*/\nexport type AllowedTagManager = {\n  readonly connection: GadgetConnection;\n\n  findOne: {\n      /**\n       * Finds one allowedTag by ID. Returns a `Promise` that resolves to the record if found and rejects the promise if the record isn't found.\n       **/\n      <Options extends FindOneAllowedTagOptions>(id: string, options?: LimitToKnownKeys<Options, FindOneAllowedTagOptions>): PromiseOrLiveIterator<Options,AllowedTagRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultAllowedTagSelection;\n      namespace: null;\n      optionsType: FindOneAllowedTagOptions;\n      selectionType: AvailableAllowedTagSelection;\n      schemaType: Query[\"allowedTag\"];\n    }\n  maybeFindOne: {\n      /**\n       * Finds one allowedTag by ID. Returns a `Promise` that resolves to the record if found and returns null otherwise.\n       **/\n      <Options extends MaybeFindOneAllowedTagOptions>(id: string, options?: LimitToKnownKeys<Options, MaybeFindOneAllowedTagOptions>): PromiseOrLiveIterator<Options,AllowedTagRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: MaybeFindOneAllowedTagOptions;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultAllowedTagSelection;\n      namespace: null;\n      selectionType: AvailableAllowedTagSelection;\n      schemaType: Query[\"allowedTag\"];\n    }\n  findMany: {\n      /**\n       * Finds many allowedTag. Returns a `Promise` for a `GadgetRecordList` of objects according to the passed `options`. Optionally filters the returned records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindManyAllowedTagsOptions>(options?: LimitToKnownKeys<Options, FindManyAllowedTagsOptions>): PromiseOrLiveIterator<Options,GadgetRecordList<AllowedTagRecord<Options[\"select\"]>>>;\n      type: 'findMany';\n      operationName: typeof pluralModelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: FindManyAllowedTagsOptions;\n      defaultSelection: typeof DefaultAllowedTagSelection;\n      namespace: null;\n      selectionType: AvailableAllowedTagSelection;\n      schemaType: Query[\"allowedTag\"];\n    }\n  findFirst: {\n      /**\n       * Finds the first matching allowedTag. Returns a `Promise` that resolves to a record if found and rejects the promise if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindFirstAllowedTagOptions>(options?: LimitToKnownKeys<Options, FindFirstAllowedTagOptions>): PromiseOrLiveIterator<Options,AllowedTagRecord<Options[\"select\"]>>;\n      type: 'findFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: FindFirstAllowedTagOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultAllowedTagSelection;\n      namespace: null;\n      selectionType: AvailableAllowedTagSelection;\n      schemaType: Query[\"allowedTag\"];\n    }\n  maybeFindFirst: {\n      /**\n       * Finds the first matching allowedTag. Returns a `Promise` that resolves to a record if found, or null if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` pagination options.\n       **/\n      <Options extends MaybeFindFirstAllowedTagOptions>(options?: LimitToKnownKeys<Options, MaybeFindFirstAllowedTagOptions>): PromiseOrLiveIterator<Options,AllowedTagRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: MaybeFindFirstAllowedTagOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultAllowedTagSelection;\n      namespace: null;\n      selectionType: AvailableAllowedTagSelection;\n      schemaType: Query[\"allowedTag\"];\n    }\n  findById: {\n      /**\n      * Finds one allowedTag by its id. Returns a Promise that resolves to the record if found and rejects the promise if the record isn't found.\n      **/\n      <Options extends FindOneAllowedTagOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneAllowedTagOptions>): PromiseOrLiveIterator<Options,AllowedTagRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneAllowedTagOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultAllowedTagSelection;\n      namespace: null;\n      selectionType: AvailableAllowedTagSelection;\n      schemaType: Query[\"allowedTag\"];\n    }\n  maybeFindById: {\n      /**\n      * Finds one allowedTag by its id. Returns a Promise that resolves to the record if found and returns null if the record isn't found.\n      **/\n      <Options extends FindOneAllowedTagOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneAllowedTagOptions>): Promise<AllowedTagRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneAllowedTagOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultAllowedTagSelection;\n      namespace: null;\n      selectionType: AvailableAllowedTagSelection;\n      schemaType: Query[\"allowedTag\"];\n    }\n  create: {\n      /**\n       * Executes the create action.Accepts the parameters for the action via the `variables` argument.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the flat style, all-params-together overload that most use cases should use.\n      *\n      * @example\n      * * const allowedTagRecord = await api.allowedTag.create({\n        *   keyword: \"example value for keyword\",\n        * });\n      **/\n      <Options extends CreateAllowedTagOptions>(\n      \n        variables: CreateAllowedTagVariables,\n        options?: LimitToKnownKeys<Options, CreateAllowedTagOptions>\n      ): Promise<CreateAllowedTagResult<Options>>;\n      /**\n       * Executes the create action.Accepts the parameters for the action via the `variables` argument.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the fully qualified, nested api identifier style overload that should be used when there's an ambiguity between an action param and a model field.\n      *\n      * @example\n      * * const allowedTagRecord = await api.allowedTag.create({\n        *   allowedTag: {\n        *     keyword: \"example value for keyword\",\n        *   },\n        * });\n      **/\n      <Options extends CreateAllowedTagOptions>(\n      \n        variables: FullyQualifiedCreateAllowedTagVariables,\n        options?: LimitToKnownKeys<Options, CreateAllowedTagOptions>\n      ): Promise<CreateAllowedTagResult<Options>>;\n      type: 'action';\n      operationName: 'createAllowedTag';\n      operationReturnType: 'CreateAllowedTag';\n      namespace: null;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      operatesWithRecordIdentity: false;\n      modelSelectionField: typeof modelApiIdentifier;\n      isBulk: false;\n      isDeleter: false;\n      variables: { allowedTag: { required: false, type: 'CreateAllowedTagInput' } };\n      variablesType: ((\n               \n               & (FullyQualifiedCreateAllowedTagVariables | CreateAllowedTagVariables)\n             ) | undefined);\n      hasAmbiguousIdentifier: false;\n      paramOnlyVariables: [];\n      hasReturnType: false;\n      acceptsModelInput: true;\n      hasCreateOrUpdateEffect: true;\n      imports: [ 'CreateAllowedTagInput' ];\n      optionsType: CreateAllowedTagOptions;\n      selectionType: AvailableAllowedTagSelection;\n      schemaType: Query[\"allowedTag\"];\n      defaultSelection: typeof DefaultAllowedTagSelection;\n    }\n  bulkCreate: {\n      /**\n        * Executes the bulkCreate action with the given inputs.\n        */\n       <Options extends CreateAllowedTagOptions>(\n          inputs: (FullyQualifiedCreateAllowedTagVariables | CreateAllowedTagVariables)[],\n          options?: LimitToKnownKeys<Options, CreateAllowedTagOptions>\n       ): Promise<CreateAllowedTagResult<Options>[]>\n      type: 'action';\n      operationName: 'bulkCreateAllowedTags';\n      isBulk: true;\n      isDeleter: false;\n      hasReturnType: false;\n      acceptsModelInput: true;\n      operatesWithRecordIdentity: false;\n      singleActionFunctionName: 'create';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      modelSelectionField: typeof pluralModelApiIdentifier;\n      optionsType: CreateAllowedTagOptions;\n      namespace: null;\n      variables: { inputs: { required: true, type: '[BulkCreateAllowedTagsInput!]' } };\n      variablesType: (FullyQualifiedCreateAllowedTagVariables | CreateAllowedTagVariables)[];\n      paramOnlyVariables: [];\n      selectionType: AvailableAllowedTagSelection;\n      schemaType: Query[\"allowedTag\"];\n      defaultSelection: typeof DefaultAllowedTagSelection;\n    }\n  update: {\n      /**\n       * Executes the update actionon one record specified by `id`.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the flat style, all-params-together overload that most use cases should use.\n      *\n      * @example\n      * * const allowedTagRecord = await api.allowedTag.update(\"1\", {\n        *   keyword: \"example value for keyword\",\n        * });\n      **/\n      <Options extends UpdateAllowedTagOptions>(\n        id: string,\n        variables: UpdateAllowedTagVariables,\n        options?: LimitToKnownKeys<Options, UpdateAllowedTagOptions>\n      ): Promise<UpdateAllowedTagResult<Options>>;\n      /**\n       * Executes the update actionon one record specified by `id`.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the fully qualified, nested api identifier style overload that should be used when there's an ambiguity between an action param and a model field.\n      *\n      * @example\n      * * const allowedTagRecord = await api.allowedTag.update(\"1\", {\n        *   allowedTag: {\n        *     keyword: \"example value for keyword\",\n        *   },\n        * });\n      **/\n      <Options extends UpdateAllowedTagOptions>(\n        id: string,\n        variables: FullyQualifiedUpdateAllowedTagVariables,\n        options?: LimitToKnownKeys<Options, UpdateAllowedTagOptions>\n      ): Promise<UpdateAllowedTagResult<Options>>;\n      type: 'action';\n      operationName: 'updateAllowedTag';\n      operationReturnType: 'UpdateAllowedTag';\n      namespace: null;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      operatesWithRecordIdentity: true;\n      modelSelectionField: typeof modelApiIdentifier;\n      isBulk: false;\n      isDeleter: false;\n      variables: {\n          id: { required: true, type: 'GadgetID' },\n          allowedTag: { required: false, type: 'UpdateAllowedTagInput' }\n        };\n      variablesType: (\n              { id: string }\n              & (FullyQualifiedUpdateAllowedTagVariables | UpdateAllowedTagVariables)\n            );\n      hasAmbiguousIdentifier: false;\n      paramOnlyVariables: [];\n      hasReturnType: false;\n      acceptsModelInput: true;\n      hasCreateOrUpdateEffect: true;\n      imports: [ 'UpdateAllowedTagInput' ];\n      optionsType: UpdateAllowedTagOptions;\n      selectionType: AvailableAllowedTagSelection;\n      schemaType: Query[\"allowedTag\"];\n      defaultSelection: typeof DefaultAllowedTagSelection;\n    }\n  bulkUpdate: {\n      /**\n        * Executes the bulkUpdate action with the given inputs.\n        */\n       <Options extends UpdateAllowedTagOptions>(\n          inputs: (FullyQualifiedUpdateAllowedTagVariables | UpdateAllowedTagVariables & { id: string })[],\n          options?: LimitToKnownKeys<Options, UpdateAllowedTagOptions>\n       ): Promise<UpdateAllowedTagResult<Options>[]>\n      type: 'action';\n      operationName: 'bulkUpdateAllowedTags';\n      isBulk: true;\n      isDeleter: false;\n      hasReturnType: false;\n      acceptsModelInput: true;\n      operatesWithRecordIdentity: true;\n      singleActionFunctionName: 'update';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      modelSelectionField: typeof pluralModelApiIdentifier;\n      optionsType: UpdateAllowedTagOptions;\n      namespace: null;\n      variables: { inputs: { required: true, type: '[BulkUpdateAllowedTagsInput!]' } };\n      variablesType: (FullyQualifiedUpdateAllowedTagVariables | UpdateAllowedTagVariables & { id: string })[];\n      paramOnlyVariables: [];\n      selectionType: AvailableAllowedTagSelection;\n      schemaType: Query[\"allowedTag\"];\n      defaultSelection: typeof DefaultAllowedTagSelection;\n    }\n  delete: {\n      /**\n       * Executes the delete actionon one record specified by `id`.Deletes the record on the server. Returns a Promise that resolves if the delete succeeds.\n      *\n      * This is the fully qualified, nested api identifier style overload that should be used when there's an ambiguity between an action param and a model field.\n      *\n      * @example\n      * * await api.allowedTag.delete(\"1\");\n      **/\n      <Options extends DeleteAllowedTagOptions>(\n        id: string,\n      \n        options?: LimitToKnownKeys<Options, DeleteAllowedTagOptions>\n      ): Promise<DeleteAllowedTagResult<Options>>;\n      type: 'action';\n      operationName: 'deleteAllowedTag';\n      operationReturnType: 'DeleteAllowedTag';\n      namespace: null;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      operatesWithRecordIdentity: true;\n      modelSelectionField: typeof modelApiIdentifier;\n      isBulk: false;\n      isDeleter: true;\n      variables: { id: { required: true, type: 'GadgetID' } };\n      variablesType: (\n              { id: string }\n              \n            );\n      hasAmbiguousIdentifier: false;\n      paramOnlyVariables: [];\n      hasReturnType: false;\n      acceptsModelInput: false;\n      hasCreateOrUpdateEffect: false;\n      imports: [];\n      optionsType: DeleteAllowedTagOptions;\n      selectionType: Record<string, never>;\n      schemaType: null;\n      defaultSelection: null;\n    }\n  bulkDelete: {\n      /**\n        * Executes the bulkDelete action with the given inputs.Deletes the records on the server.\n        */\n       <Options extends DeleteAllowedTagOptions>(\n          ids: string[],\n          options?: LimitToKnownKeys<Options, DeleteAllowedTagOptions>\n       ): Promise<DeleteAllowedTagResult<Options>[]>\n      type: 'action';\n      operationName: 'bulkDeleteAllowedTags';\n      isBulk: true;\n      isDeleter: true;\n      hasReturnType: false;\n      acceptsModelInput: false;\n      operatesWithRecordIdentity: true;\n      singleActionFunctionName: 'delete';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      modelSelectionField: typeof pluralModelApiIdentifier;\n      optionsType: DeleteAllowedTagOptions;\n      namespace: null;\n      variables: { ids: { required: true, type: '[GadgetID!]' } };\n      variablesType: IDsList | undefined;\n      paramOnlyVariables: [];\n      selectionType: Record<string, never>;\n      schemaType: null;\n      defaultSelection: null;\n    }\n  upsert: {\n      /**\n       * Executes the upsert action.Accepts the parameters for the action via the `variables` argument.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the flat style, all-params-together overload that most use cases should use.\n      *\n      * @example\n      * * const result = await api.allowedTag.upsert({\n        *   id: \"1\",\n        *   keyword: \"example value for keyword\",\n        * });\n      **/\n      <Options extends UpsertAllowedTagOptions>(\n      \n        variables: UpsertAllowedTagVariables,\n        options?: LimitToKnownKeys<Options, UpsertAllowedTagOptions>\n      ): Promise<UpsertAllowedTagResult<Options>>;\n      /**\n       * Executes the upsert action.Accepts the parameters for the action via the `variables` argument.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the fully qualified, nested api identifier style overload that should be used when there's an ambiguity between an action param and a model field.\n      *\n      * @example\n      * * const result = await api.allowedTag.upsert({\n        *   allowedTag: {\n        *     id: \"1\",\n        *     keyword: \"example value for keyword\",\n        *   },\n        * });\n      **/\n      <Options extends UpsertAllowedTagOptions>(\n      \n        variables: FullyQualifiedUpsertAllowedTagVariables,\n        options?: LimitToKnownKeys<Options, UpsertAllowedTagOptions>\n      ): Promise<UpsertAllowedTagResult<Options>>;\n      type: 'action';\n      operationName: 'upsertAllowedTag';\n      operationReturnType: 'UpsertAllowedTag';\n      namespace: null;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      operatesWithRecordIdentity: false;\n      modelSelectionField: typeof modelApiIdentifier;\n      isBulk: false;\n      isDeleter: false;\n      variables: {\n          on: { required: false, type: '[String!]' },\n          allowedTag: { required: false, type: 'UpsertAllowedTagInput' }\n        };\n      variablesType: ((\n               \n               & (FullyQualifiedUpsertAllowedTagVariables | UpsertAllowedTagVariables)\n             ) | undefined);\n      hasAmbiguousIdentifier: false;\n      paramOnlyVariables: [ 'on' ];\n      hasReturnType: {\n          '... on CreateAllowedTagResult': { hasReturnType: false },\n          '... on UpdateAllowedTagResult': { hasReturnType: false }\n        };\n      acceptsModelInput: true;\n      hasCreateOrUpdateEffect: true;\n      imports: [ 'Scalars', 'UpsertAllowedTagInput' ];\n      optionsType: UpsertAllowedTagOptions;\n      selectionType: AvailableAllowedTagSelection;\n      schemaType: Query[\"allowedTag\"];\n      defaultSelection: typeof DefaultAllowedTagSelection;\n    }\n  bulkUpsert: {\n      /**\n        * Executes the bulkUpsert action with the given inputs.\n        */\n       <Options extends UpsertAllowedTagOptions>(\n          inputs: (FullyQualifiedUpsertAllowedTagVariables | UpsertAllowedTagVariables)[],\n          options?: LimitToKnownKeys<Options, UpsertAllowedTagOptions>\n       ): Promise<any[]>\n      type: 'action';\n      operationName: 'bulkUpsertAllowedTags';\n      isBulk: true;\n      isDeleter: false;\n      hasReturnType: false;\n      acceptsModelInput: true;\n      operatesWithRecordIdentity: false;\n      singleActionFunctionName: 'upsert';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      modelSelectionField: typeof pluralModelApiIdentifier;\n      optionsType: UpsertAllowedTagOptions;\n      namespace: null;\n      variables: { inputs: { required: true, type: '[BulkUpsertAllowedTagsInput!]' } };\n      variablesType: (FullyQualifiedUpsertAllowedTagVariables | UpsertAllowedTagVariables)[];\n      paramOnlyVariables: [ 'on' ];\n      selectionType: AvailableAllowedTagSelection;\n      schemaType: Query[\"allowedTag\"];\n      defaultSelection: typeof DefaultAllowedTagSelection;\n    }\n  view: {\n      (query: string, variables?: Record<string, unknown>): Promise<unknown>\n      type: 'computedView';\n      operationName: 'view';\n      gqlFieldName: 'allowedTagGellyView';\n      namespace: null;\n      imports: [];\n      variables: {\n          query: { type: 'String', required: true },\n          args: { type: 'JSONObject' }\n        };\n      variablesType: Record<string, unknown>;\n      resultType: Promise<unknown>;\n      plan: never;\n    }\n};\n\n/**\n * A manager for the allowedTag model with all the available operations for reading and writing to it.*/\nexport const AllowedTagManager = buildModelManager(\n  modelApiIdentifier,\n  pluralModelApiIdentifier,\n  DefaultAllowedTagSelection,\n  [\n    {\n      type: 'findOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultAllowedTagSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultAllowedTagSelection,\n      namespace: null\n    },\n    {\n      type: 'findMany',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultAllowedTagSelection,\n      namespace: null\n    },\n    {\n      type: 'findFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultAllowedTagSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultAllowedTagSelection,\n      namespace: null\n    },\n    {\n      type: 'findOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'findById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultAllowedTagSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'maybeFindById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultAllowedTagSelection,\n      namespace: null\n    },\n    {\n      type: 'action',\n      operationName: 'createAllowedTag',\n      operationReturnType: 'CreateAllowedTag',\n      functionName: 'create',\n      namespace: null,\n      modelApiIdentifier: modelApiIdentifier,\n      operatesWithRecordIdentity: false,\n      modelSelectionField: modelApiIdentifier,\n      isBulk: false,\n      isDeleter: false,\n      variables: { allowedTag: { required: false, type: 'CreateAllowedTagInput' } },\n      hasAmbiguousIdentifier: false,\n      paramOnlyVariables: [],\n      hasReturnType: false,\n      acceptsModelInput: true,\n      hasCreateOrUpdateEffect: true,\n      defaultSelection: DefaultAllowedTagSelection\n    },\n    {\n      type: 'action',\n      operationName: 'bulkCreateAllowedTags',\n      functionName: 'bulkCreate',\n      isBulk: true,\n      isDeleter: false,\n      hasReturnType: false,\n      acceptsModelInput: true,\n      operatesWithRecordIdentity: false,\n      singleActionFunctionName: 'create',\n      modelApiIdentifier: modelApiIdentifier,\n      modelSelectionField: pluralModelApiIdentifier,\n      namespace: null,\n      variables: {\n        inputs: { required: true, type: '[BulkCreateAllowedTagsInput!]' }\n      },\n      paramOnlyVariables: [],\n      defaultSelection: DefaultAllowedTagSelection\n    },\n    {\n      type: 'action',\n      operationName: 'updateAllowedTag',\n      operationReturnType: 'UpdateAllowedTag',\n      functionName: 'update',\n      namespace: null,\n      modelApiIdentifier: modelApiIdentifier,\n      operatesWithRecordIdentity: true,\n      modelSelectionField: modelApiIdentifier,\n      isBulk: false,\n      isDeleter: false,\n      variables: {\n        id: { required: true, type: 'GadgetID' },\n        allowedTag: { required: false, type: 'UpdateAllowedTagInput' }\n      },\n      hasAmbiguousIdentifier: false,\n      paramOnlyVariables: [],\n      hasReturnType: false,\n      acceptsModelInput: true,\n      hasCreateOrUpdateEffect: true,\n      defaultSelection: DefaultAllowedTagSelection\n    },\n    {\n      type: 'action',\n      operationName: 'bulkUpdateAllowedTags',\n      functionName: 'bulkUpdate',\n      isBulk: true,\n      isDeleter: false,\n      hasReturnType: false,\n      acceptsModelInput: true,\n      operatesWithRecordIdentity: true,\n      singleActionFunctionName: 'update',\n      modelApiIdentifier: modelApiIdentifier,\n      modelSelectionField: pluralModelApiIdentifier,\n      namespace: null,\n      variables: {\n        inputs: { required: true, type: '[BulkUpdateAllowedTagsInput!]' }\n      },\n      paramOnlyVariables: [],\n      defaultSelection: DefaultAllowedTagSelection\n    },\n    {\n      type: 'action',\n      operationName: 'deleteAllowedTag',\n      operationReturnType: 'DeleteAllowedTag',\n      functionName: 'delete',\n      namespace: null,\n      modelApiIdentifier: modelApiIdentifier,\n      operatesWithRecordIdentity: true,\n      modelSelectionField: modelApiIdentifier,\n      isBulk: false,\n      isDeleter: true,\n      variables: { id: { required: true, type: 'GadgetID' } },\n      hasAmbiguousIdentifier: false,\n      paramOnlyVariables: [],\n      hasReturnType: false,\n      acceptsModelInput: false,\n      hasCreateOrUpdateEffect: false,\n      defaultSelection: null\n    },\n    {\n      type: 'action',\n      operationName: 'bulkDeleteAllowedTags',\n      functionName: 'bulkDelete',\n      isBulk: true,\n      isDeleter: true,\n      hasReturnType: false,\n      acceptsModelInput: false,\n      operatesWithRecordIdentity: true,\n      singleActionFunctionName: 'delete',\n      modelApiIdentifier: modelApiIdentifier,\n      modelSelectionField: pluralModelApiIdentifier,\n      namespace: null,\n      variables: { ids: { required: true, type: '[GadgetID!]' } },\n      paramOnlyVariables: [],\n      defaultSelection: null\n    },\n    {\n      type: 'action',\n      operationName: 'upsertAllowedTag',\n      operationReturnType: 'UpsertAllowedTag',\n      functionName: 'upsert',\n      namespace: null,\n      modelApiIdentifier: modelApiIdentifier,\n      operatesWithRecordIdentity: false,\n      modelSelectionField: modelApiIdentifier,\n      isBulk: false,\n      isDeleter: false,\n      variables: {\n        on: { required: false, type: '[String!]' },\n        allowedTag: { required: false, type: 'UpsertAllowedTagInput' }\n      },\n      hasAmbiguousIdentifier: false,\n      paramOnlyVariables: [ 'on' ],\n      hasReturnType: {\n        '... on CreateAllowedTagResult': { hasReturnType: false },\n        '... on UpdateAllowedTagResult': { hasReturnType: false }\n      },\n      acceptsModelInput: true,\n      hasCreateOrUpdateEffect: true,\n      defaultSelection: DefaultAllowedTagSelection\n    },\n    {\n      type: 'action',\n      operationName: 'bulkUpsertAllowedTags',\n      functionName: 'bulkUpsert',\n      isBulk: true,\n      isDeleter: false,\n      hasReturnType: false,\n      acceptsModelInput: true,\n      operatesWithRecordIdentity: false,\n      singleActionFunctionName: 'upsert',\n      modelApiIdentifier: modelApiIdentifier,\n      modelSelectionField: pluralModelApiIdentifier,\n      namespace: null,\n      variables: {\n        inputs: { required: true, type: '[BulkUpsertAllowedTagsInput!]' }\n      },\n      paramOnlyVariables: [ 'on' ],\n      defaultSelection: DefaultAllowedTagSelection\n    },\n    {\n      type: 'computedView',\n      operationName: 'view',\n      functionName: 'view',\n      gqlFieldName: 'allowedTagGellyView',\n      namespace: null,\n      variables: {\n        query: { type: 'String', required: true },\n        args: { type: 'JSONObject' }\n      }\n    }\n  ] as const\n) as unknown as {\n  // Gadget generates these model manager classes at runtime dynamically, which means there is no source code for the class. This is done to make the bundle size of the client as small as possible, avoiding a bunch of repeated source code in favour of one small builder function. The TypeScript types above document the exact interface of the constructed class.\n  new(connection: GadgetConnection): AllowedTagManager;\n};", "import {\n  GadgetConnection,\n  GadgetRecord,\n  GadgetRecordImplementation,\n  GadgetRecordList,\n  GadgetNonUniqueDataError,\n  actionRunner,\n  findManyRunner,\n  findOneRunner,\n  findOneByFieldRunner,\n  FieldSelection,\n  LimitToKnownKeys,\n  Selectable\n} from \"@gadgetinc/api-client-core\";\n\nimport {\n  Query,\n  ExplicitNestingRequired,\n\n  IDsList,\n  PromiseOrLiveIterator,\n  ShopifyCustomer,\n  AvailableShopifyCustomerSelection,\n  ShopifyCustomerSort,\n  ShopifyCustomerFilter\n} from \"../types.js\";\n\nimport { buildModelManager } from \"../builder.js\";\nimport { AvailableSelection, AllFieldsSelected, DefaultSelection, Select, DeepFilterNever } from \"../utils.js\";\n\n/**\n* A type that holds only the selected fields (and nested fields) of shopifyCustomer. The present fields in the result type of this are dynamic based on the options to each call that uses it.\n* The selected fields are sometimes given by the `Options` at `Options[\"select\"]`, and if a selection isn't made in the options, we use the default selection from above.\n*/\nexport type SelectedShopifyCustomerOrDefault<Options extends Selectable<AvailableShopifyCustomerSelection>> = DeepFilterNever<\n    Select<\n      ShopifyCustomer,\n      DefaultSelection<\n        AvailableShopifyCustomerSelection,\n        Options,\n        typeof DefaultShopifyCustomerSelection\n      >\n    >\n  >;\n\n/**\n * A type that represents a `GadgetRecord` type for shopifyCustomer.\n * It selects all fields of the model by default. If you want to represent a record type with a subset of fields, you could pass in an object in the `Selection` type parameter.\n *\n * @example\n * ```ts\n * const someFunction = (record: ShopifyCustomerRecord, recordWithName: ShopifyCustomerRecord<{ select: { name: true; } }>) => {\n *   // The type of the `record` variable will include all fields of the model.\n *   const name = record.name;\n *   const otherField = record.otherField;\n *\n *   // The type of the `recordWithName` variable will only include the selected fields.\n *   const name = recordWithName.name;\n *   const otherField = recordWithName.otherField; // Type error: Property 'otherField' does not exist on type 'GadgetRecord<{ name: true; }>'.\n * }\n * ```\n */\nexport type ShopifyCustomerRecord<Selection extends AvailableShopifyCustomerSelection | undefined = typeof DefaultShopifyCustomerSelection> = DeepFilterNever<\n  GadgetRecord<\n    SelectedShopifyCustomerOrDefault<{\n      select: Selection;\n    }>\n  >\n>;\n\nexport const DefaultShopifyCustomerSelection = {\n     __typename: true,\n     id: true,\n     acceptsMarketing: true,\n     acceptsMarketingUpdatedAt: true,\n     createdAt: true,\n     currency: true,\n     dataSaleOptOut: true,\n     defaultAddressId: true,\n     email: true,\n     emailMarketingConsent: true,\n     firstName: true,\n     lastName: true,\n     lastOrderId: true,\n     lastOrderName: true,\n     locale: true,\n     marketingOptInLevel: true,\n     metafield: true,\n     multipassIdentifier: true,\n     note: true,\n     ordersCount: true,\n     phone: true,\n     shopId: true,\n     shopifyCreatedAt: true,\n     shopifyState: true,\n     shopifyUpdatedAt: true,\n     smsMarketingConsent: true,\n     statistics: true,\n     tags: true,\n     taxExempt: true,\n     taxExemptions: true,\n     totalSpent: true,\n     updatedAt: true,\n     verifiedEmail: true\n   } as const;\nconst modelApiIdentifier = \"shopifyCustomer\" as const;\nconst pluralModelApiIdentifier = \"shopifyCustomers\" as const;\n/** Options that can be passed to the `ShopifyCustomerManager#findOne` method */\n export interface FindOneShopifyCustomerOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCustomerSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `ShopifyCustomerManager#maybeFindOne` method */\n export interface MaybeFindOneShopifyCustomerOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCustomerSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `ShopifyCustomerManager#findMany` method */\n export interface FindManyShopifyCustomersOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCustomerSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyCustomerSort | ShopifyCustomerSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyCustomerFilter | ShopifyCustomerFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n  first?: number | null;\n  last?: number | null;\n  after?: string | null;\n  before?: string | null;\n};\n/** Options that can be passed to the `ShopifyCustomerManager#findFirst` method */\n export interface FindFirstShopifyCustomerOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCustomerSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyCustomerSort | ShopifyCustomerSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyCustomerFilter | ShopifyCustomerFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\n/** Options that can be passed to the `ShopifyCustomerManager#maybeFindFirst` method */\n export interface MaybeFindFirstShopifyCustomerOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCustomerSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyCustomerSort | ShopifyCustomerSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyCustomerFilter | ShopifyCustomerFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\nexport interface CreateShopifyCustomerOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCustomerSelection;\n};\nexport interface UpdateShopifyCustomerOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCustomerSelection;\n};\nexport interface DeleteShopifyCustomerOptions {\n\n};\n\n/**\n * A manager for the shopifyCustomer model with all the available operations for reading and writing to it.*/\nexport type ShopifyCustomerManager = {\n  readonly connection: GadgetConnection;\n\n  findOne: {\n      /**\n       * Finds one shopifyCustomer by ID. Returns a `Promise` that resolves to the record if found and rejects the promise if the record isn't found.\n       **/\n      <Options extends FindOneShopifyCustomerOptions>(id: string, options?: LimitToKnownKeys<Options, FindOneShopifyCustomerOptions>): PromiseOrLiveIterator<Options,ShopifyCustomerRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultShopifyCustomerSelection;\n      namespace: null;\n      optionsType: FindOneShopifyCustomerOptions;\n      selectionType: AvailableShopifyCustomerSelection;\n      schemaType: Query[\"shopifyCustomer\"];\n    }\n  maybeFindOne: {\n      /**\n       * Finds one shopifyCustomer by ID. Returns a `Promise` that resolves to the record if found and returns null otherwise.\n       **/\n      <Options extends MaybeFindOneShopifyCustomerOptions>(id: string, options?: LimitToKnownKeys<Options, MaybeFindOneShopifyCustomerOptions>): PromiseOrLiveIterator<Options,ShopifyCustomerRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: MaybeFindOneShopifyCustomerOptions;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultShopifyCustomerSelection;\n      namespace: null;\n      selectionType: AvailableShopifyCustomerSelection;\n      schemaType: Query[\"shopifyCustomer\"];\n    }\n  findMany: {\n      /**\n       * Finds many shopifyCustomer. Returns a `Promise` for a `GadgetRecordList` of objects according to the passed `options`. Optionally filters the returned records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindManyShopifyCustomersOptions>(options?: LimitToKnownKeys<Options, FindManyShopifyCustomersOptions>): PromiseOrLiveIterator<Options,GadgetRecordList<ShopifyCustomerRecord<Options[\"select\"]>>>;\n      type: 'findMany';\n      operationName: typeof pluralModelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: FindManyShopifyCustomersOptions;\n      defaultSelection: typeof DefaultShopifyCustomerSelection;\n      namespace: null;\n      selectionType: AvailableShopifyCustomerSelection;\n      schemaType: Query[\"shopifyCustomer\"];\n    }\n  findFirst: {\n      /**\n       * Finds the first matching shopifyCustomer. Returns a `Promise` that resolves to a record if found and rejects the promise if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindFirstShopifyCustomerOptions>(options?: LimitToKnownKeys<Options, FindFirstShopifyCustomerOptions>): PromiseOrLiveIterator<Options,ShopifyCustomerRecord<Options[\"select\"]>>;\n      type: 'findFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: FindFirstShopifyCustomerOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyCustomerSelection;\n      namespace: null;\n      selectionType: AvailableShopifyCustomerSelection;\n      schemaType: Query[\"shopifyCustomer\"];\n    }\n  maybeFindFirst: {\n      /**\n       * Finds the first matching shopifyCustomer. Returns a `Promise` that resolves to a record if found, or null if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` pagination options.\n       **/\n      <Options extends MaybeFindFirstShopifyCustomerOptions>(options?: LimitToKnownKeys<Options, MaybeFindFirstShopifyCustomerOptions>): PromiseOrLiveIterator<Options,ShopifyCustomerRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: MaybeFindFirstShopifyCustomerOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyCustomerSelection;\n      namespace: null;\n      selectionType: AvailableShopifyCustomerSelection;\n      schemaType: Query[\"shopifyCustomer\"];\n    }\n  findById: {\n      /**\n      * Finds one shopifyCustomer by its id. Returns a Promise that resolves to the record if found and rejects the promise if the record isn't found.\n      **/\n      <Options extends FindOneShopifyCustomerOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneShopifyCustomerOptions>): PromiseOrLiveIterator<Options,ShopifyCustomerRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneShopifyCustomerOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyCustomerSelection;\n      namespace: null;\n      selectionType: AvailableShopifyCustomerSelection;\n      schemaType: Query[\"shopifyCustomer\"];\n    }\n  maybeFindById: {\n      /**\n      * Finds one shopifyCustomer by its id. Returns a Promise that resolves to the record if found and returns null if the record isn't found.\n      **/\n      <Options extends FindOneShopifyCustomerOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneShopifyCustomerOptions>): Promise<ShopifyCustomerRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneShopifyCustomerOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyCustomerSelection;\n      namespace: null;\n      selectionType: AvailableShopifyCustomerSelection;\n      schemaType: Query[\"shopifyCustomer\"];\n    }\n  create: {\n      /**\n       * @deprecated The action create on model shopifyCustomer does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'createShopifyCustomer';\n      errorMessage: string;\n      optionsType: CreateShopifyCustomerOptions;\n      actionApiIdentifier: 'create';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyCustomer.create';\n    }\n  bulkCreate: {\n      /**\n       * @deprecated The action create on model shopifyCustomer does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkCreateShopifyCustomers';\n      errorMessage: string;\n      optionsType: CreateShopifyCustomerOptions;\n      actionApiIdentifier: 'create';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyCustomer.bulkCreate';\n    }\n  update: {\n      /**\n       * @deprecated The action update on model shopifyCustomer does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'updateShopifyCustomer';\n      errorMessage: string;\n      optionsType: UpdateShopifyCustomerOptions;\n      actionApiIdentifier: 'update';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyCustomer.update';\n    }\n  bulkUpdate: {\n      /**\n       * @deprecated The action update on model shopifyCustomer does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkUpdateShopifyCustomers';\n      errorMessage: string;\n      optionsType: UpdateShopifyCustomerOptions;\n      actionApiIdentifier: 'update';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyCustomer.bulkUpdate';\n    }\n  delete: {\n      /**\n       * @deprecated The action delete on model shopifyCustomer does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'deleteShopifyCustomer';\n      errorMessage: string;\n      optionsType: DeleteShopifyCustomerOptions;\n      actionApiIdentifier: 'delete';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyCustomer.delete';\n    }\n  bulkDelete: {\n      /**\n       * @deprecated The action delete on model shopifyCustomer does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkDeleteShopifyCustomers';\n      errorMessage: string;\n      optionsType: DeleteShopifyCustomerOptions;\n      actionApiIdentifier: 'delete';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyCustomer.bulkDelete';\n    }\n  view: {\n      (query: string, variables?: Record<string, unknown>): Promise<unknown>\n      type: 'computedView';\n      operationName: 'view';\n      gqlFieldName: 'shopifyCustomerGellyView';\n      namespace: null;\n      imports: [];\n      variables: {\n          query: { type: 'String', required: true },\n          args: { type: 'JSONObject' }\n        };\n      variablesType: Record<string, unknown>;\n      resultType: Promise<unknown>;\n      plan: never;\n    }\n};\n\n/**\n * A manager for the shopifyCustomer model with all the available operations for reading and writing to it.*/\nexport const ShopifyCustomerManager = buildModelManager(\n  modelApiIdentifier,\n  pluralModelApiIdentifier,\n  DefaultShopifyCustomerSelection,\n  [\n    {\n      type: 'findOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultShopifyCustomerSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultShopifyCustomerSelection,\n      namespace: null\n    },\n    {\n      type: 'findMany',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyCustomerSelection,\n      namespace: null\n    },\n    {\n      type: 'findFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyCustomerSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyCustomerSelection,\n      namespace: null\n    },\n    {\n      type: 'findOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'findById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyCustomerSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'maybeFindById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyCustomerSelection,\n      namespace: null\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'createShopifyCustomer',\n      functionName: 'create',\n      errorMessage: 'The action create on model shopifyCustomer does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'create',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyCustomer.create'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkCreateShopifyCustomers',\n      functionName: 'bulkCreate',\n      errorMessage: 'The action create on model shopifyCustomer does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'create',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyCustomer.bulkCreate'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'updateShopifyCustomer',\n      functionName: 'update',\n      errorMessage: 'The action update on model shopifyCustomer does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'update',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyCustomer.update'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkUpdateShopifyCustomers',\n      functionName: 'bulkUpdate',\n      errorMessage: 'The action update on model shopifyCustomer does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'update',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyCustomer.bulkUpdate'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'deleteShopifyCustomer',\n      functionName: 'delete',\n      errorMessage: 'The action delete on model shopifyCustomer does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'delete',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyCustomer.delete'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkDeleteShopifyCustomers',\n      functionName: 'bulkDelete',\n      errorMessage: 'The action delete on model shopifyCustomer does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'delete',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyCustomer.bulkDelete'\n    },\n    {\n      type: 'computedView',\n      operationName: 'view',\n      functionName: 'view',\n      gqlFieldName: 'shopifyCustomerGellyView',\n      namespace: null,\n      variables: {\n        query: { type: 'String', required: true },\n        args: { type: 'JSONObject' }\n      }\n    }\n  ] as const\n) as unknown as {\n  // Gadget generates these model manager classes at runtime dynamically, which means there is no source code for the class. This is done to make the bundle size of the client as small as possible, avoiding a bunch of repeated source code in favour of one small builder function. The TypeScript types above document the exact interface of the constructed class.\n  new(connection: GadgetConnection): ShopifyCustomerManager;\n};", "import {\n  GadgetConnection,\n  GadgetRecord,\n  GadgetRecordImplementation,\n  GadgetRecordList,\n  GadgetNonUniqueDataError,\n  actionRunner,\n  findManyRunner,\n  findOneRunner,\n  findOneByFieldRunner,\n  FieldSelection,\n  LimitToKnownKeys,\n  Selectable\n} from \"@gadgetinc/api-client-core\";\n\nimport {\n  Query,\n  ExplicitNestingRequired,\n\n  IDsList,\n  PromiseOrLiveIterator,\n  ShopifyCustomerAddress,\n  AvailableShopifyCustomerAddressSelection,\n  ShopifyCustomerAddressSort,\n  ShopifyCustomerAddressFilter\n} from \"../types.js\";\n\nimport { buildModelManager } from \"../builder.js\";\nimport { AvailableSelection, AllFieldsSelected, DefaultSelection, Select, DeepFilterNever } from \"../utils.js\";\n\n/**\n* A type that holds only the selected fields (and nested fields) of shopifyCustomerAddress. The present fields in the result type of this are dynamic based on the options to each call that uses it.\n* The selected fields are sometimes given by the `Options` at `Options[\"select\"]`, and if a selection isn't made in the options, we use the default selection from above.\n*/\nexport type SelectedShopifyCustomerAddressOrDefault<Options extends Selectable<AvailableShopifyCustomerAddressSelection>> = DeepFilterNever<\n    Select<\n      ShopifyCustomerAddress,\n      DefaultSelection<\n        AvailableShopifyCustomerAddressSelection,\n        Options,\n        typeof DefaultShopifyCustomerAddressSelection\n      >\n    >\n  >;\n\n/**\n * A type that represents a `GadgetRecord` type for shopifyCustomerAddress.\n * It selects all fields of the model by default. If you want to represent a record type with a subset of fields, you could pass in an object in the `Selection` type parameter.\n *\n * @example\n * ```ts\n * const someFunction = (record: ShopifyCustomerAddressRecord, recordWithName: ShopifyCustomerAddressRecord<{ select: { name: true; } }>) => {\n *   // The type of the `record` variable will include all fields of the model.\n *   const name = record.name;\n *   const otherField = record.otherField;\n *\n *   // The type of the `recordWithName` variable will only include the selected fields.\n *   const name = recordWithName.name;\n *   const otherField = recordWithName.otherField; // Type error: Property 'otherField' does not exist on type 'GadgetRecord<{ name: true; }>'.\n * }\n * ```\n */\nexport type ShopifyCustomerAddressRecord<Selection extends AvailableShopifyCustomerAddressSelection | undefined = typeof DefaultShopifyCustomerAddressSelection> = DeepFilterNever<\n  GadgetRecord<\n    SelectedShopifyCustomerAddressOrDefault<{\n      select: Selection;\n    }>\n  >\n>;\n\nexport const DefaultShopifyCustomerAddressSelection = {\n     __typename: true,\n     id: true,\n     address1: true,\n     address2: true,\n     city: true,\n     company: true,\n     country: true,\n     countryCode: true,\n     countryName: true,\n     createdAt: true,\n     firstName: true,\n     lastName: true,\n     name: true,\n     phone: true,\n     province: true,\n     provinceCode: true,\n     shopId: true,\n     shopifyCustomerId: true,\n     updatedAt: true,\n     zipCode: true\n   } as const;\nconst modelApiIdentifier = \"shopifyCustomerAddress\" as const;\nconst pluralModelApiIdentifier = \"shopifyCustomerAddresses\" as const;\n/** Options that can be passed to the `ShopifyCustomerAddressManager#findOne` method */\n export interface FindOneShopifyCustomerAddressOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCustomerAddressSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `ShopifyCustomerAddressManager#maybeFindOne` method */\n export interface MaybeFindOneShopifyCustomerAddressOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCustomerAddressSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `ShopifyCustomerAddressManager#findMany` method */\n export interface FindManyShopifyCustomerAddressesOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCustomerAddressSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyCustomerAddressSort | ShopifyCustomerAddressSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyCustomerAddressFilter | ShopifyCustomerAddressFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n  first?: number | null;\n  last?: number | null;\n  after?: string | null;\n  before?: string | null;\n};\n/** Options that can be passed to the `ShopifyCustomerAddressManager#findFirst` method */\n export interface FindFirstShopifyCustomerAddressOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCustomerAddressSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyCustomerAddressSort | ShopifyCustomerAddressSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyCustomerAddressFilter | ShopifyCustomerAddressFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\n/** Options that can be passed to the `ShopifyCustomerAddressManager#maybeFindFirst` method */\n export interface MaybeFindFirstShopifyCustomerAddressOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCustomerAddressSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyCustomerAddressSort | ShopifyCustomerAddressSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyCustomerAddressFilter | ShopifyCustomerAddressFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\nexport interface CreateShopifyCustomerAddressOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCustomerAddressSelection;\n};\nexport interface UpdateShopifyCustomerAddressOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCustomerAddressSelection;\n};\nexport interface DeleteShopifyCustomerAddressOptions {\n\n};\n\n/**\n * A manager for the shopifyCustomerAddress model with all the available operations for reading and writing to it.*/\nexport type ShopifyCustomerAddressManager = {\n  readonly connection: GadgetConnection;\n\n  findOne: {\n      /**\n       * Finds one shopifyCustomerAddress by ID. Returns a `Promise` that resolves to the record if found and rejects the promise if the record isn't found.\n       **/\n      <Options extends FindOneShopifyCustomerAddressOptions>(id: string, options?: LimitToKnownKeys<Options, FindOneShopifyCustomerAddressOptions>): PromiseOrLiveIterator<Options,ShopifyCustomerAddressRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultShopifyCustomerAddressSelection;\n      namespace: null;\n      optionsType: FindOneShopifyCustomerAddressOptions;\n      selectionType: AvailableShopifyCustomerAddressSelection;\n      schemaType: Query[\"shopifyCustomerAddress\"];\n    }\n  maybeFindOne: {\n      /**\n       * Finds one shopifyCustomerAddress by ID. Returns a `Promise` that resolves to the record if found and returns null otherwise.\n       **/\n      <Options extends MaybeFindOneShopifyCustomerAddressOptions>(id: string, options?: LimitToKnownKeys<Options, MaybeFindOneShopifyCustomerAddressOptions>): PromiseOrLiveIterator<Options,ShopifyCustomerAddressRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: MaybeFindOneShopifyCustomerAddressOptions;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultShopifyCustomerAddressSelection;\n      namespace: null;\n      selectionType: AvailableShopifyCustomerAddressSelection;\n      schemaType: Query[\"shopifyCustomerAddress\"];\n    }\n  findMany: {\n      /**\n       * Finds many shopifyCustomerAddress. Returns a `Promise` for a `GadgetRecordList` of objects according to the passed `options`. Optionally filters the returned records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindManyShopifyCustomerAddressesOptions>(options?: LimitToKnownKeys<Options, FindManyShopifyCustomerAddressesOptions>): PromiseOrLiveIterator<Options,GadgetRecordList<ShopifyCustomerAddressRecord<Options[\"select\"]>>>;\n      type: 'findMany';\n      operationName: typeof pluralModelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: FindManyShopifyCustomerAddressesOptions;\n      defaultSelection: typeof DefaultShopifyCustomerAddressSelection;\n      namespace: null;\n      selectionType: AvailableShopifyCustomerAddressSelection;\n      schemaType: Query[\"shopifyCustomerAddress\"];\n    }\n  findFirst: {\n      /**\n       * Finds the first matching shopifyCustomerAddress. Returns a `Promise` that resolves to a record if found and rejects the promise if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindFirstShopifyCustomerAddressOptions>(options?: LimitToKnownKeys<Options, FindFirstShopifyCustomerAddressOptions>): PromiseOrLiveIterator<Options,ShopifyCustomerAddressRecord<Options[\"select\"]>>;\n      type: 'findFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: FindFirstShopifyCustomerAddressOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyCustomerAddressSelection;\n      namespace: null;\n      selectionType: AvailableShopifyCustomerAddressSelection;\n      schemaType: Query[\"shopifyCustomerAddress\"];\n    }\n  maybeFindFirst: {\n      /**\n       * Finds the first matching shopifyCustomerAddress. Returns a `Promise` that resolves to a record if found, or null if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` pagination options.\n       **/\n      <Options extends MaybeFindFirstShopifyCustomerAddressOptions>(options?: LimitToKnownKeys<Options, MaybeFindFirstShopifyCustomerAddressOptions>): PromiseOrLiveIterator<Options,ShopifyCustomerAddressRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: MaybeFindFirstShopifyCustomerAddressOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyCustomerAddressSelection;\n      namespace: null;\n      selectionType: AvailableShopifyCustomerAddressSelection;\n      schemaType: Query[\"shopifyCustomerAddress\"];\n    }\n  findById: {\n      /**\n      * Finds one shopifyCustomerAddress by its id. Returns a Promise that resolves to the record if found and rejects the promise if the record isn't found.\n      **/\n      <Options extends FindOneShopifyCustomerAddressOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneShopifyCustomerAddressOptions>): PromiseOrLiveIterator<Options,ShopifyCustomerAddressRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneShopifyCustomerAddressOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyCustomerAddressSelection;\n      namespace: null;\n      selectionType: AvailableShopifyCustomerAddressSelection;\n      schemaType: Query[\"shopifyCustomerAddress\"];\n    }\n  maybeFindById: {\n      /**\n      * Finds one shopifyCustomerAddress by its id. Returns a Promise that resolves to the record if found and returns null if the record isn't found.\n      **/\n      <Options extends FindOneShopifyCustomerAddressOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneShopifyCustomerAddressOptions>): Promise<ShopifyCustomerAddressRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneShopifyCustomerAddressOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyCustomerAddressSelection;\n      namespace: null;\n      selectionType: AvailableShopifyCustomerAddressSelection;\n      schemaType: Query[\"shopifyCustomerAddress\"];\n    }\n  create: {\n      /**\n       * @deprecated The action create on model shopifyCustomerAddress does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'createShopifyCustomerAddress';\n      errorMessage: string;\n      optionsType: CreateShopifyCustomerAddressOptions;\n      actionApiIdentifier: 'create';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyCustomerAddress.create';\n    }\n  bulkCreate: {\n      /**\n       * @deprecated The action create on model shopifyCustomerAddress does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkCreateShopifyCustomerAddresses';\n      errorMessage: string;\n      optionsType: CreateShopifyCustomerAddressOptions;\n      actionApiIdentifier: 'create';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyCustomerAddress.bulkCreate';\n    }\n  update: {\n      /**\n       * @deprecated The action update on model shopifyCustomerAddress does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'updateShopifyCustomerAddress';\n      errorMessage: string;\n      optionsType: UpdateShopifyCustomerAddressOptions;\n      actionApiIdentifier: 'update';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyCustomerAddress.update';\n    }\n  bulkUpdate: {\n      /**\n       * @deprecated The action update on model shopifyCustomerAddress does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkUpdateShopifyCustomerAddresses';\n      errorMessage: string;\n      optionsType: UpdateShopifyCustomerAddressOptions;\n      actionApiIdentifier: 'update';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyCustomerAddress.bulkUpdate';\n    }\n  delete: {\n      /**\n       * @deprecated The action delete on model shopifyCustomerAddress does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'deleteShopifyCustomerAddress';\n      errorMessage: string;\n      optionsType: DeleteShopifyCustomerAddressOptions;\n      actionApiIdentifier: 'delete';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyCustomerAddress.delete';\n    }\n  bulkDelete: {\n      /**\n       * @deprecated The action delete on model shopifyCustomerAddress does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkDeleteShopifyCustomerAddresses';\n      errorMessage: string;\n      optionsType: DeleteShopifyCustomerAddressOptions;\n      actionApiIdentifier: 'delete';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyCustomerAddress.bulkDelete';\n    }\n  view: {\n      (query: string, variables?: Record<string, unknown>): Promise<unknown>\n      type: 'computedView';\n      operationName: 'view';\n      gqlFieldName: 'shopifyCustomerAddressGellyView';\n      namespace: null;\n      imports: [];\n      variables: {\n          query: { type: 'String', required: true },\n          args: { type: 'JSONObject' }\n        };\n      variablesType: Record<string, unknown>;\n      resultType: Promise<unknown>;\n      plan: never;\n    }\n};\n\n/**\n * A manager for the shopifyCustomerAddress model with all the available operations for reading and writing to it.*/\nexport const ShopifyCustomerAddressManager = buildModelManager(\n  modelApiIdentifier,\n  pluralModelApiIdentifier,\n  DefaultShopifyCustomerAddressSelection,\n  [\n    {\n      type: 'findOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultShopifyCustomerAddressSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultShopifyCustomerAddressSelection,\n      namespace: null\n    },\n    {\n      type: 'findMany',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyCustomerAddressSelection,\n      namespace: null\n    },\n    {\n      type: 'findFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyCustomerAddressSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyCustomerAddressSelection,\n      namespace: null\n    },\n    {\n      type: 'findOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'findById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyCustomerAddressSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'maybeFindById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyCustomerAddressSelection,\n      namespace: null\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'createShopifyCustomerAddress',\n      functionName: 'create',\n      errorMessage: 'The action create on model shopifyCustomerAddress does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'create',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyCustomerAddress.create'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkCreateShopifyCustomerAddresses',\n      functionName: 'bulkCreate',\n      errorMessage: 'The action create on model shopifyCustomerAddress does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'create',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyCustomerAddress.bulkCreate'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'updateShopifyCustomerAddress',\n      functionName: 'update',\n      errorMessage: 'The action update on model shopifyCustomerAddress does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'update',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyCustomerAddress.update'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkUpdateShopifyCustomerAddresses',\n      functionName: 'bulkUpdate',\n      errorMessage: 'The action update on model shopifyCustomerAddress does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'update',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyCustomerAddress.bulkUpdate'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'deleteShopifyCustomerAddress',\n      functionName: 'delete',\n      errorMessage: 'The action delete on model shopifyCustomerAddress does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'delete',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyCustomerAddress.delete'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkDeleteShopifyCustomerAddresses',\n      functionName: 'bulkDelete',\n      errorMessage: 'The action delete on model shopifyCustomerAddress does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'delete',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyCustomerAddress.bulkDelete'\n    },\n    {\n      type: 'computedView',\n      operationName: 'view',\n      functionName: 'view',\n      gqlFieldName: 'shopifyCustomerAddressGellyView',\n      namespace: null,\n      variables: {\n        query: { type: 'String', required: true },\n        args: { type: 'JSONObject' }\n      }\n    }\n  ] as const\n) as unknown as {\n  // Gadget generates these model manager classes at runtime dynamically, which means there is no source code for the class. This is done to make the bundle size of the client as small as possible, avoiding a bunch of repeated source code in favour of one small builder function. The TypeScript types above document the exact interface of the constructed class.\n  new(connection: GadgetConnection): ShopifyCustomerAddressManager;\n};", "import {\n  GadgetConnection,\n  GadgetRecord,\n  GadgetRecordImplementation,\n  GadgetRecordList,\n  GadgetNonUniqueDataError,\n  actionRunner,\n  findManyRunner,\n  findOneRunner,\n  findOneByFieldRunner,\n  FieldSelection,\n  LimitToKnownKeys,\n  Selectable\n} from \"@gadgetinc/api-client-core\";\n\nimport {\n  Query,\n  ExplicitNestingRequired,\n\n  IDsList,\n  PromiseOrLiveIterator,\n  ShopifyOrder,\n  AvailableShopifyOrderSelection,\n  ShopifyOrderSort,\n  ShopifyOrderFilter\n} from \"../types.js\";\n\nimport { buildModelManager } from \"../builder.js\";\nimport { AvailableSelection, AllFieldsSelected, DefaultSelection, Select, DeepFilterNever } from \"../utils.js\";\n\n/**\n* A type that holds only the selected fields (and nested fields) of shopifyOrder. The present fields in the result type of this are dynamic based on the options to each call that uses it.\n* The selected fields are sometimes given by the `Options` at `Options[\"select\"]`, and if a selection isn't made in the options, we use the default selection from above.\n*/\nexport type SelectedShopifyOrderOrDefault<Options extends Selectable<AvailableShopifyOrderSelection>> = DeepFilterNever<\n    Select<\n      ShopifyOrder,\n      DefaultSelection<\n        AvailableShopifyOrderSelection,\n        Options,\n        typeof DefaultShopifyOrderSelection\n      >\n    >\n  >;\n\n/**\n * A type that represents a `GadgetRecord` type for shopifyOrder.\n * It selects all fields of the model by default. If you want to represent a record type with a subset of fields, you could pass in an object in the `Selection` type parameter.\n *\n * @example\n * ```ts\n * const someFunction = (record: ShopifyOrderRecord, recordWithName: ShopifyOrderRecord<{ select: { name: true; } }>) => {\n *   // The type of the `record` variable will include all fields of the model.\n *   const name = record.name;\n *   const otherField = record.otherField;\n *\n *   // The type of the `recordWithName` variable will only include the selected fields.\n *   const name = recordWithName.name;\n *   const otherField = recordWithName.otherField; // Type error: Property 'otherField' does not exist on type 'GadgetRecord<{ name: true; }>'.\n * }\n * ```\n */\nexport type ShopifyOrderRecord<Selection extends AvailableShopifyOrderSelection | undefined = typeof DefaultShopifyOrderSelection> = DeepFilterNever<\n  GadgetRecord<\n    SelectedShopifyOrderOrDefault<{\n      select: Selection;\n    }>\n  >\n>;\n\nexport const DefaultShopifyOrderSelection = {\n     __typename: true,\n     id: true,\n     additionalFees: true,\n     billingAddress: true,\n     browserIp: true,\n     buyerAcceptsMarketing: true,\n     cancelReason: true,\n     cancellation: true,\n     cancelledAt: true,\n     cartToken: true,\n     checkoutToken: true,\n     clientDetails: true,\n     closedAt: true,\n     createdAt: true,\n     currency: true,\n     currentSubtotalPrice: true,\n     currentSubtotalPriceSet: true,\n     currentTotalAdditionalFeesSet: true,\n     currentTotalDiscounts: true,\n     currentTotalDiscountsSet: true,\n     currentTotalDutiesSet: true,\n     currentTotalPrice: true,\n     currentTotalPriceSet: true,\n     currentTotalTax: true,\n     currentTotalTaxSet: true,\n     customerId: true,\n     customerLocale: true,\n     discountApplications: true,\n     discountCodes: true,\n     email: true,\n     estimatedTaxes: true,\n     financialStatus: true,\n     fulfillmentStatus: true,\n     fulfillmentsCount: true,\n     landingSite: true,\n     locationId: true,\n     merchantOfRecordAppId: true,\n     name: true,\n     note: true,\n     noteAttributes: true,\n     number: true,\n     orderNumber: true,\n     orderStatusUrl: true,\n     originalTotalAdditionalFeesSet: true,\n     originalTotalDutiesSet: true,\n     paymentGatewayNames: true,\n     phone: true,\n     poNumber: true,\n     presentmentCurrency: true,\n     processedAt: true,\n     purchasingCompanyContactId: true,\n     purchasingCompanyId: true,\n     purchasingCompanyLocationId: true,\n     purchasingEntity: true,\n     referringSite: true,\n     retailLocationId: true,\n     risk: true,\n     shippingAddress: true,\n     shopId: true,\n     shopifyCreatedAt: true,\n     shopifyProtect: true,\n     shopifyUpdatedAt: true,\n     sourceIdentifier: true,\n     sourceName: true,\n     sourceUrl: true,\n     statusPageUrl: true,\n     subtotalPrice: true,\n     subtotalPriceSet: true,\n     tags: true,\n     taxExempt: true,\n     taxLines: true,\n     taxesIncluded: true,\n     test: true,\n     token: true,\n     totalCashRoundingAdjustment: true,\n     totalDiscounts: true,\n     totalDiscountsSet: true,\n     totalLineItemsPrice: true,\n     totalLineItemsPriceSet: true,\n     totalOutstanding: true,\n     totalPrice: true,\n     totalPriceSet: true,\n     totalShippingPriceSet: true,\n     totalTax: true,\n     totalTaxSet: true,\n     totalTipReceived: true,\n     totalWeight: true,\n     transactionsCount: true,\n     updatedAt: true\n   } as const;\nconst modelApiIdentifier = \"shopifyOrder\" as const;\nconst pluralModelApiIdentifier = \"shopifyOrders\" as const;\n/** Options that can be passed to the `ShopifyOrderManager#findOne` method */\n export interface FindOneShopifyOrderOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyOrderSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `ShopifyOrderManager#maybeFindOne` method */\n export interface MaybeFindOneShopifyOrderOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyOrderSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `ShopifyOrderManager#findMany` method */\n export interface FindManyShopifyOrdersOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyOrderSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyOrderSort | ShopifyOrderSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyOrderFilter | ShopifyOrderFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n  first?: number | null;\n  last?: number | null;\n  after?: string | null;\n  before?: string | null;\n};\n/** Options that can be passed to the `ShopifyOrderManager#findFirst` method */\n export interface FindFirstShopifyOrderOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyOrderSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyOrderSort | ShopifyOrderSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyOrderFilter | ShopifyOrderFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\n/** Options that can be passed to the `ShopifyOrderManager#maybeFindFirst` method */\n export interface MaybeFindFirstShopifyOrderOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyOrderSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyOrderSort | ShopifyOrderSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyOrderFilter | ShopifyOrderFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\nexport interface CreateShopifyOrderOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyOrderSelection;\n};\nexport interface UpdateShopifyOrderOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyOrderSelection;\n};\nexport interface DeleteShopifyOrderOptions {\n\n};\n\n/**\n * A manager for the shopifyOrder model with all the available operations for reading and writing to it.*/\nexport type ShopifyOrderManager = {\n  readonly connection: GadgetConnection;\n\n  findOne: {\n      /**\n       * Finds one shopifyOrder by ID. Returns a `Promise` that resolves to the record if found and rejects the promise if the record isn't found.\n       **/\n      <Options extends FindOneShopifyOrderOptions>(id: string, options?: LimitToKnownKeys<Options, FindOneShopifyOrderOptions>): PromiseOrLiveIterator<Options,ShopifyOrderRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultShopifyOrderSelection;\n      namespace: null;\n      optionsType: FindOneShopifyOrderOptions;\n      selectionType: AvailableShopifyOrderSelection;\n      schemaType: Query[\"shopifyOrder\"];\n    }\n  maybeFindOne: {\n      /**\n       * Finds one shopifyOrder by ID. Returns a `Promise` that resolves to the record if found and returns null otherwise.\n       **/\n      <Options extends MaybeFindOneShopifyOrderOptions>(id: string, options?: LimitToKnownKeys<Options, MaybeFindOneShopifyOrderOptions>): PromiseOrLiveIterator<Options,ShopifyOrderRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: MaybeFindOneShopifyOrderOptions;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultShopifyOrderSelection;\n      namespace: null;\n      selectionType: AvailableShopifyOrderSelection;\n      schemaType: Query[\"shopifyOrder\"];\n    }\n  findMany: {\n      /**\n       * Finds many shopifyOrder. Returns a `Promise` for a `GadgetRecordList` of objects according to the passed `options`. Optionally filters the returned records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindManyShopifyOrdersOptions>(options?: LimitToKnownKeys<Options, FindManyShopifyOrdersOptions>): PromiseOrLiveIterator<Options,GadgetRecordList<ShopifyOrderRecord<Options[\"select\"]>>>;\n      type: 'findMany';\n      operationName: typeof pluralModelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: FindManyShopifyOrdersOptions;\n      defaultSelection: typeof DefaultShopifyOrderSelection;\n      namespace: null;\n      selectionType: AvailableShopifyOrderSelection;\n      schemaType: Query[\"shopifyOrder\"];\n    }\n  findFirst: {\n      /**\n       * Finds the first matching shopifyOrder. Returns a `Promise` that resolves to a record if found and rejects the promise if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindFirstShopifyOrderOptions>(options?: LimitToKnownKeys<Options, FindFirstShopifyOrderOptions>): PromiseOrLiveIterator<Options,ShopifyOrderRecord<Options[\"select\"]>>;\n      type: 'findFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: FindFirstShopifyOrderOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyOrderSelection;\n      namespace: null;\n      selectionType: AvailableShopifyOrderSelection;\n      schemaType: Query[\"shopifyOrder\"];\n    }\n  maybeFindFirst: {\n      /**\n       * Finds the first matching shopifyOrder. Returns a `Promise` that resolves to a record if found, or null if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` pagination options.\n       **/\n      <Options extends MaybeFindFirstShopifyOrderOptions>(options?: LimitToKnownKeys<Options, MaybeFindFirstShopifyOrderOptions>): PromiseOrLiveIterator<Options,ShopifyOrderRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: MaybeFindFirstShopifyOrderOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyOrderSelection;\n      namespace: null;\n      selectionType: AvailableShopifyOrderSelection;\n      schemaType: Query[\"shopifyOrder\"];\n    }\n  findById: {\n      /**\n      * Finds one shopifyOrder by its id. Returns a Promise that resolves to the record if found and rejects the promise if the record isn't found.\n      **/\n      <Options extends FindOneShopifyOrderOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneShopifyOrderOptions>): PromiseOrLiveIterator<Options,ShopifyOrderRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneShopifyOrderOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyOrderSelection;\n      namespace: null;\n      selectionType: AvailableShopifyOrderSelection;\n      schemaType: Query[\"shopifyOrder\"];\n    }\n  maybeFindById: {\n      /**\n      * Finds one shopifyOrder by its id. Returns a Promise that resolves to the record if found and returns null if the record isn't found.\n      **/\n      <Options extends FindOneShopifyOrderOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneShopifyOrderOptions>): Promise<ShopifyOrderRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneShopifyOrderOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyOrderSelection;\n      namespace: null;\n      selectionType: AvailableShopifyOrderSelection;\n      schemaType: Query[\"shopifyOrder\"];\n    }\n  create: {\n      /**\n       * @deprecated The action create on model shopifyOrder does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'createShopifyOrder';\n      errorMessage: string;\n      optionsType: CreateShopifyOrderOptions;\n      actionApiIdentifier: 'create';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyOrder.create';\n    }\n  bulkCreate: {\n      /**\n       * @deprecated The action create on model shopifyOrder does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkCreateShopifyOrders';\n      errorMessage: string;\n      optionsType: CreateShopifyOrderOptions;\n      actionApiIdentifier: 'create';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyOrder.bulkCreate';\n    }\n  update: {\n      /**\n       * @deprecated The action update on model shopifyOrder does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'updateShopifyOrder';\n      errorMessage: string;\n      optionsType: UpdateShopifyOrderOptions;\n      actionApiIdentifier: 'update';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyOrder.update';\n    }\n  bulkUpdate: {\n      /**\n       * @deprecated The action update on model shopifyOrder does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkUpdateShopifyOrders';\n      errorMessage: string;\n      optionsType: UpdateShopifyOrderOptions;\n      actionApiIdentifier: 'update';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyOrder.bulkUpdate';\n    }\n  delete: {\n      /**\n       * @deprecated The action delete on model shopifyOrder does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'deleteShopifyOrder';\n      errorMessage: string;\n      optionsType: DeleteShopifyOrderOptions;\n      actionApiIdentifier: 'delete';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyOrder.delete';\n    }\n  bulkDelete: {\n      /**\n       * @deprecated The action delete on model shopifyOrder does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkDeleteShopifyOrders';\n      errorMessage: string;\n      optionsType: DeleteShopifyOrderOptions;\n      actionApiIdentifier: 'delete';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyOrder.bulkDelete';\n    }\n  view: {\n      (query: string, variables?: Record<string, unknown>): Promise<unknown>\n      type: 'computedView';\n      operationName: 'view';\n      gqlFieldName: 'shopifyOrderGellyView';\n      namespace: null;\n      imports: [];\n      variables: {\n          query: { type: 'String', required: true },\n          args: { type: 'JSONObject' }\n        };\n      variablesType: Record<string, unknown>;\n      resultType: Promise<unknown>;\n      plan: never;\n    }\n};\n\n/**\n * A manager for the shopifyOrder model with all the available operations for reading and writing to it.*/\nexport const ShopifyOrderManager = buildModelManager(\n  modelApiIdentifier,\n  pluralModelApiIdentifier,\n  DefaultShopifyOrderSelection,\n  [\n    {\n      type: 'findOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultShopifyOrderSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultShopifyOrderSelection,\n      namespace: null\n    },\n    {\n      type: 'findMany',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyOrderSelection,\n      namespace: null\n    },\n    {\n      type: 'findFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyOrderSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyOrderSelection,\n      namespace: null\n    },\n    {\n      type: 'findOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'findById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyOrderSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'maybeFindById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyOrderSelection,\n      namespace: null\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'createShopifyOrder',\n      functionName: 'create',\n      errorMessage: 'The action create on model shopifyOrder does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'create',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyOrder.create'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkCreateShopifyOrders',\n      functionName: 'bulkCreate',\n      errorMessage: 'The action create on model shopifyOrder does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'create',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyOrder.bulkCreate'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'updateShopifyOrder',\n      functionName: 'update',\n      errorMessage: 'The action update on model shopifyOrder does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'update',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyOrder.update'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkUpdateShopifyOrders',\n      functionName: 'bulkUpdate',\n      errorMessage: 'The action update on model shopifyOrder does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'update',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyOrder.bulkUpdate'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'deleteShopifyOrder',\n      functionName: 'delete',\n      errorMessage: 'The action delete on model shopifyOrder does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'delete',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyOrder.delete'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkDeleteShopifyOrders',\n      functionName: 'bulkDelete',\n      errorMessage: 'The action delete on model shopifyOrder does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'delete',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyOrder.bulkDelete'\n    },\n    {\n      type: 'computedView',\n      operationName: 'view',\n      functionName: 'view',\n      gqlFieldName: 'shopifyOrderGellyView',\n      namespace: null,\n      variables: {\n        query: { type: 'String', required: true },\n        args: { type: 'JSONObject' }\n      }\n    }\n  ] as const\n) as unknown as {\n  // Gadget generates these model manager classes at runtime dynamically, which means there is no source code for the class. This is done to make the bundle size of the client as small as possible, avoiding a bunch of repeated source code in favour of one small builder function. The TypeScript types above document the exact interface of the constructed class.\n  new(connection: GadgetConnection): ShopifyOrderManager;\n};", "import {\n  GadgetConnection,\n  GadgetRecord,\n  GadgetRecordImplementation,\n  GadgetRecordList,\n  GadgetNonUniqueDataError,\n  actionRunner,\n  findManyRunner,\n  findOneRunner,\n  findOneByFieldRunner,\n  FieldSelection,\n  LimitToKnownKeys,\n  Selectable\n} from \"@gadgetinc/api-client-core\";\n\nimport {\n  Query,\n  ExplicitNestingRequired,\n\n  IDsList,\n  PromiseOrLiveIterator,\n  ShopifyProduct,\n  AvailableShopifyProductSelection,\n  ShopifyProductSort,\n  ShopifyProductFilter,\n  CreateEmbeddingShopifyProductInput,\n  UpdateAllShopifyProductInput\n} from \"../types.js\";\n\nimport { buildModelManager } from \"../builder.js\";\nimport { AvailableSelection, AllFieldsSelected, DefaultSelection, Select, DeepFilterNever } from \"../utils.js\";\n\n/**\n* A type that holds only the selected fields (and nested fields) of shopifyProduct. The present fields in the result type of this are dynamic based on the options to each call that uses it.\n* The selected fields are sometimes given by the `Options` at `Options[\"select\"]`, and if a selection isn't made in the options, we use the default selection from above.\n*/\nexport type SelectedShopifyProductOrDefault<Options extends Selectable<AvailableShopifyProductSelection>> = DeepFilterNever<\n    Select<\n      ShopifyProduct,\n      DefaultSelection<\n        AvailableShopifyProductSelection,\n        Options,\n        typeof DefaultShopifyProductSelection\n      >\n    >\n  >;\n\n/**\n * A type that represents a `GadgetRecord` type for shopifyProduct.\n * It selects all fields of the model by default. If you want to represent a record type with a subset of fields, you could pass in an object in the `Selection` type parameter.\n *\n * @example\n * ```ts\n * const someFunction = (record: ShopifyProductRecord, recordWithName: ShopifyProductRecord<{ select: { name: true; } }>) => {\n *   // The type of the `record` variable will include all fields of the model.\n *   const name = record.name;\n *   const otherField = record.otherField;\n *\n *   // The type of the `recordWithName` variable will only include the selected fields.\n *   const name = recordWithName.name;\n *   const otherField = recordWithName.otherField; // Type error: Property 'otherField' does not exist on type 'GadgetRecord<{ name: true; }>'.\n * }\n * ```\n */\nexport type ShopifyProductRecord<Selection extends AvailableShopifyProductSelection | undefined = typeof DefaultShopifyProductSelection> = DeepFilterNever<\n  GadgetRecord<\n    SelectedShopifyProductOrDefault<{\n      select: Selection;\n    }>\n  >\n>;\n\nexport const DefaultShopifyProductSelection = {\n     __typename: true,\n     id: true,\n     body: true,\n     category: true,\n     compareAtPriceRange: true,\n     createdAt: true,\n     descriptionEmbedding: true,\n     handle: true,\n     hasVariantsThatRequiresComponents: true,\n     productCategory: true,\n     productType: true,\n     publishedAt: true,\n     shopId: true,\n     shopifyCreatedAt: true,\n     shopifyUpdatedAt: true,\n     specificationsFrequency: true,\n     specificationsProperties: true,\n     specificationsType: true,\n     status: true,\n     tags: true,\n     templateSuffix: true,\n     title: true,\n     updatedAt: true,\n     vendor: true\n   } as const;\nconst modelApiIdentifier = \"shopifyProduct\" as const;\nconst pluralModelApiIdentifier = \"shopifyProducts\" as const;\n/** Options that can be passed to the `ShopifyProductManager#findOne` method */\n export interface FindOneShopifyProductOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyProductSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `ShopifyProductManager#maybeFindOne` method */\n export interface MaybeFindOneShopifyProductOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyProductSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `ShopifyProductManager#findMany` method */\n export interface FindManyShopifyProductsOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyProductSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyProductSort | ShopifyProductSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyProductFilter | ShopifyProductFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n  first?: number | null;\n  last?: number | null;\n  after?: string | null;\n  before?: string | null;\n};\n/** Options that can be passed to the `ShopifyProductManager#findFirst` method */\n export interface FindFirstShopifyProductOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyProductSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyProductSort | ShopifyProductSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyProductFilter | ShopifyProductFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\n/** Options that can be passed to the `ShopifyProductManager#maybeFindFirst` method */\n export interface MaybeFindFirstShopifyProductOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyProductSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyProductSort | ShopifyProductSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyProductFilter | ShopifyProductFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\nexport interface CreateShopifyProductOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyProductSelection;\n};\nexport interface UpdateShopifyProductOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyProductSelection;\n};\nexport interface DeleteShopifyProductOptions {\n\n};\nexport interface CreateEmbeddingShopifyProductOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyProductSelection;\n};\nexport interface UpdateAllShopifyProductOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyProductSelection;\n};\n/**\n * The fully-qualified, expanded form of the inputs for executing the createEmbedding action.\n * The flattened style should be preferred over this style, but for models with ambiguous API identifiers, this style can be used to remove any ambiguity.\n **/\nexport type FullyQualifiedCreateEmbeddingShopifyProductVariables = {\n  shopifyProduct?: CreateEmbeddingShopifyProductInput;\n}\n/**\n * The inputs for executing createEmbedding on shopifyProduct.\n * This is the flattened style of inputs, suitable for general use, and should be preferred.\n **/\nexport type CreateEmbeddingShopifyProductVariables = CreateEmbeddingShopifyProductInput;\n/**\n * The return value from executing createEmbedding on shopifyProduct\n * Is a GadgetRecord of the model's type.\n **/\nexport type CreateEmbeddingShopifyProductResult<Options extends CreateEmbeddingShopifyProductOptions> = SelectedShopifyProductOrDefault<Options> extends void ?\n      void :\n      GadgetRecord<SelectedShopifyProductOrDefault<Options>>;\n/**\n * The fully-qualified, expanded form of the inputs for executing the updateAll action.\n * The flattened style should be preferred over this style, but for models with ambiguous API identifiers, this style can be used to remove any ambiguity.\n **/\nexport type FullyQualifiedUpdateAllShopifyProductVariables = {\n  shopifyProduct?: UpdateAllShopifyProductInput;\n}\n/**\n * The inputs for executing updateAll on shopifyProduct.\n * This is the flattened style of inputs, suitable for general use, and should be preferred.\n **/\nexport type UpdateAllShopifyProductVariables = UpdateAllShopifyProductInput;\n/**\n * The return value from executing updateAll on shopifyProduct\n * Is a GadgetRecord of the model's type.\n **/\nexport type UpdateAllShopifyProductResult<Options extends UpdateAllShopifyProductOptions> = SelectedShopifyProductOrDefault<Options> extends void ?\n      void :\n      GadgetRecord<SelectedShopifyProductOrDefault<Options>>;\n\n/**\n * A manager for the shopifyProduct model with all the available operations for reading and writing to it.*/\nexport type ShopifyProductManager = {\n  readonly connection: GadgetConnection;\n\n  findOne: {\n      /**\n       * Finds one shopifyProduct by ID. Returns a `Promise` that resolves to the record if found and rejects the promise if the record isn't found.\n       **/\n      <Options extends FindOneShopifyProductOptions>(id: string, options?: LimitToKnownKeys<Options, FindOneShopifyProductOptions>): PromiseOrLiveIterator<Options,ShopifyProductRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultShopifyProductSelection;\n      namespace: null;\n      optionsType: FindOneShopifyProductOptions;\n      selectionType: AvailableShopifyProductSelection;\n      schemaType: Query[\"shopifyProduct\"];\n    }\n  maybeFindOne: {\n      /**\n       * Finds one shopifyProduct by ID. Returns a `Promise` that resolves to the record if found and returns null otherwise.\n       **/\n      <Options extends MaybeFindOneShopifyProductOptions>(id: string, options?: LimitToKnownKeys<Options, MaybeFindOneShopifyProductOptions>): PromiseOrLiveIterator<Options,ShopifyProductRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: MaybeFindOneShopifyProductOptions;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultShopifyProductSelection;\n      namespace: null;\n      selectionType: AvailableShopifyProductSelection;\n      schemaType: Query[\"shopifyProduct\"];\n    }\n  findMany: {\n      /**\n       * Finds many shopifyProduct. Returns a `Promise` for a `GadgetRecordList` of objects according to the passed `options`. Optionally filters the returned records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindManyShopifyProductsOptions>(options?: LimitToKnownKeys<Options, FindManyShopifyProductsOptions>): PromiseOrLiveIterator<Options,GadgetRecordList<ShopifyProductRecord<Options[\"select\"]>>>;\n      type: 'findMany';\n      operationName: typeof pluralModelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: FindManyShopifyProductsOptions;\n      defaultSelection: typeof DefaultShopifyProductSelection;\n      namespace: null;\n      selectionType: AvailableShopifyProductSelection;\n      schemaType: Query[\"shopifyProduct\"];\n    }\n  findFirst: {\n      /**\n       * Finds the first matching shopifyProduct. Returns a `Promise` that resolves to a record if found and rejects the promise if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindFirstShopifyProductOptions>(options?: LimitToKnownKeys<Options, FindFirstShopifyProductOptions>): PromiseOrLiveIterator<Options,ShopifyProductRecord<Options[\"select\"]>>;\n      type: 'findFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: FindFirstShopifyProductOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyProductSelection;\n      namespace: null;\n      selectionType: AvailableShopifyProductSelection;\n      schemaType: Query[\"shopifyProduct\"];\n    }\n  maybeFindFirst: {\n      /**\n       * Finds the first matching shopifyProduct. Returns a `Promise` that resolves to a record if found, or null if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` pagination options.\n       **/\n      <Options extends MaybeFindFirstShopifyProductOptions>(options?: LimitToKnownKeys<Options, MaybeFindFirstShopifyProductOptions>): PromiseOrLiveIterator<Options,ShopifyProductRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: MaybeFindFirstShopifyProductOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyProductSelection;\n      namespace: null;\n      selectionType: AvailableShopifyProductSelection;\n      schemaType: Query[\"shopifyProduct\"];\n    }\n  findById: {\n      /**\n      * Finds one shopifyProduct by its id. Returns a Promise that resolves to the record if found and rejects the promise if the record isn't found.\n      **/\n      <Options extends FindOneShopifyProductOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneShopifyProductOptions>): PromiseOrLiveIterator<Options,ShopifyProductRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneShopifyProductOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyProductSelection;\n      namespace: null;\n      selectionType: AvailableShopifyProductSelection;\n      schemaType: Query[\"shopifyProduct\"];\n    }\n  maybeFindById: {\n      /**\n      * Finds one shopifyProduct by its id. Returns a Promise that resolves to the record if found and returns null if the record isn't found.\n      **/\n      <Options extends FindOneShopifyProductOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneShopifyProductOptions>): Promise<ShopifyProductRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneShopifyProductOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyProductSelection;\n      namespace: null;\n      selectionType: AvailableShopifyProductSelection;\n      schemaType: Query[\"shopifyProduct\"];\n    }\n  create: {\n      /**\n       * @deprecated The action create on model shopifyProduct does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'createShopifyProduct';\n      errorMessage: string;\n      optionsType: CreateShopifyProductOptions;\n      actionApiIdentifier: 'create';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyProduct.create';\n    }\n  bulkCreate: {\n      /**\n       * @deprecated The action create on model shopifyProduct does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkCreateShopifyProducts';\n      errorMessage: string;\n      optionsType: CreateShopifyProductOptions;\n      actionApiIdentifier: 'create';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyProduct.bulkCreate';\n    }\n  update: {\n      /**\n       * @deprecated The action update on model shopifyProduct does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'updateShopifyProduct';\n      errorMessage: string;\n      optionsType: UpdateShopifyProductOptions;\n      actionApiIdentifier: 'update';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyProduct.update';\n    }\n  bulkUpdate: {\n      /**\n       * @deprecated The action update on model shopifyProduct does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkUpdateShopifyProducts';\n      errorMessage: string;\n      optionsType: UpdateShopifyProductOptions;\n      actionApiIdentifier: 'update';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyProduct.bulkUpdate';\n    }\n  delete: {\n      /**\n       * @deprecated The action delete on model shopifyProduct does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'deleteShopifyProduct';\n      errorMessage: string;\n      optionsType: DeleteShopifyProductOptions;\n      actionApiIdentifier: 'delete';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyProduct.delete';\n    }\n  bulkDelete: {\n      /**\n       * @deprecated The action delete on model shopifyProduct does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkDeleteShopifyProducts';\n      errorMessage: string;\n      optionsType: DeleteShopifyProductOptions;\n      actionApiIdentifier: 'delete';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyProduct.bulkDelete';\n    }\n  createEmbedding: {\n      /**\n       * Executes the createEmbedding actionon one record specified by `id`.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the flat style, all-params-together overload that most use cases should use.\n      *\n      * @example\n      * * const shopifyProductRecord = await api.shopifyProduct.createEmbedding(\"1\", {\n        *   body: \"example value for body\",\n        *   category: {\n        *     example: true,\n        *     key: \"value\",\n        *   },\n        *   compareAtPriceRange: {\n        *     example: true,\n        *     key: \"value\",\n        *   },\n        *   id: \"1\",\n        *   productCategory: {\n        *     example: true,\n        *     key: \"value\",\n        *   },\n        * });\n      **/\n      <Options extends CreateEmbeddingShopifyProductOptions>(\n        id: string,\n        variables: CreateEmbeddingShopifyProductVariables,\n        options?: LimitToKnownKeys<Options, CreateEmbeddingShopifyProductOptions>\n      ): Promise<CreateEmbeddingShopifyProductResult<Options>>;\n      /**\n       * Executes the createEmbedding actionon one record specified by `id`.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the fully qualified, nested api identifier style overload that should be used when there's an ambiguity between an action param and a model field.\n      *\n      * @example\n      * * const shopifyProductRecord = await api.shopifyProduct.createEmbedding(\"1\", {\n        *   shopifyProduct: {\n        *     body: \"example value for body\",\n        *     category: {\n        *       example: true,\n        *       key: \"value\",\n        *     },\n        *     compareAtPriceRange: {\n        *       example: true,\n        *       key: \"value\",\n        *     },\n        *     id: \"1\",\n        *     productCategory: {\n        *       example: true,\n        *       key: \"value\",\n        *     },\n        *   },\n        * });\n      **/\n      <Options extends CreateEmbeddingShopifyProductOptions>(\n        id: string,\n        variables: FullyQualifiedCreateEmbeddingShopifyProductVariables,\n        options?: LimitToKnownKeys<Options, CreateEmbeddingShopifyProductOptions>\n      ): Promise<CreateEmbeddingShopifyProductResult<Options>>;\n      type: 'action';\n      operationName: 'createEmbeddingShopifyProduct';\n      operationReturnType: 'CreateEmbeddingShopifyProduct';\n      namespace: null;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      operatesWithRecordIdentity: true;\n      modelSelectionField: typeof modelApiIdentifier;\n      isBulk: false;\n      isDeleter: false;\n      variables: {\n          id: { required: true, type: 'GadgetID' },\n          shopifyProduct: { required: false, type: 'CreateEmbeddingShopifyProductInput' }\n        };\n      variablesType: (\n              { id: string }\n              & (FullyQualifiedCreateEmbeddingShopifyProductVariables | CreateEmbeddingShopifyProductVariables)\n            );\n      hasAmbiguousIdentifier: false;\n      paramOnlyVariables: [];\n      hasReturnType: false;\n      acceptsModelInput: true;\n      hasCreateOrUpdateEffect: true;\n      imports: [ 'CreateEmbeddingShopifyProductInput' ];\n      optionsType: CreateEmbeddingShopifyProductOptions;\n      selectionType: AvailableShopifyProductSelection;\n      schemaType: Query[\"shopifyProduct\"];\n      defaultSelection: typeof DefaultShopifyProductSelection;\n    }\n  bulkCreateEmbedding: {\n      /**\n        * Executes the bulkCreateEmbedding action with the given inputs.\n        */\n       <Options extends CreateEmbeddingShopifyProductOptions>(\n          inputs: (FullyQualifiedCreateEmbeddingShopifyProductVariables | CreateEmbeddingShopifyProductVariables & { id: string })[],\n          options?: LimitToKnownKeys<Options, CreateEmbeddingShopifyProductOptions>\n       ): Promise<CreateEmbeddingShopifyProductResult<Options>[]>\n      type: 'action';\n      operationName: 'bulkCreateEmbeddingShopifyProducts';\n      isBulk: true;\n      isDeleter: false;\n      hasReturnType: false;\n      acceptsModelInput: true;\n      operatesWithRecordIdentity: true;\n      singleActionFunctionName: 'createEmbedding';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      modelSelectionField: typeof pluralModelApiIdentifier;\n      optionsType: CreateEmbeddingShopifyProductOptions;\n      namespace: null;\n      variables: {\n          inputs: {\n            required: true,\n            type: '[BulkCreateEmbeddingShopifyProductsInput!]'\n          }\n        };\n      variablesType: (FullyQualifiedCreateEmbeddingShopifyProductVariables | CreateEmbeddingShopifyProductVariables & { id: string })[];\n      paramOnlyVariables: [];\n      selectionType: AvailableShopifyProductSelection;\n      schemaType: Query[\"shopifyProduct\"];\n      defaultSelection: typeof DefaultShopifyProductSelection;\n    }\n  updateAll: {\n      /**\n       * Executes the updateAll actionon one record specified by `id`.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the flat style, all-params-together overload that most use cases should use.\n      *\n      * @example\n      * * const shopifyProductRecord = await api.shopifyProduct.updateAll(\"1\", {\n        *   body: \"example value for body\",\n        *   category: {\n        *     example: true,\n        *     key: \"value\",\n        *   },\n        *   compareAtPriceRange: {\n        *     example: true,\n        *     key: \"value\",\n        *   },\n        *   id: \"1\",\n        *   productCategory: {\n        *     example: true,\n        *     key: \"value\",\n        *   },\n        * });\n      **/\n      <Options extends UpdateAllShopifyProductOptions>(\n        id: string,\n        variables: UpdateAllShopifyProductVariables,\n        options?: LimitToKnownKeys<Options, UpdateAllShopifyProductOptions>\n      ): Promise<UpdateAllShopifyProductResult<Options>>;\n      /**\n       * Executes the updateAll actionon one record specified by `id`.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the fully qualified, nested api identifier style overload that should be used when there's an ambiguity between an action param and a model field.\n      *\n      * @example\n      * * const shopifyProductRecord = await api.shopifyProduct.updateAll(\"1\", {\n        *   shopifyProduct: {\n        *     body: \"example value for body\",\n        *     category: {\n        *       example: true,\n        *       key: \"value\",\n        *     },\n        *     compareAtPriceRange: {\n        *       example: true,\n        *       key: \"value\",\n        *     },\n        *     id: \"1\",\n        *     productCategory: {\n        *       example: true,\n        *       key: \"value\",\n        *     },\n        *   },\n        * });\n      **/\n      <Options extends UpdateAllShopifyProductOptions>(\n        id: string,\n        variables: FullyQualifiedUpdateAllShopifyProductVariables,\n        options?: LimitToKnownKeys<Options, UpdateAllShopifyProductOptions>\n      ): Promise<UpdateAllShopifyProductResult<Options>>;\n      type: 'action';\n      operationName: 'updateAllShopifyProduct';\n      operationReturnType: 'UpdateAllShopifyProduct';\n      namespace: null;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      operatesWithRecordIdentity: true;\n      modelSelectionField: typeof modelApiIdentifier;\n      isBulk: false;\n      isDeleter: false;\n      variables: {\n          id: { required: true, type: 'GadgetID' },\n          shopifyProduct: { required: false, type: 'UpdateAllShopifyProductInput' }\n        };\n      variablesType: (\n              { id: string }\n              & (FullyQualifiedUpdateAllShopifyProductVariables | UpdateAllShopifyProductVariables)\n            );\n      hasAmbiguousIdentifier: false;\n      paramOnlyVariables: [];\n      hasReturnType: false;\n      acceptsModelInput: true;\n      hasCreateOrUpdateEffect: true;\n      imports: [ 'UpdateAllShopifyProductInput' ];\n      optionsType: UpdateAllShopifyProductOptions;\n      selectionType: AvailableShopifyProductSelection;\n      schemaType: Query[\"shopifyProduct\"];\n      defaultSelection: typeof DefaultShopifyProductSelection;\n    }\n  bulkUpdateAll: {\n      /**\n        * Executes the bulkUpdateAll action with the given inputs.\n        */\n       <Options extends UpdateAllShopifyProductOptions>(\n          inputs: (FullyQualifiedUpdateAllShopifyProductVariables | UpdateAllShopifyProductVariables & { id: string })[],\n          options?: LimitToKnownKeys<Options, UpdateAllShopifyProductOptions>\n       ): Promise<UpdateAllShopifyProductResult<Options>[]>\n      type: 'action';\n      operationName: 'bulkUpdateAllShopifyProducts';\n      isBulk: true;\n      isDeleter: false;\n      hasReturnType: false;\n      acceptsModelInput: true;\n      operatesWithRecordIdentity: true;\n      singleActionFunctionName: 'updateAll';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      modelSelectionField: typeof pluralModelApiIdentifier;\n      optionsType: UpdateAllShopifyProductOptions;\n      namespace: null;\n      variables: {\n          inputs: { required: true, type: '[BulkUpdateAllShopifyProductsInput!]' }\n        };\n      variablesType: (FullyQualifiedUpdateAllShopifyProductVariables | UpdateAllShopifyProductVariables & { id: string })[];\n      paramOnlyVariables: [];\n      selectionType: AvailableShopifyProductSelection;\n      schemaType: Query[\"shopifyProduct\"];\n      defaultSelection: typeof DefaultShopifyProductSelection;\n    }\n  view: {\n      (query: string, variables?: Record<string, unknown>): Promise<unknown>\n      type: 'computedView';\n      operationName: 'view';\n      gqlFieldName: 'shopifyProductGellyView';\n      namespace: null;\n      imports: [];\n      variables: {\n          query: { type: 'String', required: true },\n          args: { type: 'JSONObject' }\n        };\n      variablesType: Record<string, unknown>;\n      resultType: Promise<unknown>;\n      plan: never;\n    }\n};\n\n/**\n * A manager for the shopifyProduct model with all the available operations for reading and writing to it.*/\nexport const ShopifyProductManager = buildModelManager(\n  modelApiIdentifier,\n  pluralModelApiIdentifier,\n  DefaultShopifyProductSelection,\n  [\n    {\n      type: 'findOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultShopifyProductSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultShopifyProductSelection,\n      namespace: null\n    },\n    {\n      type: 'findMany',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyProductSelection,\n      namespace: null\n    },\n    {\n      type: 'findFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyProductSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyProductSelection,\n      namespace: null\n    },\n    {\n      type: 'findOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'findById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyProductSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'maybeFindById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyProductSelection,\n      namespace: null\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'createShopifyProduct',\n      functionName: 'create',\n      errorMessage: 'The action create on model shopifyProduct does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'create',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyProduct.create'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkCreateShopifyProducts',\n      functionName: 'bulkCreate',\n      errorMessage: 'The action create on model shopifyProduct does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'create',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyProduct.bulkCreate'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'updateShopifyProduct',\n      functionName: 'update',\n      errorMessage: 'The action update on model shopifyProduct does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'update',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyProduct.update'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkUpdateShopifyProducts',\n      functionName: 'bulkUpdate',\n      errorMessage: 'The action update on model shopifyProduct does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'update',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyProduct.bulkUpdate'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'deleteShopifyProduct',\n      functionName: 'delete',\n      errorMessage: 'The action delete on model shopifyProduct does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'delete',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyProduct.delete'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkDeleteShopifyProducts',\n      functionName: 'bulkDelete',\n      errorMessage: 'The action delete on model shopifyProduct does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'delete',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyProduct.bulkDelete'\n    },\n    {\n      type: 'action',\n      operationName: 'createEmbeddingShopifyProduct',\n      operationReturnType: 'CreateEmbeddingShopifyProduct',\n      functionName: 'createEmbedding',\n      namespace: null,\n      modelApiIdentifier: modelApiIdentifier,\n      operatesWithRecordIdentity: true,\n      modelSelectionField: modelApiIdentifier,\n      isBulk: false,\n      isDeleter: false,\n      variables: {\n        id: { required: true, type: 'GadgetID' },\n        shopifyProduct: { required: false, type: 'CreateEmbeddingShopifyProductInput' }\n      },\n      hasAmbiguousIdentifier: false,\n      paramOnlyVariables: [],\n      hasReturnType: false,\n      acceptsModelInput: true,\n      hasCreateOrUpdateEffect: true,\n      defaultSelection: DefaultShopifyProductSelection\n    },\n    {\n      type: 'action',\n      operationName: 'bulkCreateEmbeddingShopifyProducts',\n      functionName: 'bulkCreateEmbedding',\n      isBulk: true,\n      isDeleter: false,\n      hasReturnType: false,\n      acceptsModelInput: true,\n      operatesWithRecordIdentity: true,\n      singleActionFunctionName: 'createEmbedding',\n      modelApiIdentifier: modelApiIdentifier,\n      modelSelectionField: pluralModelApiIdentifier,\n      namespace: null,\n      variables: {\n        inputs: {\n          required: true,\n          type: '[BulkCreateEmbeddingShopifyProductsInput!]'\n        }\n      },\n      paramOnlyVariables: [],\n      defaultSelection: DefaultShopifyProductSelection\n    },\n    {\n      type: 'action',\n      operationName: 'updateAllShopifyProduct',\n      operationReturnType: 'UpdateAllShopifyProduct',\n      functionName: 'updateAll',\n      namespace: null,\n      modelApiIdentifier: modelApiIdentifier,\n      operatesWithRecordIdentity: true,\n      modelSelectionField: modelApiIdentifier,\n      isBulk: false,\n      isDeleter: false,\n      variables: {\n        id: { required: true, type: 'GadgetID' },\n        shopifyProduct: { required: false, type: 'UpdateAllShopifyProductInput' }\n      },\n      hasAmbiguousIdentifier: false,\n      paramOnlyVariables: [],\n      hasReturnType: false,\n      acceptsModelInput: true,\n      hasCreateOrUpdateEffect: true,\n      defaultSelection: DefaultShopifyProductSelection\n    },\n    {\n      type: 'action',\n      operationName: 'bulkUpdateAllShopifyProducts',\n      functionName: 'bulkUpdateAll',\n      isBulk: true,\n      isDeleter: false,\n      hasReturnType: false,\n      acceptsModelInput: true,\n      operatesWithRecordIdentity: true,\n      singleActionFunctionName: 'updateAll',\n      modelApiIdentifier: modelApiIdentifier,\n      modelSelectionField: pluralModelApiIdentifier,\n      namespace: null,\n      variables: {\n        inputs: { required: true, type: '[BulkUpdateAllShopifyProductsInput!]' }\n      },\n      paramOnlyVariables: [],\n      defaultSelection: DefaultShopifyProductSelection\n    },\n    {\n      type: 'computedView',\n      operationName: 'view',\n      functionName: 'view',\n      gqlFieldName: 'shopifyProductGellyView',\n      namespace: null,\n      variables: {\n        query: { type: 'String', required: true },\n        args: { type: 'JSONObject' }\n      }\n    }\n  ] as const\n) as unknown as {\n  // Gadget generates these model manager classes at runtime dynamically, which means there is no source code for the class. This is done to make the bundle size of the client as small as possible, avoiding a bunch of repeated source code in favour of one small builder function. The TypeScript types above document the exact interface of the constructed class.\n  new(connection: GadgetConnection): ShopifyProductManager;\n};", "import {\n  GadgetConnection,\n  GadgetRecord,\n  GadgetRecordImplementation,\n  GadgetRecordList,\n  GadgetNonUniqueDataError,\n  actionRunner,\n  findManyRunner,\n  findOneRunner,\n  findOneByFieldRunner,\n  FieldSelection,\n  LimitToKnownKeys,\n  Selectable\n} from \"@gadgetinc/api-client-core\";\n\nimport {\n  Query,\n  ExplicitNestingRequired,\n\n  IDsList,\n  PromiseOrLiveIterator,\n  ShopifyFile,\n  AvailableShopifyFileSelection,\n  ShopifyFileSort,\n  ShopifyFileFilter\n} from \"../types.js\";\n\nimport { buildModelManager } from \"../builder.js\";\nimport { AvailableSelection, AllFieldsSelected, DefaultSelection, Select, DeepFilterNever } from \"../utils.js\";\n\n/**\n* A type that holds only the selected fields (and nested fields) of shopifyFile. The present fields in the result type of this are dynamic based on the options to each call that uses it.\n* The selected fields are sometimes given by the `Options` at `Options[\"select\"]`, and if a selection isn't made in the options, we use the default selection from above.\n*/\nexport type SelectedShopifyFileOrDefault<Options extends Selectable<AvailableShopifyFileSelection>> = DeepFilterNever<\n    Select<\n      ShopifyFile,\n      DefaultSelection<\n        AvailableShopifyFileSelection,\n        Options,\n        typeof DefaultShopifyFileSelection\n      >\n    >\n  >;\n\n/**\n * A type that represents a `GadgetRecord` type for shopifyFile.\n * It selects all fields of the model by default. If you want to represent a record type with a subset of fields, you could pass in an object in the `Selection` type parameter.\n *\n * @example\n * ```ts\n * const someFunction = (record: ShopifyFileRecord, recordWithName: ShopifyFileRecord<{ select: { name: true; } }>) => {\n *   // The type of the `record` variable will include all fields of the model.\n *   const name = record.name;\n *   const otherField = record.otherField;\n *\n *   // The type of the `recordWithName` variable will only include the selected fields.\n *   const name = recordWithName.name;\n *   const otherField = recordWithName.otherField; // Type error: Property 'otherField' does not exist on type 'GadgetRecord<{ name: true; }>'.\n * }\n * ```\n */\nexport type ShopifyFileRecord<Selection extends AvailableShopifyFileSelection | undefined = typeof DefaultShopifyFileSelection> = DeepFilterNever<\n  GadgetRecord<\n    SelectedShopifyFileOrDefault<{\n      select: Selection;\n    }>\n  >\n>;\n\nexport const DefaultShopifyFileSelection = {\n     __typename: true,\n     id: true,\n     alt: true,\n     boundingBox: true,\n     createdAt: true,\n     duration: true,\n     embedUrl: true,\n     fileErrors: true,\n     fileStatus: true,\n     filename: true,\n     host: true,\n     image: true,\n     mediaContentType: true,\n     mediaErrors: true,\n     mediaWarnings: true,\n     mimetype: true,\n     originUrl: true,\n     originalFileSize: true,\n     originalSource: true,\n     preview: true,\n     shopId: true,\n     shopifyCreatedAt: true,\n     shopifyUpdatedAt: true,\n     sources: true,\n     status: true,\n     type: true,\n     updatedAt: true,\n     url: true\n   } as const;\nconst modelApiIdentifier = \"shopifyFile\" as const;\nconst pluralModelApiIdentifier = \"shopifyFiles\" as const;\n/** Options that can be passed to the `ShopifyFileManager#findOne` method */\n export interface FindOneShopifyFileOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyFileSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `ShopifyFileManager#maybeFindOne` method */\n export interface MaybeFindOneShopifyFileOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyFileSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `ShopifyFileManager#findMany` method */\n export interface FindManyShopifyFilesOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyFileSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyFileSort | ShopifyFileSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyFileFilter | ShopifyFileFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n  first?: number | null;\n  last?: number | null;\n  after?: string | null;\n  before?: string | null;\n};\n/** Options that can be passed to the `ShopifyFileManager#findFirst` method */\n export interface FindFirstShopifyFileOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyFileSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyFileSort | ShopifyFileSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyFileFilter | ShopifyFileFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\n/** Options that can be passed to the `ShopifyFileManager#maybeFindFirst` method */\n export interface MaybeFindFirstShopifyFileOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyFileSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyFileSort | ShopifyFileSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyFileFilter | ShopifyFileFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\nexport interface CreateShopifyFileOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyFileSelection;\n};\nexport interface UpdateShopifyFileOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyFileSelection;\n};\nexport interface DeleteShopifyFileOptions {\n\n};\n\n/**\n * A manager for the shopifyFile model with all the available operations for reading and writing to it.*/\nexport type ShopifyFileManager = {\n  readonly connection: GadgetConnection;\n\n  findOne: {\n      /**\n       * Finds one shopifyFile by ID. Returns a `Promise` that resolves to the record if found and rejects the promise if the record isn't found.\n       **/\n      <Options extends FindOneShopifyFileOptions>(id: string, options?: LimitToKnownKeys<Options, FindOneShopifyFileOptions>): PromiseOrLiveIterator<Options,ShopifyFileRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultShopifyFileSelection;\n      namespace: null;\n      optionsType: FindOneShopifyFileOptions;\n      selectionType: AvailableShopifyFileSelection;\n      schemaType: Query[\"shopifyFile\"];\n    }\n  maybeFindOne: {\n      /**\n       * Finds one shopifyFile by ID. Returns a `Promise` that resolves to the record if found and returns null otherwise.\n       **/\n      <Options extends MaybeFindOneShopifyFileOptions>(id: string, options?: LimitToKnownKeys<Options, MaybeFindOneShopifyFileOptions>): PromiseOrLiveIterator<Options,ShopifyFileRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: MaybeFindOneShopifyFileOptions;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultShopifyFileSelection;\n      namespace: null;\n      selectionType: AvailableShopifyFileSelection;\n      schemaType: Query[\"shopifyFile\"];\n    }\n  findMany: {\n      /**\n       * Finds many shopifyFile. Returns a `Promise` for a `GadgetRecordList` of objects according to the passed `options`. Optionally filters the returned records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindManyShopifyFilesOptions>(options?: LimitToKnownKeys<Options, FindManyShopifyFilesOptions>): PromiseOrLiveIterator<Options,GadgetRecordList<ShopifyFileRecord<Options[\"select\"]>>>;\n      type: 'findMany';\n      operationName: typeof pluralModelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: FindManyShopifyFilesOptions;\n      defaultSelection: typeof DefaultShopifyFileSelection;\n      namespace: null;\n      selectionType: AvailableShopifyFileSelection;\n      schemaType: Query[\"shopifyFile\"];\n    }\n  findFirst: {\n      /**\n       * Finds the first matching shopifyFile. Returns a `Promise` that resolves to a record if found and rejects the promise if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindFirstShopifyFileOptions>(options?: LimitToKnownKeys<Options, FindFirstShopifyFileOptions>): PromiseOrLiveIterator<Options,ShopifyFileRecord<Options[\"select\"]>>;\n      type: 'findFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: FindFirstShopifyFileOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyFileSelection;\n      namespace: null;\n      selectionType: AvailableShopifyFileSelection;\n      schemaType: Query[\"shopifyFile\"];\n    }\n  maybeFindFirst: {\n      /**\n       * Finds the first matching shopifyFile. Returns a `Promise` that resolves to a record if found, or null if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` pagination options.\n       **/\n      <Options extends MaybeFindFirstShopifyFileOptions>(options?: LimitToKnownKeys<Options, MaybeFindFirstShopifyFileOptions>): PromiseOrLiveIterator<Options,ShopifyFileRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: MaybeFindFirstShopifyFileOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyFileSelection;\n      namespace: null;\n      selectionType: AvailableShopifyFileSelection;\n      schemaType: Query[\"shopifyFile\"];\n    }\n  findById: {\n      /**\n      * Finds one shopifyFile by its id. Returns a Promise that resolves to the record if found and rejects the promise if the record isn't found.\n      **/\n      <Options extends FindOneShopifyFileOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneShopifyFileOptions>): PromiseOrLiveIterator<Options,ShopifyFileRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneShopifyFileOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyFileSelection;\n      namespace: null;\n      selectionType: AvailableShopifyFileSelection;\n      schemaType: Query[\"shopifyFile\"];\n    }\n  maybeFindById: {\n      /**\n      * Finds one shopifyFile by its id. Returns a Promise that resolves to the record if found and returns null if the record isn't found.\n      **/\n      <Options extends FindOneShopifyFileOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneShopifyFileOptions>): Promise<ShopifyFileRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneShopifyFileOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyFileSelection;\n      namespace: null;\n      selectionType: AvailableShopifyFileSelection;\n      schemaType: Query[\"shopifyFile\"];\n    }\n  create: {\n      /**\n       * @deprecated The action create on model shopifyFile does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'createShopifyFile';\n      errorMessage: string;\n      optionsType: CreateShopifyFileOptions;\n      actionApiIdentifier: 'create';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyFile.create';\n    }\n  bulkCreate: {\n      /**\n       * @deprecated The action create on model shopifyFile does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkCreateShopifyFiles';\n      errorMessage: string;\n      optionsType: CreateShopifyFileOptions;\n      actionApiIdentifier: 'create';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyFile.bulkCreate';\n    }\n  update: {\n      /**\n       * @deprecated The action update on model shopifyFile does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'updateShopifyFile';\n      errorMessage: string;\n      optionsType: UpdateShopifyFileOptions;\n      actionApiIdentifier: 'update';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyFile.update';\n    }\n  bulkUpdate: {\n      /**\n       * @deprecated The action update on model shopifyFile does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkUpdateShopifyFiles';\n      errorMessage: string;\n      optionsType: UpdateShopifyFileOptions;\n      actionApiIdentifier: 'update';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyFile.bulkUpdate';\n    }\n  delete: {\n      /**\n       * @deprecated The action delete on model shopifyFile does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'deleteShopifyFile';\n      errorMessage: string;\n      optionsType: DeleteShopifyFileOptions;\n      actionApiIdentifier: 'delete';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyFile.delete';\n    }\n  bulkDelete: {\n      /**\n       * @deprecated The action delete on model shopifyFile does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkDeleteShopifyFiles';\n      errorMessage: string;\n      optionsType: DeleteShopifyFileOptions;\n      actionApiIdentifier: 'delete';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyFile.bulkDelete';\n    }\n  view: {\n      (query: string, variables?: Record<string, unknown>): Promise<unknown>\n      type: 'computedView';\n      operationName: 'view';\n      gqlFieldName: 'shopifyFileGellyView';\n      namespace: null;\n      imports: [];\n      variables: {\n          query: { type: 'String', required: true },\n          args: { type: 'JSONObject' }\n        };\n      variablesType: Record<string, unknown>;\n      resultType: Promise<unknown>;\n      plan: never;\n    }\n};\n\n/**\n * A manager for the shopifyFile model with all the available operations for reading and writing to it.*/\nexport const ShopifyFileManager = buildModelManager(\n  modelApiIdentifier,\n  pluralModelApiIdentifier,\n  DefaultShopifyFileSelection,\n  [\n    {\n      type: 'findOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultShopifyFileSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultShopifyFileSelection,\n      namespace: null\n    },\n    {\n      type: 'findMany',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyFileSelection,\n      namespace: null\n    },\n    {\n      type: 'findFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyFileSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyFileSelection,\n      namespace: null\n    },\n    {\n      type: 'findOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'findById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyFileSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'maybeFindById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyFileSelection,\n      namespace: null\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'createShopifyFile',\n      functionName: 'create',\n      errorMessage: 'The action create on model shopifyFile does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'create',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyFile.create'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkCreateShopifyFiles',\n      functionName: 'bulkCreate',\n      errorMessage: 'The action create on model shopifyFile does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'create',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyFile.bulkCreate'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'updateShopifyFile',\n      functionName: 'update',\n      errorMessage: 'The action update on model shopifyFile does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'update',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyFile.update'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkUpdateShopifyFiles',\n      functionName: 'bulkUpdate',\n      errorMessage: 'The action update on model shopifyFile does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'update',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyFile.bulkUpdate'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'deleteShopifyFile',\n      functionName: 'delete',\n      errorMessage: 'The action delete on model shopifyFile does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'delete',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyFile.delete'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkDeleteShopifyFiles',\n      functionName: 'bulkDelete',\n      errorMessage: 'The action delete on model shopifyFile does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'delete',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyFile.bulkDelete'\n    },\n    {\n      type: 'computedView',\n      operationName: 'view',\n      functionName: 'view',\n      gqlFieldName: 'shopifyFileGellyView',\n      namespace: null,\n      variables: {\n        query: { type: 'String', required: true },\n        args: { type: 'JSONObject' }\n      }\n    }\n  ] as const\n) as unknown as {\n  // Gadget generates these model manager classes at runtime dynamically, which means there is no source code for the class. This is done to make the bundle size of the client as small as possible, avoiding a bunch of repeated source code in favour of one small builder function. The TypeScript types above document the exact interface of the constructed class.\n  new(connection: GadgetConnection): ShopifyFileManager;\n};", "import {\n  GadgetConnection,\n  GadgetRecord,\n  GadgetRecordImplementation,\n  GadgetRecordList,\n  GadgetNonUniqueDataError,\n  actionRunner,\n  findManyRunner,\n  findOneRunner,\n  findOneByFieldRunner,\n  FieldSelection,\n  LimitToKnownKeys,\n  Selectable\n} from \"@gadgetinc/api-client-core\";\n\nimport {\n  Query,\n  ExplicitNestingRequired,\n\n  IDsList,\n  PromiseOrLiveIterator,\n  ShopifyBulkOperation,\n  AvailableShopifyBulkOperationSelection,\n  ShopifyBulkOperationSort,\n  ShopifyBulkOperationFilter\n} from \"../types.js\";\n\nimport { buildModelManager } from \"../builder.js\";\nimport { AvailableSelection, AllFieldsSelected, DefaultSelection, Select, DeepFilterNever } from \"../utils.js\";\n\n/**\n* A type that holds only the selected fields (and nested fields) of shopifyBulkOperation. The present fields in the result type of this are dynamic based on the options to each call that uses it.\n* The selected fields are sometimes given by the `Options` at `Options[\"select\"]`, and if a selection isn't made in the options, we use the default selection from above.\n*/\nexport type SelectedShopifyBulkOperationOrDefault<Options extends Selectable<AvailableShopifyBulkOperationSelection>> = DeepFilterNever<\n    Select<\n      ShopifyBulkOperation,\n      DefaultSelection<\n        AvailableShopifyBulkOperationSelection,\n        Options,\n        typeof DefaultShopifyBulkOperationSelection\n      >\n    >\n  >;\n\n/**\n * A type that represents a `GadgetRecord` type for shopifyBulkOperation.\n * It selects all fields of the model by default. If you want to represent a record type with a subset of fields, you could pass in an object in the `Selection` type parameter.\n *\n * @example\n * ```ts\n * const someFunction = (record: ShopifyBulkOperationRecord, recordWithName: ShopifyBulkOperationRecord<{ select: { name: true; } }>) => {\n *   // The type of the `record` variable will include all fields of the model.\n *   const name = record.name;\n *   const otherField = record.otherField;\n *\n *   // The type of the `recordWithName` variable will only include the selected fields.\n *   const name = recordWithName.name;\n *   const otherField = recordWithName.otherField; // Type error: Property 'otherField' does not exist on type 'GadgetRecord<{ name: true; }>'.\n * }\n * ```\n */\nexport type ShopifyBulkOperationRecord<Selection extends AvailableShopifyBulkOperationSelection | undefined = typeof DefaultShopifyBulkOperationSelection> = DeepFilterNever<\n  GadgetRecord<\n    SelectedShopifyBulkOperationOrDefault<{\n      select: Selection;\n    }>\n  >\n>;\n\nexport const DefaultShopifyBulkOperationSelection = {\n     __typename: true,\n     id: true,\n     state: true,\n     completedAt: true,\n     createdAt: true,\n     errorCode: true,\n     fileSize: true,\n     objectCount: true,\n     partialDataUrl: true,\n     query: true,\n     rootObjectCount: true,\n     shopId: true,\n     status: true,\n     type: true,\n     updatedAt: true,\n     url: true\n   } as const;\nconst modelApiIdentifier = \"shopifyBulkOperation\" as const;\nconst pluralModelApiIdentifier = \"shopifyBulkOperations\" as const;\n/** Options that can be passed to the `ShopifyBulkOperationManager#findOne` method */\n export interface FindOneShopifyBulkOperationOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyBulkOperationSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `ShopifyBulkOperationManager#maybeFindOne` method */\n export interface MaybeFindOneShopifyBulkOperationOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyBulkOperationSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `ShopifyBulkOperationManager#findMany` method */\n export interface FindManyShopifyBulkOperationsOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyBulkOperationSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyBulkOperationSort | ShopifyBulkOperationSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyBulkOperationFilter | ShopifyBulkOperationFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n  first?: number | null;\n  last?: number | null;\n  after?: string | null;\n  before?: string | null;\n};\n/** Options that can be passed to the `ShopifyBulkOperationManager#findFirst` method */\n export interface FindFirstShopifyBulkOperationOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyBulkOperationSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyBulkOperationSort | ShopifyBulkOperationSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyBulkOperationFilter | ShopifyBulkOperationFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\n/** Options that can be passed to the `ShopifyBulkOperationManager#maybeFindFirst` method */\n export interface MaybeFindFirstShopifyBulkOperationOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyBulkOperationSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyBulkOperationSort | ShopifyBulkOperationSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyBulkOperationFilter | ShopifyBulkOperationFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\nexport interface CreateShopifyBulkOperationOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyBulkOperationSelection;\n};\nexport interface UpdateShopifyBulkOperationOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyBulkOperationSelection;\n};\nexport interface CancelShopifyBulkOperationOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyBulkOperationSelection;\n};\nexport interface CompleteShopifyBulkOperationOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyBulkOperationSelection;\n};\nexport interface ExpireShopifyBulkOperationOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyBulkOperationSelection;\n};\nexport interface FailShopifyBulkOperationOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyBulkOperationSelection;\n};\n\n/**\n * A manager for the shopifyBulkOperation model with all the available operations for reading and writing to it.*/\nexport type ShopifyBulkOperationManager = {\n  readonly connection: GadgetConnection;\n\n  findOne: {\n      /**\n       * Finds one shopifyBulkOperation by ID. Returns a `Promise` that resolves to the record if found and rejects the promise if the record isn't found.\n       **/\n      <Options extends FindOneShopifyBulkOperationOptions>(id: string, options?: LimitToKnownKeys<Options, FindOneShopifyBulkOperationOptions>): PromiseOrLiveIterator<Options,ShopifyBulkOperationRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultShopifyBulkOperationSelection;\n      namespace: null;\n      optionsType: FindOneShopifyBulkOperationOptions;\n      selectionType: AvailableShopifyBulkOperationSelection;\n      schemaType: Query[\"shopifyBulkOperation\"];\n    }\n  maybeFindOne: {\n      /**\n       * Finds one shopifyBulkOperation by ID. Returns a `Promise` that resolves to the record if found and returns null otherwise.\n       **/\n      <Options extends MaybeFindOneShopifyBulkOperationOptions>(id: string, options?: LimitToKnownKeys<Options, MaybeFindOneShopifyBulkOperationOptions>): PromiseOrLiveIterator<Options,ShopifyBulkOperationRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: MaybeFindOneShopifyBulkOperationOptions;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultShopifyBulkOperationSelection;\n      namespace: null;\n      selectionType: AvailableShopifyBulkOperationSelection;\n      schemaType: Query[\"shopifyBulkOperation\"];\n    }\n  findMany: {\n      /**\n       * Finds many shopifyBulkOperation. Returns a `Promise` for a `GadgetRecordList` of objects according to the passed `options`. Optionally filters the returned records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindManyShopifyBulkOperationsOptions>(options?: LimitToKnownKeys<Options, FindManyShopifyBulkOperationsOptions>): PromiseOrLiveIterator<Options,GadgetRecordList<ShopifyBulkOperationRecord<Options[\"select\"]>>>;\n      type: 'findMany';\n      operationName: typeof pluralModelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: FindManyShopifyBulkOperationsOptions;\n      defaultSelection: typeof DefaultShopifyBulkOperationSelection;\n      namespace: null;\n      selectionType: AvailableShopifyBulkOperationSelection;\n      schemaType: Query[\"shopifyBulkOperation\"];\n    }\n  findFirst: {\n      /**\n       * Finds the first matching shopifyBulkOperation. Returns a `Promise` that resolves to a record if found and rejects the promise if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindFirstShopifyBulkOperationOptions>(options?: LimitToKnownKeys<Options, FindFirstShopifyBulkOperationOptions>): PromiseOrLiveIterator<Options,ShopifyBulkOperationRecord<Options[\"select\"]>>;\n      type: 'findFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: FindFirstShopifyBulkOperationOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyBulkOperationSelection;\n      namespace: null;\n      selectionType: AvailableShopifyBulkOperationSelection;\n      schemaType: Query[\"shopifyBulkOperation\"];\n    }\n  maybeFindFirst: {\n      /**\n       * Finds the first matching shopifyBulkOperation. Returns a `Promise` that resolves to a record if found, or null if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` pagination options.\n       **/\n      <Options extends MaybeFindFirstShopifyBulkOperationOptions>(options?: LimitToKnownKeys<Options, MaybeFindFirstShopifyBulkOperationOptions>): PromiseOrLiveIterator<Options,ShopifyBulkOperationRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: MaybeFindFirstShopifyBulkOperationOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyBulkOperationSelection;\n      namespace: null;\n      selectionType: AvailableShopifyBulkOperationSelection;\n      schemaType: Query[\"shopifyBulkOperation\"];\n    }\n  findById: {\n      /**\n      * Finds one shopifyBulkOperation by its id. Returns a Promise that resolves to the record if found and rejects the promise if the record isn't found.\n      **/\n      <Options extends FindOneShopifyBulkOperationOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneShopifyBulkOperationOptions>): PromiseOrLiveIterator<Options,ShopifyBulkOperationRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneShopifyBulkOperationOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyBulkOperationSelection;\n      namespace: null;\n      selectionType: AvailableShopifyBulkOperationSelection;\n      schemaType: Query[\"shopifyBulkOperation\"];\n    }\n  maybeFindById: {\n      /**\n      * Finds one shopifyBulkOperation by its id. Returns a Promise that resolves to the record if found and returns null if the record isn't found.\n      **/\n      <Options extends FindOneShopifyBulkOperationOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneShopifyBulkOperationOptions>): Promise<ShopifyBulkOperationRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneShopifyBulkOperationOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyBulkOperationSelection;\n      namespace: null;\n      selectionType: AvailableShopifyBulkOperationSelection;\n      schemaType: Query[\"shopifyBulkOperation\"];\n    }\n  create: {\n      /**\n       * @deprecated The action create on model shopifyBulkOperation does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'createShopifyBulkOperation';\n      errorMessage: string;\n      optionsType: CreateShopifyBulkOperationOptions;\n      actionApiIdentifier: 'create';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyBulkOperation.create';\n    }\n  bulkCreate: {\n      /**\n       * @deprecated The action create on model shopifyBulkOperation does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkCreateShopifyBulkOperations';\n      errorMessage: string;\n      optionsType: CreateShopifyBulkOperationOptions;\n      actionApiIdentifier: 'create';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyBulkOperation.bulkCreate';\n    }\n  update: {\n      /**\n       * @deprecated The action update on model shopifyBulkOperation does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'updateShopifyBulkOperation';\n      errorMessage: string;\n      optionsType: UpdateShopifyBulkOperationOptions;\n      actionApiIdentifier: 'update';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyBulkOperation.update';\n    }\n  bulkUpdate: {\n      /**\n       * @deprecated The action update on model shopifyBulkOperation does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkUpdateShopifyBulkOperations';\n      errorMessage: string;\n      optionsType: UpdateShopifyBulkOperationOptions;\n      actionApiIdentifier: 'update';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyBulkOperation.bulkUpdate';\n    }\n  cancel: {\n      /**\n       * @deprecated The action cancel on model shopifyBulkOperation does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'cancelShopifyBulkOperation';\n      errorMessage: string;\n      optionsType: CancelShopifyBulkOperationOptions;\n      actionApiIdentifier: 'cancel';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyBulkOperation.cancel';\n    }\n  bulkCancel: {\n      /**\n       * @deprecated The action cancel on model shopifyBulkOperation does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkCancelShopifyBulkOperations';\n      errorMessage: string;\n      optionsType: CancelShopifyBulkOperationOptions;\n      actionApiIdentifier: 'cancel';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyBulkOperation.bulkCancel';\n    }\n  complete: {\n      /**\n       * @deprecated The action complete on model shopifyBulkOperation does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'completeShopifyBulkOperation';\n      errorMessage: string;\n      optionsType: CompleteShopifyBulkOperationOptions;\n      actionApiIdentifier: 'complete';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyBulkOperation.complete';\n    }\n  bulkComplete: {\n      /**\n       * @deprecated The action complete on model shopifyBulkOperation does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkCompleteShopifyBulkOperations';\n      errorMessage: string;\n      optionsType: CompleteShopifyBulkOperationOptions;\n      actionApiIdentifier: 'complete';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyBulkOperation.bulkComplete';\n    }\n  expire: {\n      /**\n       * @deprecated The action expire on model shopifyBulkOperation does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'expireShopifyBulkOperation';\n      errorMessage: string;\n      optionsType: ExpireShopifyBulkOperationOptions;\n      actionApiIdentifier: 'expire';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyBulkOperation.expire';\n    }\n  bulkExpire: {\n      /**\n       * @deprecated The action expire on model shopifyBulkOperation does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkExpireShopifyBulkOperations';\n      errorMessage: string;\n      optionsType: ExpireShopifyBulkOperationOptions;\n      actionApiIdentifier: 'expire';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyBulkOperation.bulkExpire';\n    }\n  fail: {\n      /**\n       * @deprecated The action fail on model shopifyBulkOperation does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'failShopifyBulkOperation';\n      errorMessage: string;\n      optionsType: FailShopifyBulkOperationOptions;\n      actionApiIdentifier: 'fail';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyBulkOperation.fail';\n    }\n  bulkFail: {\n      /**\n       * @deprecated The action fail on model shopifyBulkOperation does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkFailShopifyBulkOperations';\n      errorMessage: string;\n      optionsType: FailShopifyBulkOperationOptions;\n      actionApiIdentifier: 'fail';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyBulkOperation.bulkFail';\n    }\n  view: {\n      (query: string, variables?: Record<string, unknown>): Promise<unknown>\n      type: 'computedView';\n      operationName: 'view';\n      gqlFieldName: 'shopifyBulkOperationGellyView';\n      namespace: null;\n      imports: [];\n      variables: {\n          query: { type: 'String', required: true },\n          args: { type: 'JSONObject' }\n        };\n      variablesType: Record<string, unknown>;\n      resultType: Promise<unknown>;\n      plan: never;\n    }\n};\n\n/**\n * A manager for the shopifyBulkOperation model with all the available operations for reading and writing to it.*/\nexport const ShopifyBulkOperationManager = buildModelManager(\n  modelApiIdentifier,\n  pluralModelApiIdentifier,\n  DefaultShopifyBulkOperationSelection,\n  [\n    {\n      type: 'findOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultShopifyBulkOperationSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultShopifyBulkOperationSelection,\n      namespace: null\n    },\n    {\n      type: 'findMany',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyBulkOperationSelection,\n      namespace: null\n    },\n    {\n      type: 'findFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyBulkOperationSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyBulkOperationSelection,\n      namespace: null\n    },\n    {\n      type: 'findOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'findById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyBulkOperationSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'maybeFindById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyBulkOperationSelection,\n      namespace: null\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'createShopifyBulkOperation',\n      functionName: 'create',\n      errorMessage: 'The action create on model shopifyBulkOperation does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'create',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyBulkOperation.create'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkCreateShopifyBulkOperations',\n      functionName: 'bulkCreate',\n      errorMessage: 'The action create on model shopifyBulkOperation does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'create',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyBulkOperation.bulkCreate'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'updateShopifyBulkOperation',\n      functionName: 'update',\n      errorMessage: 'The action update on model shopifyBulkOperation does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'update',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyBulkOperation.update'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkUpdateShopifyBulkOperations',\n      functionName: 'bulkUpdate',\n      errorMessage: 'The action update on model shopifyBulkOperation does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'update',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyBulkOperation.bulkUpdate'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'cancelShopifyBulkOperation',\n      functionName: 'cancel',\n      errorMessage: 'The action cancel on model shopifyBulkOperation does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'cancel',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyBulkOperation.cancel'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkCancelShopifyBulkOperations',\n      functionName: 'bulkCancel',\n      errorMessage: 'The action cancel on model shopifyBulkOperation does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'cancel',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyBulkOperation.bulkCancel'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'completeShopifyBulkOperation',\n      functionName: 'complete',\n      errorMessage: 'The action complete on model shopifyBulkOperation does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'complete',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyBulkOperation.complete'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkCompleteShopifyBulkOperations',\n      functionName: 'bulkComplete',\n      errorMessage: 'The action complete on model shopifyBulkOperation does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'complete',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyBulkOperation.bulkComplete'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'expireShopifyBulkOperation',\n      functionName: 'expire',\n      errorMessage: 'The action expire on model shopifyBulkOperation does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'expire',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyBulkOperation.expire'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkExpireShopifyBulkOperations',\n      functionName: 'bulkExpire',\n      errorMessage: 'The action expire on model shopifyBulkOperation does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'expire',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyBulkOperation.bulkExpire'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'failShopifyBulkOperation',\n      functionName: 'fail',\n      errorMessage: 'The action fail on model shopifyBulkOperation does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'fail',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyBulkOperation.fail'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkFailShopifyBulkOperations',\n      functionName: 'bulkFail',\n      errorMessage: 'The action fail on model shopifyBulkOperation does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'fail',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyBulkOperation.bulkFail'\n    },\n    {\n      type: 'computedView',\n      operationName: 'view',\n      functionName: 'view',\n      gqlFieldName: 'shopifyBulkOperationGellyView',\n      namespace: null,\n      variables: {\n        query: { type: 'String', required: true },\n        args: { type: 'JSONObject' }\n      }\n    }\n  ] as const\n) as unknown as {\n  // Gadget generates these model manager classes at runtime dynamically, which means there is no source code for the class. This is done to make the bundle size of the client as small as possible, avoiding a bunch of repeated source code in favour of one small builder function. The TypeScript types above document the exact interface of the constructed class.\n  new(connection: GadgetConnection): ShopifyBulkOperationManager;\n};", "import {\n  GadgetConnection,\n  GadgetRecord,\n  GadgetRecordImplementation,\n  GadgetRecordList,\n  GadgetNonUniqueDataError,\n  actionRunner,\n  findManyRunner,\n  findOneRunner,\n  findOneByFieldRunner,\n  FieldSelection,\n  LimitToKnownKeys,\n  Selectable\n} from \"@gadgetinc/api-client-core\";\n\nimport {\n  Query,\n  ExplicitNestingRequired,\n\n  IDsList,\n  PromiseOrLiveIterator,\n  ShopifyCustomerMergeable,\n  AvailableShopifyCustomerMergeableSelection,\n  ShopifyCustomerMergeableSort,\n  ShopifyCustomerMergeableFilter,\n  CreateShopifyCustomerMergeableInput,\n  UpdateShopifyCustomerMergeableInput,\n  Scalars,\n  UpsertShopifyCustomerMergeableInput\n} from \"../types.js\";\n\nimport { buildModelManager } from \"../builder.js\";\nimport { AvailableSelection, AllFieldsSelected, DefaultSelection, Select, DeepFilterNever } from \"../utils.js\";\n\n/**\n* A type that holds only the selected fields (and nested fields) of shopifyCustomerMergeable. The present fields in the result type of this are dynamic based on the options to each call that uses it.\n* The selected fields are sometimes given by the `Options` at `Options[\"select\"]`, and if a selection isn't made in the options, we use the default selection from above.\n*/\nexport type SelectedShopifyCustomerMergeableOrDefault<Options extends Selectable<AvailableShopifyCustomerMergeableSelection>> = DeepFilterNever<\n    Select<\n      ShopifyCustomerMergeable,\n      DefaultSelection<\n        AvailableShopifyCustomerMergeableSelection,\n        Options,\n        typeof DefaultShopifyCustomerMergeableSelection\n      >\n    >\n  >;\n\n/**\n * A type that represents a `GadgetRecord` type for shopifyCustomerMergeable.\n * It selects all fields of the model by default. If you want to represent a record type with a subset of fields, you could pass in an object in the `Selection` type parameter.\n *\n * @example\n * ```ts\n * const someFunction = (record: ShopifyCustomerMergeableRecord, recordWithName: ShopifyCustomerMergeableRecord<{ select: { name: true; } }>) => {\n *   // The type of the `record` variable will include all fields of the model.\n *   const name = record.name;\n *   const otherField = record.otherField;\n *\n *   // The type of the `recordWithName` variable will only include the selected fields.\n *   const name = recordWithName.name;\n *   const otherField = recordWithName.otherField; // Type error: Property 'otherField' does not exist on type 'GadgetRecord<{ name: true; }>'.\n * }\n * ```\n */\nexport type ShopifyCustomerMergeableRecord<Selection extends AvailableShopifyCustomerMergeableSelection | undefined = typeof DefaultShopifyCustomerMergeableSelection> = DeepFilterNever<\n  GadgetRecord<\n    SelectedShopifyCustomerMergeableOrDefault<{\n      select: Selection;\n    }>\n  >\n>;\n\nexport const DefaultShopifyCustomerMergeableSelection = {\n     __typename: true,\n     id: true,\n     createdAt: true,\n     errorFields: true,\n     isMergeable: true,\n     mergeInProgress: true,\n     reason: true,\n     shopId: true,\n     shopifyCustomerId: true,\n     updatedAt: true\n   } as const;\nconst modelApiIdentifier = \"shopifyCustomerMergeable\" as const;\nconst pluralModelApiIdentifier = \"shopifyCustomerMergeables\" as const;\n/** Options that can be passed to the `ShopifyCustomerMergeableManager#findOne` method */\n export interface FindOneShopifyCustomerMergeableOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCustomerMergeableSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `ShopifyCustomerMergeableManager#maybeFindOne` method */\n export interface MaybeFindOneShopifyCustomerMergeableOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCustomerMergeableSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `ShopifyCustomerMergeableManager#findMany` method */\n export interface FindManyShopifyCustomerMergeablesOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCustomerMergeableSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyCustomerMergeableSort | ShopifyCustomerMergeableSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyCustomerMergeableFilter | ShopifyCustomerMergeableFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n  first?: number | null;\n  last?: number | null;\n  after?: string | null;\n  before?: string | null;\n};\n/** Options that can be passed to the `ShopifyCustomerMergeableManager#findFirst` method */\n export interface FindFirstShopifyCustomerMergeableOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCustomerMergeableSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyCustomerMergeableSort | ShopifyCustomerMergeableSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyCustomerMergeableFilter | ShopifyCustomerMergeableFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\n/** Options that can be passed to the `ShopifyCustomerMergeableManager#maybeFindFirst` method */\n export interface MaybeFindFirstShopifyCustomerMergeableOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCustomerMergeableSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyCustomerMergeableSort | ShopifyCustomerMergeableSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyCustomerMergeableFilter | ShopifyCustomerMergeableFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\nexport interface CreateShopifyCustomerMergeableOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCustomerMergeableSelection;\n};\nexport interface UpdateShopifyCustomerMergeableOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCustomerMergeableSelection;\n};\nexport interface DeleteShopifyCustomerMergeableOptions {\n\n};\nexport interface UpsertShopifyCustomerMergeableOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCustomerMergeableSelection;\n};\n/**\n * The fully-qualified, expanded form of the inputs for executing the create action.\n * The flattened style should be preferred over this style, but for models with ambiguous API identifiers, this style can be used to remove any ambiguity.\n **/\nexport type FullyQualifiedCreateShopifyCustomerMergeableVariables = {\n  shopifyCustomerMergeable?: CreateShopifyCustomerMergeableInput;\n}\n/**\n * The inputs for executing create on shopifyCustomerMergeable.\n * This is the flattened style of inputs, suitable for general use, and should be preferred.\n **/\nexport type CreateShopifyCustomerMergeableVariables = CreateShopifyCustomerMergeableInput;\n/**\n * The return value from executing create on shopifyCustomerMergeable\n * Is a GadgetRecord of the model's type.\n **/\nexport type CreateShopifyCustomerMergeableResult<Options extends CreateShopifyCustomerMergeableOptions> = SelectedShopifyCustomerMergeableOrDefault<Options> extends void ?\n      void :\n      GadgetRecord<SelectedShopifyCustomerMergeableOrDefault<Options>>;\n/**\n * The fully-qualified, expanded form of the inputs for executing the update action.\n * The flattened style should be preferred over this style, but for models with ambiguous API identifiers, this style can be used to remove any ambiguity.\n **/\nexport type FullyQualifiedUpdateShopifyCustomerMergeableVariables = {\n  shopifyCustomerMergeable?: UpdateShopifyCustomerMergeableInput;\n}\n/**\n * The inputs for executing update on shopifyCustomerMergeable.\n * This is the flattened style of inputs, suitable for general use, and should be preferred.\n **/\nexport type UpdateShopifyCustomerMergeableVariables = UpdateShopifyCustomerMergeableInput;\n/**\n * The return value from executing update on shopifyCustomerMergeable\n * Is a GadgetRecord of the model's type.\n **/\nexport type UpdateShopifyCustomerMergeableResult<Options extends UpdateShopifyCustomerMergeableOptions> = SelectedShopifyCustomerMergeableOrDefault<Options> extends void ?\n      void :\n      GadgetRecord<SelectedShopifyCustomerMergeableOrDefault<Options>>;\n/**\n * The return value from executing delete on shopifyCustomerMergeable\n * Is void because this action deletes the record\n **/\nexport type DeleteShopifyCustomerMergeableResult<Options extends DeleteShopifyCustomerMergeableOptions> = void;\n/**\n * The fully-qualified, expanded form of the inputs for executing the upsert action.\n * The flattened style should be preferred over this style, but for models with ambiguous API identifiers, this style can be used to remove any ambiguity.\n **/\nexport type FullyQualifiedUpsertShopifyCustomerMergeableVariables = {\n  on?: ((Scalars['String'] | null))[];\n  shopifyCustomerMergeable?: UpsertShopifyCustomerMergeableInput;\n}\n/**\n * The inputs for executing upsert on shopifyCustomerMergeable.\n * This is the flattened style of inputs, suitable for general use, and should be preferred.\n **/\nexport type UpsertShopifyCustomerMergeableVariables = Omit<\n     UpsertShopifyCustomerMergeableInput,\n     \"on\"\n   > & {\n     on?: ((Scalars['String'] | null))[];\n   };\n/**\n * The return value from executing upsert on shopifyCustomerMergeable\n *\n **/\nexport type UpsertShopifyCustomerMergeableResult<Options extends UpsertShopifyCustomerMergeableOptions> = SelectedShopifyCustomerMergeableOrDefault<Options> extends void ?\n      void :\n      GadgetRecord<SelectedShopifyCustomerMergeableOrDefault<Options>>;\n\n/**\n * A manager for the shopifyCustomerMergeable model with all the available operations for reading and writing to it.*/\nexport type ShopifyCustomerMergeableManager = {\n  readonly connection: GadgetConnection;\n\n  findOne: {\n      /**\n       * Finds one shopifyCustomerMergeable by ID. Returns a `Promise` that resolves to the record if found and rejects the promise if the record isn't found.\n       **/\n      <Options extends FindOneShopifyCustomerMergeableOptions>(id: string, options?: LimitToKnownKeys<Options, FindOneShopifyCustomerMergeableOptions>): PromiseOrLiveIterator<Options,ShopifyCustomerMergeableRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultShopifyCustomerMergeableSelection;\n      namespace: null;\n      optionsType: FindOneShopifyCustomerMergeableOptions;\n      selectionType: AvailableShopifyCustomerMergeableSelection;\n      schemaType: Query[\"shopifyCustomerMergeable\"];\n    }\n  maybeFindOne: {\n      /**\n       * Finds one shopifyCustomerMergeable by ID. Returns a `Promise` that resolves to the record if found and returns null otherwise.\n       **/\n      <Options extends MaybeFindOneShopifyCustomerMergeableOptions>(id: string, options?: LimitToKnownKeys<Options, MaybeFindOneShopifyCustomerMergeableOptions>): PromiseOrLiveIterator<Options,ShopifyCustomerMergeableRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: MaybeFindOneShopifyCustomerMergeableOptions;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultShopifyCustomerMergeableSelection;\n      namespace: null;\n      selectionType: AvailableShopifyCustomerMergeableSelection;\n      schemaType: Query[\"shopifyCustomerMergeable\"];\n    }\n  findMany: {\n      /**\n       * Finds many shopifyCustomerMergeable. Returns a `Promise` for a `GadgetRecordList` of objects according to the passed `options`. Optionally filters the returned records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindManyShopifyCustomerMergeablesOptions>(options?: LimitToKnownKeys<Options, FindManyShopifyCustomerMergeablesOptions>): PromiseOrLiveIterator<Options,GadgetRecordList<ShopifyCustomerMergeableRecord<Options[\"select\"]>>>;\n      type: 'findMany';\n      operationName: typeof pluralModelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: FindManyShopifyCustomerMergeablesOptions;\n      defaultSelection: typeof DefaultShopifyCustomerMergeableSelection;\n      namespace: null;\n      selectionType: AvailableShopifyCustomerMergeableSelection;\n      schemaType: Query[\"shopifyCustomerMergeable\"];\n    }\n  findFirst: {\n      /**\n       * Finds the first matching shopifyCustomerMergeable. Returns a `Promise` that resolves to a record if found and rejects the promise if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindFirstShopifyCustomerMergeableOptions>(options?: LimitToKnownKeys<Options, FindFirstShopifyCustomerMergeableOptions>): PromiseOrLiveIterator<Options,ShopifyCustomerMergeableRecord<Options[\"select\"]>>;\n      type: 'findFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: FindFirstShopifyCustomerMergeableOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyCustomerMergeableSelection;\n      namespace: null;\n      selectionType: AvailableShopifyCustomerMergeableSelection;\n      schemaType: Query[\"shopifyCustomerMergeable\"];\n    }\n  maybeFindFirst: {\n      /**\n       * Finds the first matching shopifyCustomerMergeable. Returns a `Promise` that resolves to a record if found, or null if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` pagination options.\n       **/\n      <Options extends MaybeFindFirstShopifyCustomerMergeableOptions>(options?: LimitToKnownKeys<Options, MaybeFindFirstShopifyCustomerMergeableOptions>): PromiseOrLiveIterator<Options,ShopifyCustomerMergeableRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: MaybeFindFirstShopifyCustomerMergeableOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyCustomerMergeableSelection;\n      namespace: null;\n      selectionType: AvailableShopifyCustomerMergeableSelection;\n      schemaType: Query[\"shopifyCustomerMergeable\"];\n    }\n  findById: {\n      /**\n      * Finds one shopifyCustomerMergeable by its id. Returns a Promise that resolves to the record if found and rejects the promise if the record isn't found.\n      **/\n      <Options extends FindOneShopifyCustomerMergeableOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneShopifyCustomerMergeableOptions>): PromiseOrLiveIterator<Options,ShopifyCustomerMergeableRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneShopifyCustomerMergeableOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyCustomerMergeableSelection;\n      namespace: null;\n      selectionType: AvailableShopifyCustomerMergeableSelection;\n      schemaType: Query[\"shopifyCustomerMergeable\"];\n    }\n  maybeFindById: {\n      /**\n      * Finds one shopifyCustomerMergeable by its id. Returns a Promise that resolves to the record if found and returns null if the record isn't found.\n      **/\n      <Options extends FindOneShopifyCustomerMergeableOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneShopifyCustomerMergeableOptions>): Promise<ShopifyCustomerMergeableRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneShopifyCustomerMergeableOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyCustomerMergeableSelection;\n      namespace: null;\n      selectionType: AvailableShopifyCustomerMergeableSelection;\n      schemaType: Query[\"shopifyCustomerMergeable\"];\n    }\n  create: {\n      /**\n       * Executes the create action.Accepts the parameters for the action via the `variables` argument.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the flat style, all-params-together overload that most use cases should use.\n      *\n      * @example\n      * * const shopifyCustomerMergeableRecord = await api.shopifyCustomerMergeable.create({\n        *   errorFields: {\n        *     example: true,\n        *     key: \"value\",\n        *   },\n        *   id: \"1\",\n        *   isMergeable: true,\n        *   mergeInProgress: {\n        *     example: true,\n        *     key: \"value\",\n        *   },\n        *   reason: \"example value for reason\",\n        * });\n      **/\n      <Options extends CreateShopifyCustomerMergeableOptions>(\n      \n        variables: CreateShopifyCustomerMergeableVariables,\n        options?: LimitToKnownKeys<Options, CreateShopifyCustomerMergeableOptions>\n      ): Promise<CreateShopifyCustomerMergeableResult<Options>>;\n      /**\n       * Executes the create action.Accepts the parameters for the action via the `variables` argument.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the fully qualified, nested api identifier style overload that should be used when there's an ambiguity between an action param and a model field.\n      *\n      * @example\n      * * const shopifyCustomerMergeableRecord = await api.shopifyCustomerMergeable.create({\n        *   shopifyCustomerMergeable: {\n        *     errorFields: {\n        *       example: true,\n        *       key: \"value\",\n        *     },\n        *     id: \"1\",\n        *     isMergeable: true,\n        *     mergeInProgress: {\n        *       example: true,\n        *       key: \"value\",\n        *     },\n        *     reason: \"example value for reason\",\n        *   },\n        * });\n      **/\n      <Options extends CreateShopifyCustomerMergeableOptions>(\n      \n        variables: FullyQualifiedCreateShopifyCustomerMergeableVariables,\n        options?: LimitToKnownKeys<Options, CreateShopifyCustomerMergeableOptions>\n      ): Promise<CreateShopifyCustomerMergeableResult<Options>>;\n      type: 'action';\n      operationName: 'createShopifyCustomerMergeable';\n      operationReturnType: 'CreateShopifyCustomerMergeable';\n      namespace: null;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      operatesWithRecordIdentity: false;\n      modelSelectionField: typeof modelApiIdentifier;\n      isBulk: false;\n      isDeleter: false;\n      variables: {\n          shopifyCustomerMergeable: { required: false, type: 'CreateShopifyCustomerMergeableInput' }\n        };\n      variablesType: ((\n               \n               & (FullyQualifiedCreateShopifyCustomerMergeableVariables | CreateShopifyCustomerMergeableVariables)\n             ) | undefined);\n      hasAmbiguousIdentifier: false;\n      paramOnlyVariables: [];\n      hasReturnType: false;\n      acceptsModelInput: true;\n      hasCreateOrUpdateEffect: true;\n      imports: [ 'CreateShopifyCustomerMergeableInput' ];\n      optionsType: CreateShopifyCustomerMergeableOptions;\n      selectionType: AvailableShopifyCustomerMergeableSelection;\n      schemaType: Query[\"shopifyCustomerMergeable\"];\n      defaultSelection: typeof DefaultShopifyCustomerMergeableSelection;\n    }\n  bulkCreate: {\n      /**\n        * Executes the bulkCreate action with the given inputs.\n        */\n       <Options extends CreateShopifyCustomerMergeableOptions>(\n          inputs: (FullyQualifiedCreateShopifyCustomerMergeableVariables | CreateShopifyCustomerMergeableVariables)[],\n          options?: LimitToKnownKeys<Options, CreateShopifyCustomerMergeableOptions>\n       ): Promise<CreateShopifyCustomerMergeableResult<Options>[]>\n      type: 'action';\n      operationName: 'bulkCreateShopifyCustomerMergeables';\n      isBulk: true;\n      isDeleter: false;\n      hasReturnType: false;\n      acceptsModelInput: true;\n      operatesWithRecordIdentity: false;\n      singleActionFunctionName: 'create';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      modelSelectionField: typeof pluralModelApiIdentifier;\n      optionsType: CreateShopifyCustomerMergeableOptions;\n      namespace: null;\n      variables: {\n          inputs: {\n            required: true,\n            type: '[BulkCreateShopifyCustomerMergeablesInput!]'\n          }\n        };\n      variablesType: (FullyQualifiedCreateShopifyCustomerMergeableVariables | CreateShopifyCustomerMergeableVariables)[];\n      paramOnlyVariables: [];\n      selectionType: AvailableShopifyCustomerMergeableSelection;\n      schemaType: Query[\"shopifyCustomerMergeable\"];\n      defaultSelection: typeof DefaultShopifyCustomerMergeableSelection;\n    }\n  update: {\n      /**\n       * Executes the update actionon one record specified by `id`.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the flat style, all-params-together overload that most use cases should use.\n      *\n      * @example\n      * * const shopifyCustomerMergeableRecord = await api.shopifyCustomerMergeable.update(\"1\", {\n        *   errorFields: {\n        *     example: true,\n        *     key: \"value\",\n        *   },\n        *   id: \"1\",\n        *   isMergeable: true,\n        *   mergeInProgress: {\n        *     example: true,\n        *     key: \"value\",\n        *   },\n        *   reason: \"example value for reason\",\n        * });\n      **/\n      <Options extends UpdateShopifyCustomerMergeableOptions>(\n        id: string,\n        variables: UpdateShopifyCustomerMergeableVariables,\n        options?: LimitToKnownKeys<Options, UpdateShopifyCustomerMergeableOptions>\n      ): Promise<UpdateShopifyCustomerMergeableResult<Options>>;\n      /**\n       * Executes the update actionon one record specified by `id`.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the fully qualified, nested api identifier style overload that should be used when there's an ambiguity between an action param and a model field.\n      *\n      * @example\n      * * const shopifyCustomerMergeableRecord = await api.shopifyCustomerMergeable.update(\"1\", {\n        *   shopifyCustomerMergeable: {\n        *     errorFields: {\n        *       example: true,\n        *       key: \"value\",\n        *     },\n        *     id: \"1\",\n        *     isMergeable: true,\n        *     mergeInProgress: {\n        *       example: true,\n        *       key: \"value\",\n        *     },\n        *     reason: \"example value for reason\",\n        *   },\n        * });\n      **/\n      <Options extends UpdateShopifyCustomerMergeableOptions>(\n        id: string,\n        variables: FullyQualifiedUpdateShopifyCustomerMergeableVariables,\n        options?: LimitToKnownKeys<Options, UpdateShopifyCustomerMergeableOptions>\n      ): Promise<UpdateShopifyCustomerMergeableResult<Options>>;\n      type: 'action';\n      operationName: 'updateShopifyCustomerMergeable';\n      operationReturnType: 'UpdateShopifyCustomerMergeable';\n      namespace: null;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      operatesWithRecordIdentity: true;\n      modelSelectionField: typeof modelApiIdentifier;\n      isBulk: false;\n      isDeleter: false;\n      variables: {\n          id: { required: true, type: 'GadgetID' },\n          shopifyCustomerMergeable: { required: false, type: 'UpdateShopifyCustomerMergeableInput' }\n        };\n      variablesType: (\n              { id: string }\n              & (FullyQualifiedUpdateShopifyCustomerMergeableVariables | UpdateShopifyCustomerMergeableVariables)\n            );\n      hasAmbiguousIdentifier: false;\n      paramOnlyVariables: [];\n      hasReturnType: false;\n      acceptsModelInput: true;\n      hasCreateOrUpdateEffect: true;\n      imports: [ 'UpdateShopifyCustomerMergeableInput' ];\n      optionsType: UpdateShopifyCustomerMergeableOptions;\n      selectionType: AvailableShopifyCustomerMergeableSelection;\n      schemaType: Query[\"shopifyCustomerMergeable\"];\n      defaultSelection: typeof DefaultShopifyCustomerMergeableSelection;\n    }\n  bulkUpdate: {\n      /**\n        * Executes the bulkUpdate action with the given inputs.\n        */\n       <Options extends UpdateShopifyCustomerMergeableOptions>(\n          inputs: (FullyQualifiedUpdateShopifyCustomerMergeableVariables | UpdateShopifyCustomerMergeableVariables & { id: string })[],\n          options?: LimitToKnownKeys<Options, UpdateShopifyCustomerMergeableOptions>\n       ): Promise<UpdateShopifyCustomerMergeableResult<Options>[]>\n      type: 'action';\n      operationName: 'bulkUpdateShopifyCustomerMergeables';\n      isBulk: true;\n      isDeleter: false;\n      hasReturnType: false;\n      acceptsModelInput: true;\n      operatesWithRecordIdentity: true;\n      singleActionFunctionName: 'update';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      modelSelectionField: typeof pluralModelApiIdentifier;\n      optionsType: UpdateShopifyCustomerMergeableOptions;\n      namespace: null;\n      variables: {\n          inputs: {\n            required: true,\n            type: '[BulkUpdateShopifyCustomerMergeablesInput!]'\n          }\n        };\n      variablesType: (FullyQualifiedUpdateShopifyCustomerMergeableVariables | UpdateShopifyCustomerMergeableVariables & { id: string })[];\n      paramOnlyVariables: [];\n      selectionType: AvailableShopifyCustomerMergeableSelection;\n      schemaType: Query[\"shopifyCustomerMergeable\"];\n      defaultSelection: typeof DefaultShopifyCustomerMergeableSelection;\n    }\n  delete: {\n      /**\n       * Executes the delete actionon one record specified by `id`.Deletes the record on the server. Returns a Promise that resolves if the delete succeeds.\n      *\n      * This is the fully qualified, nested api identifier style overload that should be used when there's an ambiguity between an action param and a model field.\n      *\n      * @example\n      * * await api.shopifyCustomerMergeable.delete(\"1\");\n      **/\n      <Options extends DeleteShopifyCustomerMergeableOptions>(\n        id: string,\n      \n        options?: LimitToKnownKeys<Options, DeleteShopifyCustomerMergeableOptions>\n      ): Promise<DeleteShopifyCustomerMergeableResult<Options>>;\n      type: 'action';\n      operationName: 'deleteShopifyCustomerMergeable';\n      operationReturnType: 'DeleteShopifyCustomerMergeable';\n      namespace: null;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      operatesWithRecordIdentity: true;\n      modelSelectionField: typeof modelApiIdentifier;\n      isBulk: false;\n      isDeleter: true;\n      variables: { id: { required: true, type: 'GadgetID' } };\n      variablesType: (\n              { id: string }\n              \n            );\n      hasAmbiguousIdentifier: false;\n      paramOnlyVariables: [];\n      hasReturnType: false;\n      acceptsModelInput: false;\n      hasCreateOrUpdateEffect: false;\n      imports: [];\n      optionsType: DeleteShopifyCustomerMergeableOptions;\n      selectionType: Record<string, never>;\n      schemaType: null;\n      defaultSelection: null;\n    }\n  bulkDelete: {\n      /**\n        * Executes the bulkDelete action with the given inputs.Deletes the records on the server.\n        */\n       <Options extends DeleteShopifyCustomerMergeableOptions>(\n          ids: string[],\n          options?: LimitToKnownKeys<Options, DeleteShopifyCustomerMergeableOptions>\n       ): Promise<DeleteShopifyCustomerMergeableResult<Options>[]>\n      type: 'action';\n      operationName: 'bulkDeleteShopifyCustomerMergeables';\n      isBulk: true;\n      isDeleter: true;\n      hasReturnType: false;\n      acceptsModelInput: false;\n      operatesWithRecordIdentity: true;\n      singleActionFunctionName: 'delete';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      modelSelectionField: typeof pluralModelApiIdentifier;\n      optionsType: DeleteShopifyCustomerMergeableOptions;\n      namespace: null;\n      variables: { ids: { required: true, type: '[GadgetID!]' } };\n      variablesType: IDsList | undefined;\n      paramOnlyVariables: [];\n      selectionType: Record<string, never>;\n      schemaType: null;\n      defaultSelection: null;\n    }\n  upsert: {\n      /**\n       * Executes the upsert action.Accepts the parameters for the action via the `variables` argument.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the flat style, all-params-together overload that most use cases should use.\n      *\n      * @example\n      * * const result = await api.shopifyCustomerMergeable.upsert({\n        *   errorFields: {\n        *     example: true,\n        *     key: \"value\",\n        *   },\n        *   id: \"1\",\n        *   isMergeable: true,\n        *   mergeInProgress: {\n        *     example: true,\n        *     key: \"value\",\n        *   },\n        * });\n      **/\n      <Options extends UpsertShopifyCustomerMergeableOptions>(\n      \n        variables: UpsertShopifyCustomerMergeableVariables,\n        options?: LimitToKnownKeys<Options, UpsertShopifyCustomerMergeableOptions>\n      ): Promise<UpsertShopifyCustomerMergeableResult<Options>>;\n      /**\n       * Executes the upsert action.Accepts the parameters for the action via the `variables` argument.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the fully qualified, nested api identifier style overload that should be used when there's an ambiguity between an action param and a model field.\n      *\n      * @example\n      * * const result = await api.shopifyCustomerMergeable.upsert({\n        *   shopifyCustomerMergeable: {\n        *     errorFields: {\n        *       example: true,\n        *       key: \"value\",\n        *     },\n        *     id: \"1\",\n        *     isMergeable: true,\n        *     mergeInProgress: {\n        *       example: true,\n        *       key: \"value\",\n        *     },\n        *   },\n        * });\n      **/\n      <Options extends UpsertShopifyCustomerMergeableOptions>(\n      \n        variables: FullyQualifiedUpsertShopifyCustomerMergeableVariables,\n        options?: LimitToKnownKeys<Options, UpsertShopifyCustomerMergeableOptions>\n      ): Promise<UpsertShopifyCustomerMergeableResult<Options>>;\n      type: 'action';\n      operationName: 'upsertShopifyCustomerMergeable';\n      operationReturnType: 'UpsertShopifyCustomerMergeable';\n      namespace: null;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      operatesWithRecordIdentity: false;\n      modelSelectionField: typeof modelApiIdentifier;\n      isBulk: false;\n      isDeleter: false;\n      variables: {\n          on: { required: false, type: '[String!]' },\n          shopifyCustomerMergeable: { required: false, type: 'UpsertShopifyCustomerMergeableInput' }\n        };\n      variablesType: ((\n               \n               & (FullyQualifiedUpsertShopifyCustomerMergeableVariables | UpsertShopifyCustomerMergeableVariables)\n             ) | undefined);\n      hasAmbiguousIdentifier: false;\n      paramOnlyVariables: [ 'on' ];\n      hasReturnType: {\n          '... on CreateShopifyCustomerMergeableResult': { hasReturnType: false },\n          '... on UpdateShopifyCustomerMergeableResult': { hasReturnType: false }\n        };\n      acceptsModelInput: true;\n      hasCreateOrUpdateEffect: true;\n      imports: [ 'Scalars', 'UpsertShopifyCustomerMergeableInput' ];\n      optionsType: UpsertShopifyCustomerMergeableOptions;\n      selectionType: AvailableShopifyCustomerMergeableSelection;\n      schemaType: Query[\"shopifyCustomerMergeable\"];\n      defaultSelection: typeof DefaultShopifyCustomerMergeableSelection;\n    }\n  bulkUpsert: {\n      /**\n        * Executes the bulkUpsert action with the given inputs.\n        */\n       <Options extends UpsertShopifyCustomerMergeableOptions>(\n          inputs: (FullyQualifiedUpsertShopifyCustomerMergeableVariables | UpsertShopifyCustomerMergeableVariables)[],\n          options?: LimitToKnownKeys<Options, UpsertShopifyCustomerMergeableOptions>\n       ): Promise<any[]>\n      type: 'action';\n      operationName: 'bulkUpsertShopifyCustomerMergeables';\n      isBulk: true;\n      isDeleter: false;\n      hasReturnType: false;\n      acceptsModelInput: true;\n      operatesWithRecordIdentity: false;\n      singleActionFunctionName: 'upsert';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      modelSelectionField: typeof pluralModelApiIdentifier;\n      optionsType: UpsertShopifyCustomerMergeableOptions;\n      namespace: null;\n      variables: {\n          inputs: {\n            required: true,\n            type: '[BulkUpsertShopifyCustomerMergeablesInput!]'\n          }\n        };\n      variablesType: (FullyQualifiedUpsertShopifyCustomerMergeableVariables | UpsertShopifyCustomerMergeableVariables)[];\n      paramOnlyVariables: [ 'on' ];\n      selectionType: AvailableShopifyCustomerMergeableSelection;\n      schemaType: Query[\"shopifyCustomerMergeable\"];\n      defaultSelection: typeof DefaultShopifyCustomerMergeableSelection;\n    }\n  view: {\n      (query: string, variables?: Record<string, unknown>): Promise<unknown>\n      type: 'computedView';\n      operationName: 'view';\n      gqlFieldName: 'shopifyCustomerMergeableGellyView';\n      namespace: null;\n      imports: [];\n      variables: {\n          query: { type: 'String', required: true },\n          args: { type: 'JSONObject' }\n        };\n      variablesType: Record<string, unknown>;\n      resultType: Promise<unknown>;\n      plan: never;\n    }\n};\n\n/**\n * A manager for the shopifyCustomerMergeable model with all the available operations for reading and writing to it.*/\nexport const ShopifyCustomerMergeableManager = buildModelManager(\n  modelApiIdentifier,\n  pluralModelApiIdentifier,\n  DefaultShopifyCustomerMergeableSelection,\n  [\n    {\n      type: 'findOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultShopifyCustomerMergeableSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultShopifyCustomerMergeableSelection,\n      namespace: null\n    },\n    {\n      type: 'findMany',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyCustomerMergeableSelection,\n      namespace: null\n    },\n    {\n      type: 'findFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyCustomerMergeableSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyCustomerMergeableSelection,\n      namespace: null\n    },\n    {\n      type: 'findOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'findById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyCustomerMergeableSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'maybeFindById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyCustomerMergeableSelection,\n      namespace: null\n    },\n    {\n      type: 'action',\n      operationName: 'createShopifyCustomerMergeable',\n      operationReturnType: 'CreateShopifyCustomerMergeable',\n      functionName: 'create',\n      namespace: null,\n      modelApiIdentifier: modelApiIdentifier,\n      operatesWithRecordIdentity: false,\n      modelSelectionField: modelApiIdentifier,\n      isBulk: false,\n      isDeleter: false,\n      variables: {\n        shopifyCustomerMergeable: { required: false, type: 'CreateShopifyCustomerMergeableInput' }\n      },\n      hasAmbiguousIdentifier: false,\n      paramOnlyVariables: [],\n      hasReturnType: false,\n      acceptsModelInput: true,\n      hasCreateOrUpdateEffect: true,\n      defaultSelection: DefaultShopifyCustomerMergeableSelection\n    },\n    {\n      type: 'action',\n      operationName: 'bulkCreateShopifyCustomerMergeables',\n      functionName: 'bulkCreate',\n      isBulk: true,\n      isDeleter: false,\n      hasReturnType: false,\n      acceptsModelInput: true,\n      operatesWithRecordIdentity: false,\n      singleActionFunctionName: 'create',\n      modelApiIdentifier: modelApiIdentifier,\n      modelSelectionField: pluralModelApiIdentifier,\n      namespace: null,\n      variables: {\n        inputs: {\n          required: true,\n          type: '[BulkCreateShopifyCustomerMergeablesInput!]'\n        }\n      },\n      paramOnlyVariables: [],\n      defaultSelection: DefaultShopifyCustomerMergeableSelection\n    },\n    {\n      type: 'action',\n      operationName: 'updateShopifyCustomerMergeable',\n      operationReturnType: 'UpdateShopifyCustomerMergeable',\n      functionName: 'update',\n      namespace: null,\n      modelApiIdentifier: modelApiIdentifier,\n      operatesWithRecordIdentity: true,\n      modelSelectionField: modelApiIdentifier,\n      isBulk: false,\n      isDeleter: false,\n      variables: {\n        id: { required: true, type: 'GadgetID' },\n        shopifyCustomerMergeable: { required: false, type: 'UpdateShopifyCustomerMergeableInput' }\n      },\n      hasAmbiguousIdentifier: false,\n      paramOnlyVariables: [],\n      hasReturnType: false,\n      acceptsModelInput: true,\n      hasCreateOrUpdateEffect: true,\n      defaultSelection: DefaultShopifyCustomerMergeableSelection\n    },\n    {\n      type: 'action',\n      operationName: 'bulkUpdateShopifyCustomerMergeables',\n      functionName: 'bulkUpdate',\n      isBulk: true,\n      isDeleter: false,\n      hasReturnType: false,\n      acceptsModelInput: true,\n      operatesWithRecordIdentity: true,\n      singleActionFunctionName: 'update',\n      modelApiIdentifier: modelApiIdentifier,\n      modelSelectionField: pluralModelApiIdentifier,\n      namespace: null,\n      variables: {\n        inputs: {\n          required: true,\n          type: '[BulkUpdateShopifyCustomerMergeablesInput!]'\n        }\n      },\n      paramOnlyVariables: [],\n      defaultSelection: DefaultShopifyCustomerMergeableSelection\n    },\n    {\n      type: 'action',\n      operationName: 'deleteShopifyCustomerMergeable',\n      operationReturnType: 'DeleteShopifyCustomerMergeable',\n      functionName: 'delete',\n      namespace: null,\n      modelApiIdentifier: modelApiIdentifier,\n      operatesWithRecordIdentity: true,\n      modelSelectionField: modelApiIdentifier,\n      isBulk: false,\n      isDeleter: true,\n      variables: { id: { required: true, type: 'GadgetID' } },\n      hasAmbiguousIdentifier: false,\n      paramOnlyVariables: [],\n      hasReturnType: false,\n      acceptsModelInput: false,\n      hasCreateOrUpdateEffect: false,\n      defaultSelection: null\n    },\n    {\n      type: 'action',\n      operationName: 'bulkDeleteShopifyCustomerMergeables',\n      functionName: 'bulkDelete',\n      isBulk: true,\n      isDeleter: true,\n      hasReturnType: false,\n      acceptsModelInput: false,\n      operatesWithRecordIdentity: true,\n      singleActionFunctionName: 'delete',\n      modelApiIdentifier: modelApiIdentifier,\n      modelSelectionField: pluralModelApiIdentifier,\n      namespace: null,\n      variables: { ids: { required: true, type: '[GadgetID!]' } },\n      paramOnlyVariables: [],\n      defaultSelection: null\n    },\n    {\n      type: 'action',\n      operationName: 'upsertShopifyCustomerMergeable',\n      operationReturnType: 'UpsertShopifyCustomerMergeable',\n      functionName: 'upsert',\n      namespace: null,\n      modelApiIdentifier: modelApiIdentifier,\n      operatesWithRecordIdentity: false,\n      modelSelectionField: modelApiIdentifier,\n      isBulk: false,\n      isDeleter: false,\n      variables: {\n        on: { required: false, type: '[String!]' },\n        shopifyCustomerMergeable: { required: false, type: 'UpsertShopifyCustomerMergeableInput' }\n      },\n      hasAmbiguousIdentifier: false,\n      paramOnlyVariables: [ 'on' ],\n      hasReturnType: {\n        '... on CreateShopifyCustomerMergeableResult': { hasReturnType: false },\n        '... on UpdateShopifyCustomerMergeableResult': { hasReturnType: false }\n      },\n      acceptsModelInput: true,\n      hasCreateOrUpdateEffect: true,\n      defaultSelection: DefaultShopifyCustomerMergeableSelection\n    },\n    {\n      type: 'action',\n      operationName: 'bulkUpsertShopifyCustomerMergeables',\n      functionName: 'bulkUpsert',\n      isBulk: true,\n      isDeleter: false,\n      hasReturnType: false,\n      acceptsModelInput: true,\n      operatesWithRecordIdentity: false,\n      singleActionFunctionName: 'upsert',\n      modelApiIdentifier: modelApiIdentifier,\n      modelSelectionField: pluralModelApiIdentifier,\n      namespace: null,\n      variables: {\n        inputs: {\n          required: true,\n          type: '[BulkUpsertShopifyCustomerMergeablesInput!]'\n        }\n      },\n      paramOnlyVariables: [ 'on' ],\n      defaultSelection: DefaultShopifyCustomerMergeableSelection\n    },\n    {\n      type: 'computedView',\n      operationName: 'view',\n      functionName: 'view',\n      gqlFieldName: 'shopifyCustomerMergeableGellyView',\n      namespace: null,\n      variables: {\n        query: { type: 'String', required: true },\n        args: { type: 'JSONObject' }\n      }\n    }\n  ] as const\n) as unknown as {\n  // Gadget generates these model manager classes at runtime dynamically, which means there is no source code for the class. This is done to make the bundle size of the client as small as possible, avoiding a bunch of repeated source code in favour of one small builder function. The TypeScript types above document the exact interface of the constructed class.\n  new(connection: GadgetConnection): ShopifyCustomerMergeableManager;\n};", "import {\n  GadgetConnection,\n  GadgetRecord,\n  GadgetRecordImplementation,\n  GadgetRecordList,\n  GadgetNonUniqueDataError,\n  actionRunner,\n  findManyRunner,\n  findOneRunner,\n  findOneByFieldRunner,\n  FieldSelection,\n  LimitToKnownKeys,\n  Selectable\n} from \"@gadgetinc/api-client-core\";\n\nimport {\n  Query,\n  ExplicitNestingRequired,\n\n  IDsList,\n  PromiseOrLiveIterator,\n  ShopifyProductImage,\n  AvailableShopifyProductImageSelection,\n  ShopifyProductImageSort,\n  ShopifyProductImageFilter\n} from \"../types.js\";\n\nimport { buildModelManager } from \"../builder.js\";\nimport { AvailableSelection, AllFieldsSelected, DefaultSelection, Select, DeepFilterNever } from \"../utils.js\";\n\n/**\n* A type that holds only the selected fields (and nested fields) of shopifyProductImage. The present fields in the result type of this are dynamic based on the options to each call that uses it.\n* The selected fields are sometimes given by the `Options` at `Options[\"select\"]`, and if a selection isn't made in the options, we use the default selection from above.\n*/\nexport type SelectedShopifyProductImageOrDefault<Options extends Selectable<AvailableShopifyProductImageSelection>> = DeepFilterNever<\n    Select<\n      ShopifyProductImage,\n      DefaultSelection<\n        AvailableShopifyProductImageSelection,\n        Options,\n        typeof DefaultShopifyProductImageSelection\n      >\n    >\n  >;\n\n/**\n * A type that represents a `GadgetRecord` type for shopifyProductImage.\n * It selects all fields of the model by default. If you want to represent a record type with a subset of fields, you could pass in an object in the `Selection` type parameter.\n *\n * @example\n * ```ts\n * const someFunction = (record: ShopifyProductImageRecord, recordWithName: ShopifyProductImageRecord<{ select: { name: true; } }>) => {\n *   // The type of the `record` variable will include all fields of the model.\n *   const name = record.name;\n *   const otherField = record.otherField;\n *\n *   // The type of the `recordWithName` variable will only include the selected fields.\n *   const name = recordWithName.name;\n *   const otherField = recordWithName.otherField; // Type error: Property 'otherField' does not exist on type 'GadgetRecord<{ name: true; }>'.\n * }\n * ```\n */\nexport type ShopifyProductImageRecord<Selection extends AvailableShopifyProductImageSelection | undefined = typeof DefaultShopifyProductImageSelection> = DeepFilterNever<\n  GadgetRecord<\n    SelectedShopifyProductImageOrDefault<{\n      select: Selection;\n    }>\n  >\n>;\n\nexport const DefaultShopifyProductImageSelection = {\n     __typename: true,\n     id: true,\n     alt: true,\n     createdAt: true,\n     height: true,\n     position: true,\n     productId: true,\n     shopId: true,\n     shopifyCreatedAt: true,\n     shopifyUpdatedAt: true,\n     source: true,\n     updatedAt: true,\n     width: true\n   } as const;\nconst modelApiIdentifier = \"shopifyProductImage\" as const;\nconst pluralModelApiIdentifier = \"shopifyProductImages\" as const;\n/** Options that can be passed to the `ShopifyProductImageManager#findOne` method */\n export interface FindOneShopifyProductImageOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyProductImageSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `ShopifyProductImageManager#maybeFindOne` method */\n export interface MaybeFindOneShopifyProductImageOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyProductImageSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `ShopifyProductImageManager#findMany` method */\n export interface FindManyShopifyProductImagesOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyProductImageSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyProductImageSort | ShopifyProductImageSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyProductImageFilter | ShopifyProductImageFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n  first?: number | null;\n  last?: number | null;\n  after?: string | null;\n  before?: string | null;\n};\n/** Options that can be passed to the `ShopifyProductImageManager#findFirst` method */\n export interface FindFirstShopifyProductImageOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyProductImageSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyProductImageSort | ShopifyProductImageSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyProductImageFilter | ShopifyProductImageFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\n/** Options that can be passed to the `ShopifyProductImageManager#maybeFindFirst` method */\n export interface MaybeFindFirstShopifyProductImageOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyProductImageSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyProductImageSort | ShopifyProductImageSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyProductImageFilter | ShopifyProductImageFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\nexport interface CreateShopifyProductImageOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyProductImageSelection;\n};\nexport interface UpdateShopifyProductImageOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyProductImageSelection;\n};\nexport interface DeleteShopifyProductImageOptions {\n\n};\n\n/**\n * A manager for the shopifyProductImage model with all the available operations for reading and writing to it.*/\nexport type ShopifyProductImageManager = {\n  readonly connection: GadgetConnection;\n\n  findOne: {\n      /**\n       * Finds one shopifyProductImage by ID. Returns a `Promise` that resolves to the record if found and rejects the promise if the record isn't found.\n       **/\n      <Options extends FindOneShopifyProductImageOptions>(id: string, options?: LimitToKnownKeys<Options, FindOneShopifyProductImageOptions>): PromiseOrLiveIterator<Options,ShopifyProductImageRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultShopifyProductImageSelection;\n      namespace: null;\n      optionsType: FindOneShopifyProductImageOptions;\n      selectionType: AvailableShopifyProductImageSelection;\n      schemaType: Query[\"shopifyProductImage\"];\n    }\n  maybeFindOne: {\n      /**\n       * Finds one shopifyProductImage by ID. Returns a `Promise` that resolves to the record if found and returns null otherwise.\n       **/\n      <Options extends MaybeFindOneShopifyProductImageOptions>(id: string, options?: LimitToKnownKeys<Options, MaybeFindOneShopifyProductImageOptions>): PromiseOrLiveIterator<Options,ShopifyProductImageRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: MaybeFindOneShopifyProductImageOptions;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultShopifyProductImageSelection;\n      namespace: null;\n      selectionType: AvailableShopifyProductImageSelection;\n      schemaType: Query[\"shopifyProductImage\"];\n    }\n  findMany: {\n      /**\n       * Finds many shopifyProductImage. Returns a `Promise` for a `GadgetRecordList` of objects according to the passed `options`. Optionally filters the returned records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindManyShopifyProductImagesOptions>(options?: LimitToKnownKeys<Options, FindManyShopifyProductImagesOptions>): PromiseOrLiveIterator<Options,GadgetRecordList<ShopifyProductImageRecord<Options[\"select\"]>>>;\n      type: 'findMany';\n      operationName: typeof pluralModelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: FindManyShopifyProductImagesOptions;\n      defaultSelection: typeof DefaultShopifyProductImageSelection;\n      namespace: null;\n      selectionType: AvailableShopifyProductImageSelection;\n      schemaType: Query[\"shopifyProductImage\"];\n    }\n  findFirst: {\n      /**\n       * Finds the first matching shopifyProductImage. Returns a `Promise` that resolves to a record if found and rejects the promise if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindFirstShopifyProductImageOptions>(options?: LimitToKnownKeys<Options, FindFirstShopifyProductImageOptions>): PromiseOrLiveIterator<Options,ShopifyProductImageRecord<Options[\"select\"]>>;\n      type: 'findFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: FindFirstShopifyProductImageOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyProductImageSelection;\n      namespace: null;\n      selectionType: AvailableShopifyProductImageSelection;\n      schemaType: Query[\"shopifyProductImage\"];\n    }\n  maybeFindFirst: {\n      /**\n       * Finds the first matching shopifyProductImage. Returns a `Promise` that resolves to a record if found, or null if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` pagination options.\n       **/\n      <Options extends MaybeFindFirstShopifyProductImageOptions>(options?: LimitToKnownKeys<Options, MaybeFindFirstShopifyProductImageOptions>): PromiseOrLiveIterator<Options,ShopifyProductImageRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: MaybeFindFirstShopifyProductImageOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyProductImageSelection;\n      namespace: null;\n      selectionType: AvailableShopifyProductImageSelection;\n      schemaType: Query[\"shopifyProductImage\"];\n    }\n  findById: {\n      /**\n      * Finds one shopifyProductImage by its id. Returns a Promise that resolves to the record if found and rejects the promise if the record isn't found.\n      **/\n      <Options extends FindOneShopifyProductImageOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneShopifyProductImageOptions>): PromiseOrLiveIterator<Options,ShopifyProductImageRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneShopifyProductImageOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyProductImageSelection;\n      namespace: null;\n      selectionType: AvailableShopifyProductImageSelection;\n      schemaType: Query[\"shopifyProductImage\"];\n    }\n  maybeFindById: {\n      /**\n      * Finds one shopifyProductImage by its id. Returns a Promise that resolves to the record if found and returns null if the record isn't found.\n      **/\n      <Options extends FindOneShopifyProductImageOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneShopifyProductImageOptions>): Promise<ShopifyProductImageRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneShopifyProductImageOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyProductImageSelection;\n      namespace: null;\n      selectionType: AvailableShopifyProductImageSelection;\n      schemaType: Query[\"shopifyProductImage\"];\n    }\n  create: {\n      /**\n       * @deprecated The action create on model shopifyProductImage does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'createShopifyProductImage';\n      errorMessage: string;\n      optionsType: CreateShopifyProductImageOptions;\n      actionApiIdentifier: 'create';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyProductImage.create';\n    }\n  bulkCreate: {\n      /**\n       * @deprecated The action create on model shopifyProductImage does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkCreateShopifyProductImages';\n      errorMessage: string;\n      optionsType: CreateShopifyProductImageOptions;\n      actionApiIdentifier: 'create';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyProductImage.bulkCreate';\n    }\n  update: {\n      /**\n       * @deprecated The action update on model shopifyProductImage does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'updateShopifyProductImage';\n      errorMessage: string;\n      optionsType: UpdateShopifyProductImageOptions;\n      actionApiIdentifier: 'update';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyProductImage.update';\n    }\n  bulkUpdate: {\n      /**\n       * @deprecated The action update on model shopifyProductImage does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkUpdateShopifyProductImages';\n      errorMessage: string;\n      optionsType: UpdateShopifyProductImageOptions;\n      actionApiIdentifier: 'update';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyProductImage.bulkUpdate';\n    }\n  delete: {\n      /**\n       * @deprecated The action delete on model shopifyProductImage does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'deleteShopifyProductImage';\n      errorMessage: string;\n      optionsType: DeleteShopifyProductImageOptions;\n      actionApiIdentifier: 'delete';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyProductImage.delete';\n    }\n  bulkDelete: {\n      /**\n       * @deprecated The action delete on model shopifyProductImage does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkDeleteShopifyProductImages';\n      errorMessage: string;\n      optionsType: DeleteShopifyProductImageOptions;\n      actionApiIdentifier: 'delete';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyProductImage.bulkDelete';\n    }\n  view: {\n      (query: string, variables?: Record<string, unknown>): Promise<unknown>\n      type: 'computedView';\n      operationName: 'view';\n      gqlFieldName: 'shopifyProductImageGellyView';\n      namespace: null;\n      imports: [];\n      variables: {\n          query: { type: 'String', required: true },\n          args: { type: 'JSONObject' }\n        };\n      variablesType: Record<string, unknown>;\n      resultType: Promise<unknown>;\n      plan: never;\n    }\n};\n\n/**\n * A manager for the shopifyProductImage model with all the available operations for reading and writing to it.*/\nexport const ShopifyProductImageManager = buildModelManager(\n  modelApiIdentifier,\n  pluralModelApiIdentifier,\n  DefaultShopifyProductImageSelection,\n  [\n    {\n      type: 'findOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultShopifyProductImageSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultShopifyProductImageSelection,\n      namespace: null\n    },\n    {\n      type: 'findMany',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyProductImageSelection,\n      namespace: null\n    },\n    {\n      type: 'findFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyProductImageSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyProductImageSelection,\n      namespace: null\n    },\n    {\n      type: 'findOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'findById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyProductImageSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'maybeFindById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyProductImageSelection,\n      namespace: null\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'createShopifyProductImage',\n      functionName: 'create',\n      errorMessage: 'The action create on model shopifyProductImage does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'create',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyProductImage.create'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkCreateShopifyProductImages',\n      functionName: 'bulkCreate',\n      errorMessage: 'The action create on model shopifyProductImage does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'create',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyProductImage.bulkCreate'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'updateShopifyProductImage',\n      functionName: 'update',\n      errorMessage: 'The action update on model shopifyProductImage does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'update',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyProductImage.update'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkUpdateShopifyProductImages',\n      functionName: 'bulkUpdate',\n      errorMessage: 'The action update on model shopifyProductImage does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'update',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyProductImage.bulkUpdate'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'deleteShopifyProductImage',\n      functionName: 'delete',\n      errorMessage: 'The action delete on model shopifyProductImage does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'delete',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyProductImage.delete'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkDeleteShopifyProductImages',\n      functionName: 'bulkDelete',\n      errorMessage: 'The action delete on model shopifyProductImage does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'delete',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyProductImage.bulkDelete'\n    },\n    {\n      type: 'computedView',\n      operationName: 'view',\n      functionName: 'view',\n      gqlFieldName: 'shopifyProductImageGellyView',\n      namespace: null,\n      variables: {\n        query: { type: 'String', required: true },\n        args: { type: 'JSONObject' }\n      }\n    }\n  ] as const\n) as unknown as {\n  // Gadget generates these model manager classes at runtime dynamically, which means there is no source code for the class. This is done to make the bundle size of the client as small as possible, avoiding a bunch of repeated source code in favour of one small builder function. The TypeScript types above document the exact interface of the constructed class.\n  new(connection: GadgetConnection): ShopifyProductImageManager;\n};", "import {\n  GadgetConnection,\n  GadgetRecord,\n  GadgetRecordImplementation,\n  GadgetRecordList,\n  GadgetNonUniqueDataError,\n  actionRunner,\n  findManyRunner,\n  findOneRunner,\n  findOneByFieldRunner,\n  FieldSelection,\n  LimitToKnownKeys,\n  Selectable\n} from \"@gadgetinc/api-client-core\";\n\nimport {\n  Query,\n  ExplicitNestingRequired,\n\n  IDsList,\n  PromiseOrLiveIterator,\n  ShopifyProductMedia,\n  AvailableShopifyProductMediaSelection,\n  ShopifyProductMediaSort,\n  ShopifyProductMediaFilter\n} from \"../types.js\";\n\nimport { buildModelManager } from \"../builder.js\";\nimport { AvailableSelection, AllFieldsSelected, DefaultSelection, Select, DeepFilterNever } from \"../utils.js\";\n\n/**\n* A type that holds only the selected fields (and nested fields) of shopifyProductMedia. The present fields in the result type of this are dynamic based on the options to each call that uses it.\n* The selected fields are sometimes given by the `Options` at `Options[\"select\"]`, and if a selection isn't made in the options, we use the default selection from above.\n*/\nexport type SelectedShopifyProductMediaOrDefault<Options extends Selectable<AvailableShopifyProductMediaSelection>> = DeepFilterNever<\n    Select<\n      ShopifyProductMedia,\n      DefaultSelection<\n        AvailableShopifyProductMediaSelection,\n        Options,\n        typeof DefaultShopifyProductMediaSelection\n      >\n    >\n  >;\n\n/**\n * A type that represents a `GadgetRecord` type for shopifyProductMedia.\n * It selects all fields of the model by default. If you want to represent a record type with a subset of fields, you could pass in an object in the `Selection` type parameter.\n *\n * @example\n * ```ts\n * const someFunction = (record: ShopifyProductMediaRecord, recordWithName: ShopifyProductMediaRecord<{ select: { name: true; } }>) => {\n *   // The type of the `record` variable will include all fields of the model.\n *   const name = record.name;\n *   const otherField = record.otherField;\n *\n *   // The type of the `recordWithName` variable will only include the selected fields.\n *   const name = recordWithName.name;\n *   const otherField = recordWithName.otherField; // Type error: Property 'otherField' does not exist on type 'GadgetRecord<{ name: true; }>'.\n * }\n * ```\n */\nexport type ShopifyProductMediaRecord<Selection extends AvailableShopifyProductMediaSelection | undefined = typeof DefaultShopifyProductMediaSelection> = DeepFilterNever<\n  GadgetRecord<\n    SelectedShopifyProductMediaOrDefault<{\n      select: Selection;\n    }>\n  >\n>;\n\nexport const DefaultShopifyProductMediaSelection = {\n     __typename: true,\n     id: true,\n     createdAt: true,\n     featuredMediaForProductId: true,\n     fileId: true,\n     position: true,\n     productId: true,\n     shopId: true,\n     updatedAt: true\n   } as const;\nconst modelApiIdentifier = \"shopifyProductMedia\" as const;\nconst pluralModelApiIdentifier = \"shopifyProductMedias\" as const;\n/** Options that can be passed to the `ShopifyProductMediaManager#findOne` method */\n export interface FindOneShopifyProductMediaOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyProductMediaSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `ShopifyProductMediaManager#maybeFindOne` method */\n export interface MaybeFindOneShopifyProductMediaOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyProductMediaSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `ShopifyProductMediaManager#findMany` method */\n export interface FindManyShopifyProductMediasOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyProductMediaSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyProductMediaSort | ShopifyProductMediaSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyProductMediaFilter | ShopifyProductMediaFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n  first?: number | null;\n  last?: number | null;\n  after?: string | null;\n  before?: string | null;\n};\n/** Options that can be passed to the `ShopifyProductMediaManager#findFirst` method */\n export interface FindFirstShopifyProductMediaOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyProductMediaSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyProductMediaSort | ShopifyProductMediaSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyProductMediaFilter | ShopifyProductMediaFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\n/** Options that can be passed to the `ShopifyProductMediaManager#maybeFindFirst` method */\n export interface MaybeFindFirstShopifyProductMediaOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyProductMediaSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyProductMediaSort | ShopifyProductMediaSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyProductMediaFilter | ShopifyProductMediaFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\nexport interface CreateShopifyProductMediaOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyProductMediaSelection;\n};\nexport interface UpdateShopifyProductMediaOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyProductMediaSelection;\n};\nexport interface DeleteShopifyProductMediaOptions {\n\n};\n\n/**\n * A manager for the shopifyProductMedia model with all the available operations for reading and writing to it.*/\nexport type ShopifyProductMediaManager = {\n  readonly connection: GadgetConnection;\n\n  findOne: {\n      /**\n       * Finds one shopifyProductMedia by ID. Returns a `Promise` that resolves to the record if found and rejects the promise if the record isn't found.\n       **/\n      <Options extends FindOneShopifyProductMediaOptions>(id: string, options?: LimitToKnownKeys<Options, FindOneShopifyProductMediaOptions>): PromiseOrLiveIterator<Options,ShopifyProductMediaRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultShopifyProductMediaSelection;\n      namespace: null;\n      optionsType: FindOneShopifyProductMediaOptions;\n      selectionType: AvailableShopifyProductMediaSelection;\n      schemaType: Query[\"shopifyProductMedia\"];\n    }\n  maybeFindOne: {\n      /**\n       * Finds one shopifyProductMedia by ID. Returns a `Promise` that resolves to the record if found and returns null otherwise.\n       **/\n      <Options extends MaybeFindOneShopifyProductMediaOptions>(id: string, options?: LimitToKnownKeys<Options, MaybeFindOneShopifyProductMediaOptions>): PromiseOrLiveIterator<Options,ShopifyProductMediaRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: MaybeFindOneShopifyProductMediaOptions;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultShopifyProductMediaSelection;\n      namespace: null;\n      selectionType: AvailableShopifyProductMediaSelection;\n      schemaType: Query[\"shopifyProductMedia\"];\n    }\n  findMany: {\n      /**\n       * Finds many shopifyProductMedia. Returns a `Promise` for a `GadgetRecordList` of objects according to the passed `options`. Optionally filters the returned records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindManyShopifyProductMediasOptions>(options?: LimitToKnownKeys<Options, FindManyShopifyProductMediasOptions>): PromiseOrLiveIterator<Options,GadgetRecordList<ShopifyProductMediaRecord<Options[\"select\"]>>>;\n      type: 'findMany';\n      operationName: typeof pluralModelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: FindManyShopifyProductMediasOptions;\n      defaultSelection: typeof DefaultShopifyProductMediaSelection;\n      namespace: null;\n      selectionType: AvailableShopifyProductMediaSelection;\n      schemaType: Query[\"shopifyProductMedia\"];\n    }\n  findFirst: {\n      /**\n       * Finds the first matching shopifyProductMedia. Returns a `Promise` that resolves to a record if found and rejects the promise if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindFirstShopifyProductMediaOptions>(options?: LimitToKnownKeys<Options, FindFirstShopifyProductMediaOptions>): PromiseOrLiveIterator<Options,ShopifyProductMediaRecord<Options[\"select\"]>>;\n      type: 'findFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: FindFirstShopifyProductMediaOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyProductMediaSelection;\n      namespace: null;\n      selectionType: AvailableShopifyProductMediaSelection;\n      schemaType: Query[\"shopifyProductMedia\"];\n    }\n  maybeFindFirst: {\n      /**\n       * Finds the first matching shopifyProductMedia. Returns a `Promise` that resolves to a record if found, or null if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` pagination options.\n       **/\n      <Options extends MaybeFindFirstShopifyProductMediaOptions>(options?: LimitToKnownKeys<Options, MaybeFindFirstShopifyProductMediaOptions>): PromiseOrLiveIterator<Options,ShopifyProductMediaRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: MaybeFindFirstShopifyProductMediaOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyProductMediaSelection;\n      namespace: null;\n      selectionType: AvailableShopifyProductMediaSelection;\n      schemaType: Query[\"shopifyProductMedia\"];\n    }\n  findById: {\n      /**\n      * Finds one shopifyProductMedia by its id. Returns a Promise that resolves to the record if found and rejects the promise if the record isn't found.\n      **/\n      <Options extends FindOneShopifyProductMediaOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneShopifyProductMediaOptions>): PromiseOrLiveIterator<Options,ShopifyProductMediaRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneShopifyProductMediaOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyProductMediaSelection;\n      namespace: null;\n      selectionType: AvailableShopifyProductMediaSelection;\n      schemaType: Query[\"shopifyProductMedia\"];\n    }\n  maybeFindById: {\n      /**\n      * Finds one shopifyProductMedia by its id. Returns a Promise that resolves to the record if found and returns null if the record isn't found.\n      **/\n      <Options extends FindOneShopifyProductMediaOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneShopifyProductMediaOptions>): Promise<ShopifyProductMediaRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneShopifyProductMediaOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyProductMediaSelection;\n      namespace: null;\n      selectionType: AvailableShopifyProductMediaSelection;\n      schemaType: Query[\"shopifyProductMedia\"];\n    }\n  create: {\n      /**\n       * @deprecated The action create on model shopifyProductMedia does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'createShopifyProductMedia';\n      errorMessage: string;\n      optionsType: CreateShopifyProductMediaOptions;\n      actionApiIdentifier: 'create';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyProductMedia.create';\n    }\n  bulkCreate: {\n      /**\n       * @deprecated The action create on model shopifyProductMedia does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkCreateShopifyProductMedia';\n      errorMessage: string;\n      optionsType: CreateShopifyProductMediaOptions;\n      actionApiIdentifier: 'create';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyProductMedia.bulkCreate';\n    }\n  update: {\n      /**\n       * @deprecated The action update on model shopifyProductMedia does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'updateShopifyProductMedia';\n      errorMessage: string;\n      optionsType: UpdateShopifyProductMediaOptions;\n      actionApiIdentifier: 'update';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyProductMedia.update';\n    }\n  bulkUpdate: {\n      /**\n       * @deprecated The action update on model shopifyProductMedia does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkUpdateShopifyProductMedia';\n      errorMessage: string;\n      optionsType: UpdateShopifyProductMediaOptions;\n      actionApiIdentifier: 'update';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyProductMedia.bulkUpdate';\n    }\n  delete: {\n      /**\n       * @deprecated The action delete on model shopifyProductMedia does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'deleteShopifyProductMedia';\n      errorMessage: string;\n      optionsType: DeleteShopifyProductMediaOptions;\n      actionApiIdentifier: 'delete';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyProductMedia.delete';\n    }\n  bulkDelete: {\n      /**\n       * @deprecated The action delete on model shopifyProductMedia does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkDeleteShopifyProductMedia';\n      errorMessage: string;\n      optionsType: DeleteShopifyProductMediaOptions;\n      actionApiIdentifier: 'delete';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyProductMedia.bulkDelete';\n    }\n  view: {\n      (query: string, variables?: Record<string, unknown>): Promise<unknown>\n      type: 'computedView';\n      operationName: 'view';\n      gqlFieldName: 'shopifyProductMediaGellyView';\n      namespace: null;\n      imports: [];\n      variables: {\n          query: { type: 'String', required: true },\n          args: { type: 'JSONObject' }\n        };\n      variablesType: Record<string, unknown>;\n      resultType: Promise<unknown>;\n      plan: never;\n    }\n};\n\n/**\n * A manager for the shopifyProductMedia model with all the available operations for reading and writing to it.*/\nexport const ShopifyProductMediaManager = buildModelManager(\n  modelApiIdentifier,\n  pluralModelApiIdentifier,\n  DefaultShopifyProductMediaSelection,\n  [\n    {\n      type: 'findOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultShopifyProductMediaSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultShopifyProductMediaSelection,\n      namespace: null\n    },\n    {\n      type: 'findMany',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyProductMediaSelection,\n      namespace: null\n    },\n    {\n      type: 'findFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyProductMediaSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyProductMediaSelection,\n      namespace: null\n    },\n    {\n      type: 'findOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'findById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyProductMediaSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'maybeFindById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyProductMediaSelection,\n      namespace: null\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'createShopifyProductMedia',\n      functionName: 'create',\n      errorMessage: 'The action create on model shopifyProductMedia does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'create',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyProductMedia.create'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkCreateShopifyProductMedia',\n      functionName: 'bulkCreate',\n      errorMessage: 'The action create on model shopifyProductMedia does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'create',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyProductMedia.bulkCreate'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'updateShopifyProductMedia',\n      functionName: 'update',\n      errorMessage: 'The action update on model shopifyProductMedia does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'update',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyProductMedia.update'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkUpdateShopifyProductMedia',\n      functionName: 'bulkUpdate',\n      errorMessage: 'The action update on model shopifyProductMedia does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'update',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyProductMedia.bulkUpdate'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'deleteShopifyProductMedia',\n      functionName: 'delete',\n      errorMessage: 'The action delete on model shopifyProductMedia does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'delete',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyProductMedia.delete'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkDeleteShopifyProductMedia',\n      functionName: 'bulkDelete',\n      errorMessage: 'The action delete on model shopifyProductMedia does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'delete',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyProductMedia.bulkDelete'\n    },\n    {\n      type: 'computedView',\n      operationName: 'view',\n      functionName: 'view',\n      gqlFieldName: 'shopifyProductMediaGellyView',\n      namespace: null,\n      variables: {\n        query: { type: 'String', required: true },\n        args: { type: 'JSONObject' }\n      }\n    }\n  ] as const\n) as unknown as {\n  // Gadget generates these model manager classes at runtime dynamically, which means there is no source code for the class. This is done to make the bundle size of the client as small as possible, avoiding a bunch of repeated source code in favour of one small builder function. The TypeScript types above document the exact interface of the constructed class.\n  new(connection: GadgetConnection): ShopifyProductMediaManager;\n};", "import {\n  GadgetConnection,\n  GadgetRecord,\n  GadgetRecordImplementation,\n  GadgetRecordList,\n  GadgetNonUniqueDataError,\n  actionRunner,\n  findManyRunner,\n  findOneRunner,\n  findOneByFieldRunner,\n  FieldSelection,\n  LimitToKnownKeys,\n  Selectable\n} from \"@gadgetinc/api-client-core\";\n\nimport {\n  Query,\n  ExplicitNestingRequired,\n\n  IDsList,\n  PromiseOrLiveIterator,\n  ShopifyProductOption,\n  AvailableShopifyProductOptionSelection,\n  ShopifyProductOptionSort,\n  ShopifyProductOptionFilter\n} from \"../types.js\";\n\nimport { buildModelManager } from \"../builder.js\";\nimport { AvailableSelection, AllFieldsSelected, DefaultSelection, Select, DeepFilterNever } from \"../utils.js\";\n\n/**\n* A type that holds only the selected fields (and nested fields) of shopifyProductOption. The present fields in the result type of this are dynamic based on the options to each call that uses it.\n* The selected fields are sometimes given by the `Options` at `Options[\"select\"]`, and if a selection isn't made in the options, we use the default selection from above.\n*/\nexport type SelectedShopifyProductOptionOrDefault<Options extends Selectable<AvailableShopifyProductOptionSelection>> = DeepFilterNever<\n    Select<\n      ShopifyProductOption,\n      DefaultSelection<\n        AvailableShopifyProductOptionSelection,\n        Options,\n        typeof DefaultShopifyProductOptionSelection\n      >\n    >\n  >;\n\n/**\n * A type that represents a `GadgetRecord` type for shopifyProductOption.\n * It selects all fields of the model by default. If you want to represent a record type with a subset of fields, you could pass in an object in the `Selection` type parameter.\n *\n * @example\n * ```ts\n * const someFunction = (record: ShopifyProductOptionRecord, recordWithName: ShopifyProductOptionRecord<{ select: { name: true; } }>) => {\n *   // The type of the `record` variable will include all fields of the model.\n *   const name = record.name;\n *   const otherField = record.otherField;\n *\n *   // The type of the `recordWithName` variable will only include the selected fields.\n *   const name = recordWithName.name;\n *   const otherField = recordWithName.otherField; // Type error: Property 'otherField' does not exist on type 'GadgetRecord<{ name: true; }>'.\n * }\n * ```\n */\nexport type ShopifyProductOptionRecord<Selection extends AvailableShopifyProductOptionSelection | undefined = typeof DefaultShopifyProductOptionSelection> = DeepFilterNever<\n  GadgetRecord<\n    SelectedShopifyProductOptionOrDefault<{\n      select: Selection;\n    }>\n  >\n>;\n\nexport const DefaultShopifyProductOptionSelection = {\n     __typename: true,\n     id: true,\n     createdAt: true,\n     name: true,\n     position: true,\n     productId: true,\n     shopId: true,\n     updatedAt: true,\n     values: true\n   } as const;\nconst modelApiIdentifier = \"shopifyProductOption\" as const;\nconst pluralModelApiIdentifier = \"shopifyProductOptions\" as const;\n/** Options that can be passed to the `ShopifyProductOptionManager#findOne` method */\n export interface FindOneShopifyProductOptionOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyProductOptionSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `ShopifyProductOptionManager#maybeFindOne` method */\n export interface MaybeFindOneShopifyProductOptionOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyProductOptionSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `ShopifyProductOptionManager#findMany` method */\n export interface FindManyShopifyProductOptionsOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyProductOptionSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyProductOptionSort | ShopifyProductOptionSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyProductOptionFilter | ShopifyProductOptionFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n  first?: number | null;\n  last?: number | null;\n  after?: string | null;\n  before?: string | null;\n};\n/** Options that can be passed to the `ShopifyProductOptionManager#findFirst` method */\n export interface FindFirstShopifyProductOptionOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyProductOptionSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyProductOptionSort | ShopifyProductOptionSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyProductOptionFilter | ShopifyProductOptionFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\n/** Options that can be passed to the `ShopifyProductOptionManager#maybeFindFirst` method */\n export interface MaybeFindFirstShopifyProductOptionOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyProductOptionSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyProductOptionSort | ShopifyProductOptionSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyProductOptionFilter | ShopifyProductOptionFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\nexport interface CreateShopifyProductOptionOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyProductOptionSelection;\n};\nexport interface UpdateShopifyProductOptionOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyProductOptionSelection;\n};\nexport interface DeleteShopifyProductOptionOptions {\n\n};\n\n/**\n * A manager for the shopifyProductOption model with all the available operations for reading and writing to it.*/\nexport type ShopifyProductOptionManager = {\n  readonly connection: GadgetConnection;\n\n  findOne: {\n      /**\n       * Finds one shopifyProductOption by ID. Returns a `Promise` that resolves to the record if found and rejects the promise if the record isn't found.\n       **/\n      <Options extends FindOneShopifyProductOptionOptions>(id: string, options?: LimitToKnownKeys<Options, FindOneShopifyProductOptionOptions>): PromiseOrLiveIterator<Options,ShopifyProductOptionRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultShopifyProductOptionSelection;\n      namespace: null;\n      optionsType: FindOneShopifyProductOptionOptions;\n      selectionType: AvailableShopifyProductOptionSelection;\n      schemaType: Query[\"shopifyProductOption\"];\n    }\n  maybeFindOne: {\n      /**\n       * Finds one shopifyProductOption by ID. Returns a `Promise` that resolves to the record if found and returns null otherwise.\n       **/\n      <Options extends MaybeFindOneShopifyProductOptionOptions>(id: string, options?: LimitToKnownKeys<Options, MaybeFindOneShopifyProductOptionOptions>): PromiseOrLiveIterator<Options,ShopifyProductOptionRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: MaybeFindOneShopifyProductOptionOptions;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultShopifyProductOptionSelection;\n      namespace: null;\n      selectionType: AvailableShopifyProductOptionSelection;\n      schemaType: Query[\"shopifyProductOption\"];\n    }\n  findMany: {\n      /**\n       * Finds many shopifyProductOption. Returns a `Promise` for a `GadgetRecordList` of objects according to the passed `options`. Optionally filters the returned records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindManyShopifyProductOptionsOptions>(options?: LimitToKnownKeys<Options, FindManyShopifyProductOptionsOptions>): PromiseOrLiveIterator<Options,GadgetRecordList<ShopifyProductOptionRecord<Options[\"select\"]>>>;\n      type: 'findMany';\n      operationName: typeof pluralModelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: FindManyShopifyProductOptionsOptions;\n      defaultSelection: typeof DefaultShopifyProductOptionSelection;\n      namespace: null;\n      selectionType: AvailableShopifyProductOptionSelection;\n      schemaType: Query[\"shopifyProductOption\"];\n    }\n  findFirst: {\n      /**\n       * Finds the first matching shopifyProductOption. Returns a `Promise` that resolves to a record if found and rejects the promise if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindFirstShopifyProductOptionOptions>(options?: LimitToKnownKeys<Options, FindFirstShopifyProductOptionOptions>): PromiseOrLiveIterator<Options,ShopifyProductOptionRecord<Options[\"select\"]>>;\n      type: 'findFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: FindFirstShopifyProductOptionOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyProductOptionSelection;\n      namespace: null;\n      selectionType: AvailableShopifyProductOptionSelection;\n      schemaType: Query[\"shopifyProductOption\"];\n    }\n  maybeFindFirst: {\n      /**\n       * Finds the first matching shopifyProductOption. Returns a `Promise` that resolves to a record if found, or null if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` pagination options.\n       **/\n      <Options extends MaybeFindFirstShopifyProductOptionOptions>(options?: LimitToKnownKeys<Options, MaybeFindFirstShopifyProductOptionOptions>): PromiseOrLiveIterator<Options,ShopifyProductOptionRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: MaybeFindFirstShopifyProductOptionOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyProductOptionSelection;\n      namespace: null;\n      selectionType: AvailableShopifyProductOptionSelection;\n      schemaType: Query[\"shopifyProductOption\"];\n    }\n  findById: {\n      /**\n      * Finds one shopifyProductOption by its id. Returns a Promise that resolves to the record if found and rejects the promise if the record isn't found.\n      **/\n      <Options extends FindOneShopifyProductOptionOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneShopifyProductOptionOptions>): PromiseOrLiveIterator<Options,ShopifyProductOptionRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneShopifyProductOptionOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyProductOptionSelection;\n      namespace: null;\n      selectionType: AvailableShopifyProductOptionSelection;\n      schemaType: Query[\"shopifyProductOption\"];\n    }\n  maybeFindById: {\n      /**\n      * Finds one shopifyProductOption by its id. Returns a Promise that resolves to the record if found and returns null if the record isn't found.\n      **/\n      <Options extends FindOneShopifyProductOptionOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneShopifyProductOptionOptions>): Promise<ShopifyProductOptionRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneShopifyProductOptionOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyProductOptionSelection;\n      namespace: null;\n      selectionType: AvailableShopifyProductOptionSelection;\n      schemaType: Query[\"shopifyProductOption\"];\n    }\n  create: {\n      /**\n       * @deprecated The action create on model shopifyProductOption does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'createShopifyProductOption';\n      errorMessage: string;\n      optionsType: CreateShopifyProductOptionOptions;\n      actionApiIdentifier: 'create';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyProductOption.create';\n    }\n  bulkCreate: {\n      /**\n       * @deprecated The action create on model shopifyProductOption does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkCreateShopifyProductOptions';\n      errorMessage: string;\n      optionsType: CreateShopifyProductOptionOptions;\n      actionApiIdentifier: 'create';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyProductOption.bulkCreate';\n    }\n  update: {\n      /**\n       * @deprecated The action update on model shopifyProductOption does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'updateShopifyProductOption';\n      errorMessage: string;\n      optionsType: UpdateShopifyProductOptionOptions;\n      actionApiIdentifier: 'update';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyProductOption.update';\n    }\n  bulkUpdate: {\n      /**\n       * @deprecated The action update on model shopifyProductOption does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkUpdateShopifyProductOptions';\n      errorMessage: string;\n      optionsType: UpdateShopifyProductOptionOptions;\n      actionApiIdentifier: 'update';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyProductOption.bulkUpdate';\n    }\n  delete: {\n      /**\n       * @deprecated The action delete on model shopifyProductOption does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'deleteShopifyProductOption';\n      errorMessage: string;\n      optionsType: DeleteShopifyProductOptionOptions;\n      actionApiIdentifier: 'delete';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyProductOption.delete';\n    }\n  bulkDelete: {\n      /**\n       * @deprecated The action delete on model shopifyProductOption does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkDeleteShopifyProductOptions';\n      errorMessage: string;\n      optionsType: DeleteShopifyProductOptionOptions;\n      actionApiIdentifier: 'delete';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyProductOption.bulkDelete';\n    }\n  view: {\n      (query: string, variables?: Record<string, unknown>): Promise<unknown>\n      type: 'computedView';\n      operationName: 'view';\n      gqlFieldName: 'shopifyProductOptionGellyView';\n      namespace: null;\n      imports: [];\n      variables: {\n          query: { type: 'String', required: true },\n          args: { type: 'JSONObject' }\n        };\n      variablesType: Record<string, unknown>;\n      resultType: Promise<unknown>;\n      plan: never;\n    }\n};\n\n/**\n * A manager for the shopifyProductOption model with all the available operations for reading and writing to it.*/\nexport const ShopifyProductOptionManager = buildModelManager(\n  modelApiIdentifier,\n  pluralModelApiIdentifier,\n  DefaultShopifyProductOptionSelection,\n  [\n    {\n      type: 'findOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultShopifyProductOptionSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultShopifyProductOptionSelection,\n      namespace: null\n    },\n    {\n      type: 'findMany',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyProductOptionSelection,\n      namespace: null\n    },\n    {\n      type: 'findFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyProductOptionSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyProductOptionSelection,\n      namespace: null\n    },\n    {\n      type: 'findOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'findById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyProductOptionSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'maybeFindById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyProductOptionSelection,\n      namespace: null\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'createShopifyProductOption',\n      functionName: 'create',\n      errorMessage: 'The action create on model shopifyProductOption does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'create',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyProductOption.create'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkCreateShopifyProductOptions',\n      functionName: 'bulkCreate',\n      errorMessage: 'The action create on model shopifyProductOption does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'create',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyProductOption.bulkCreate'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'updateShopifyProductOption',\n      functionName: 'update',\n      errorMessage: 'The action update on model shopifyProductOption does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'update',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyProductOption.update'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkUpdateShopifyProductOptions',\n      functionName: 'bulkUpdate',\n      errorMessage: 'The action update on model shopifyProductOption does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'update',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyProductOption.bulkUpdate'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'deleteShopifyProductOption',\n      functionName: 'delete',\n      errorMessage: 'The action delete on model shopifyProductOption does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'delete',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyProductOption.delete'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkDeleteShopifyProductOptions',\n      functionName: 'bulkDelete',\n      errorMessage: 'The action delete on model shopifyProductOption does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'delete',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyProductOption.bulkDelete'\n    },\n    {\n      type: 'computedView',\n      operationName: 'view',\n      functionName: 'view',\n      gqlFieldName: 'shopifyProductOptionGellyView',\n      namespace: null,\n      variables: {\n        query: { type: 'String', required: true },\n        args: { type: 'JSONObject' }\n      }\n    }\n  ] as const\n) as unknown as {\n  // Gadget generates these model manager classes at runtime dynamically, which means there is no source code for the class. This is done to make the bundle size of the client as small as possible, avoiding a bunch of repeated source code in favour of one small builder function. The TypeScript types above document the exact interface of the constructed class.\n  new(connection: GadgetConnection): ShopifyProductOptionManager;\n};", "import {\n  GadgetConnection,\n  GadgetRecord,\n  GadgetRecordImplementation,\n  GadgetRecordList,\n  GadgetNonUniqueDataError,\n  actionRunner,\n  findManyRunner,\n  findOneRunner,\n  findOneByFieldRunner,\n  FieldSelection,\n  LimitToKnownKeys,\n  Selectable\n} from \"@gadgetinc/api-client-core\";\n\nimport {\n  Query,\n  ExplicitNestingRequired,\n\n  IDsList,\n  PromiseOrLiveIterator,\n  ShopifyProductVariant,\n  AvailableShopifyProductVariantSelection,\n  ShopifyProductVariantSort,\n  ShopifyProductVariantFilter\n} from \"../types.js\";\n\nimport { buildModelManager } from \"../builder.js\";\nimport { AvailableSelection, AllFieldsSelected, DefaultSelection, Select, DeepFilterNever } from \"../utils.js\";\n\n/**\n* A type that holds only the selected fields (and nested fields) of shopifyProductVariant. The present fields in the result type of this are dynamic based on the options to each call that uses it.\n* The selected fields are sometimes given by the `Options` at `Options[\"select\"]`, and if a selection isn't made in the options, we use the default selection from above.\n*/\nexport type SelectedShopifyProductVariantOrDefault<Options extends Selectable<AvailableShopifyProductVariantSelection>> = DeepFilterNever<\n    Select<\n      ShopifyProductVariant,\n      DefaultSelection<\n        AvailableShopifyProductVariantSelection,\n        Options,\n        typeof DefaultShopifyProductVariantSelection\n      >\n    >\n  >;\n\n/**\n * A type that represents a `GadgetRecord` type for shopifyProductVariant.\n * It selects all fields of the model by default. If you want to represent a record type with a subset of fields, you could pass in an object in the `Selection` type parameter.\n *\n * @example\n * ```ts\n * const someFunction = (record: ShopifyProductVariantRecord, recordWithName: ShopifyProductVariantRecord<{ select: { name: true; } }>) => {\n *   // The type of the `record` variable will include all fields of the model.\n *   const name = record.name;\n *   const otherField = record.otherField;\n *\n *   // The type of the `recordWithName` variable will only include the selected fields.\n *   const name = recordWithName.name;\n *   const otherField = recordWithName.otherField; // Type error: Property 'otherField' does not exist on type 'GadgetRecord<{ name: true; }>'.\n * }\n * ```\n */\nexport type ShopifyProductVariantRecord<Selection extends AvailableShopifyProductVariantSelection | undefined = typeof DefaultShopifyProductVariantSelection> = DeepFilterNever<\n  GadgetRecord<\n    SelectedShopifyProductVariantOrDefault<{\n      select: Selection;\n    }>\n  >\n>;\n\nexport const DefaultShopifyProductVariantSelection = {\n     __typename: true,\n     id: true,\n     barcode: true,\n     compareAtPrice: true,\n     createdAt: true,\n     inventoryPolicy: true,\n     inventoryQuantity: true,\n     option1: true,\n     option2: true,\n     option3: true,\n     position: true,\n     presentmentPrices: true,\n     price: true,\n     productId: true,\n     productImageId: true,\n     selectedOptions: true,\n     shopId: true,\n     shopifyCreatedAt: true,\n     shopifyUpdatedAt: true,\n     sku: true,\n     taxCode: true,\n     taxable: true,\n     title: true,\n     updatedAt: true\n   } as const;\nconst modelApiIdentifier = \"shopifyProductVariant\" as const;\nconst pluralModelApiIdentifier = \"shopifyProductVariants\" as const;\n/** Options that can be passed to the `ShopifyProductVariantManager#findOne` method */\n export interface FindOneShopifyProductVariantOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyProductVariantSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `ShopifyProductVariantManager#maybeFindOne` method */\n export interface MaybeFindOneShopifyProductVariantOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyProductVariantSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `ShopifyProductVariantManager#findMany` method */\n export interface FindManyShopifyProductVariantsOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyProductVariantSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyProductVariantSort | ShopifyProductVariantSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyProductVariantFilter | ShopifyProductVariantFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n  first?: number | null;\n  last?: number | null;\n  after?: string | null;\n  before?: string | null;\n};\n/** Options that can be passed to the `ShopifyProductVariantManager#findFirst` method */\n export interface FindFirstShopifyProductVariantOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyProductVariantSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyProductVariantSort | ShopifyProductVariantSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyProductVariantFilter | ShopifyProductVariantFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\n/** Options that can be passed to the `ShopifyProductVariantManager#maybeFindFirst` method */\n export interface MaybeFindFirstShopifyProductVariantOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyProductVariantSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyProductVariantSort | ShopifyProductVariantSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyProductVariantFilter | ShopifyProductVariantFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\nexport interface CreateShopifyProductVariantOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyProductVariantSelection;\n};\nexport interface UpdateShopifyProductVariantOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyProductVariantSelection;\n};\nexport interface DeleteShopifyProductVariantOptions {\n\n};\n\n/**\n * A manager for the shopifyProductVariant model with all the available operations for reading and writing to it.*/\nexport type ShopifyProductVariantManager = {\n  readonly connection: GadgetConnection;\n\n  findOne: {\n      /**\n       * Finds one shopifyProductVariant by ID. Returns a `Promise` that resolves to the record if found and rejects the promise if the record isn't found.\n       **/\n      <Options extends FindOneShopifyProductVariantOptions>(id: string, options?: LimitToKnownKeys<Options, FindOneShopifyProductVariantOptions>): PromiseOrLiveIterator<Options,ShopifyProductVariantRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultShopifyProductVariantSelection;\n      namespace: null;\n      optionsType: FindOneShopifyProductVariantOptions;\n      selectionType: AvailableShopifyProductVariantSelection;\n      schemaType: Query[\"shopifyProductVariant\"];\n    }\n  maybeFindOne: {\n      /**\n       * Finds one shopifyProductVariant by ID. Returns a `Promise` that resolves to the record if found and returns null otherwise.\n       **/\n      <Options extends MaybeFindOneShopifyProductVariantOptions>(id: string, options?: LimitToKnownKeys<Options, MaybeFindOneShopifyProductVariantOptions>): PromiseOrLiveIterator<Options,ShopifyProductVariantRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: MaybeFindOneShopifyProductVariantOptions;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultShopifyProductVariantSelection;\n      namespace: null;\n      selectionType: AvailableShopifyProductVariantSelection;\n      schemaType: Query[\"shopifyProductVariant\"];\n    }\n  findMany: {\n      /**\n       * Finds many shopifyProductVariant. Returns a `Promise` for a `GadgetRecordList` of objects according to the passed `options`. Optionally filters the returned records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindManyShopifyProductVariantsOptions>(options?: LimitToKnownKeys<Options, FindManyShopifyProductVariantsOptions>): PromiseOrLiveIterator<Options,GadgetRecordList<ShopifyProductVariantRecord<Options[\"select\"]>>>;\n      type: 'findMany';\n      operationName: typeof pluralModelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: FindManyShopifyProductVariantsOptions;\n      defaultSelection: typeof DefaultShopifyProductVariantSelection;\n      namespace: null;\n      selectionType: AvailableShopifyProductVariantSelection;\n      schemaType: Query[\"shopifyProductVariant\"];\n    }\n  findFirst: {\n      /**\n       * Finds the first matching shopifyProductVariant. Returns a `Promise` that resolves to a record if found and rejects the promise if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindFirstShopifyProductVariantOptions>(options?: LimitToKnownKeys<Options, FindFirstShopifyProductVariantOptions>): PromiseOrLiveIterator<Options,ShopifyProductVariantRecord<Options[\"select\"]>>;\n      type: 'findFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: FindFirstShopifyProductVariantOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyProductVariantSelection;\n      namespace: null;\n      selectionType: AvailableShopifyProductVariantSelection;\n      schemaType: Query[\"shopifyProductVariant\"];\n    }\n  maybeFindFirst: {\n      /**\n       * Finds the first matching shopifyProductVariant. Returns a `Promise` that resolves to a record if found, or null if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` pagination options.\n       **/\n      <Options extends MaybeFindFirstShopifyProductVariantOptions>(options?: LimitToKnownKeys<Options, MaybeFindFirstShopifyProductVariantOptions>): PromiseOrLiveIterator<Options,ShopifyProductVariantRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: MaybeFindFirstShopifyProductVariantOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyProductVariantSelection;\n      namespace: null;\n      selectionType: AvailableShopifyProductVariantSelection;\n      schemaType: Query[\"shopifyProductVariant\"];\n    }\n  findById: {\n      /**\n      * Finds one shopifyProductVariant by its id. Returns a Promise that resolves to the record if found and rejects the promise if the record isn't found.\n      **/\n      <Options extends FindOneShopifyProductVariantOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneShopifyProductVariantOptions>): PromiseOrLiveIterator<Options,ShopifyProductVariantRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneShopifyProductVariantOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyProductVariantSelection;\n      namespace: null;\n      selectionType: AvailableShopifyProductVariantSelection;\n      schemaType: Query[\"shopifyProductVariant\"];\n    }\n  maybeFindById: {\n      /**\n      * Finds one shopifyProductVariant by its id. Returns a Promise that resolves to the record if found and returns null if the record isn't found.\n      **/\n      <Options extends FindOneShopifyProductVariantOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneShopifyProductVariantOptions>): Promise<ShopifyProductVariantRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneShopifyProductVariantOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyProductVariantSelection;\n      namespace: null;\n      selectionType: AvailableShopifyProductVariantSelection;\n      schemaType: Query[\"shopifyProductVariant\"];\n    }\n  create: {\n      /**\n       * @deprecated The action create on model shopifyProductVariant does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'createShopifyProductVariant';\n      errorMessage: string;\n      optionsType: CreateShopifyProductVariantOptions;\n      actionApiIdentifier: 'create';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyProductVariant.create';\n    }\n  bulkCreate: {\n      /**\n       * @deprecated The action create on model shopifyProductVariant does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkCreateShopifyProductVariants';\n      errorMessage: string;\n      optionsType: CreateShopifyProductVariantOptions;\n      actionApiIdentifier: 'create';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyProductVariant.bulkCreate';\n    }\n  update: {\n      /**\n       * @deprecated The action update on model shopifyProductVariant does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'updateShopifyProductVariant';\n      errorMessage: string;\n      optionsType: UpdateShopifyProductVariantOptions;\n      actionApiIdentifier: 'update';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyProductVariant.update';\n    }\n  bulkUpdate: {\n      /**\n       * @deprecated The action update on model shopifyProductVariant does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkUpdateShopifyProductVariants';\n      errorMessage: string;\n      optionsType: UpdateShopifyProductVariantOptions;\n      actionApiIdentifier: 'update';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyProductVariant.bulkUpdate';\n    }\n  delete: {\n      /**\n       * @deprecated The action delete on model shopifyProductVariant does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'deleteShopifyProductVariant';\n      errorMessage: string;\n      optionsType: DeleteShopifyProductVariantOptions;\n      actionApiIdentifier: 'delete';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyProductVariant.delete';\n    }\n  bulkDelete: {\n      /**\n       * @deprecated The action delete on model shopifyProductVariant does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkDeleteShopifyProductVariants';\n      errorMessage: string;\n      optionsType: DeleteShopifyProductVariantOptions;\n      actionApiIdentifier: 'delete';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyProductVariant.bulkDelete';\n    }\n  view: {\n      (query: string, variables?: Record<string, unknown>): Promise<unknown>\n      type: 'computedView';\n      operationName: 'view';\n      gqlFieldName: 'shopifyProductVariantGellyView';\n      namespace: null;\n      imports: [];\n      variables: {\n          query: { type: 'String', required: true },\n          args: { type: 'JSONObject' }\n        };\n      variablesType: Record<string, unknown>;\n      resultType: Promise<unknown>;\n      plan: never;\n    }\n};\n\n/**\n * A manager for the shopifyProductVariant model with all the available operations for reading and writing to it.*/\nexport const ShopifyProductVariantManager = buildModelManager(\n  modelApiIdentifier,\n  pluralModelApiIdentifier,\n  DefaultShopifyProductVariantSelection,\n  [\n    {\n      type: 'findOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultShopifyProductVariantSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultShopifyProductVariantSelection,\n      namespace: null\n    },\n    {\n      type: 'findMany',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyProductVariantSelection,\n      namespace: null\n    },\n    {\n      type: 'findFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyProductVariantSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyProductVariantSelection,\n      namespace: null\n    },\n    {\n      type: 'findOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'findById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyProductVariantSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'maybeFindById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyProductVariantSelection,\n      namespace: null\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'createShopifyProductVariant',\n      functionName: 'create',\n      errorMessage: 'The action create on model shopifyProductVariant does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'create',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyProductVariant.create'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkCreateShopifyProductVariants',\n      functionName: 'bulkCreate',\n      errorMessage: 'The action create on model shopifyProductVariant does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'create',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyProductVariant.bulkCreate'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'updateShopifyProductVariant',\n      functionName: 'update',\n      errorMessage: 'The action update on model shopifyProductVariant does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'update',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyProductVariant.update'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkUpdateShopifyProductVariants',\n      functionName: 'bulkUpdate',\n      errorMessage: 'The action update on model shopifyProductVariant does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'update',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyProductVariant.bulkUpdate'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'deleteShopifyProductVariant',\n      functionName: 'delete',\n      errorMessage: 'The action delete on model shopifyProductVariant does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'delete',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyProductVariant.delete'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkDeleteShopifyProductVariants',\n      functionName: 'bulkDelete',\n      errorMessage: 'The action delete on model shopifyProductVariant does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'delete',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyProductVariant.bulkDelete'\n    },\n    {\n      type: 'computedView',\n      operationName: 'view',\n      functionName: 'view',\n      gqlFieldName: 'shopifyProductVariantGellyView',\n      namespace: null,\n      variables: {\n        query: { type: 'String', required: true },\n        args: { type: 'JSONObject' }\n      }\n    }\n  ] as const\n) as unknown as {\n  // Gadget generates these model manager classes at runtime dynamically, which means there is no source code for the class. This is done to make the bundle size of the client as small as possible, avoiding a bunch of repeated source code in favour of one small builder function. The TypeScript types above document the exact interface of the constructed class.\n  new(connection: GadgetConnection): ShopifyProductVariantManager;\n};", "import {\n  GadgetConnection,\n  GadgetRecord,\n  GadgetRecordImplementation,\n  GadgetRecordList,\n  GadgetNonUniqueDataError,\n  actionRunner,\n  findManyRunner,\n  findOneRunner,\n  findOneByFieldRunner,\n  FieldSelection,\n  LimitToKnownKeys,\n  Selectable\n} from \"@gadgetinc/api-client-core\";\n\nimport {\n  Query,\n  ExplicitNestingRequired,\n\n  IDsList,\n  PromiseOrLiveIterator,\n  ShopifyProductVariantMedia,\n  AvailableShopifyProductVariantMediaSelection,\n  ShopifyProductVariantMediaSort,\n  ShopifyProductVariantMediaFilter\n} from \"../types.js\";\n\nimport { buildModelManager } from \"../builder.js\";\nimport { AvailableSelection, AllFieldsSelected, DefaultSelection, Select, DeepFilterNever } from \"../utils.js\";\n\n/**\n* A type that holds only the selected fields (and nested fields) of shopifyProductVariantMedia. The present fields in the result type of this are dynamic based on the options to each call that uses it.\n* The selected fields are sometimes given by the `Options` at `Options[\"select\"]`, and if a selection isn't made in the options, we use the default selection from above.\n*/\nexport type SelectedShopifyProductVariantMediaOrDefault<Options extends Selectable<AvailableShopifyProductVariantMediaSelection>> = DeepFilterNever<\n    Select<\n      ShopifyProductVariantMedia,\n      DefaultSelection<\n        AvailableShopifyProductVariantMediaSelection,\n        Options,\n        typeof DefaultShopifyProductVariantMediaSelection\n      >\n    >\n  >;\n\n/**\n * A type that represents a `GadgetRecord` type for shopifyProductVariantMedia.\n * It selects all fields of the model by default. If you want to represent a record type with a subset of fields, you could pass in an object in the `Selection` type parameter.\n *\n * @example\n * ```ts\n * const someFunction = (record: ShopifyProductVariantMediaRecord, recordWithName: ShopifyProductVariantMediaRecord<{ select: { name: true; } }>) => {\n *   // The type of the `record` variable will include all fields of the model.\n *   const name = record.name;\n *   const otherField = record.otherField;\n *\n *   // The type of the `recordWithName` variable will only include the selected fields.\n *   const name = recordWithName.name;\n *   const otherField = recordWithName.otherField; // Type error: Property 'otherField' does not exist on type 'GadgetRecord<{ name: true; }>'.\n * }\n * ```\n */\nexport type ShopifyProductVariantMediaRecord<Selection extends AvailableShopifyProductVariantMediaSelection | undefined = typeof DefaultShopifyProductVariantMediaSelection> = DeepFilterNever<\n  GadgetRecord<\n    SelectedShopifyProductVariantMediaOrDefault<{\n      select: Selection;\n    }>\n  >\n>;\n\nexport const DefaultShopifyProductVariantMediaSelection = {\n     __typename: true,\n     id: true,\n     createdAt: true,\n     fileId: true,\n     productVariantId: true,\n     shopId: true,\n     updatedAt: true\n   } as const;\nconst modelApiIdentifier = \"shopifyProductVariantMedia\" as const;\nconst pluralModelApiIdentifier = \"shopifyProductVariantMedias\" as const;\n/** Options that can be passed to the `ShopifyProductVariantMediaManager#findOne` method */\n export interface FindOneShopifyProductVariantMediaOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyProductVariantMediaSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `ShopifyProductVariantMediaManager#maybeFindOne` method */\n export interface MaybeFindOneShopifyProductVariantMediaOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyProductVariantMediaSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `ShopifyProductVariantMediaManager#findMany` method */\n export interface FindManyShopifyProductVariantMediasOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyProductVariantMediaSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyProductVariantMediaSort | ShopifyProductVariantMediaSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyProductVariantMediaFilter | ShopifyProductVariantMediaFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n  first?: number | null;\n  last?: number | null;\n  after?: string | null;\n  before?: string | null;\n};\n/** Options that can be passed to the `ShopifyProductVariantMediaManager#findFirst` method */\n export interface FindFirstShopifyProductVariantMediaOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyProductVariantMediaSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyProductVariantMediaSort | ShopifyProductVariantMediaSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyProductVariantMediaFilter | ShopifyProductVariantMediaFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\n/** Options that can be passed to the `ShopifyProductVariantMediaManager#maybeFindFirst` method */\n export interface MaybeFindFirstShopifyProductVariantMediaOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyProductVariantMediaSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyProductVariantMediaSort | ShopifyProductVariantMediaSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyProductVariantMediaFilter | ShopifyProductVariantMediaFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\nexport interface CreateShopifyProductVariantMediaOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyProductVariantMediaSelection;\n};\nexport interface UpdateShopifyProductVariantMediaOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyProductVariantMediaSelection;\n};\nexport interface DeleteShopifyProductVariantMediaOptions {\n\n};\n\n/**\n * A manager for the shopifyProductVariantMedia model with all the available operations for reading and writing to it.*/\nexport type ShopifyProductVariantMediaManager = {\n  readonly connection: GadgetConnection;\n\n  findOne: {\n      /**\n       * Finds one shopifyProductVariantMedia by ID. Returns a `Promise` that resolves to the record if found and rejects the promise if the record isn't found.\n       **/\n      <Options extends FindOneShopifyProductVariantMediaOptions>(id: string, options?: LimitToKnownKeys<Options, FindOneShopifyProductVariantMediaOptions>): PromiseOrLiveIterator<Options,ShopifyProductVariantMediaRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultShopifyProductVariantMediaSelection;\n      namespace: null;\n      optionsType: FindOneShopifyProductVariantMediaOptions;\n      selectionType: AvailableShopifyProductVariantMediaSelection;\n      schemaType: Query[\"shopifyProductVariantMedia\"];\n    }\n  maybeFindOne: {\n      /**\n       * Finds one shopifyProductVariantMedia by ID. Returns a `Promise` that resolves to the record if found and returns null otherwise.\n       **/\n      <Options extends MaybeFindOneShopifyProductVariantMediaOptions>(id: string, options?: LimitToKnownKeys<Options, MaybeFindOneShopifyProductVariantMediaOptions>): PromiseOrLiveIterator<Options,ShopifyProductVariantMediaRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: MaybeFindOneShopifyProductVariantMediaOptions;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultShopifyProductVariantMediaSelection;\n      namespace: null;\n      selectionType: AvailableShopifyProductVariantMediaSelection;\n      schemaType: Query[\"shopifyProductVariantMedia\"];\n    }\n  findMany: {\n      /**\n       * Finds many shopifyProductVariantMedia. Returns a `Promise` for a `GadgetRecordList` of objects according to the passed `options`. Optionally filters the returned records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindManyShopifyProductVariantMediasOptions>(options?: LimitToKnownKeys<Options, FindManyShopifyProductVariantMediasOptions>): PromiseOrLiveIterator<Options,GadgetRecordList<ShopifyProductVariantMediaRecord<Options[\"select\"]>>>;\n      type: 'findMany';\n      operationName: typeof pluralModelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: FindManyShopifyProductVariantMediasOptions;\n      defaultSelection: typeof DefaultShopifyProductVariantMediaSelection;\n      namespace: null;\n      selectionType: AvailableShopifyProductVariantMediaSelection;\n      schemaType: Query[\"shopifyProductVariantMedia\"];\n    }\n  findFirst: {\n      /**\n       * Finds the first matching shopifyProductVariantMedia. Returns a `Promise` that resolves to a record if found and rejects the promise if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindFirstShopifyProductVariantMediaOptions>(options?: LimitToKnownKeys<Options, FindFirstShopifyProductVariantMediaOptions>): PromiseOrLiveIterator<Options,ShopifyProductVariantMediaRecord<Options[\"select\"]>>;\n      type: 'findFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: FindFirstShopifyProductVariantMediaOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyProductVariantMediaSelection;\n      namespace: null;\n      selectionType: AvailableShopifyProductVariantMediaSelection;\n      schemaType: Query[\"shopifyProductVariantMedia\"];\n    }\n  maybeFindFirst: {\n      /**\n       * Finds the first matching shopifyProductVariantMedia. Returns a `Promise` that resolves to a record if found, or null if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` pagination options.\n       **/\n      <Options extends MaybeFindFirstShopifyProductVariantMediaOptions>(options?: LimitToKnownKeys<Options, MaybeFindFirstShopifyProductVariantMediaOptions>): PromiseOrLiveIterator<Options,ShopifyProductVariantMediaRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: MaybeFindFirstShopifyProductVariantMediaOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyProductVariantMediaSelection;\n      namespace: null;\n      selectionType: AvailableShopifyProductVariantMediaSelection;\n      schemaType: Query[\"shopifyProductVariantMedia\"];\n    }\n  findById: {\n      /**\n      * Finds one shopifyProductVariantMedia by its id. Returns a Promise that resolves to the record if found and rejects the promise if the record isn't found.\n      **/\n      <Options extends FindOneShopifyProductVariantMediaOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneShopifyProductVariantMediaOptions>): PromiseOrLiveIterator<Options,ShopifyProductVariantMediaRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneShopifyProductVariantMediaOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyProductVariantMediaSelection;\n      namespace: null;\n      selectionType: AvailableShopifyProductVariantMediaSelection;\n      schemaType: Query[\"shopifyProductVariantMedia\"];\n    }\n  maybeFindById: {\n      /**\n      * Finds one shopifyProductVariantMedia by its id. Returns a Promise that resolves to the record if found and returns null if the record isn't found.\n      **/\n      <Options extends FindOneShopifyProductVariantMediaOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneShopifyProductVariantMediaOptions>): Promise<ShopifyProductVariantMediaRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneShopifyProductVariantMediaOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyProductVariantMediaSelection;\n      namespace: null;\n      selectionType: AvailableShopifyProductVariantMediaSelection;\n      schemaType: Query[\"shopifyProductVariantMedia\"];\n    }\n  create: {\n      /**\n       * @deprecated The action create on model shopifyProductVariantMedia does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'createShopifyProductVariantMedia';\n      errorMessage: string;\n      optionsType: CreateShopifyProductVariantMediaOptions;\n      actionApiIdentifier: 'create';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyProductVariantMedia.create';\n    }\n  bulkCreate: {\n      /**\n       * @deprecated The action create on model shopifyProductVariantMedia does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkCreateShopifyProductVariantMedia';\n      errorMessage: string;\n      optionsType: CreateShopifyProductVariantMediaOptions;\n      actionApiIdentifier: 'create';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyProductVariantMedia.bulkCreate';\n    }\n  update: {\n      /**\n       * @deprecated The action update on model shopifyProductVariantMedia does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'updateShopifyProductVariantMedia';\n      errorMessage: string;\n      optionsType: UpdateShopifyProductVariantMediaOptions;\n      actionApiIdentifier: 'update';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyProductVariantMedia.update';\n    }\n  bulkUpdate: {\n      /**\n       * @deprecated The action update on model shopifyProductVariantMedia does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkUpdateShopifyProductVariantMedia';\n      errorMessage: string;\n      optionsType: UpdateShopifyProductVariantMediaOptions;\n      actionApiIdentifier: 'update';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyProductVariantMedia.bulkUpdate';\n    }\n  delete: {\n      /**\n       * @deprecated The action delete on model shopifyProductVariantMedia does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'deleteShopifyProductVariantMedia';\n      errorMessage: string;\n      optionsType: DeleteShopifyProductVariantMediaOptions;\n      actionApiIdentifier: 'delete';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyProductVariantMedia.delete';\n    }\n  bulkDelete: {\n      /**\n       * @deprecated The action delete on model shopifyProductVariantMedia does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkDeleteShopifyProductVariantMedia';\n      errorMessage: string;\n      optionsType: DeleteShopifyProductVariantMediaOptions;\n      actionApiIdentifier: 'delete';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyProductVariantMedia.bulkDelete';\n    }\n  view: {\n      (query: string, variables?: Record<string, unknown>): Promise<unknown>\n      type: 'computedView';\n      operationName: 'view';\n      gqlFieldName: 'shopifyProductVariantMediaGellyView';\n      namespace: null;\n      imports: [];\n      variables: {\n          query: { type: 'String', required: true },\n          args: { type: 'JSONObject' }\n        };\n      variablesType: Record<string, unknown>;\n      resultType: Promise<unknown>;\n      plan: never;\n    }\n};\n\n/**\n * A manager for the shopifyProductVariantMedia model with all the available operations for reading and writing to it.*/\nexport const ShopifyProductVariantMediaManager = buildModelManager(\n  modelApiIdentifier,\n  pluralModelApiIdentifier,\n  DefaultShopifyProductVariantMediaSelection,\n  [\n    {\n      type: 'findOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultShopifyProductVariantMediaSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultShopifyProductVariantMediaSelection,\n      namespace: null\n    },\n    {\n      type: 'findMany',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyProductVariantMediaSelection,\n      namespace: null\n    },\n    {\n      type: 'findFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyProductVariantMediaSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyProductVariantMediaSelection,\n      namespace: null\n    },\n    {\n      type: 'findOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'findById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyProductVariantMediaSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'maybeFindById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyProductVariantMediaSelection,\n      namespace: null\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'createShopifyProductVariantMedia',\n      functionName: 'create',\n      errorMessage: 'The action create on model shopifyProductVariantMedia does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'create',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyProductVariantMedia.create'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkCreateShopifyProductVariantMedia',\n      functionName: 'bulkCreate',\n      errorMessage: 'The action create on model shopifyProductVariantMedia does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'create',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyProductVariantMedia.bulkCreate'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'updateShopifyProductVariantMedia',\n      functionName: 'update',\n      errorMessage: 'The action update on model shopifyProductVariantMedia does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'update',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyProductVariantMedia.update'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkUpdateShopifyProductVariantMedia',\n      functionName: 'bulkUpdate',\n      errorMessage: 'The action update on model shopifyProductVariantMedia does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'update',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyProductVariantMedia.bulkUpdate'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'deleteShopifyProductVariantMedia',\n      functionName: 'delete',\n      errorMessage: 'The action delete on model shopifyProductVariantMedia does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'delete',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyProductVariantMedia.delete'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkDeleteShopifyProductVariantMedia',\n      functionName: 'bulkDelete',\n      errorMessage: 'The action delete on model shopifyProductVariantMedia does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'delete',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyProductVariantMedia.bulkDelete'\n    },\n    {\n      type: 'computedView',\n      operationName: 'view',\n      functionName: 'view',\n      gqlFieldName: 'shopifyProductVariantMediaGellyView',\n      namespace: null,\n      variables: {\n        query: { type: 'String', required: true },\n        args: { type: 'JSONObject' }\n      }\n    }\n  ] as const\n) as unknown as {\n  // Gadget generates these model manager classes at runtime dynamically, which means there is no source code for the class. This is done to make the bundle size of the client as small as possible, avoiding a bunch of repeated source code in favour of one small builder function. The TypeScript types above document the exact interface of the constructed class.\n  new(connection: GadgetConnection): ShopifyProductVariantMediaManager;\n};", "import {\n  GadgetConnection,\n  GadgetRecord,\n  GadgetRecordImplementation,\n  GadgetRecordList,\n  GadgetNonUniqueDataError,\n  actionRunner,\n  findManyRunner,\n  findOneRunner,\n  findOneByFieldRunner,\n  FieldSelection,\n  LimitToKnownKeys,\n  Selectable\n} from \"@gadgetinc/api-client-core\";\n\nimport {\n  Query,\n  ExplicitNestingRequired,\n\n  IDsList,\n  PromiseOrLiveIterator,\n  LastSKU,\n  AvailableLastSKUSelection,\n  LastSKUSort,\n  LastSKUFilter,\n  CreateLastSKUInput,\n  UpdateLastSKUInput,\n  Scalars,\n  UpsertLastSKUInput\n} from \"../types.js\";\n\nimport { buildModelManager } from \"../builder.js\";\nimport { AvailableSelection, AllFieldsSelected, DefaultSelection, Select, DeepFilterNever } from \"../utils.js\";\n\n/**\n* A type that holds only the selected fields (and nested fields) of lastSKU. The present fields in the result type of this are dynamic based on the options to each call that uses it.\n* The selected fields are sometimes given by the `Options` at `Options[\"select\"]`, and if a selection isn't made in the options, we use the default selection from above.\n*/\nexport type SelectedLastSKUOrDefault<Options extends Selectable<AvailableLastSKUSelection>> = DeepFilterNever<\n    Select<\n      LastSKU,\n      DefaultSelection<\n        AvailableLastSKUSelection,\n        Options,\n        typeof DefaultLastSKUSelection\n      >\n    >\n  >;\n\n/**\n * A type that represents a `GadgetRecord` type for lastSKU.\n * It selects all fields of the model by default. If you want to represent a record type with a subset of fields, you could pass in an object in the `Selection` type parameter.\n *\n * @example\n * ```ts\n * const someFunction = (record: LastSKURecord, recordWithName: LastSKURecord<{ select: { name: true; } }>) => {\n *   // The type of the `record` variable will include all fields of the model.\n *   const name = record.name;\n *   const otherField = record.otherField;\n *\n *   // The type of the `recordWithName` variable will only include the selected fields.\n *   const name = recordWithName.name;\n *   const otherField = recordWithName.otherField; // Type error: Property 'otherField' does not exist on type 'GadgetRecord<{ name: true; }>'.\n * }\n * ```\n */\nexport type LastSKURecord<Selection extends AvailableLastSKUSelection | undefined = typeof DefaultLastSKUSelection> = DeepFilterNever<\n  GadgetRecord<\n    SelectedLastSKUOrDefault<{\n      select: Selection;\n    }>\n  >\n>;\n\nexport const DefaultLastSKUSelection = {\n     __typename: true,\n     id: true,\n     createdAt: true,\n     updatedAt: true,\n     value: true\n   } as const;\nconst modelApiIdentifier = \"lastSKU\" as const;\nconst pluralModelApiIdentifier = \"lastSKUs\" as const;\n/** Options that can be passed to the `LastSKUManager#findOne` method */\n export interface FindOneLastSKUOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableLastSKUSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `LastSKUManager#maybeFindOne` method */\n export interface MaybeFindOneLastSKUOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableLastSKUSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `LastSKUManager#findMany` method */\n export interface FindManyLastSKUsOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableLastSKUSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: LastSKUSort | LastSKUSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: LastSKUFilter | LastSKUFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n  first?: number | null;\n  last?: number | null;\n  after?: string | null;\n  before?: string | null;\n};\n/** Options that can be passed to the `LastSKUManager#findFirst` method */\n export interface FindFirstLastSKUOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableLastSKUSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: LastSKUSort | LastSKUSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: LastSKUFilter | LastSKUFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\n/** Options that can be passed to the `LastSKUManager#maybeFindFirst` method */\n export interface MaybeFindFirstLastSKUOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableLastSKUSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: LastSKUSort | LastSKUSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: LastSKUFilter | LastSKUFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\nexport interface CreateLastSKUOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableLastSKUSelection;\n};\nexport interface UpdateLastSKUOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableLastSKUSelection;\n};\nexport interface DeleteLastSKUOptions {\n\n};\nexport interface UpsertLastSKUOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableLastSKUSelection;\n};\n/**\n * The fully-qualified, expanded form of the inputs for executing the create action.\n * The flattened style should be preferred over this style, but for models with ambiguous API identifiers, this style can be used to remove any ambiguity.\n **/\nexport type FullyQualifiedCreateLastSKUVariables = {\n  lastSKU?: CreateLastSKUInput;\n}\n/**\n * The inputs for executing create on lastSKU.\n * This is the flattened style of inputs, suitable for general use, and should be preferred.\n **/\nexport type CreateLastSKUVariables = CreateLastSKUInput;\n/**\n * The return value from executing create on lastSKU\n * Is a GadgetRecord of the model's type.\n **/\nexport type CreateLastSKUResult<Options extends CreateLastSKUOptions> = SelectedLastSKUOrDefault<Options> extends void ?\n      void :\n      GadgetRecord<SelectedLastSKUOrDefault<Options>>;\n/**\n * The fully-qualified, expanded form of the inputs for executing the update action.\n * The flattened style should be preferred over this style, but for models with ambiguous API identifiers, this style can be used to remove any ambiguity.\n **/\nexport type FullyQualifiedUpdateLastSKUVariables = {\n  lastSKU?: UpdateLastSKUInput;\n}\n/**\n * The inputs for executing update on lastSKU.\n * This is the flattened style of inputs, suitable for general use, and should be preferred.\n **/\nexport type UpdateLastSKUVariables = UpdateLastSKUInput;\n/**\n * The return value from executing update on lastSKU\n * Is a GadgetRecord of the model's type.\n **/\nexport type UpdateLastSKUResult<Options extends UpdateLastSKUOptions> = SelectedLastSKUOrDefault<Options> extends void ?\n      void :\n      GadgetRecord<SelectedLastSKUOrDefault<Options>>;\n/**\n * The return value from executing delete on lastSKU\n * Is void because this action deletes the record\n **/\nexport type DeleteLastSKUResult<Options extends DeleteLastSKUOptions> = void;\n/**\n * The fully-qualified, expanded form of the inputs for executing the upsert action.\n * The flattened style should be preferred over this style, but for models with ambiguous API identifiers, this style can be used to remove any ambiguity.\n **/\nexport type FullyQualifiedUpsertLastSKUVariables = {\n  on?: ((Scalars['String'] | null))[];\n  lastSKU?: UpsertLastSKUInput;\n}\n/**\n * The inputs for executing upsert on lastSKU.\n * This is the flattened style of inputs, suitable for general use, and should be preferred.\n **/\nexport type UpsertLastSKUVariables = Omit<\n     UpsertLastSKUInput,\n     \"on\"\n   > & {\n     on?: ((Scalars['String'] | null))[];\n   };\n/**\n * The return value from executing upsert on lastSKU\n *\n **/\nexport type UpsertLastSKUResult<Options extends UpsertLastSKUOptions> = SelectedLastSKUOrDefault<Options> extends void ?\n      void :\n      GadgetRecord<SelectedLastSKUOrDefault<Options>>;\n\n/**\n * A manager for the lastSKU model with all the available operations for reading and writing to it.*/\nexport type LastSKUManager = {\n  readonly connection: GadgetConnection;\n\n  findOne: {\n      /**\n       * Finds one lastSKU by ID. Returns a `Promise` that resolves to the record if found and rejects the promise if the record isn't found.\n       **/\n      <Options extends FindOneLastSKUOptions>(id: string, options?: LimitToKnownKeys<Options, FindOneLastSKUOptions>): PromiseOrLiveIterator<Options,LastSKURecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultLastSKUSelection;\n      namespace: null;\n      optionsType: FindOneLastSKUOptions;\n      selectionType: AvailableLastSKUSelection;\n      schemaType: Query[\"lastSKU\"];\n    }\n  maybeFindOne: {\n      /**\n       * Finds one lastSKU by ID. Returns a `Promise` that resolves to the record if found and returns null otherwise.\n       **/\n      <Options extends MaybeFindOneLastSKUOptions>(id: string, options?: LimitToKnownKeys<Options, MaybeFindOneLastSKUOptions>): PromiseOrLiveIterator<Options,LastSKURecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: MaybeFindOneLastSKUOptions;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultLastSKUSelection;\n      namespace: null;\n      selectionType: AvailableLastSKUSelection;\n      schemaType: Query[\"lastSKU\"];\n    }\n  findMany: {\n      /**\n       * Finds many lastSKU. Returns a `Promise` for a `GadgetRecordList` of objects according to the passed `options`. Optionally filters the returned records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindManyLastSKUsOptions>(options?: LimitToKnownKeys<Options, FindManyLastSKUsOptions>): PromiseOrLiveIterator<Options,GadgetRecordList<LastSKURecord<Options[\"select\"]>>>;\n      type: 'findMany';\n      operationName: typeof pluralModelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: FindManyLastSKUsOptions;\n      defaultSelection: typeof DefaultLastSKUSelection;\n      namespace: null;\n      selectionType: AvailableLastSKUSelection;\n      schemaType: Query[\"lastSKU\"];\n    }\n  findFirst: {\n      /**\n       * Finds the first matching lastSKU. Returns a `Promise` that resolves to a record if found and rejects the promise if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindFirstLastSKUOptions>(options?: LimitToKnownKeys<Options, FindFirstLastSKUOptions>): PromiseOrLiveIterator<Options,LastSKURecord<Options[\"select\"]>>;\n      type: 'findFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: FindFirstLastSKUOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultLastSKUSelection;\n      namespace: null;\n      selectionType: AvailableLastSKUSelection;\n      schemaType: Query[\"lastSKU\"];\n    }\n  maybeFindFirst: {\n      /**\n       * Finds the first matching lastSKU. Returns a `Promise` that resolves to a record if found, or null if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` pagination options.\n       **/\n      <Options extends MaybeFindFirstLastSKUOptions>(options?: LimitToKnownKeys<Options, MaybeFindFirstLastSKUOptions>): PromiseOrLiveIterator<Options,LastSKURecord<Options[\"select\"]> | null>;\n      type: 'maybeFindFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: MaybeFindFirstLastSKUOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultLastSKUSelection;\n      namespace: null;\n      selectionType: AvailableLastSKUSelection;\n      schemaType: Query[\"lastSKU\"];\n    }\n  findById: {\n      /**\n      * Finds one lastSKU by its id. Returns a Promise that resolves to the record if found and rejects the promise if the record isn't found.\n      **/\n      <Options extends FindOneLastSKUOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneLastSKUOptions>): PromiseOrLiveIterator<Options,LastSKURecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneLastSKUOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultLastSKUSelection;\n      namespace: null;\n      selectionType: AvailableLastSKUSelection;\n      schemaType: Query[\"lastSKU\"];\n    }\n  maybeFindById: {\n      /**\n      * Finds one lastSKU by its id. Returns a Promise that resolves to the record if found and returns null if the record isn't found.\n      **/\n      <Options extends FindOneLastSKUOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneLastSKUOptions>): Promise<LastSKURecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneLastSKUOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultLastSKUSelection;\n      namespace: null;\n      selectionType: AvailableLastSKUSelection;\n      schemaType: Query[\"lastSKU\"];\n    }\n  create: {\n      /**\n       * Executes the create action.Accepts the parameters for the action via the `variables` argument.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the flat style, all-params-together overload that most use cases should use.\n      *\n      * @example\n      * * const lastSKURecord = await api.lastSKU.create({\n        *   value: 123,\n        * });\n      **/\n      <Options extends CreateLastSKUOptions>(\n      \n        variables: CreateLastSKUVariables,\n        options?: LimitToKnownKeys<Options, CreateLastSKUOptions>\n      ): Promise<CreateLastSKUResult<Options>>;\n      /**\n       * Executes the create action.Accepts the parameters for the action via the `variables` argument.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the fully qualified, nested api identifier style overload that should be used when there's an ambiguity between an action param and a model field.\n      *\n      * @example\n      * * const lastSKURecord = await api.lastSKU.create({\n        *   lastSKU: {\n        *     value: 123,\n        *   },\n        * });\n      **/\n      <Options extends CreateLastSKUOptions>(\n      \n        variables: FullyQualifiedCreateLastSKUVariables,\n        options?: LimitToKnownKeys<Options, CreateLastSKUOptions>\n      ): Promise<CreateLastSKUResult<Options>>;\n      type: 'action';\n      operationName: 'createLastSKU';\n      operationReturnType: 'CreateLastSKU';\n      namespace: null;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      operatesWithRecordIdentity: false;\n      modelSelectionField: typeof modelApiIdentifier;\n      isBulk: false;\n      isDeleter: false;\n      variables: { lastSKU: { required: false, type: 'CreateLastSKUInput' } };\n      variablesType: ((\n               \n               & (FullyQualifiedCreateLastSKUVariables | CreateLastSKUVariables)\n             ) | undefined);\n      hasAmbiguousIdentifier: false;\n      paramOnlyVariables: [];\n      hasReturnType: false;\n      acceptsModelInput: true;\n      hasCreateOrUpdateEffect: true;\n      imports: [ 'CreateLastSKUInput' ];\n      optionsType: CreateLastSKUOptions;\n      selectionType: AvailableLastSKUSelection;\n      schemaType: Query[\"lastSKU\"];\n      defaultSelection: typeof DefaultLastSKUSelection;\n    }\n  bulkCreate: {\n      /**\n        * Executes the bulkCreate action with the given inputs.\n        */\n       <Options extends CreateLastSKUOptions>(\n          inputs: (FullyQualifiedCreateLastSKUVariables | CreateLastSKUVariables)[],\n          options?: LimitToKnownKeys<Options, CreateLastSKUOptions>\n       ): Promise<CreateLastSKUResult<Options>[]>\n      type: 'action';\n      operationName: 'bulkCreateLastSKUs';\n      isBulk: true;\n      isDeleter: false;\n      hasReturnType: false;\n      acceptsModelInput: true;\n      operatesWithRecordIdentity: false;\n      singleActionFunctionName: 'create';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      modelSelectionField: typeof pluralModelApiIdentifier;\n      optionsType: CreateLastSKUOptions;\n      namespace: null;\n      variables: { inputs: { required: true, type: '[BulkCreateLastSKUsInput!]' } };\n      variablesType: (FullyQualifiedCreateLastSKUVariables | CreateLastSKUVariables)[];\n      paramOnlyVariables: [];\n      selectionType: AvailableLastSKUSelection;\n      schemaType: Query[\"lastSKU\"];\n      defaultSelection: typeof DefaultLastSKUSelection;\n    }\n  update: {\n      /**\n       * Executes the update actionon one record specified by `id`.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the flat style, all-params-together overload that most use cases should use.\n      *\n      * @example\n      * * const lastSKURecord = await api.lastSKU.update(\"1\", {\n        *   value: 123,\n        * });\n      **/\n      <Options extends UpdateLastSKUOptions>(\n        id: string,\n        variables: UpdateLastSKUVariables,\n        options?: LimitToKnownKeys<Options, UpdateLastSKUOptions>\n      ): Promise<UpdateLastSKUResult<Options>>;\n      /**\n       * Executes the update actionon one record specified by `id`.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the fully qualified, nested api identifier style overload that should be used when there's an ambiguity between an action param and a model field.\n      *\n      * @example\n      * * const lastSKURecord = await api.lastSKU.update(\"1\", {\n        *   lastSKU: {\n        *     value: 123,\n        *   },\n        * });\n      **/\n      <Options extends UpdateLastSKUOptions>(\n        id: string,\n        variables: FullyQualifiedUpdateLastSKUVariables,\n        options?: LimitToKnownKeys<Options, UpdateLastSKUOptions>\n      ): Promise<UpdateLastSKUResult<Options>>;\n      type: 'action';\n      operationName: 'updateLastSKU';\n      operationReturnType: 'UpdateLastSKU';\n      namespace: null;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      operatesWithRecordIdentity: true;\n      modelSelectionField: typeof modelApiIdentifier;\n      isBulk: false;\n      isDeleter: false;\n      variables: {\n          id: { required: true, type: 'GadgetID' },\n          lastSKU: { required: false, type: 'UpdateLastSKUInput' }\n        };\n      variablesType: (\n              { id: string }\n              & (FullyQualifiedUpdateLastSKUVariables | UpdateLastSKUVariables)\n            );\n      hasAmbiguousIdentifier: false;\n      paramOnlyVariables: [];\n      hasReturnType: false;\n      acceptsModelInput: true;\n      hasCreateOrUpdateEffect: true;\n      imports: [ 'UpdateLastSKUInput' ];\n      optionsType: UpdateLastSKUOptions;\n      selectionType: AvailableLastSKUSelection;\n      schemaType: Query[\"lastSKU\"];\n      defaultSelection: typeof DefaultLastSKUSelection;\n    }\n  bulkUpdate: {\n      /**\n        * Executes the bulkUpdate action with the given inputs.\n        */\n       <Options extends UpdateLastSKUOptions>(\n          inputs: (FullyQualifiedUpdateLastSKUVariables | UpdateLastSKUVariables & { id: string })[],\n          options?: LimitToKnownKeys<Options, UpdateLastSKUOptions>\n       ): Promise<UpdateLastSKUResult<Options>[]>\n      type: 'action';\n      operationName: 'bulkUpdateLastSKUs';\n      isBulk: true;\n      isDeleter: false;\n      hasReturnType: false;\n      acceptsModelInput: true;\n      operatesWithRecordIdentity: true;\n      singleActionFunctionName: 'update';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      modelSelectionField: typeof pluralModelApiIdentifier;\n      optionsType: UpdateLastSKUOptions;\n      namespace: null;\n      variables: { inputs: { required: true, type: '[BulkUpdateLastSKUsInput!]' } };\n      variablesType: (FullyQualifiedUpdateLastSKUVariables | UpdateLastSKUVariables & { id: string })[];\n      paramOnlyVariables: [];\n      selectionType: AvailableLastSKUSelection;\n      schemaType: Query[\"lastSKU\"];\n      defaultSelection: typeof DefaultLastSKUSelection;\n    }\n  delete: {\n      /**\n       * Executes the delete actionon one record specified by `id`.Deletes the record on the server. Returns a Promise that resolves if the delete succeeds.\n      *\n      * This is the fully qualified, nested api identifier style overload that should be used when there's an ambiguity between an action param and a model field.\n      *\n      * @example\n      * * await api.lastSKU.delete(\"1\");\n      **/\n      <Options extends DeleteLastSKUOptions>(\n        id: string,\n      \n        options?: LimitToKnownKeys<Options, DeleteLastSKUOptions>\n      ): Promise<DeleteLastSKUResult<Options>>;\n      type: 'action';\n      operationName: 'deleteLastSKU';\n      operationReturnType: 'DeleteLastSKU';\n      namespace: null;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      operatesWithRecordIdentity: true;\n      modelSelectionField: typeof modelApiIdentifier;\n      isBulk: false;\n      isDeleter: true;\n      variables: { id: { required: true, type: 'GadgetID' } };\n      variablesType: (\n              { id: string }\n              \n            );\n      hasAmbiguousIdentifier: false;\n      paramOnlyVariables: [];\n      hasReturnType: false;\n      acceptsModelInput: false;\n      hasCreateOrUpdateEffect: false;\n      imports: [];\n      optionsType: DeleteLastSKUOptions;\n      selectionType: Record<string, never>;\n      schemaType: null;\n      defaultSelection: null;\n    }\n  bulkDelete: {\n      /**\n        * Executes the bulkDelete action with the given inputs.Deletes the records on the server.\n        */\n       <Options extends DeleteLastSKUOptions>(\n          ids: string[],\n          options?: LimitToKnownKeys<Options, DeleteLastSKUOptions>\n       ): Promise<DeleteLastSKUResult<Options>[]>\n      type: 'action';\n      operationName: 'bulkDeleteLastSKUs';\n      isBulk: true;\n      isDeleter: true;\n      hasReturnType: false;\n      acceptsModelInput: false;\n      operatesWithRecordIdentity: true;\n      singleActionFunctionName: 'delete';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      modelSelectionField: typeof pluralModelApiIdentifier;\n      optionsType: DeleteLastSKUOptions;\n      namespace: null;\n      variables: { ids: { required: true, type: '[GadgetID!]' } };\n      variablesType: IDsList | undefined;\n      paramOnlyVariables: [];\n      selectionType: Record<string, never>;\n      schemaType: null;\n      defaultSelection: null;\n    }\n  upsert: {\n      /**\n       * Executes the upsert action.Accepts the parameters for the action via the `variables` argument.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the flat style, all-params-together overload that most use cases should use.\n      *\n      * @example\n      * * const result = await api.lastSKU.upsert({\n        *   id: \"1\",\n        *   value: 123,\n        * });\n      **/\n      <Options extends UpsertLastSKUOptions>(\n      \n        variables: UpsertLastSKUVariables,\n        options?: LimitToKnownKeys<Options, UpsertLastSKUOptions>\n      ): Promise<UpsertLastSKUResult<Options>>;\n      /**\n       * Executes the upsert action.Accepts the parameters for the action via the `variables` argument.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the fully qualified, nested api identifier style overload that should be used when there's an ambiguity between an action param and a model field.\n      *\n      * @example\n      * * const result = await api.lastSKU.upsert({\n        *   lastSKU: {\n        *     id: \"1\",\n        *     value: 123,\n        *   },\n        * });\n      **/\n      <Options extends UpsertLastSKUOptions>(\n      \n        variables: FullyQualifiedUpsertLastSKUVariables,\n        options?: LimitToKnownKeys<Options, UpsertLastSKUOptions>\n      ): Promise<UpsertLastSKUResult<Options>>;\n      type: 'action';\n      operationName: 'upsertLastSKU';\n      operationReturnType: 'UpsertLastSKU';\n      namespace: null;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      operatesWithRecordIdentity: false;\n      modelSelectionField: typeof modelApiIdentifier;\n      isBulk: false;\n      isDeleter: false;\n      variables: {\n          on: { required: false, type: '[String!]' },\n          lastSKU: { required: false, type: 'UpsertLastSKUInput' }\n        };\n      variablesType: ((\n               \n               & (FullyQualifiedUpsertLastSKUVariables | UpsertLastSKUVariables)\n             ) | undefined);\n      hasAmbiguousIdentifier: false;\n      paramOnlyVariables: [ 'on' ];\n      hasReturnType: {\n          '... on CreateLastSKUResult': { hasReturnType: false },\n          '... on UpdateLastSKUResult': { hasReturnType: false }\n        };\n      acceptsModelInput: true;\n      hasCreateOrUpdateEffect: true;\n      imports: [ 'Scalars', 'UpsertLastSKUInput' ];\n      optionsType: UpsertLastSKUOptions;\n      selectionType: AvailableLastSKUSelection;\n      schemaType: Query[\"lastSKU\"];\n      defaultSelection: typeof DefaultLastSKUSelection;\n    }\n  bulkUpsert: {\n      /**\n        * Executes the bulkUpsert action with the given inputs.\n        */\n       <Options extends UpsertLastSKUOptions>(\n          inputs: (FullyQualifiedUpsertLastSKUVariables | UpsertLastSKUVariables)[],\n          options?: LimitToKnownKeys<Options, UpsertLastSKUOptions>\n       ): Promise<any[]>\n      type: 'action';\n      operationName: 'bulkUpsertLastSKUs';\n      isBulk: true;\n      isDeleter: false;\n      hasReturnType: false;\n      acceptsModelInput: true;\n      operatesWithRecordIdentity: false;\n      singleActionFunctionName: 'upsert';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      modelSelectionField: typeof pluralModelApiIdentifier;\n      optionsType: UpsertLastSKUOptions;\n      namespace: null;\n      variables: { inputs: { required: true, type: '[BulkUpsertLastSKUsInput!]' } };\n      variablesType: (FullyQualifiedUpsertLastSKUVariables | UpsertLastSKUVariables)[];\n      paramOnlyVariables: [ 'on' ];\n      selectionType: AvailableLastSKUSelection;\n      schemaType: Query[\"lastSKU\"];\n      defaultSelection: typeof DefaultLastSKUSelection;\n    }\n  view: {\n      (query: string, variables?: Record<string, unknown>): Promise<unknown>\n      type: 'computedView';\n      operationName: 'view';\n      gqlFieldName: 'lastSKUGellyView';\n      namespace: null;\n      imports: [];\n      variables: {\n          query: { type: 'String', required: true },\n          args: { type: 'JSONObject' }\n        };\n      variablesType: Record<string, unknown>;\n      resultType: Promise<unknown>;\n      plan: never;\n    }\n};\n\n/**\n * A manager for the lastSKU model with all the available operations for reading and writing to it.*/\nexport const LastSKUManager = buildModelManager(\n  modelApiIdentifier,\n  pluralModelApiIdentifier,\n  DefaultLastSKUSelection,\n  [\n    {\n      type: 'findOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultLastSKUSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultLastSKUSelection,\n      namespace: null\n    },\n    {\n      type: 'findMany',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultLastSKUSelection,\n      namespace: null\n    },\n    {\n      type: 'findFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultLastSKUSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultLastSKUSelection,\n      namespace: null\n    },\n    {\n      type: 'findOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'findById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultLastSKUSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'maybeFindById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultLastSKUSelection,\n      namespace: null\n    },\n    {\n      type: 'action',\n      operationName: 'createLastSKU',\n      operationReturnType: 'CreateLastSKU',\n      functionName: 'create',\n      namespace: null,\n      modelApiIdentifier: modelApiIdentifier,\n      operatesWithRecordIdentity: false,\n      modelSelectionField: modelApiIdentifier,\n      isBulk: false,\n      isDeleter: false,\n      variables: { lastSKU: { required: false, type: 'CreateLastSKUInput' } },\n      hasAmbiguousIdentifier: false,\n      paramOnlyVariables: [],\n      hasReturnType: false,\n      acceptsModelInput: true,\n      hasCreateOrUpdateEffect: true,\n      defaultSelection: DefaultLastSKUSelection\n    },\n    {\n      type: 'action',\n      operationName: 'bulkCreateLastSKUs',\n      functionName: 'bulkCreate',\n      isBulk: true,\n      isDeleter: false,\n      hasReturnType: false,\n      acceptsModelInput: true,\n      operatesWithRecordIdentity: false,\n      singleActionFunctionName: 'create',\n      modelApiIdentifier: modelApiIdentifier,\n      modelSelectionField: pluralModelApiIdentifier,\n      namespace: null,\n      variables: { inputs: { required: true, type: '[BulkCreateLastSKUsInput!]' } },\n      paramOnlyVariables: [],\n      defaultSelection: DefaultLastSKUSelection\n    },\n    {\n      type: 'action',\n      operationName: 'updateLastSKU',\n      operationReturnType: 'UpdateLastSKU',\n      functionName: 'update',\n      namespace: null,\n      modelApiIdentifier: modelApiIdentifier,\n      operatesWithRecordIdentity: true,\n      modelSelectionField: modelApiIdentifier,\n      isBulk: false,\n      isDeleter: false,\n      variables: {\n        id: { required: true, type: 'GadgetID' },\n        lastSKU: { required: false, type: 'UpdateLastSKUInput' }\n      },\n      hasAmbiguousIdentifier: false,\n      paramOnlyVariables: [],\n      hasReturnType: false,\n      acceptsModelInput: true,\n      hasCreateOrUpdateEffect: true,\n      defaultSelection: DefaultLastSKUSelection\n    },\n    {\n      type: 'action',\n      operationName: 'bulkUpdateLastSKUs',\n      functionName: 'bulkUpdate',\n      isBulk: true,\n      isDeleter: false,\n      hasReturnType: false,\n      acceptsModelInput: true,\n      operatesWithRecordIdentity: true,\n      singleActionFunctionName: 'update',\n      modelApiIdentifier: modelApiIdentifier,\n      modelSelectionField: pluralModelApiIdentifier,\n      namespace: null,\n      variables: { inputs: { required: true, type: '[BulkUpdateLastSKUsInput!]' } },\n      paramOnlyVariables: [],\n      defaultSelection: DefaultLastSKUSelection\n    },\n    {\n      type: 'action',\n      operationName: 'deleteLastSKU',\n      operationReturnType: 'DeleteLastSKU',\n      functionName: 'delete',\n      namespace: null,\n      modelApiIdentifier: modelApiIdentifier,\n      operatesWithRecordIdentity: true,\n      modelSelectionField: modelApiIdentifier,\n      isBulk: false,\n      isDeleter: true,\n      variables: { id: { required: true, type: 'GadgetID' } },\n      hasAmbiguousIdentifier: false,\n      paramOnlyVariables: [],\n      hasReturnType: false,\n      acceptsModelInput: false,\n      hasCreateOrUpdateEffect: false,\n      defaultSelection: null\n    },\n    {\n      type: 'action',\n      operationName: 'bulkDeleteLastSKUs',\n      functionName: 'bulkDelete',\n      isBulk: true,\n      isDeleter: true,\n      hasReturnType: false,\n      acceptsModelInput: false,\n      operatesWithRecordIdentity: true,\n      singleActionFunctionName: 'delete',\n      modelApiIdentifier: modelApiIdentifier,\n      modelSelectionField: pluralModelApiIdentifier,\n      namespace: null,\n      variables: { ids: { required: true, type: '[GadgetID!]' } },\n      paramOnlyVariables: [],\n      defaultSelection: null\n    },\n    {\n      type: 'action',\n      operationName: 'upsertLastSKU',\n      operationReturnType: 'UpsertLastSKU',\n      functionName: 'upsert',\n      namespace: null,\n      modelApiIdentifier: modelApiIdentifier,\n      operatesWithRecordIdentity: false,\n      modelSelectionField: modelApiIdentifier,\n      isBulk: false,\n      isDeleter: false,\n      variables: {\n        on: { required: false, type: '[String!]' },\n        lastSKU: { required: false, type: 'UpsertLastSKUInput' }\n      },\n      hasAmbiguousIdentifier: false,\n      paramOnlyVariables: [ 'on' ],\n      hasReturnType: {\n        '... on CreateLastSKUResult': { hasReturnType: false },\n        '... on UpdateLastSKUResult': { hasReturnType: false }\n      },\n      acceptsModelInput: true,\n      hasCreateOrUpdateEffect: true,\n      defaultSelection: DefaultLastSKUSelection\n    },\n    {\n      type: 'action',\n      operationName: 'bulkUpsertLastSKUs',\n      functionName: 'bulkUpsert',\n      isBulk: true,\n      isDeleter: false,\n      hasReturnType: false,\n      acceptsModelInput: true,\n      operatesWithRecordIdentity: false,\n      singleActionFunctionName: 'upsert',\n      modelApiIdentifier: modelApiIdentifier,\n      modelSelectionField: pluralModelApiIdentifier,\n      namespace: null,\n      variables: { inputs: { required: true, type: '[BulkUpsertLastSKUsInput!]' } },\n      paramOnlyVariables: [ 'on' ],\n      defaultSelection: DefaultLastSKUSelection\n    },\n    {\n      type: 'computedView',\n      operationName: 'view',\n      functionName: 'view',\n      gqlFieldName: 'lastSKUGellyView',\n      namespace: null,\n      variables: {\n        query: { type: 'String', required: true },\n        args: { type: 'JSONObject' }\n      }\n    }\n  ] as const\n) as unknown as {\n  // Gadget generates these model manager classes at runtime dynamically, which means there is no source code for the class. This is done to make the bundle size of the client as small as possible, avoiding a bunch of repeated source code in favour of one small builder function. The TypeScript types above document the exact interface of the constructed class.\n  new(connection: GadgetConnection): LastSKUManager;\n};", "import {\n  GadgetConnection,\n  GadgetRecord,\n  GadgetRecordImplementation,\n  GadgetRecordList,\n  GadgetNonUniqueDataError,\n  actionRunner,\n  findManyRunner,\n  findOneRunner,\n  findOneByFieldRunner,\n  FieldSelection,\n  LimitToKnownKeys,\n  Selectable\n} from \"@gadgetinc/api-client-core\";\n\nimport {\n  Query,\n  ExplicitNestingRequired,\n\n  IDsList,\n  PromiseOrLiveIterator,\n  BrainSession,\n  AvailableBrainSessionSelection,\n  BrainSessionSort,\n  BrainSessionFilter,\n  CreateBrainSessionInput,\n  UpdateBrainSessionInput,\n  Scalars,\n  UpsertBrainSessionInput\n} from \"../types.js\";\n\nimport { buildModelManager } from \"../builder.js\";\nimport { AvailableSelection, AllFieldsSelected, DefaultSelection, Select, DeepFilterNever } from \"../utils.js\";\n\n/**\n* A type that holds only the selected fields (and nested fields) of brainSession. The present fields in the result type of this are dynamic based on the options to each call that uses it.\n* The selected fields are sometimes given by the `Options` at `Options[\"select\"]`, and if a selection isn't made in the options, we use the default selection from above.\n*/\nexport type SelectedBrainSessionOrDefault<Options extends Selectable<AvailableBrainSessionSelection>> = DeepFilterNever<\n    Select<\n      BrainSession,\n      DefaultSelection<\n        AvailableBrainSessionSelection,\n        Options,\n        typeof DefaultBrainSessionSelection\n      >\n    >\n  >;\n\n/**\n * A type that represents a `GadgetRecord` type for brainSession.\n * It selects all fields of the model by default. If you want to represent a record type with a subset of fields, you could pass in an object in the `Selection` type parameter.\n *\n * @example\n * ```ts\n * const someFunction = (record: BrainSessionRecord, recordWithName: BrainSessionRecord<{ select: { name: true; } }>) => {\n *   // The type of the `record` variable will include all fields of the model.\n *   const name = record.name;\n *   const otherField = record.otherField;\n *\n *   // The type of the `recordWithName` variable will only include the selected fields.\n *   const name = recordWithName.name;\n *   const otherField = recordWithName.otherField; // Type error: Property 'otherField' does not exist on type 'GadgetRecord<{ name: true; }>'.\n * }\n * ```\n */\nexport type BrainSessionRecord<Selection extends AvailableBrainSessionSelection | undefined = typeof DefaultBrainSessionSelection> = DeepFilterNever<\n  GadgetRecord<\n    SelectedBrainSessionOrDefault<{\n      select: Selection;\n    }>\n  >\n>;\n\nexport const DefaultBrainSessionSelection = {\n     __typename: true,\n     id: true,\n     createdAt: true,\n     lastRequestTime: true,\n     sid: true,\n     updatedAt: true\n   } as const;\nconst modelApiIdentifier = \"brainSession\" as const;\nconst pluralModelApiIdentifier = \"brainSessions\" as const;\n/** Options that can be passed to the `BrainSessionManager#findOne` method */\n export interface FindOneBrainSessionOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableBrainSessionSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `BrainSessionManager#maybeFindOne` method */\n export interface MaybeFindOneBrainSessionOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableBrainSessionSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `BrainSessionManager#findMany` method */\n export interface FindManyBrainSessionsOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableBrainSessionSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: BrainSessionSort | BrainSessionSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: BrainSessionFilter | BrainSessionFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n  first?: number | null;\n  last?: number | null;\n  after?: string | null;\n  before?: string | null;\n};\n/** Options that can be passed to the `BrainSessionManager#findFirst` method */\n export interface FindFirstBrainSessionOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableBrainSessionSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: BrainSessionSort | BrainSessionSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: BrainSessionFilter | BrainSessionFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\n/** Options that can be passed to the `BrainSessionManager#maybeFindFirst` method */\n export interface MaybeFindFirstBrainSessionOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableBrainSessionSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: BrainSessionSort | BrainSessionSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: BrainSessionFilter | BrainSessionFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\nexport interface CreateBrainSessionOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableBrainSessionSelection;\n};\nexport interface UpdateBrainSessionOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableBrainSessionSelection;\n};\nexport interface DeleteBrainSessionOptions {\n\n};\nexport interface UpsertBrainSessionOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableBrainSessionSelection;\n};\n/**\n * The fully-qualified, expanded form of the inputs for executing the create action.\n * The flattened style should be preferred over this style, but for models with ambiguous API identifiers, this style can be used to remove any ambiguity.\n **/\nexport type FullyQualifiedCreateBrainSessionVariables = {\n  brainSession?: CreateBrainSessionInput;\n}\n/**\n * The inputs for executing create on brainSession.\n * This is the flattened style of inputs, suitable for general use, and should be preferred.\n **/\nexport type CreateBrainSessionVariables = CreateBrainSessionInput;\n/**\n * The return value from executing create on brainSession\n * Is a GadgetRecord of the model's type.\n **/\nexport type CreateBrainSessionResult<Options extends CreateBrainSessionOptions> = SelectedBrainSessionOrDefault<Options> extends void ?\n      void :\n      GadgetRecord<SelectedBrainSessionOrDefault<Options>>;\n/**\n * The fully-qualified, expanded form of the inputs for executing the update action.\n * The flattened style should be preferred over this style, but for models with ambiguous API identifiers, this style can be used to remove any ambiguity.\n **/\nexport type FullyQualifiedUpdateBrainSessionVariables = {\n  brainSession?: UpdateBrainSessionInput;\n}\n/**\n * The inputs for executing update on brainSession.\n * This is the flattened style of inputs, suitable for general use, and should be preferred.\n **/\nexport type UpdateBrainSessionVariables = UpdateBrainSessionInput;\n/**\n * The return value from executing update on brainSession\n * Is a GadgetRecord of the model's type.\n **/\nexport type UpdateBrainSessionResult<Options extends UpdateBrainSessionOptions> = SelectedBrainSessionOrDefault<Options> extends void ?\n      void :\n      GadgetRecord<SelectedBrainSessionOrDefault<Options>>;\n/**\n * The return value from executing delete on brainSession\n * Is void because this action deletes the record\n **/\nexport type DeleteBrainSessionResult<Options extends DeleteBrainSessionOptions> = void;\n/**\n * The fully-qualified, expanded form of the inputs for executing the upsert action.\n * The flattened style should be preferred over this style, but for models with ambiguous API identifiers, this style can be used to remove any ambiguity.\n **/\nexport type FullyQualifiedUpsertBrainSessionVariables = {\n  on?: ((Scalars['String'] | null))[];\n  brainSession?: UpsertBrainSessionInput;\n}\n/**\n * The inputs for executing upsert on brainSession.\n * This is the flattened style of inputs, suitable for general use, and should be preferred.\n **/\nexport type UpsertBrainSessionVariables = Omit<\n     UpsertBrainSessionInput,\n     \"on\"\n   > & {\n     on?: ((Scalars['String'] | null))[];\n   };\n/**\n * The return value from executing upsert on brainSession\n *\n **/\nexport type UpsertBrainSessionResult<Options extends UpsertBrainSessionOptions> = SelectedBrainSessionOrDefault<Options> extends void ?\n      void :\n      GadgetRecord<SelectedBrainSessionOrDefault<Options>>;\n\n/**\n * A manager for the brainSession model with all the available operations for reading and writing to it.*/\nexport type BrainSessionManager = {\n  readonly connection: GadgetConnection;\n\n  findOne: {\n      /**\n       * Finds one brainSession by ID. Returns a `Promise` that resolves to the record if found and rejects the promise if the record isn't found.\n       **/\n      <Options extends FindOneBrainSessionOptions>(id: string, options?: LimitToKnownKeys<Options, FindOneBrainSessionOptions>): PromiseOrLiveIterator<Options,BrainSessionRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultBrainSessionSelection;\n      namespace: null;\n      optionsType: FindOneBrainSessionOptions;\n      selectionType: AvailableBrainSessionSelection;\n      schemaType: Query[\"brainSession\"];\n    }\n  maybeFindOne: {\n      /**\n       * Finds one brainSession by ID. Returns a `Promise` that resolves to the record if found and returns null otherwise.\n       **/\n      <Options extends MaybeFindOneBrainSessionOptions>(id: string, options?: LimitToKnownKeys<Options, MaybeFindOneBrainSessionOptions>): PromiseOrLiveIterator<Options,BrainSessionRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: MaybeFindOneBrainSessionOptions;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultBrainSessionSelection;\n      namespace: null;\n      selectionType: AvailableBrainSessionSelection;\n      schemaType: Query[\"brainSession\"];\n    }\n  findMany: {\n      /**\n       * Finds many brainSession. Returns a `Promise` for a `GadgetRecordList` of objects according to the passed `options`. Optionally filters the returned records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindManyBrainSessionsOptions>(options?: LimitToKnownKeys<Options, FindManyBrainSessionsOptions>): PromiseOrLiveIterator<Options,GadgetRecordList<BrainSessionRecord<Options[\"select\"]>>>;\n      type: 'findMany';\n      operationName: typeof pluralModelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: FindManyBrainSessionsOptions;\n      defaultSelection: typeof DefaultBrainSessionSelection;\n      namespace: null;\n      selectionType: AvailableBrainSessionSelection;\n      schemaType: Query[\"brainSession\"];\n    }\n  findFirst: {\n      /**\n       * Finds the first matching brainSession. Returns a `Promise` that resolves to a record if found and rejects the promise if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindFirstBrainSessionOptions>(options?: LimitToKnownKeys<Options, FindFirstBrainSessionOptions>): PromiseOrLiveIterator<Options,BrainSessionRecord<Options[\"select\"]>>;\n      type: 'findFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: FindFirstBrainSessionOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultBrainSessionSelection;\n      namespace: null;\n      selectionType: AvailableBrainSessionSelection;\n      schemaType: Query[\"brainSession\"];\n    }\n  maybeFindFirst: {\n      /**\n       * Finds the first matching brainSession. Returns a `Promise` that resolves to a record if found, or null if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` pagination options.\n       **/\n      <Options extends MaybeFindFirstBrainSessionOptions>(options?: LimitToKnownKeys<Options, MaybeFindFirstBrainSessionOptions>): PromiseOrLiveIterator<Options,BrainSessionRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: MaybeFindFirstBrainSessionOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultBrainSessionSelection;\n      namespace: null;\n      selectionType: AvailableBrainSessionSelection;\n      schemaType: Query[\"brainSession\"];\n    }\n  findById: {\n      /**\n      * Finds one brainSession by its id. Returns a Promise that resolves to the record if found and rejects the promise if the record isn't found.\n      **/\n      <Options extends FindOneBrainSessionOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneBrainSessionOptions>): PromiseOrLiveIterator<Options,BrainSessionRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneBrainSessionOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultBrainSessionSelection;\n      namespace: null;\n      selectionType: AvailableBrainSessionSelection;\n      schemaType: Query[\"brainSession\"];\n    }\n  maybeFindById: {\n      /**\n      * Finds one brainSession by its id. Returns a Promise that resolves to the record if found and returns null if the record isn't found.\n      **/\n      <Options extends FindOneBrainSessionOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneBrainSessionOptions>): Promise<BrainSessionRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneBrainSessionOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultBrainSessionSelection;\n      namespace: null;\n      selectionType: AvailableBrainSessionSelection;\n      schemaType: Query[\"brainSession\"];\n    }\n  create: {\n      /**\n       * Executes the create action.Accepts the parameters for the action via the `variables` argument.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the flat style, all-params-together overload that most use cases should use.\n      *\n      * @example\n      * * const brainSessionRecord = await api.brainSession.create({\n        *   lastRequestTime: \"2025-08-01T00:00:00.000+00:00\",\n        *   sid: \"example value for sid\",\n        * });\n      **/\n      <Options extends CreateBrainSessionOptions>(\n      \n        variables: CreateBrainSessionVariables,\n        options?: LimitToKnownKeys<Options, CreateBrainSessionOptions>\n      ): Promise<CreateBrainSessionResult<Options>>;\n      /**\n       * Executes the create action.Accepts the parameters for the action via the `variables` argument.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the fully qualified, nested api identifier style overload that should be used when there's an ambiguity between an action param and a model field.\n      *\n      * @example\n      * * const brainSessionRecord = await api.brainSession.create({\n        *   brainSession: {\n        *     lastRequestTime: \"2025-08-01T00:00:00.000+00:00\",\n        *     sid: \"example value for sid\",\n        *   },\n        * });\n      **/\n      <Options extends CreateBrainSessionOptions>(\n      \n        variables: FullyQualifiedCreateBrainSessionVariables,\n        options?: LimitToKnownKeys<Options, CreateBrainSessionOptions>\n      ): Promise<CreateBrainSessionResult<Options>>;\n      type: 'action';\n      operationName: 'createBrainSession';\n      operationReturnType: 'CreateBrainSession';\n      namespace: null;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      operatesWithRecordIdentity: false;\n      modelSelectionField: typeof modelApiIdentifier;\n      isBulk: false;\n      isDeleter: false;\n      variables: { brainSession: { required: false, type: 'CreateBrainSessionInput' } };\n      variablesType: ((\n               \n               & (FullyQualifiedCreateBrainSessionVariables | CreateBrainSessionVariables)\n             ) | undefined);\n      hasAmbiguousIdentifier: false;\n      paramOnlyVariables: [];\n      hasReturnType: false;\n      acceptsModelInput: true;\n      hasCreateOrUpdateEffect: true;\n      imports: [ 'CreateBrainSessionInput' ];\n      optionsType: CreateBrainSessionOptions;\n      selectionType: AvailableBrainSessionSelection;\n      schemaType: Query[\"brainSession\"];\n      defaultSelection: typeof DefaultBrainSessionSelection;\n    }\n  bulkCreate: {\n      /**\n        * Executes the bulkCreate action with the given inputs.\n        */\n       <Options extends CreateBrainSessionOptions>(\n          inputs: (FullyQualifiedCreateBrainSessionVariables | CreateBrainSessionVariables)[],\n          options?: LimitToKnownKeys<Options, CreateBrainSessionOptions>\n       ): Promise<CreateBrainSessionResult<Options>[]>\n      type: 'action';\n      operationName: 'bulkCreateBrainSessions';\n      isBulk: true;\n      isDeleter: false;\n      hasReturnType: false;\n      acceptsModelInput: true;\n      operatesWithRecordIdentity: false;\n      singleActionFunctionName: 'create';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      modelSelectionField: typeof pluralModelApiIdentifier;\n      optionsType: CreateBrainSessionOptions;\n      namespace: null;\n      variables: { inputs: { required: true, type: '[BulkCreateBrainSessionsInput!]' } };\n      variablesType: (FullyQualifiedCreateBrainSessionVariables | CreateBrainSessionVariables)[];\n      paramOnlyVariables: [];\n      selectionType: AvailableBrainSessionSelection;\n      schemaType: Query[\"brainSession\"];\n      defaultSelection: typeof DefaultBrainSessionSelection;\n    }\n  update: {\n      /**\n       * Executes the update actionon one record specified by `id`.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the flat style, all-params-together overload that most use cases should use.\n      *\n      * @example\n      * * const brainSessionRecord = await api.brainSession.update(\"1\", {\n        *   lastRequestTime: \"2025-08-01T00:00:00.000+00:00\",\n        *   sid: \"example value for sid\",\n        * });\n      **/\n      <Options extends UpdateBrainSessionOptions>(\n        id: string,\n        variables: UpdateBrainSessionVariables,\n        options?: LimitToKnownKeys<Options, UpdateBrainSessionOptions>\n      ): Promise<UpdateBrainSessionResult<Options>>;\n      /**\n       * Executes the update actionon one record specified by `id`.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the fully qualified, nested api identifier style overload that should be used when there's an ambiguity between an action param and a model field.\n      *\n      * @example\n      * * const brainSessionRecord = await api.brainSession.update(\"1\", {\n        *   brainSession: {\n        *     lastRequestTime: \"2025-08-01T00:00:00.000+00:00\",\n        *     sid: \"example value for sid\",\n        *   },\n        * });\n      **/\n      <Options extends UpdateBrainSessionOptions>(\n        id: string,\n        variables: FullyQualifiedUpdateBrainSessionVariables,\n        options?: LimitToKnownKeys<Options, UpdateBrainSessionOptions>\n      ): Promise<UpdateBrainSessionResult<Options>>;\n      type: 'action';\n      operationName: 'updateBrainSession';\n      operationReturnType: 'UpdateBrainSession';\n      namespace: null;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      operatesWithRecordIdentity: true;\n      modelSelectionField: typeof modelApiIdentifier;\n      isBulk: false;\n      isDeleter: false;\n      variables: {\n          id: { required: true, type: 'GadgetID' },\n          brainSession: { required: false, type: 'UpdateBrainSessionInput' }\n        };\n      variablesType: (\n              { id: string }\n              & (FullyQualifiedUpdateBrainSessionVariables | UpdateBrainSessionVariables)\n            );\n      hasAmbiguousIdentifier: false;\n      paramOnlyVariables: [];\n      hasReturnType: false;\n      acceptsModelInput: true;\n      hasCreateOrUpdateEffect: true;\n      imports: [ 'UpdateBrainSessionInput' ];\n      optionsType: UpdateBrainSessionOptions;\n      selectionType: AvailableBrainSessionSelection;\n      schemaType: Query[\"brainSession\"];\n      defaultSelection: typeof DefaultBrainSessionSelection;\n    }\n  bulkUpdate: {\n      /**\n        * Executes the bulkUpdate action with the given inputs.\n        */\n       <Options extends UpdateBrainSessionOptions>(\n          inputs: (FullyQualifiedUpdateBrainSessionVariables | UpdateBrainSessionVariables & { id: string })[],\n          options?: LimitToKnownKeys<Options, UpdateBrainSessionOptions>\n       ): Promise<UpdateBrainSessionResult<Options>[]>\n      type: 'action';\n      operationName: 'bulkUpdateBrainSessions';\n      isBulk: true;\n      isDeleter: false;\n      hasReturnType: false;\n      acceptsModelInput: true;\n      operatesWithRecordIdentity: true;\n      singleActionFunctionName: 'update';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      modelSelectionField: typeof pluralModelApiIdentifier;\n      optionsType: UpdateBrainSessionOptions;\n      namespace: null;\n      variables: { inputs: { required: true, type: '[BulkUpdateBrainSessionsInput!]' } };\n      variablesType: (FullyQualifiedUpdateBrainSessionVariables | UpdateBrainSessionVariables & { id: string })[];\n      paramOnlyVariables: [];\n      selectionType: AvailableBrainSessionSelection;\n      schemaType: Query[\"brainSession\"];\n      defaultSelection: typeof DefaultBrainSessionSelection;\n    }\n  delete: {\n      /**\n       * Executes the delete actionon one record specified by `id`.Deletes the record on the server. Returns a Promise that resolves if the delete succeeds.\n      *\n      * This is the fully qualified, nested api identifier style overload that should be used when there's an ambiguity between an action param and a model field.\n      *\n      * @example\n      * * await api.brainSession.delete(\"1\");\n      **/\n      <Options extends DeleteBrainSessionOptions>(\n        id: string,\n      \n        options?: LimitToKnownKeys<Options, DeleteBrainSessionOptions>\n      ): Promise<DeleteBrainSessionResult<Options>>;\n      type: 'action';\n      operationName: 'deleteBrainSession';\n      operationReturnType: 'DeleteBrainSession';\n      namespace: null;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      operatesWithRecordIdentity: true;\n      modelSelectionField: typeof modelApiIdentifier;\n      isBulk: false;\n      isDeleter: true;\n      variables: { id: { required: true, type: 'GadgetID' } };\n      variablesType: (\n              { id: string }\n              \n            );\n      hasAmbiguousIdentifier: false;\n      paramOnlyVariables: [];\n      hasReturnType: false;\n      acceptsModelInput: false;\n      hasCreateOrUpdateEffect: false;\n      imports: [];\n      optionsType: DeleteBrainSessionOptions;\n      selectionType: Record<string, never>;\n      schemaType: null;\n      defaultSelection: null;\n    }\n  bulkDelete: {\n      /**\n        * Executes the bulkDelete action with the given inputs.Deletes the records on the server.\n        */\n       <Options extends DeleteBrainSessionOptions>(\n          ids: string[],\n          options?: LimitToKnownKeys<Options, DeleteBrainSessionOptions>\n       ): Promise<DeleteBrainSessionResult<Options>[]>\n      type: 'action';\n      operationName: 'bulkDeleteBrainSessions';\n      isBulk: true;\n      isDeleter: true;\n      hasReturnType: false;\n      acceptsModelInput: false;\n      operatesWithRecordIdentity: true;\n      singleActionFunctionName: 'delete';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      modelSelectionField: typeof pluralModelApiIdentifier;\n      optionsType: DeleteBrainSessionOptions;\n      namespace: null;\n      variables: { ids: { required: true, type: '[GadgetID!]' } };\n      variablesType: IDsList | undefined;\n      paramOnlyVariables: [];\n      selectionType: Record<string, never>;\n      schemaType: null;\n      defaultSelection: null;\n    }\n  upsert: {\n      /**\n       * Executes the upsert action.Accepts the parameters for the action via the `variables` argument.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the flat style, all-params-together overload that most use cases should use.\n      *\n      * @example\n      * * const result = await api.brainSession.upsert({\n        *   id: \"1\",\n        *   lastRequestTime: \"2025-08-01T00:00:00.000+00:00\",\n        *   sid: \"example value for sid\",\n        * });\n      **/\n      <Options extends UpsertBrainSessionOptions>(\n      \n        variables: UpsertBrainSessionVariables,\n        options?: LimitToKnownKeys<Options, UpsertBrainSessionOptions>\n      ): Promise<UpsertBrainSessionResult<Options>>;\n      /**\n       * Executes the upsert action.Accepts the parameters for the action via the `variables` argument.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the fully qualified, nested api identifier style overload that should be used when there's an ambiguity between an action param and a model field.\n      *\n      * @example\n      * * const result = await api.brainSession.upsert({\n        *   brainSession: {\n        *     id: \"1\",\n        *     lastRequestTime: \"2025-08-01T00:00:00.000+00:00\",\n        *     sid: \"example value for sid\",\n        *   },\n        * });\n      **/\n      <Options extends UpsertBrainSessionOptions>(\n      \n        variables: FullyQualifiedUpsertBrainSessionVariables,\n        options?: LimitToKnownKeys<Options, UpsertBrainSessionOptions>\n      ): Promise<UpsertBrainSessionResult<Options>>;\n      type: 'action';\n      operationName: 'upsertBrainSession';\n      operationReturnType: 'UpsertBrainSession';\n      namespace: null;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      operatesWithRecordIdentity: false;\n      modelSelectionField: typeof modelApiIdentifier;\n      isBulk: false;\n      isDeleter: false;\n      variables: {\n          on: { required: false, type: '[String!]' },\n          brainSession: { required: false, type: 'UpsertBrainSessionInput' }\n        };\n      variablesType: ((\n               \n               & (FullyQualifiedUpsertBrainSessionVariables | UpsertBrainSessionVariables)\n             ) | undefined);\n      hasAmbiguousIdentifier: false;\n      paramOnlyVariables: [ 'on' ];\n      hasReturnType: {\n          '... on CreateBrainSessionResult': { hasReturnType: false },\n          '... on UpdateBrainSessionResult': { hasReturnType: false }\n        };\n      acceptsModelInput: true;\n      hasCreateOrUpdateEffect: true;\n      imports: [ 'Scalars', 'UpsertBrainSessionInput' ];\n      optionsType: UpsertBrainSessionOptions;\n      selectionType: AvailableBrainSessionSelection;\n      schemaType: Query[\"brainSession\"];\n      defaultSelection: typeof DefaultBrainSessionSelection;\n    }\n  bulkUpsert: {\n      /**\n        * Executes the bulkUpsert action with the given inputs.\n        */\n       <Options extends UpsertBrainSessionOptions>(\n          inputs: (FullyQualifiedUpsertBrainSessionVariables | UpsertBrainSessionVariables)[],\n          options?: LimitToKnownKeys<Options, UpsertBrainSessionOptions>\n       ): Promise<any[]>\n      type: 'action';\n      operationName: 'bulkUpsertBrainSessions';\n      isBulk: true;\n      isDeleter: false;\n      hasReturnType: false;\n      acceptsModelInput: true;\n      operatesWithRecordIdentity: false;\n      singleActionFunctionName: 'upsert';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      modelSelectionField: typeof pluralModelApiIdentifier;\n      optionsType: UpsertBrainSessionOptions;\n      namespace: null;\n      variables: { inputs: { required: true, type: '[BulkUpsertBrainSessionsInput!]' } };\n      variablesType: (FullyQualifiedUpsertBrainSessionVariables | UpsertBrainSessionVariables)[];\n      paramOnlyVariables: [ 'on' ];\n      selectionType: AvailableBrainSessionSelection;\n      schemaType: Query[\"brainSession\"];\n      defaultSelection: typeof DefaultBrainSessionSelection;\n    }\n  view: {\n      (query: string, variables?: Record<string, unknown>): Promise<unknown>\n      type: 'computedView';\n      operationName: 'view';\n      gqlFieldName: 'brainSessionGellyView';\n      namespace: null;\n      imports: [];\n      variables: {\n          query: { type: 'String', required: true },\n          args: { type: 'JSONObject' }\n        };\n      variablesType: Record<string, unknown>;\n      resultType: Promise<unknown>;\n      plan: never;\n    }\n};\n\n/**\n * A manager for the brainSession model with all the available operations for reading and writing to it.*/\nexport const BrainSessionManager = buildModelManager(\n  modelApiIdentifier,\n  pluralModelApiIdentifier,\n  DefaultBrainSessionSelection,\n  [\n    {\n      type: 'findOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultBrainSessionSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultBrainSessionSelection,\n      namespace: null\n    },\n    {\n      type: 'findMany',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultBrainSessionSelection,\n      namespace: null\n    },\n    {\n      type: 'findFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultBrainSessionSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultBrainSessionSelection,\n      namespace: null\n    },\n    {\n      type: 'findOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'findById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultBrainSessionSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'maybeFindById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultBrainSessionSelection,\n      namespace: null\n    },\n    {\n      type: 'action',\n      operationName: 'createBrainSession',\n      operationReturnType: 'CreateBrainSession',\n      functionName: 'create',\n      namespace: null,\n      modelApiIdentifier: modelApiIdentifier,\n      operatesWithRecordIdentity: false,\n      modelSelectionField: modelApiIdentifier,\n      isBulk: false,\n      isDeleter: false,\n      variables: {\n        brainSession: { required: false, type: 'CreateBrainSessionInput' }\n      },\n      hasAmbiguousIdentifier: false,\n      paramOnlyVariables: [],\n      hasReturnType: false,\n      acceptsModelInput: true,\n      hasCreateOrUpdateEffect: true,\n      defaultSelection: DefaultBrainSessionSelection\n    },\n    {\n      type: 'action',\n      operationName: 'bulkCreateBrainSessions',\n      functionName: 'bulkCreate',\n      isBulk: true,\n      isDeleter: false,\n      hasReturnType: false,\n      acceptsModelInput: true,\n      operatesWithRecordIdentity: false,\n      singleActionFunctionName: 'create',\n      modelApiIdentifier: modelApiIdentifier,\n      modelSelectionField: pluralModelApiIdentifier,\n      namespace: null,\n      variables: {\n        inputs: { required: true, type: '[BulkCreateBrainSessionsInput!]' }\n      },\n      paramOnlyVariables: [],\n      defaultSelection: DefaultBrainSessionSelection\n    },\n    {\n      type: 'action',\n      operationName: 'updateBrainSession',\n      operationReturnType: 'UpdateBrainSession',\n      functionName: 'update',\n      namespace: null,\n      modelApiIdentifier: modelApiIdentifier,\n      operatesWithRecordIdentity: true,\n      modelSelectionField: modelApiIdentifier,\n      isBulk: false,\n      isDeleter: false,\n      variables: {\n        id: { required: true, type: 'GadgetID' },\n        brainSession: { required: false, type: 'UpdateBrainSessionInput' }\n      },\n      hasAmbiguousIdentifier: false,\n      paramOnlyVariables: [],\n      hasReturnType: false,\n      acceptsModelInput: true,\n      hasCreateOrUpdateEffect: true,\n      defaultSelection: DefaultBrainSessionSelection\n    },\n    {\n      type: 'action',\n      operationName: 'bulkUpdateBrainSessions',\n      functionName: 'bulkUpdate',\n      isBulk: true,\n      isDeleter: false,\n      hasReturnType: false,\n      acceptsModelInput: true,\n      operatesWithRecordIdentity: true,\n      singleActionFunctionName: 'update',\n      modelApiIdentifier: modelApiIdentifier,\n      modelSelectionField: pluralModelApiIdentifier,\n      namespace: null,\n      variables: {\n        inputs: { required: true, type: '[BulkUpdateBrainSessionsInput!]' }\n      },\n      paramOnlyVariables: [],\n      defaultSelection: DefaultBrainSessionSelection\n    },\n    {\n      type: 'action',\n      operationName: 'deleteBrainSession',\n      operationReturnType: 'DeleteBrainSession',\n      functionName: 'delete',\n      namespace: null,\n      modelApiIdentifier: modelApiIdentifier,\n      operatesWithRecordIdentity: true,\n      modelSelectionField: modelApiIdentifier,\n      isBulk: false,\n      isDeleter: true,\n      variables: { id: { required: true, type: 'GadgetID' } },\n      hasAmbiguousIdentifier: false,\n      paramOnlyVariables: [],\n      hasReturnType: false,\n      acceptsModelInput: false,\n      hasCreateOrUpdateEffect: false,\n      defaultSelection: null\n    },\n    {\n      type: 'action',\n      operationName: 'bulkDeleteBrainSessions',\n      functionName: 'bulkDelete',\n      isBulk: true,\n      isDeleter: true,\n      hasReturnType: false,\n      acceptsModelInput: false,\n      operatesWithRecordIdentity: true,\n      singleActionFunctionName: 'delete',\n      modelApiIdentifier: modelApiIdentifier,\n      modelSelectionField: pluralModelApiIdentifier,\n      namespace: null,\n      variables: { ids: { required: true, type: '[GadgetID!]' } },\n      paramOnlyVariables: [],\n      defaultSelection: null\n    },\n    {\n      type: 'action',\n      operationName: 'upsertBrainSession',\n      operationReturnType: 'UpsertBrainSession',\n      functionName: 'upsert',\n      namespace: null,\n      modelApiIdentifier: modelApiIdentifier,\n      operatesWithRecordIdentity: false,\n      modelSelectionField: modelApiIdentifier,\n      isBulk: false,\n      isDeleter: false,\n      variables: {\n        on: { required: false, type: '[String!]' },\n        brainSession: { required: false, type: 'UpsertBrainSessionInput' }\n      },\n      hasAmbiguousIdentifier: false,\n      paramOnlyVariables: [ 'on' ],\n      hasReturnType: {\n        '... on CreateBrainSessionResult': { hasReturnType: false },\n        '... on UpdateBrainSessionResult': { hasReturnType: false }\n      },\n      acceptsModelInput: true,\n      hasCreateOrUpdateEffect: true,\n      defaultSelection: DefaultBrainSessionSelection\n    },\n    {\n      type: 'action',\n      operationName: 'bulkUpsertBrainSessions',\n      functionName: 'bulkUpsert',\n      isBulk: true,\n      isDeleter: false,\n      hasReturnType: false,\n      acceptsModelInput: true,\n      operatesWithRecordIdentity: false,\n      singleActionFunctionName: 'upsert',\n      modelApiIdentifier: modelApiIdentifier,\n      modelSelectionField: pluralModelApiIdentifier,\n      namespace: null,\n      variables: {\n        inputs: { required: true, type: '[BulkUpsertBrainSessionsInput!]' }\n      },\n      paramOnlyVariables: [ 'on' ],\n      defaultSelection: DefaultBrainSessionSelection\n    },\n    {\n      type: 'computedView',\n      operationName: 'view',\n      functionName: 'view',\n      gqlFieldName: 'brainSessionGellyView',\n      namespace: null,\n      variables: {\n        query: { type: 'String', required: true },\n        args: { type: 'JSONObject' }\n      }\n    }\n  ] as const\n) as unknown as {\n  // Gadget generates these model manager classes at runtime dynamically, which means there is no source code for the class. This is done to make the bundle size of the client as small as possible, avoiding a bunch of repeated source code in favour of one small builder function. The TypeScript types above document the exact interface of the constructed class.\n  new(connection: GadgetConnection): BrainSessionManager;\n};", "import {\n  GadgetConnection,\n  GadgetRecord,\n  GadgetRecordImplementation,\n  GadgetRecordList,\n  GadgetNonUniqueDataError,\n  actionRunner,\n  findManyRunner,\n  findOneRunner,\n  findOneByFieldRunner,\n  FieldSelection,\n  LimitToKnownKeys,\n  Selectable\n} from \"@gadgetinc/api-client-core\";\n\nimport {\n  Query,\n  ExplicitNestingRequired,\n\n  IDsList,\n  PromiseOrLiveIterator,\n  BrainCategories,\n  AvailableBrainCategoriesSelection,\n  BrainCategoriesSort,\n  BrainCategoriesFilter,\n  CreateBrainCategoriesInput,\n  UpdateBrainCategoriesInput,\n  Scalars,\n  UpsertBrainCategoriesInput\n} from \"../types.js\";\n\nimport { buildModelManager } from \"../builder.js\";\nimport { AvailableSelection, AllFieldsSelected, DefaultSelection, Select, DeepFilterNever } from \"../utils.js\";\n\n/**\n* A type that holds only the selected fields (and nested fields) of brainCategories. The present fields in the result type of this are dynamic based on the options to each call that uses it.\n* The selected fields are sometimes given by the `Options` at `Options[\"select\"]`, and if a selection isn't made in the options, we use the default selection from above.\n*/\nexport type SelectedBrainCategoriesOrDefault<Options extends Selectable<AvailableBrainCategoriesSelection>> = DeepFilterNever<\n    Select<\n      BrainCategories,\n      DefaultSelection<\n        AvailableBrainCategoriesSelection,\n        Options,\n        typeof DefaultBrainCategoriesSelection\n      >\n    >\n  >;\n\n/**\n * A type that represents a `GadgetRecord` type for brainCategories.\n * It selects all fields of the model by default. If you want to represent a record type with a subset of fields, you could pass in an object in the `Selection` type parameter.\n *\n * @example\n * ```ts\n * const someFunction = (record: BrainCategoriesRecord, recordWithName: BrainCategoriesRecord<{ select: { name: true; } }>) => {\n *   // The type of the `record` variable will include all fields of the model.\n *   const name = record.name;\n *   const otherField = record.otherField;\n *\n *   // The type of the `recordWithName` variable will only include the selected fields.\n *   const name = recordWithName.name;\n *   const otherField = recordWithName.otherField; // Type error: Property 'otherField' does not exist on type 'GadgetRecord<{ name: true; }>'.\n * }\n * ```\n */\nexport type BrainCategoriesRecord<Selection extends AvailableBrainCategoriesSelection | undefined = typeof DefaultBrainCategoriesSelection> = DeepFilterNever<\n  GadgetRecord<\n    SelectedBrainCategoriesOrDefault<{\n      select: Selection;\n    }>\n  >\n>;\n\nexport const DefaultBrainCategoriesSelection = {\n     __typename: true,\n     id: true,\n     categoryID: true,\n     createdAt: true,\n     name: true,\n     parentID: true,\n     realcat: true,\n     updatedAt: true\n   } as const;\nconst modelApiIdentifier = \"brainCategories\" as const;\nconst pluralModelApiIdentifier = \"brainCategoriess\" as const;\n/** Options that can be passed to the `BrainCategoriesManager#findOne` method */\n export interface FindOneBrainCategoriesOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableBrainCategoriesSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `BrainCategoriesManager#maybeFindOne` method */\n export interface MaybeFindOneBrainCategoriesOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableBrainCategoriesSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `BrainCategoriesManager#findMany` method */\n export interface FindManyBrainCategoriessOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableBrainCategoriesSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: BrainCategoriesSort | BrainCategoriesSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: BrainCategoriesFilter | BrainCategoriesFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n  first?: number | null;\n  last?: number | null;\n  after?: string | null;\n  before?: string | null;\n};\n/** Options that can be passed to the `BrainCategoriesManager#findFirst` method */\n export interface FindFirstBrainCategoriesOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableBrainCategoriesSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: BrainCategoriesSort | BrainCategoriesSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: BrainCategoriesFilter | BrainCategoriesFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\n/** Options that can be passed to the `BrainCategoriesManager#maybeFindFirst` method */\n export interface MaybeFindFirstBrainCategoriesOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableBrainCategoriesSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: BrainCategoriesSort | BrainCategoriesSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: BrainCategoriesFilter | BrainCategoriesFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\nexport interface CreateBrainCategoriesOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableBrainCategoriesSelection;\n};\nexport interface UpdateBrainCategoriesOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableBrainCategoriesSelection;\n};\nexport interface DeleteBrainCategoriesOptions {\n\n};\nexport interface UpsertBrainCategoriesOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableBrainCategoriesSelection;\n};\n/**\n * The fully-qualified, expanded form of the inputs for executing the create action.\n * The flattened style should be preferred over this style, but for models with ambiguous API identifiers, this style can be used to remove any ambiguity.\n **/\nexport type FullyQualifiedCreateBrainCategoriesVariables = {\n  brainCategories?: CreateBrainCategoriesInput;\n}\n/**\n * The inputs for executing create on brainCategories.\n * This is the flattened style of inputs, suitable for general use, and should be preferred.\n **/\nexport type CreateBrainCategoriesVariables = CreateBrainCategoriesInput;\n/**\n * The return value from executing create on brainCategories\n * Is a GadgetRecord of the model's type.\n **/\nexport type CreateBrainCategoriesResult<Options extends CreateBrainCategoriesOptions> = SelectedBrainCategoriesOrDefault<Options> extends void ?\n      void :\n      GadgetRecord<SelectedBrainCategoriesOrDefault<Options>>;\n/**\n * The fully-qualified, expanded form of the inputs for executing the update action.\n * The flattened style should be preferred over this style, but for models with ambiguous API identifiers, this style can be used to remove any ambiguity.\n **/\nexport type FullyQualifiedUpdateBrainCategoriesVariables = {\n  brainCategories?: UpdateBrainCategoriesInput;\n}\n/**\n * The inputs for executing update on brainCategories.\n * This is the flattened style of inputs, suitable for general use, and should be preferred.\n **/\nexport type UpdateBrainCategoriesVariables = UpdateBrainCategoriesInput;\n/**\n * The return value from executing update on brainCategories\n * Is a GadgetRecord of the model's type.\n **/\nexport type UpdateBrainCategoriesResult<Options extends UpdateBrainCategoriesOptions> = SelectedBrainCategoriesOrDefault<Options> extends void ?\n      void :\n      GadgetRecord<SelectedBrainCategoriesOrDefault<Options>>;\n/**\n * The return value from executing delete on brainCategories\n * Is void because this action deletes the record\n **/\nexport type DeleteBrainCategoriesResult<Options extends DeleteBrainCategoriesOptions> = void;\n/**\n * The fully-qualified, expanded form of the inputs for executing the upsert action.\n * The flattened style should be preferred over this style, but for models with ambiguous API identifiers, this style can be used to remove any ambiguity.\n **/\nexport type FullyQualifiedUpsertBrainCategoriesVariables = {\n  on?: ((Scalars['String'] | null))[];\n  brainCategories?: UpsertBrainCategoriesInput;\n}\n/**\n * The inputs for executing upsert on brainCategories.\n * This is the flattened style of inputs, suitable for general use, and should be preferred.\n **/\nexport type UpsertBrainCategoriesVariables = Omit<\n     UpsertBrainCategoriesInput,\n     \"on\"\n   > & {\n     on?: ((Scalars['String'] | null))[];\n   };\n/**\n * The return value from executing upsert on brainCategories\n *\n **/\nexport type UpsertBrainCategoriesResult<Options extends UpsertBrainCategoriesOptions> = SelectedBrainCategoriesOrDefault<Options> extends void ?\n      void :\n      GadgetRecord<SelectedBrainCategoriesOrDefault<Options>>;\n\n/**\n * A manager for the brainCategories model with all the available operations for reading and writing to it.*/\nexport type BrainCategoriesManager = {\n  readonly connection: GadgetConnection;\n\n  findOne: {\n      /**\n       * Finds one brainCategories by ID. Returns a `Promise` that resolves to the record if found and rejects the promise if the record isn't found.\n       **/\n      <Options extends FindOneBrainCategoriesOptions>(id: string, options?: LimitToKnownKeys<Options, FindOneBrainCategoriesOptions>): PromiseOrLiveIterator<Options,BrainCategoriesRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultBrainCategoriesSelection;\n      namespace: null;\n      optionsType: FindOneBrainCategoriesOptions;\n      selectionType: AvailableBrainCategoriesSelection;\n      schemaType: Query[\"brainCategories\"];\n    }\n  maybeFindOne: {\n      /**\n       * Finds one brainCategories by ID. Returns a `Promise` that resolves to the record if found and returns null otherwise.\n       **/\n      <Options extends MaybeFindOneBrainCategoriesOptions>(id: string, options?: LimitToKnownKeys<Options, MaybeFindOneBrainCategoriesOptions>): PromiseOrLiveIterator<Options,BrainCategoriesRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: MaybeFindOneBrainCategoriesOptions;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultBrainCategoriesSelection;\n      namespace: null;\n      selectionType: AvailableBrainCategoriesSelection;\n      schemaType: Query[\"brainCategories\"];\n    }\n  findMany: {\n      /**\n       * Finds many brainCategories. Returns a `Promise` for a `GadgetRecordList` of objects according to the passed `options`. Optionally filters the returned records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindManyBrainCategoriessOptions>(options?: LimitToKnownKeys<Options, FindManyBrainCategoriessOptions>): PromiseOrLiveIterator<Options,GadgetRecordList<BrainCategoriesRecord<Options[\"select\"]>>>;\n      type: 'findMany';\n      operationName: typeof pluralModelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: FindManyBrainCategoriessOptions;\n      defaultSelection: typeof DefaultBrainCategoriesSelection;\n      namespace: null;\n      selectionType: AvailableBrainCategoriesSelection;\n      schemaType: Query[\"brainCategories\"];\n    }\n  findFirst: {\n      /**\n       * Finds the first matching brainCategories. Returns a `Promise` that resolves to a record if found and rejects the promise if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindFirstBrainCategoriesOptions>(options?: LimitToKnownKeys<Options, FindFirstBrainCategoriesOptions>): PromiseOrLiveIterator<Options,BrainCategoriesRecord<Options[\"select\"]>>;\n      type: 'findFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: FindFirstBrainCategoriesOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultBrainCategoriesSelection;\n      namespace: null;\n      selectionType: AvailableBrainCategoriesSelection;\n      schemaType: Query[\"brainCategories\"];\n    }\n  maybeFindFirst: {\n      /**\n       * Finds the first matching brainCategories. Returns a `Promise` that resolves to a record if found, or null if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` pagination options.\n       **/\n      <Options extends MaybeFindFirstBrainCategoriesOptions>(options?: LimitToKnownKeys<Options, MaybeFindFirstBrainCategoriesOptions>): PromiseOrLiveIterator<Options,BrainCategoriesRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: MaybeFindFirstBrainCategoriesOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultBrainCategoriesSelection;\n      namespace: null;\n      selectionType: AvailableBrainCategoriesSelection;\n      schemaType: Query[\"brainCategories\"];\n    }\n  findById: {\n      /**\n      * Finds one brainCategories by its id. Returns a Promise that resolves to the record if found and rejects the promise if the record isn't found.\n      **/\n      <Options extends FindOneBrainCategoriesOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneBrainCategoriesOptions>): PromiseOrLiveIterator<Options,BrainCategoriesRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneBrainCategoriesOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultBrainCategoriesSelection;\n      namespace: null;\n      selectionType: AvailableBrainCategoriesSelection;\n      schemaType: Query[\"brainCategories\"];\n    }\n  maybeFindById: {\n      /**\n      * Finds one brainCategories by its id. Returns a Promise that resolves to the record if found and returns null if the record isn't found.\n      **/\n      <Options extends FindOneBrainCategoriesOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneBrainCategoriesOptions>): Promise<BrainCategoriesRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneBrainCategoriesOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultBrainCategoriesSelection;\n      namespace: null;\n      selectionType: AvailableBrainCategoriesSelection;\n      schemaType: Query[\"brainCategories\"];\n    }\n  create: {\n      /**\n       * Executes the create action.Accepts the parameters for the action via the `variables` argument.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the flat style, all-params-together overload that most use cases should use.\n      *\n      * @example\n      * * const brainCategoriesRecord = await api.brainCategories.create({\n        *   categoryID: 123,\n        *   name: \"example value for name\",\n        *   parentID: 123,\n        *   realcat: 123,\n        * });\n      **/\n      <Options extends CreateBrainCategoriesOptions>(\n      \n        variables: CreateBrainCategoriesVariables,\n        options?: LimitToKnownKeys<Options, CreateBrainCategoriesOptions>\n      ): Promise<CreateBrainCategoriesResult<Options>>;\n      /**\n       * Executes the create action.Accepts the parameters for the action via the `variables` argument.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the fully qualified, nested api identifier style overload that should be used when there's an ambiguity between an action param and a model field.\n      *\n      * @example\n      * * const brainCategoriesRecord = await api.brainCategories.create({\n        *   brainCategories: {\n        *     categoryID: 123,\n        *     name: \"example value for name\",\n        *     parentID: 123,\n        *     realcat: 123,\n        *   },\n        * });\n      **/\n      <Options extends CreateBrainCategoriesOptions>(\n      \n        variables: FullyQualifiedCreateBrainCategoriesVariables,\n        options?: LimitToKnownKeys<Options, CreateBrainCategoriesOptions>\n      ): Promise<CreateBrainCategoriesResult<Options>>;\n      type: 'action';\n      operationName: 'createBrainCategories';\n      operationReturnType: 'CreateBrainCategories';\n      namespace: null;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      operatesWithRecordIdentity: false;\n      modelSelectionField: typeof modelApiIdentifier;\n      isBulk: false;\n      isDeleter: false;\n      variables: {\n          brainCategories: { required: false, type: 'CreateBrainCategoriesInput' }\n        };\n      variablesType: ((\n               \n               & (FullyQualifiedCreateBrainCategoriesVariables | CreateBrainCategoriesVariables)\n             ) | undefined);\n      hasAmbiguousIdentifier: false;\n      paramOnlyVariables: [];\n      hasReturnType: false;\n      acceptsModelInput: true;\n      hasCreateOrUpdateEffect: true;\n      imports: [ 'CreateBrainCategoriesInput' ];\n      optionsType: CreateBrainCategoriesOptions;\n      selectionType: AvailableBrainCategoriesSelection;\n      schemaType: Query[\"brainCategories\"];\n      defaultSelection: typeof DefaultBrainCategoriesSelection;\n    }\n  bulkCreate: {\n      /**\n        * Executes the bulkCreate action with the given inputs.\n        */\n       <Options extends CreateBrainCategoriesOptions>(\n          inputs: (FullyQualifiedCreateBrainCategoriesVariables | CreateBrainCategoriesVariables)[],\n          options?: LimitToKnownKeys<Options, CreateBrainCategoriesOptions>\n       ): Promise<CreateBrainCategoriesResult<Options>[]>\n      type: 'action';\n      operationName: 'bulkCreateBrainCategories';\n      isBulk: true;\n      isDeleter: false;\n      hasReturnType: false;\n      acceptsModelInput: true;\n      operatesWithRecordIdentity: false;\n      singleActionFunctionName: 'create';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      modelSelectionField: typeof pluralModelApiIdentifier;\n      optionsType: CreateBrainCategoriesOptions;\n      namespace: null;\n      variables: {\n          inputs: { required: true, type: '[BulkCreateBrainCategoriesInput!]' }\n        };\n      variablesType: (FullyQualifiedCreateBrainCategoriesVariables | CreateBrainCategoriesVariables)[];\n      paramOnlyVariables: [];\n      selectionType: AvailableBrainCategoriesSelection;\n      schemaType: Query[\"brainCategories\"];\n      defaultSelection: typeof DefaultBrainCategoriesSelection;\n    }\n  update: {\n      /**\n       * Executes the update actionon one record specified by `id`.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the flat style, all-params-together overload that most use cases should use.\n      *\n      * @example\n      * * const brainCategoriesRecord = await api.brainCategories.update(\"1\", {\n        *   categoryID: 123,\n        *   name: \"example value for name\",\n        *   parentID: 123,\n        *   realcat: 123,\n        * });\n      **/\n      <Options extends UpdateBrainCategoriesOptions>(\n        id: string,\n        variables: UpdateBrainCategoriesVariables,\n        options?: LimitToKnownKeys<Options, UpdateBrainCategoriesOptions>\n      ): Promise<UpdateBrainCategoriesResult<Options>>;\n      /**\n       * Executes the update actionon one record specified by `id`.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the fully qualified, nested api identifier style overload that should be used when there's an ambiguity between an action param and a model field.\n      *\n      * @example\n      * * const brainCategoriesRecord = await api.brainCategories.update(\"1\", {\n        *   brainCategories: {\n        *     categoryID: 123,\n        *     name: \"example value for name\",\n        *     parentID: 123,\n        *     realcat: 123,\n        *   },\n        * });\n      **/\n      <Options extends UpdateBrainCategoriesOptions>(\n        id: string,\n        variables: FullyQualifiedUpdateBrainCategoriesVariables,\n        options?: LimitToKnownKeys<Options, UpdateBrainCategoriesOptions>\n      ): Promise<UpdateBrainCategoriesResult<Options>>;\n      type: 'action';\n      operationName: 'updateBrainCategories';\n      operationReturnType: 'UpdateBrainCategories';\n      namespace: null;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      operatesWithRecordIdentity: true;\n      modelSelectionField: typeof modelApiIdentifier;\n      isBulk: false;\n      isDeleter: false;\n      variables: {\n          id: { required: true, type: 'GadgetID' },\n          brainCategories: { required: false, type: 'UpdateBrainCategoriesInput' }\n        };\n      variablesType: (\n              { id: string }\n              & (FullyQualifiedUpdateBrainCategoriesVariables | UpdateBrainCategoriesVariables)\n            );\n      hasAmbiguousIdentifier: false;\n      paramOnlyVariables: [];\n      hasReturnType: false;\n      acceptsModelInput: true;\n      hasCreateOrUpdateEffect: true;\n      imports: [ 'UpdateBrainCategoriesInput' ];\n      optionsType: UpdateBrainCategoriesOptions;\n      selectionType: AvailableBrainCategoriesSelection;\n      schemaType: Query[\"brainCategories\"];\n      defaultSelection: typeof DefaultBrainCategoriesSelection;\n    }\n  bulkUpdate: {\n      /**\n        * Executes the bulkUpdate action with the given inputs.\n        */\n       <Options extends UpdateBrainCategoriesOptions>(\n          inputs: (FullyQualifiedUpdateBrainCategoriesVariables | UpdateBrainCategoriesVariables & { id: string })[],\n          options?: LimitToKnownKeys<Options, UpdateBrainCategoriesOptions>\n       ): Promise<UpdateBrainCategoriesResult<Options>[]>\n      type: 'action';\n      operationName: 'bulkUpdateBrainCategories';\n      isBulk: true;\n      isDeleter: false;\n      hasReturnType: false;\n      acceptsModelInput: true;\n      operatesWithRecordIdentity: true;\n      singleActionFunctionName: 'update';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      modelSelectionField: typeof pluralModelApiIdentifier;\n      optionsType: UpdateBrainCategoriesOptions;\n      namespace: null;\n      variables: {\n          inputs: { required: true, type: '[BulkUpdateBrainCategoriesInput!]' }\n        };\n      variablesType: (FullyQualifiedUpdateBrainCategoriesVariables | UpdateBrainCategoriesVariables & { id: string })[];\n      paramOnlyVariables: [];\n      selectionType: AvailableBrainCategoriesSelection;\n      schemaType: Query[\"brainCategories\"];\n      defaultSelection: typeof DefaultBrainCategoriesSelection;\n    }\n  delete: {\n      /**\n       * Executes the delete actionon one record specified by `id`.Deletes the record on the server. Returns a Promise that resolves if the delete succeeds.\n      *\n      * This is the fully qualified, nested api identifier style overload that should be used when there's an ambiguity between an action param and a model field.\n      *\n      * @example\n      * * await api.brainCategories.delete(\"1\");\n      **/\n      <Options extends DeleteBrainCategoriesOptions>(\n        id: string,\n      \n        options?: LimitToKnownKeys<Options, DeleteBrainCategoriesOptions>\n      ): Promise<DeleteBrainCategoriesResult<Options>>;\n      type: 'action';\n      operationName: 'deleteBrainCategories';\n      operationReturnType: 'DeleteBrainCategories';\n      namespace: null;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      operatesWithRecordIdentity: true;\n      modelSelectionField: typeof modelApiIdentifier;\n      isBulk: false;\n      isDeleter: true;\n      variables: { id: { required: true, type: 'GadgetID' } };\n      variablesType: (\n              { id: string }\n              \n            );\n      hasAmbiguousIdentifier: false;\n      paramOnlyVariables: [];\n      hasReturnType: false;\n      acceptsModelInput: false;\n      hasCreateOrUpdateEffect: false;\n      imports: [];\n      optionsType: DeleteBrainCategoriesOptions;\n      selectionType: Record<string, never>;\n      schemaType: null;\n      defaultSelection: null;\n    }\n  bulkDelete: {\n      /**\n        * Executes the bulkDelete action with the given inputs.Deletes the records on the server.\n        */\n       <Options extends DeleteBrainCategoriesOptions>(\n          ids: string[],\n          options?: LimitToKnownKeys<Options, DeleteBrainCategoriesOptions>\n       ): Promise<DeleteBrainCategoriesResult<Options>[]>\n      type: 'action';\n      operationName: 'bulkDeleteBrainCategories';\n      isBulk: true;\n      isDeleter: true;\n      hasReturnType: false;\n      acceptsModelInput: false;\n      operatesWithRecordIdentity: true;\n      singleActionFunctionName: 'delete';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      modelSelectionField: typeof pluralModelApiIdentifier;\n      optionsType: DeleteBrainCategoriesOptions;\n      namespace: null;\n      variables: { ids: { required: true, type: '[GadgetID!]' } };\n      variablesType: IDsList | undefined;\n      paramOnlyVariables: [];\n      selectionType: Record<string, never>;\n      schemaType: null;\n      defaultSelection: null;\n    }\n  upsert: {\n      /**\n       * Executes the upsert action.Accepts the parameters for the action via the `variables` argument.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the flat style, all-params-together overload that most use cases should use.\n      *\n      * @example\n      * * const result = await api.brainCategories.upsert({\n        *   categoryID: 123,\n        *   id: \"1\",\n        *   name: \"example value for name\",\n        *   parentID: 123,\n        *   realcat: 123,\n        * });\n      **/\n      <Options extends UpsertBrainCategoriesOptions>(\n      \n        variables: UpsertBrainCategoriesVariables,\n        options?: LimitToKnownKeys<Options, UpsertBrainCategoriesOptions>\n      ): Promise<UpsertBrainCategoriesResult<Options>>;\n      /**\n       * Executes the upsert action.Accepts the parameters for the action via the `variables` argument.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the fully qualified, nested api identifier style overload that should be used when there's an ambiguity between an action param and a model field.\n      *\n      * @example\n      * * const result = await api.brainCategories.upsert({\n        *   brainCategories: {\n        *     categoryID: 123,\n        *     id: \"1\",\n        *     name: \"example value for name\",\n        *     parentID: 123,\n        *     realcat: 123,\n        *   },\n        * });\n      **/\n      <Options extends UpsertBrainCategoriesOptions>(\n      \n        variables: FullyQualifiedUpsertBrainCategoriesVariables,\n        options?: LimitToKnownKeys<Options, UpsertBrainCategoriesOptions>\n      ): Promise<UpsertBrainCategoriesResult<Options>>;\n      type: 'action';\n      operationName: 'upsertBrainCategories';\n      operationReturnType: 'UpsertBrainCategories';\n      namespace: null;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      operatesWithRecordIdentity: false;\n      modelSelectionField: typeof modelApiIdentifier;\n      isBulk: false;\n      isDeleter: false;\n      variables: {\n          on: { required: false, type: '[String!]' },\n          brainCategories: { required: false, type: 'UpsertBrainCategoriesInput' }\n        };\n      variablesType: ((\n               \n               & (FullyQualifiedUpsertBrainCategoriesVariables | UpsertBrainCategoriesVariables)\n             ) | undefined);\n      hasAmbiguousIdentifier: false;\n      paramOnlyVariables: [ 'on' ];\n      hasReturnType: {\n          '... on CreateBrainCategoriesResult': { hasReturnType: false },\n          '... on UpdateBrainCategoriesResult': { hasReturnType: false }\n        };\n      acceptsModelInput: true;\n      hasCreateOrUpdateEffect: true;\n      imports: [ 'Scalars', 'UpsertBrainCategoriesInput' ];\n      optionsType: UpsertBrainCategoriesOptions;\n      selectionType: AvailableBrainCategoriesSelection;\n      schemaType: Query[\"brainCategories\"];\n      defaultSelection: typeof DefaultBrainCategoriesSelection;\n    }\n  bulkUpsert: {\n      /**\n        * Executes the bulkUpsert action with the given inputs.\n        */\n       <Options extends UpsertBrainCategoriesOptions>(\n          inputs: (FullyQualifiedUpsertBrainCategoriesVariables | UpsertBrainCategoriesVariables)[],\n          options?: LimitToKnownKeys<Options, UpsertBrainCategoriesOptions>\n       ): Promise<any[]>\n      type: 'action';\n      operationName: 'bulkUpsertBrainCategories';\n      isBulk: true;\n      isDeleter: false;\n      hasReturnType: false;\n      acceptsModelInput: true;\n      operatesWithRecordIdentity: false;\n      singleActionFunctionName: 'upsert';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      modelSelectionField: typeof pluralModelApiIdentifier;\n      optionsType: UpsertBrainCategoriesOptions;\n      namespace: null;\n      variables: {\n          inputs: { required: true, type: '[BulkUpsertBrainCategoriesInput!]' }\n        };\n      variablesType: (FullyQualifiedUpsertBrainCategoriesVariables | UpsertBrainCategoriesVariables)[];\n      paramOnlyVariables: [ 'on' ];\n      selectionType: AvailableBrainCategoriesSelection;\n      schemaType: Query[\"brainCategories\"];\n      defaultSelection: typeof DefaultBrainCategoriesSelection;\n    }\n  view: {\n      (query: string, variables?: Record<string, unknown>): Promise<unknown>\n      type: 'computedView';\n      operationName: 'view';\n      gqlFieldName: 'brainCategoriesGellyView';\n      namespace: null;\n      imports: [];\n      variables: {\n          query: { type: 'String', required: true },\n          args: { type: 'JSONObject' }\n        };\n      variablesType: Record<string, unknown>;\n      resultType: Promise<unknown>;\n      plan: never;\n    }\n};\n\n/**\n * A manager for the brainCategories model with all the available operations for reading and writing to it.*/\nexport const BrainCategoriesManager = buildModelManager(\n  modelApiIdentifier,\n  pluralModelApiIdentifier,\n  DefaultBrainCategoriesSelection,\n  [\n    {\n      type: 'findOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultBrainCategoriesSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultBrainCategoriesSelection,\n      namespace: null\n    },\n    {\n      type: 'findMany',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultBrainCategoriesSelection,\n      namespace: null\n    },\n    {\n      type: 'findFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultBrainCategoriesSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultBrainCategoriesSelection,\n      namespace: null\n    },\n    {\n      type: 'findOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'findById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultBrainCategoriesSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'maybeFindById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultBrainCategoriesSelection,\n      namespace: null\n    },\n    {\n      type: 'action',\n      operationName: 'createBrainCategories',\n      operationReturnType: 'CreateBrainCategories',\n      functionName: 'create',\n      namespace: null,\n      modelApiIdentifier: modelApiIdentifier,\n      operatesWithRecordIdentity: false,\n      modelSelectionField: modelApiIdentifier,\n      isBulk: false,\n      isDeleter: false,\n      variables: {\n        brainCategories: { required: false, type: 'CreateBrainCategoriesInput' }\n      },\n      hasAmbiguousIdentifier: false,\n      paramOnlyVariables: [],\n      hasReturnType: false,\n      acceptsModelInput: true,\n      hasCreateOrUpdateEffect: true,\n      defaultSelection: DefaultBrainCategoriesSelection\n    },\n    {\n      type: 'action',\n      operationName: 'bulkCreateBrainCategories',\n      functionName: 'bulkCreate',\n      isBulk: true,\n      isDeleter: false,\n      hasReturnType: false,\n      acceptsModelInput: true,\n      operatesWithRecordIdentity: false,\n      singleActionFunctionName: 'create',\n      modelApiIdentifier: modelApiIdentifier,\n      modelSelectionField: pluralModelApiIdentifier,\n      namespace: null,\n      variables: {\n        inputs: { required: true, type: '[BulkCreateBrainCategoriesInput!]' }\n      },\n      paramOnlyVariables: [],\n      defaultSelection: DefaultBrainCategoriesSelection\n    },\n    {\n      type: 'action',\n      operationName: 'updateBrainCategories',\n      operationReturnType: 'UpdateBrainCategories',\n      functionName: 'update',\n      namespace: null,\n      modelApiIdentifier: modelApiIdentifier,\n      operatesWithRecordIdentity: true,\n      modelSelectionField: modelApiIdentifier,\n      isBulk: false,\n      isDeleter: false,\n      variables: {\n        id: { required: true, type: 'GadgetID' },\n        brainCategories: { required: false, type: 'UpdateBrainCategoriesInput' }\n      },\n      hasAmbiguousIdentifier: false,\n      paramOnlyVariables: [],\n      hasReturnType: false,\n      acceptsModelInput: true,\n      hasCreateOrUpdateEffect: true,\n      defaultSelection: DefaultBrainCategoriesSelection\n    },\n    {\n      type: 'action',\n      operationName: 'bulkUpdateBrainCategories',\n      functionName: 'bulkUpdate',\n      isBulk: true,\n      isDeleter: false,\n      hasReturnType: false,\n      acceptsModelInput: true,\n      operatesWithRecordIdentity: true,\n      singleActionFunctionName: 'update',\n      modelApiIdentifier: modelApiIdentifier,\n      modelSelectionField: pluralModelApiIdentifier,\n      namespace: null,\n      variables: {\n        inputs: { required: true, type: '[BulkUpdateBrainCategoriesInput!]' }\n      },\n      paramOnlyVariables: [],\n      defaultSelection: DefaultBrainCategoriesSelection\n    },\n    {\n      type: 'action',\n      operationName: 'deleteBrainCategories',\n      operationReturnType: 'DeleteBrainCategories',\n      functionName: 'delete',\n      namespace: null,\n      modelApiIdentifier: modelApiIdentifier,\n      operatesWithRecordIdentity: true,\n      modelSelectionField: modelApiIdentifier,\n      isBulk: false,\n      isDeleter: true,\n      variables: { id: { required: true, type: 'GadgetID' } },\n      hasAmbiguousIdentifier: false,\n      paramOnlyVariables: [],\n      hasReturnType: false,\n      acceptsModelInput: false,\n      hasCreateOrUpdateEffect: false,\n      defaultSelection: null\n    },\n    {\n      type: 'action',\n      operationName: 'bulkDeleteBrainCategories',\n      functionName: 'bulkDelete',\n      isBulk: true,\n      isDeleter: true,\n      hasReturnType: false,\n      acceptsModelInput: false,\n      operatesWithRecordIdentity: true,\n      singleActionFunctionName: 'delete',\n      modelApiIdentifier: modelApiIdentifier,\n      modelSelectionField: pluralModelApiIdentifier,\n      namespace: null,\n      variables: { ids: { required: true, type: '[GadgetID!]' } },\n      paramOnlyVariables: [],\n      defaultSelection: null\n    },\n    {\n      type: 'action',\n      operationName: 'upsertBrainCategories',\n      operationReturnType: 'UpsertBrainCategories',\n      functionName: 'upsert',\n      namespace: null,\n      modelApiIdentifier: modelApiIdentifier,\n      operatesWithRecordIdentity: false,\n      modelSelectionField: modelApiIdentifier,\n      isBulk: false,\n      isDeleter: false,\n      variables: {\n        on: { required: false, type: '[String!]' },\n        brainCategories: { required: false, type: 'UpsertBrainCategoriesInput' }\n      },\n      hasAmbiguousIdentifier: false,\n      paramOnlyVariables: [ 'on' ],\n      hasReturnType: {\n        '... on CreateBrainCategoriesResult': { hasReturnType: false },\n        '... on UpdateBrainCategoriesResult': { hasReturnType: false }\n      },\n      acceptsModelInput: true,\n      hasCreateOrUpdateEffect: true,\n      defaultSelection: DefaultBrainCategoriesSelection\n    },\n    {\n      type: 'action',\n      operationName: 'bulkUpsertBrainCategories',\n      functionName: 'bulkUpsert',\n      isBulk: true,\n      isDeleter: false,\n      hasReturnType: false,\n      acceptsModelInput: true,\n      operatesWithRecordIdentity: false,\n      singleActionFunctionName: 'upsert',\n      modelApiIdentifier: modelApiIdentifier,\n      modelSelectionField: pluralModelApiIdentifier,\n      namespace: null,\n      variables: {\n        inputs: { required: true, type: '[BulkUpsertBrainCategoriesInput!]' }\n      },\n      paramOnlyVariables: [ 'on' ],\n      defaultSelection: DefaultBrainCategoriesSelection\n    },\n    {\n      type: 'computedView',\n      operationName: 'view',\n      functionName: 'view',\n      gqlFieldName: 'brainCategoriesGellyView',\n      namespace: null,\n      variables: {\n        query: { type: 'String', required: true },\n        args: { type: 'JSONObject' }\n      }\n    }\n  ] as const\n) as unknown as {\n  // Gadget generates these model manager classes at runtime dynamically, which means there is no source code for the class. This is done to make the bundle size of the client as small as possible, avoiding a bunch of repeated source code in favour of one small builder function. The TypeScript types above document the exact interface of the constructed class.\n  new(connection: GadgetConnection): BrainCategoriesManager;\n};", "import {\n  GadgetConnection,\n  GadgetRecord,\n  GadgetRecordImplementation,\n  GadgetRecordList,\n  GadgetNonUniqueDataError,\n  actionRunner,\n  findManyRunner,\n  findOneRunner,\n  findOneByFieldRunner,\n  FieldSelection,\n  LimitToKnownKeys,\n  Selectable\n} from \"@gadgetinc/api-client-core\";\n\nimport {\n  Query,\n  ExplicitNestingRequired,\n\n  IDsList,\n  PromiseOrLiveIterator,\n  ChatLog,\n  AvailableChatLogSelection,\n  ChatLogSort,\n  ChatLogFilter,\n  CreateChatLogInput,\n  UpdateChatLogInput,\n  Scalars,\n  UpsertChatLogInput\n} from \"../types.js\";\n\nimport { buildModelManager } from \"../builder.js\";\nimport { AvailableSelection, AllFieldsSelected, DefaultSelection, Select, DeepFilterNever } from \"../utils.js\";\n\n/**\n* A type that holds only the selected fields (and nested fields) of chatLog. The present fields in the result type of this are dynamic based on the options to each call that uses it.\n* The selected fields are sometimes given by the `Options` at `Options[\"select\"]`, and if a selection isn't made in the options, we use the default selection from above.\n*/\nexport type SelectedChatLogOrDefault<Options extends Selectable<AvailableChatLogSelection>> = DeepFilterNever<\n    Select<\n      ChatLog,\n      DefaultSelection<\n        AvailableChatLogSelection,\n        Options,\n        typeof DefaultChatLogSelection\n      >\n    >\n  >;\n\n/**\n * A type that represents a `GadgetRecord` type for chatLog.\n * It selects all fields of the model by default. If you want to represent a record type with a subset of fields, you could pass in an object in the `Selection` type parameter.\n *\n * @example\n * ```ts\n * const someFunction = (record: ChatLogRecord, recordWithName: ChatLogRecord<{ select: { name: true; } }>) => {\n *   // The type of the `record` variable will include all fields of the model.\n *   const name = record.name;\n *   const otherField = record.otherField;\n *\n *   // The type of the `recordWithName` variable will only include the selected fields.\n *   const name = recordWithName.name;\n *   const otherField = recordWithName.otherField; // Type error: Property 'otherField' does not exist on type 'GadgetRecord<{ name: true; }>'.\n * }\n * ```\n */\nexport type ChatLogRecord<Selection extends AvailableChatLogSelection | undefined = typeof DefaultChatLogSelection> = DeepFilterNever<\n  GadgetRecord<\n    SelectedChatLogOrDefault<{\n      select: Selection;\n    }>\n  >\n>;\n\nexport const DefaultChatLogSelection = {\n     __typename: true,\n     id: true,\n     createdAt: true,\n     response: true,\n     updatedAt: true\n   } as const;\nconst modelApiIdentifier = \"chatLog\" as const;\nconst pluralModelApiIdentifier = \"chatLogs\" as const;\n/** Options that can be passed to the `ChatLogManager#findOne` method */\n export interface FindOneChatLogOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableChatLogSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `ChatLogManager#maybeFindOne` method */\n export interface MaybeFindOneChatLogOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableChatLogSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `ChatLogManager#findMany` method */\n export interface FindManyChatLogsOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableChatLogSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ChatLogSort | ChatLogSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ChatLogFilter | ChatLogFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n  first?: number | null;\n  last?: number | null;\n  after?: string | null;\n  before?: string | null;\n};\n/** Options that can be passed to the `ChatLogManager#findFirst` method */\n export interface FindFirstChatLogOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableChatLogSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ChatLogSort | ChatLogSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ChatLogFilter | ChatLogFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\n/** Options that can be passed to the `ChatLogManager#maybeFindFirst` method */\n export interface MaybeFindFirstChatLogOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableChatLogSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ChatLogSort | ChatLogSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ChatLogFilter | ChatLogFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\nexport interface CreateChatLogOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableChatLogSelection;\n};\nexport interface UpdateChatLogOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableChatLogSelection;\n};\nexport interface DeleteChatLogOptions {\n\n};\nexport interface UpsertChatLogOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableChatLogSelection;\n};\n/**\n * The fully-qualified, expanded form of the inputs for executing the create action.\n * The flattened style should be preferred over this style, but for models with ambiguous API identifiers, this style can be used to remove any ambiguity.\n **/\nexport type FullyQualifiedCreateChatLogVariables = {\n  chatLog?: CreateChatLogInput;\n}\n/**\n * The inputs for executing create on chatLog.\n * This is the flattened style of inputs, suitable for general use, and should be preferred.\n **/\nexport type CreateChatLogVariables = CreateChatLogInput;\n/**\n * The return value from executing create on chatLog\n * Is a GadgetRecord of the model's type.\n **/\nexport type CreateChatLogResult<Options extends CreateChatLogOptions> = SelectedChatLogOrDefault<Options> extends void ?\n      void :\n      GadgetRecord<SelectedChatLogOrDefault<Options>>;\n/**\n * The fully-qualified, expanded form of the inputs for executing the update action.\n * The flattened style should be preferred over this style, but for models with ambiguous API identifiers, this style can be used to remove any ambiguity.\n **/\nexport type FullyQualifiedUpdateChatLogVariables = {\n  chatLog?: UpdateChatLogInput;\n}\n/**\n * The inputs for executing update on chatLog.\n * This is the flattened style of inputs, suitable for general use, and should be preferred.\n **/\nexport type UpdateChatLogVariables = UpdateChatLogInput;\n/**\n * The return value from executing update on chatLog\n * Is a GadgetRecord of the model's type.\n **/\nexport type UpdateChatLogResult<Options extends UpdateChatLogOptions> = SelectedChatLogOrDefault<Options> extends void ?\n      void :\n      GadgetRecord<SelectedChatLogOrDefault<Options>>;\n/**\n * The return value from executing delete on chatLog\n * Is void because this action deletes the record\n **/\nexport type DeleteChatLogResult<Options extends DeleteChatLogOptions> = void;\n/**\n * The fully-qualified, expanded form of the inputs for executing the upsert action.\n * The flattened style should be preferred over this style, but for models with ambiguous API identifiers, this style can be used to remove any ambiguity.\n **/\nexport type FullyQualifiedUpsertChatLogVariables = {\n  on?: ((Scalars['String'] | null))[];\n  chatLog?: UpsertChatLogInput;\n}\n/**\n * The inputs for executing upsert on chatLog.\n * This is the flattened style of inputs, suitable for general use, and should be preferred.\n **/\nexport type UpsertChatLogVariables = Omit<\n     UpsertChatLogInput,\n     \"on\"\n   > & {\n     on?: ((Scalars['String'] | null))[];\n   };\n/**\n * The return value from executing upsert on chatLog\n *\n **/\nexport type UpsertChatLogResult<Options extends UpsertChatLogOptions> = SelectedChatLogOrDefault<Options> extends void ?\n      void :\n      GadgetRecord<SelectedChatLogOrDefault<Options>>;\n\n/**\n * A manager for the chatLog model with all the available operations for reading and writing to it.*/\nexport type ChatLogManager = {\n  readonly connection: GadgetConnection;\n\n  findOne: {\n      /**\n       * Finds one chatLog by ID. Returns a `Promise` that resolves to the record if found and rejects the promise if the record isn't found.\n       **/\n      <Options extends FindOneChatLogOptions>(id: string, options?: LimitToKnownKeys<Options, FindOneChatLogOptions>): PromiseOrLiveIterator<Options,ChatLogRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultChatLogSelection;\n      namespace: null;\n      optionsType: FindOneChatLogOptions;\n      selectionType: AvailableChatLogSelection;\n      schemaType: Query[\"chatLog\"];\n    }\n  maybeFindOne: {\n      /**\n       * Finds one chatLog by ID. Returns a `Promise` that resolves to the record if found and returns null otherwise.\n       **/\n      <Options extends MaybeFindOneChatLogOptions>(id: string, options?: LimitToKnownKeys<Options, MaybeFindOneChatLogOptions>): PromiseOrLiveIterator<Options,ChatLogRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: MaybeFindOneChatLogOptions;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultChatLogSelection;\n      namespace: null;\n      selectionType: AvailableChatLogSelection;\n      schemaType: Query[\"chatLog\"];\n    }\n  findMany: {\n      /**\n       * Finds many chatLog. Returns a `Promise` for a `GadgetRecordList` of objects according to the passed `options`. Optionally filters the returned records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindManyChatLogsOptions>(options?: LimitToKnownKeys<Options, FindManyChatLogsOptions>): PromiseOrLiveIterator<Options,GadgetRecordList<ChatLogRecord<Options[\"select\"]>>>;\n      type: 'findMany';\n      operationName: typeof pluralModelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: FindManyChatLogsOptions;\n      defaultSelection: typeof DefaultChatLogSelection;\n      namespace: null;\n      selectionType: AvailableChatLogSelection;\n      schemaType: Query[\"chatLog\"];\n    }\n  findFirst: {\n      /**\n       * Finds the first matching chatLog. Returns a `Promise` that resolves to a record if found and rejects the promise if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindFirstChatLogOptions>(options?: LimitToKnownKeys<Options, FindFirstChatLogOptions>): PromiseOrLiveIterator<Options,ChatLogRecord<Options[\"select\"]>>;\n      type: 'findFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: FindFirstChatLogOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultChatLogSelection;\n      namespace: null;\n      selectionType: AvailableChatLogSelection;\n      schemaType: Query[\"chatLog\"];\n    }\n  maybeFindFirst: {\n      /**\n       * Finds the first matching chatLog. Returns a `Promise` that resolves to a record if found, or null if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` pagination options.\n       **/\n      <Options extends MaybeFindFirstChatLogOptions>(options?: LimitToKnownKeys<Options, MaybeFindFirstChatLogOptions>): PromiseOrLiveIterator<Options,ChatLogRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: MaybeFindFirstChatLogOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultChatLogSelection;\n      namespace: null;\n      selectionType: AvailableChatLogSelection;\n      schemaType: Query[\"chatLog\"];\n    }\n  findById: {\n      /**\n      * Finds one chatLog by its id. Returns a Promise that resolves to the record if found and rejects the promise if the record isn't found.\n      **/\n      <Options extends FindOneChatLogOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneChatLogOptions>): PromiseOrLiveIterator<Options,ChatLogRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneChatLogOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultChatLogSelection;\n      namespace: null;\n      selectionType: AvailableChatLogSelection;\n      schemaType: Query[\"chatLog\"];\n    }\n  maybeFindById: {\n      /**\n      * Finds one chatLog by its id. Returns a Promise that resolves to the record if found and returns null if the record isn't found.\n      **/\n      <Options extends FindOneChatLogOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneChatLogOptions>): Promise<ChatLogRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneChatLogOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultChatLogSelection;\n      namespace: null;\n      selectionType: AvailableChatLogSelection;\n      schemaType: Query[\"chatLog\"];\n    }\n  create: {\n      /**\n       * Executes the create action.Accepts the parameters for the action via the `variables` argument.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the flat style, all-params-together overload that most use cases should use.\n      *\n      * @example\n      * * const chatLogRecord = await api.chatLog.create({\n        *   response: \"example value for response\",\n        * });\n      **/\n      <Options extends CreateChatLogOptions>(\n      \n        variables: CreateChatLogVariables,\n        options?: LimitToKnownKeys<Options, CreateChatLogOptions>\n      ): Promise<CreateChatLogResult<Options>>;\n      /**\n       * Executes the create action.Accepts the parameters for the action via the `variables` argument.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the fully qualified, nested api identifier style overload that should be used when there's an ambiguity between an action param and a model field.\n      *\n      * @example\n      * * const chatLogRecord = await api.chatLog.create({\n        *   chatLog: {\n        *     response: \"example value for response\",\n        *   },\n        * });\n      **/\n      <Options extends CreateChatLogOptions>(\n      \n        variables: FullyQualifiedCreateChatLogVariables,\n        options?: LimitToKnownKeys<Options, CreateChatLogOptions>\n      ): Promise<CreateChatLogResult<Options>>;\n      type: 'action';\n      operationName: 'createChatLog';\n      operationReturnType: 'CreateChatLog';\n      namespace: null;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      operatesWithRecordIdentity: false;\n      modelSelectionField: typeof modelApiIdentifier;\n      isBulk: false;\n      isDeleter: false;\n      variables: { chatLog: { required: false, type: 'CreateChatLogInput' } };\n      variablesType: ((\n               \n               & (FullyQualifiedCreateChatLogVariables | CreateChatLogVariables)\n             ) | undefined);\n      hasAmbiguousIdentifier: false;\n      paramOnlyVariables: [];\n      hasReturnType: false;\n      acceptsModelInput: true;\n      hasCreateOrUpdateEffect: true;\n      imports: [ 'CreateChatLogInput' ];\n      optionsType: CreateChatLogOptions;\n      selectionType: AvailableChatLogSelection;\n      schemaType: Query[\"chatLog\"];\n      defaultSelection: typeof DefaultChatLogSelection;\n    }\n  bulkCreate: {\n      /**\n        * Executes the bulkCreate action with the given inputs.\n        */\n       <Options extends CreateChatLogOptions>(\n          inputs: (FullyQualifiedCreateChatLogVariables | CreateChatLogVariables)[],\n          options?: LimitToKnownKeys<Options, CreateChatLogOptions>\n       ): Promise<CreateChatLogResult<Options>[]>\n      type: 'action';\n      operationName: 'bulkCreateChatLogs';\n      isBulk: true;\n      isDeleter: false;\n      hasReturnType: false;\n      acceptsModelInput: true;\n      operatesWithRecordIdentity: false;\n      singleActionFunctionName: 'create';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      modelSelectionField: typeof pluralModelApiIdentifier;\n      optionsType: CreateChatLogOptions;\n      namespace: null;\n      variables: { inputs: { required: true, type: '[BulkCreateChatLogsInput!]' } };\n      variablesType: (FullyQualifiedCreateChatLogVariables | CreateChatLogVariables)[];\n      paramOnlyVariables: [];\n      selectionType: AvailableChatLogSelection;\n      schemaType: Query[\"chatLog\"];\n      defaultSelection: typeof DefaultChatLogSelection;\n    }\n  update: {\n      /**\n       * Executes the update actionon one record specified by `id`.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the flat style, all-params-together overload that most use cases should use.\n      *\n      * @example\n      * * const chatLogRecord = await api.chatLog.update(\"1\", {\n        *   response: \"example value for response\",\n        * });\n      **/\n      <Options extends UpdateChatLogOptions>(\n        id: string,\n        variables: UpdateChatLogVariables,\n        options?: LimitToKnownKeys<Options, UpdateChatLogOptions>\n      ): Promise<UpdateChatLogResult<Options>>;\n      /**\n       * Executes the update actionon one record specified by `id`.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the fully qualified, nested api identifier style overload that should be used when there's an ambiguity between an action param and a model field.\n      *\n      * @example\n      * * const chatLogRecord = await api.chatLog.update(\"1\", {\n        *   chatLog: {\n        *     response: \"example value for response\",\n        *   },\n        * });\n      **/\n      <Options extends UpdateChatLogOptions>(\n        id: string,\n        variables: FullyQualifiedUpdateChatLogVariables,\n        options?: LimitToKnownKeys<Options, UpdateChatLogOptions>\n      ): Promise<UpdateChatLogResult<Options>>;\n      type: 'action';\n      operationName: 'updateChatLog';\n      operationReturnType: 'UpdateChatLog';\n      namespace: null;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      operatesWithRecordIdentity: true;\n      modelSelectionField: typeof modelApiIdentifier;\n      isBulk: false;\n      isDeleter: false;\n      variables: {\n          id: { required: true, type: 'GadgetID' },\n          chatLog: { required: false, type: 'UpdateChatLogInput' }\n        };\n      variablesType: (\n              { id: string }\n              & (FullyQualifiedUpdateChatLogVariables | UpdateChatLogVariables)\n            );\n      hasAmbiguousIdentifier: false;\n      paramOnlyVariables: [];\n      hasReturnType: false;\n      acceptsModelInput: true;\n      hasCreateOrUpdateEffect: true;\n      imports: [ 'UpdateChatLogInput' ];\n      optionsType: UpdateChatLogOptions;\n      selectionType: AvailableChatLogSelection;\n      schemaType: Query[\"chatLog\"];\n      defaultSelection: typeof DefaultChatLogSelection;\n    }\n  bulkUpdate: {\n      /**\n        * Executes the bulkUpdate action with the given inputs.\n        */\n       <Options extends UpdateChatLogOptions>(\n          inputs: (FullyQualifiedUpdateChatLogVariables | UpdateChatLogVariables & { id: string })[],\n          options?: LimitToKnownKeys<Options, UpdateChatLogOptions>\n       ): Promise<UpdateChatLogResult<Options>[]>\n      type: 'action';\n      operationName: 'bulkUpdateChatLogs';\n      isBulk: true;\n      isDeleter: false;\n      hasReturnType: false;\n      acceptsModelInput: true;\n      operatesWithRecordIdentity: true;\n      singleActionFunctionName: 'update';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      modelSelectionField: typeof pluralModelApiIdentifier;\n      optionsType: UpdateChatLogOptions;\n      namespace: null;\n      variables: { inputs: { required: true, type: '[BulkUpdateChatLogsInput!]' } };\n      variablesType: (FullyQualifiedUpdateChatLogVariables | UpdateChatLogVariables & { id: string })[];\n      paramOnlyVariables: [];\n      selectionType: AvailableChatLogSelection;\n      schemaType: Query[\"chatLog\"];\n      defaultSelection: typeof DefaultChatLogSelection;\n    }\n  delete: {\n      /**\n       * Executes the delete actionon one record specified by `id`.Deletes the record on the server. Returns a Promise that resolves if the delete succeeds.\n      *\n      * This is the fully qualified, nested api identifier style overload that should be used when there's an ambiguity between an action param and a model field.\n      *\n      * @example\n      * * await api.chatLog.delete(\"1\");\n      **/\n      <Options extends DeleteChatLogOptions>(\n        id: string,\n      \n        options?: LimitToKnownKeys<Options, DeleteChatLogOptions>\n      ): Promise<DeleteChatLogResult<Options>>;\n      type: 'action';\n      operationName: 'deleteChatLog';\n      operationReturnType: 'DeleteChatLog';\n      namespace: null;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      operatesWithRecordIdentity: true;\n      modelSelectionField: typeof modelApiIdentifier;\n      isBulk: false;\n      isDeleter: true;\n      variables: { id: { required: true, type: 'GadgetID' } };\n      variablesType: (\n              { id: string }\n              \n            );\n      hasAmbiguousIdentifier: false;\n      paramOnlyVariables: [];\n      hasReturnType: false;\n      acceptsModelInput: false;\n      hasCreateOrUpdateEffect: false;\n      imports: [];\n      optionsType: DeleteChatLogOptions;\n      selectionType: Record<string, never>;\n      schemaType: null;\n      defaultSelection: null;\n    }\n  bulkDelete: {\n      /**\n        * Executes the bulkDelete action with the given inputs.Deletes the records on the server.\n        */\n       <Options extends DeleteChatLogOptions>(\n          ids: string[],\n          options?: LimitToKnownKeys<Options, DeleteChatLogOptions>\n       ): Promise<DeleteChatLogResult<Options>[]>\n      type: 'action';\n      operationName: 'bulkDeleteChatLogs';\n      isBulk: true;\n      isDeleter: true;\n      hasReturnType: false;\n      acceptsModelInput: false;\n      operatesWithRecordIdentity: true;\n      singleActionFunctionName: 'delete';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      modelSelectionField: typeof pluralModelApiIdentifier;\n      optionsType: DeleteChatLogOptions;\n      namespace: null;\n      variables: { ids: { required: true, type: '[GadgetID!]' } };\n      variablesType: IDsList | undefined;\n      paramOnlyVariables: [];\n      selectionType: Record<string, never>;\n      schemaType: null;\n      defaultSelection: null;\n    }\n  upsert: {\n      /**\n       * Executes the upsert action.Accepts the parameters for the action via the `variables` argument.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the flat style, all-params-together overload that most use cases should use.\n      *\n      * @example\n      * * const result = await api.chatLog.upsert({\n        *   id: \"1\",\n        *   response: \"example value for response\",\n        * });\n      **/\n      <Options extends UpsertChatLogOptions>(\n      \n        variables: UpsertChatLogVariables,\n        options?: LimitToKnownKeys<Options, UpsertChatLogOptions>\n      ): Promise<UpsertChatLogResult<Options>>;\n      /**\n       * Executes the upsert action.Accepts the parameters for the action via the `variables` argument.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the fully qualified, nested api identifier style overload that should be used when there's an ambiguity between an action param and a model field.\n      *\n      * @example\n      * * const result = await api.chatLog.upsert({\n        *   chatLog: {\n        *     id: \"1\",\n        *     response: \"example value for response\",\n        *   },\n        * });\n      **/\n      <Options extends UpsertChatLogOptions>(\n      \n        variables: FullyQualifiedUpsertChatLogVariables,\n        options?: LimitToKnownKeys<Options, UpsertChatLogOptions>\n      ): Promise<UpsertChatLogResult<Options>>;\n      type: 'action';\n      operationName: 'upsertChatLog';\n      operationReturnType: 'UpsertChatLog';\n      namespace: null;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      operatesWithRecordIdentity: false;\n      modelSelectionField: typeof modelApiIdentifier;\n      isBulk: false;\n      isDeleter: false;\n      variables: {\n          on: { required: false, type: '[String!]' },\n          chatLog: { required: false, type: 'UpsertChatLogInput' }\n        };\n      variablesType: ((\n               \n               & (FullyQualifiedUpsertChatLogVariables | UpsertChatLogVariables)\n             ) | undefined);\n      hasAmbiguousIdentifier: false;\n      paramOnlyVariables: [ 'on' ];\n      hasReturnType: {\n          '... on CreateChatLogResult': { hasReturnType: false },\n          '... on UpdateChatLogResult': { hasReturnType: false }\n        };\n      acceptsModelInput: true;\n      hasCreateOrUpdateEffect: true;\n      imports: [ 'Scalars', 'UpsertChatLogInput' ];\n      optionsType: UpsertChatLogOptions;\n      selectionType: AvailableChatLogSelection;\n      schemaType: Query[\"chatLog\"];\n      defaultSelection: typeof DefaultChatLogSelection;\n    }\n  bulkUpsert: {\n      /**\n        * Executes the bulkUpsert action with the given inputs.\n        */\n       <Options extends UpsertChatLogOptions>(\n          inputs: (FullyQualifiedUpsertChatLogVariables | UpsertChatLogVariables)[],\n          options?: LimitToKnownKeys<Options, UpsertChatLogOptions>\n       ): Promise<any[]>\n      type: 'action';\n      operationName: 'bulkUpsertChatLogs';\n      isBulk: true;\n      isDeleter: false;\n      hasReturnType: false;\n      acceptsModelInput: true;\n      operatesWithRecordIdentity: false;\n      singleActionFunctionName: 'upsert';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      modelSelectionField: typeof pluralModelApiIdentifier;\n      optionsType: UpsertChatLogOptions;\n      namespace: null;\n      variables: { inputs: { required: true, type: '[BulkUpsertChatLogsInput!]' } };\n      variablesType: (FullyQualifiedUpsertChatLogVariables | UpsertChatLogVariables)[];\n      paramOnlyVariables: [ 'on' ];\n      selectionType: AvailableChatLogSelection;\n      schemaType: Query[\"chatLog\"];\n      defaultSelection: typeof DefaultChatLogSelection;\n    }\n  view: {\n      (query: string, variables?: Record<string, unknown>): Promise<unknown>\n      type: 'computedView';\n      operationName: 'view';\n      gqlFieldName: 'chatLogGellyView';\n      namespace: null;\n      imports: [];\n      variables: {\n          query: { type: 'String', required: true },\n          args: { type: 'JSONObject' }\n        };\n      variablesType: Record<string, unknown>;\n      resultType: Promise<unknown>;\n      plan: never;\n    }\n};\n\n/**\n * A manager for the chatLog model with all the available operations for reading and writing to it.*/\nexport const ChatLogManager = buildModelManager(\n  modelApiIdentifier,\n  pluralModelApiIdentifier,\n  DefaultChatLogSelection,\n  [\n    {\n      type: 'findOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultChatLogSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultChatLogSelection,\n      namespace: null\n    },\n    {\n      type: 'findMany',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultChatLogSelection,\n      namespace: null\n    },\n    {\n      type: 'findFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultChatLogSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultChatLogSelection,\n      namespace: null\n    },\n    {\n      type: 'findOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'findById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultChatLogSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'maybeFindById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultChatLogSelection,\n      namespace: null\n    },\n    {\n      type: 'action',\n      operationName: 'createChatLog',\n      operationReturnType: 'CreateChatLog',\n      functionName: 'create',\n      namespace: null,\n      modelApiIdentifier: modelApiIdentifier,\n      operatesWithRecordIdentity: false,\n      modelSelectionField: modelApiIdentifier,\n      isBulk: false,\n      isDeleter: false,\n      variables: { chatLog: { required: false, type: 'CreateChatLogInput' } },\n      hasAmbiguousIdentifier: false,\n      paramOnlyVariables: [],\n      hasReturnType: false,\n      acceptsModelInput: true,\n      hasCreateOrUpdateEffect: true,\n      defaultSelection: DefaultChatLogSelection\n    },\n    {\n      type: 'action',\n      operationName: 'bulkCreateChatLogs',\n      functionName: 'bulkCreate',\n      isBulk: true,\n      isDeleter: false,\n      hasReturnType: false,\n      acceptsModelInput: true,\n      operatesWithRecordIdentity: false,\n      singleActionFunctionName: 'create',\n      modelApiIdentifier: modelApiIdentifier,\n      modelSelectionField: pluralModelApiIdentifier,\n      namespace: null,\n      variables: { inputs: { required: true, type: '[BulkCreateChatLogsInput!]' } },\n      paramOnlyVariables: [],\n      defaultSelection: DefaultChatLogSelection\n    },\n    {\n      type: 'action',\n      operationName: 'updateChatLog',\n      operationReturnType: 'UpdateChatLog',\n      functionName: 'update',\n      namespace: null,\n      modelApiIdentifier: modelApiIdentifier,\n      operatesWithRecordIdentity: true,\n      modelSelectionField: modelApiIdentifier,\n      isBulk: false,\n      isDeleter: false,\n      variables: {\n        id: { required: true, type: 'GadgetID' },\n        chatLog: { required: false, type: 'UpdateChatLogInput' }\n      },\n      hasAmbiguousIdentifier: false,\n      paramOnlyVariables: [],\n      hasReturnType: false,\n      acceptsModelInput: true,\n      hasCreateOrUpdateEffect: true,\n      defaultSelection: DefaultChatLogSelection\n    },\n    {\n      type: 'action',\n      operationName: 'bulkUpdateChatLogs',\n      functionName: 'bulkUpdate',\n      isBulk: true,\n      isDeleter: false,\n      hasReturnType: false,\n      acceptsModelInput: true,\n      operatesWithRecordIdentity: true,\n      singleActionFunctionName: 'update',\n      modelApiIdentifier: modelApiIdentifier,\n      modelSelectionField: pluralModelApiIdentifier,\n      namespace: null,\n      variables: { inputs: { required: true, type: '[BulkUpdateChatLogsInput!]' } },\n      paramOnlyVariables: [],\n      defaultSelection: DefaultChatLogSelection\n    },\n    {\n      type: 'action',\n      operationName: 'deleteChatLog',\n      operationReturnType: 'DeleteChatLog',\n      functionName: 'delete',\n      namespace: null,\n      modelApiIdentifier: modelApiIdentifier,\n      operatesWithRecordIdentity: true,\n      modelSelectionField: modelApiIdentifier,\n      isBulk: false,\n      isDeleter: true,\n      variables: { id: { required: true, type: 'GadgetID' } },\n      hasAmbiguousIdentifier: false,\n      paramOnlyVariables: [],\n      hasReturnType: false,\n      acceptsModelInput: false,\n      hasCreateOrUpdateEffect: false,\n      defaultSelection: null\n    },\n    {\n      type: 'action',\n      operationName: 'bulkDeleteChatLogs',\n      functionName: 'bulkDelete',\n      isBulk: true,\n      isDeleter: true,\n      hasReturnType: false,\n      acceptsModelInput: false,\n      operatesWithRecordIdentity: true,\n      singleActionFunctionName: 'delete',\n      modelApiIdentifier: modelApiIdentifier,\n      modelSelectionField: pluralModelApiIdentifier,\n      namespace: null,\n      variables: { ids: { required: true, type: '[GadgetID!]' } },\n      paramOnlyVariables: [],\n      defaultSelection: null\n    },\n    {\n      type: 'action',\n      operationName: 'upsertChatLog',\n      operationReturnType: 'UpsertChatLog',\n      functionName: 'upsert',\n      namespace: null,\n      modelApiIdentifier: modelApiIdentifier,\n      operatesWithRecordIdentity: false,\n      modelSelectionField: modelApiIdentifier,\n      isBulk: false,\n      isDeleter: false,\n      variables: {\n        on: { required: false, type: '[String!]' },\n        chatLog: { required: false, type: 'UpsertChatLogInput' }\n      },\n      hasAmbiguousIdentifier: false,\n      paramOnlyVariables: [ 'on' ],\n      hasReturnType: {\n        '... on CreateChatLogResult': { hasReturnType: false },\n        '... on UpdateChatLogResult': { hasReturnType: false }\n      },\n      acceptsModelInput: true,\n      hasCreateOrUpdateEffect: true,\n      defaultSelection: DefaultChatLogSelection\n    },\n    {\n      type: 'action',\n      operationName: 'bulkUpsertChatLogs',\n      functionName: 'bulkUpsert',\n      isBulk: true,\n      isDeleter: false,\n      hasReturnType: false,\n      acceptsModelInput: true,\n      operatesWithRecordIdentity: false,\n      singleActionFunctionName: 'upsert',\n      modelApiIdentifier: modelApiIdentifier,\n      modelSelectionField: pluralModelApiIdentifier,\n      namespace: null,\n      variables: { inputs: { required: true, type: '[BulkUpsertChatLogsInput!]' } },\n      paramOnlyVariables: [ 'on' ],\n      defaultSelection: DefaultChatLogSelection\n    },\n    {\n      type: 'computedView',\n      operationName: 'view',\n      functionName: 'view',\n      gqlFieldName: 'chatLogGellyView',\n      namespace: null,\n      variables: {\n        query: { type: 'String', required: true },\n        args: { type: 'JSONObject' }\n      }\n    }\n  ] as const\n) as unknown as {\n  // Gadget generates these model manager classes at runtime dynamically, which means there is no source code for the class. This is done to make the bundle size of the client as small as possible, avoiding a bunch of repeated source code in favour of one small builder function. The TypeScript types above document the exact interface of the constructed class.\n  new(connection: GadgetConnection): ChatLogManager;\n};", "import {\n  GadgetConnection,\n  GadgetRecord,\n  GadgetRecordImplementation,\n  GadgetRecordList,\n  GadgetNonUniqueDataError,\n  actionRunner,\n  findManyRunner,\n  findOneRunner,\n  findOneByFieldRunner,\n  FieldSelection,\n  LimitToKnownKeys,\n  Selectable\n} from \"@gadgetinc/api-client-core\";\n\nimport {\n  Query,\n  ExplicitNestingRequired,\n\n  IDsList,\n  PromiseOrLiveIterator,\n  RecommendedProduct,\n  AvailableRecommendedProductSelection,\n  RecommendedProductSort,\n  RecommendedProductFilter,\n  CreateRecommendedProductInput,\n  UpdateRecommendedProductInput,\n  Scalars,\n  UpsertRecommendedProductInput\n} from \"../types.js\";\n\nimport { buildModelManager } from \"../builder.js\";\nimport { AvailableSelection, AllFieldsSelected, DefaultSelection, Select, DeepFilterNever } from \"../utils.js\";\n\n/**\n* A type that holds only the selected fields (and nested fields) of recommendedProduct. The present fields in the result type of this are dynamic based on the options to each call that uses it.\n* The selected fields are sometimes given by the `Options` at `Options[\"select\"]`, and if a selection isn't made in the options, we use the default selection from above.\n*/\nexport type SelectedRecommendedProductOrDefault<Options extends Selectable<AvailableRecommendedProductSelection>> = DeepFilterNever<\n    Select<\n      RecommendedProduct,\n      DefaultSelection<\n        AvailableRecommendedProductSelection,\n        Options,\n        typeof DefaultRecommendedProductSelection\n      >\n    >\n  >;\n\n/**\n * A type that represents a `GadgetRecord` type for recommendedProduct.\n * It selects all fields of the model by default. If you want to represent a record type with a subset of fields, you could pass in an object in the `Selection` type parameter.\n *\n * @example\n * ```ts\n * const someFunction = (record: RecommendedProductRecord, recordWithName: RecommendedProductRecord<{ select: { name: true; } }>) => {\n *   // The type of the `record` variable will include all fields of the model.\n *   const name = record.name;\n *   const otherField = record.otherField;\n *\n *   // The type of the `recordWithName` variable will only include the selected fields.\n *   const name = recordWithName.name;\n *   const otherField = recordWithName.otherField; // Type error: Property 'otherField' does not exist on type 'GadgetRecord<{ name: true; }>'.\n * }\n * ```\n */\nexport type RecommendedProductRecord<Selection extends AvailableRecommendedProductSelection | undefined = typeof DefaultRecommendedProductSelection> = DeepFilterNever<\n  GadgetRecord<\n    SelectedRecommendedProductOrDefault<{\n      select: Selection;\n    }>\n  >\n>;\n\nexport const DefaultRecommendedProductSelection = {\n     __typename: true,\n     id: true,\n     chatLogId: true,\n     createdAt: true,\n     productId: true,\n     updatedAt: true\n   } as const;\nconst modelApiIdentifier = \"recommendedProduct\" as const;\nconst pluralModelApiIdentifier = \"recommendedProducts\" as const;\n/** Options that can be passed to the `RecommendedProductManager#findOne` method */\n export interface FindOneRecommendedProductOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableRecommendedProductSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `RecommendedProductManager#maybeFindOne` method */\n export interface MaybeFindOneRecommendedProductOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableRecommendedProductSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `RecommendedProductManager#findMany` method */\n export interface FindManyRecommendedProductsOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableRecommendedProductSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: RecommendedProductSort | RecommendedProductSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: RecommendedProductFilter | RecommendedProductFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n  first?: number | null;\n  last?: number | null;\n  after?: string | null;\n  before?: string | null;\n};\n/** Options that can be passed to the `RecommendedProductManager#findFirst` method */\n export interface FindFirstRecommendedProductOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableRecommendedProductSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: RecommendedProductSort | RecommendedProductSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: RecommendedProductFilter | RecommendedProductFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\n/** Options that can be passed to the `RecommendedProductManager#maybeFindFirst` method */\n export interface MaybeFindFirstRecommendedProductOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableRecommendedProductSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: RecommendedProductSort | RecommendedProductSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: RecommendedProductFilter | RecommendedProductFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\nexport interface CreateRecommendedProductOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableRecommendedProductSelection;\n};\nexport interface UpdateRecommendedProductOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableRecommendedProductSelection;\n};\nexport interface DeleteRecommendedProductOptions {\n\n};\nexport interface UpsertRecommendedProductOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableRecommendedProductSelection;\n};\n/**\n * The fully-qualified, expanded form of the inputs for executing the create action.\n * The flattened style should be preferred over this style, but for models with ambiguous API identifiers, this style can be used to remove any ambiguity.\n **/\nexport type FullyQualifiedCreateRecommendedProductVariables = {\n  recommendedProduct?: CreateRecommendedProductInput;\n}\n/**\n * The inputs for executing create on recommendedProduct.\n * This is the flattened style of inputs, suitable for general use, and should be preferred.\n **/\nexport type CreateRecommendedProductVariables = CreateRecommendedProductInput;\n/**\n * The return value from executing create on recommendedProduct\n * Is a GadgetRecord of the model's type.\n **/\nexport type CreateRecommendedProductResult<Options extends CreateRecommendedProductOptions> = SelectedRecommendedProductOrDefault<Options> extends void ?\n      void :\n      GadgetRecord<SelectedRecommendedProductOrDefault<Options>>;\n/**\n * The fully-qualified, expanded form of the inputs for executing the update action.\n * The flattened style should be preferred over this style, but for models with ambiguous API identifiers, this style can be used to remove any ambiguity.\n **/\nexport type FullyQualifiedUpdateRecommendedProductVariables = {\n  recommendedProduct?: UpdateRecommendedProductInput;\n}\n/**\n * The inputs for executing update on recommendedProduct.\n * This is the flattened style of inputs, suitable for general use, and should be preferred.\n **/\nexport type UpdateRecommendedProductVariables = UpdateRecommendedProductInput;\n/**\n * The return value from executing update on recommendedProduct\n * Is a GadgetRecord of the model's type.\n **/\nexport type UpdateRecommendedProductResult<Options extends UpdateRecommendedProductOptions> = SelectedRecommendedProductOrDefault<Options> extends void ?\n      void :\n      GadgetRecord<SelectedRecommendedProductOrDefault<Options>>;\n/**\n * The return value from executing delete on recommendedProduct\n * Is void because this action deletes the record\n **/\nexport type DeleteRecommendedProductResult<Options extends DeleteRecommendedProductOptions> = void;\n/**\n * The fully-qualified, expanded form of the inputs for executing the upsert action.\n * The flattened style should be preferred over this style, but for models with ambiguous API identifiers, this style can be used to remove any ambiguity.\n **/\nexport type FullyQualifiedUpsertRecommendedProductVariables = {\n  on?: ((Scalars['String'] | null))[];\n  recommendedProduct?: UpsertRecommendedProductInput;\n}\n/**\n * The inputs for executing upsert on recommendedProduct.\n * This is the flattened style of inputs, suitable for general use, and should be preferred.\n **/\nexport type UpsertRecommendedProductVariables = Omit<\n     UpsertRecommendedProductInput,\n     \"on\"\n   > & {\n     on?: ((Scalars['String'] | null))[];\n   };\n/**\n * The return value from executing upsert on recommendedProduct\n *\n **/\nexport type UpsertRecommendedProductResult<Options extends UpsertRecommendedProductOptions> = SelectedRecommendedProductOrDefault<Options> extends void ?\n      void :\n      GadgetRecord<SelectedRecommendedProductOrDefault<Options>>;\n\n/**\n * A manager for the recommendedProduct model with all the available operations for reading and writing to it.*/\nexport type RecommendedProductManager = {\n  readonly connection: GadgetConnection;\n\n  findOne: {\n      /**\n       * Finds one recommendedProduct by ID. Returns a `Promise` that resolves to the record if found and rejects the promise if the record isn't found.\n       **/\n      <Options extends FindOneRecommendedProductOptions>(id: string, options?: LimitToKnownKeys<Options, FindOneRecommendedProductOptions>): PromiseOrLiveIterator<Options,RecommendedProductRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultRecommendedProductSelection;\n      namespace: null;\n      optionsType: FindOneRecommendedProductOptions;\n      selectionType: AvailableRecommendedProductSelection;\n      schemaType: Query[\"recommendedProduct\"];\n    }\n  maybeFindOne: {\n      /**\n       * Finds one recommendedProduct by ID. Returns a `Promise` that resolves to the record if found and returns null otherwise.\n       **/\n      <Options extends MaybeFindOneRecommendedProductOptions>(id: string, options?: LimitToKnownKeys<Options, MaybeFindOneRecommendedProductOptions>): PromiseOrLiveIterator<Options,RecommendedProductRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: MaybeFindOneRecommendedProductOptions;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultRecommendedProductSelection;\n      namespace: null;\n      selectionType: AvailableRecommendedProductSelection;\n      schemaType: Query[\"recommendedProduct\"];\n    }\n  findMany: {\n      /**\n       * Finds many recommendedProduct. Returns a `Promise` for a `GadgetRecordList` of objects according to the passed `options`. Optionally filters the returned records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindManyRecommendedProductsOptions>(options?: LimitToKnownKeys<Options, FindManyRecommendedProductsOptions>): PromiseOrLiveIterator<Options,GadgetRecordList<RecommendedProductRecord<Options[\"select\"]>>>;\n      type: 'findMany';\n      operationName: typeof pluralModelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: FindManyRecommendedProductsOptions;\n      defaultSelection: typeof DefaultRecommendedProductSelection;\n      namespace: null;\n      selectionType: AvailableRecommendedProductSelection;\n      schemaType: Query[\"recommendedProduct\"];\n    }\n  findFirst: {\n      /**\n       * Finds the first matching recommendedProduct. Returns a `Promise` that resolves to a record if found and rejects the promise if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindFirstRecommendedProductOptions>(options?: LimitToKnownKeys<Options, FindFirstRecommendedProductOptions>): PromiseOrLiveIterator<Options,RecommendedProductRecord<Options[\"select\"]>>;\n      type: 'findFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: FindFirstRecommendedProductOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultRecommendedProductSelection;\n      namespace: null;\n      selectionType: AvailableRecommendedProductSelection;\n      schemaType: Query[\"recommendedProduct\"];\n    }\n  maybeFindFirst: {\n      /**\n       * Finds the first matching recommendedProduct. Returns a `Promise` that resolves to a record if found, or null if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` pagination options.\n       **/\n      <Options extends MaybeFindFirstRecommendedProductOptions>(options?: LimitToKnownKeys<Options, MaybeFindFirstRecommendedProductOptions>): PromiseOrLiveIterator<Options,RecommendedProductRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: MaybeFindFirstRecommendedProductOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultRecommendedProductSelection;\n      namespace: null;\n      selectionType: AvailableRecommendedProductSelection;\n      schemaType: Query[\"recommendedProduct\"];\n    }\n  findById: {\n      /**\n      * Finds one recommendedProduct by its id. Returns a Promise that resolves to the record if found and rejects the promise if the record isn't found.\n      **/\n      <Options extends FindOneRecommendedProductOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneRecommendedProductOptions>): PromiseOrLiveIterator<Options,RecommendedProductRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneRecommendedProductOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultRecommendedProductSelection;\n      namespace: null;\n      selectionType: AvailableRecommendedProductSelection;\n      schemaType: Query[\"recommendedProduct\"];\n    }\n  maybeFindById: {\n      /**\n      * Finds one recommendedProduct by its id. Returns a Promise that resolves to the record if found and returns null if the record isn't found.\n      **/\n      <Options extends FindOneRecommendedProductOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneRecommendedProductOptions>): Promise<RecommendedProductRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneRecommendedProductOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultRecommendedProductSelection;\n      namespace: null;\n      selectionType: AvailableRecommendedProductSelection;\n      schemaType: Query[\"recommendedProduct\"];\n    }\n  create: {\n      /**\n       * Executes the create action.Accepts the parameters for the action via the `variables` argument.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the flat style, all-params-together overload that most use cases should use.\n      *\n      * @example\n      * * const recommendedProductRecord = await api.recommendedProduct.create({\n        *   chatLog: {\n        *     _link: \"1\",\n        *   },\n        *   product: {\n        *     _link: \"1\",\n        *   },\n        * });\n      **/\n      <Options extends CreateRecommendedProductOptions>(\n      \n        variables: CreateRecommendedProductVariables,\n        options?: LimitToKnownKeys<Options, CreateRecommendedProductOptions>\n      ): Promise<CreateRecommendedProductResult<Options>>;\n      /**\n       * Executes the create action.Accepts the parameters for the action via the `variables` argument.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the fully qualified, nested api identifier style overload that should be used when there's an ambiguity between an action param and a model field.\n      *\n      * @example\n      * * const recommendedProductRecord = await api.recommendedProduct.create({\n        *   recommendedProduct: {\n        *     chatLog: {\n        *       _link: \"1\",\n        *     },\n        *     product: {\n        *       _link: \"1\",\n        *     },\n        *   },\n        * });\n      **/\n      <Options extends CreateRecommendedProductOptions>(\n      \n        variables: FullyQualifiedCreateRecommendedProductVariables,\n        options?: LimitToKnownKeys<Options, CreateRecommendedProductOptions>\n      ): Promise<CreateRecommendedProductResult<Options>>;\n      type: 'action';\n      operationName: 'createRecommendedProduct';\n      operationReturnType: 'CreateRecommendedProduct';\n      namespace: null;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      operatesWithRecordIdentity: false;\n      modelSelectionField: typeof modelApiIdentifier;\n      isBulk: false;\n      isDeleter: false;\n      variables: {\n          recommendedProduct: { required: false, type: 'CreateRecommendedProductInput' }\n        };\n      variablesType: ((\n               \n               & (FullyQualifiedCreateRecommendedProductVariables | CreateRecommendedProductVariables)\n             ) | undefined);\n      hasAmbiguousIdentifier: false;\n      paramOnlyVariables: [];\n      hasReturnType: false;\n      acceptsModelInput: true;\n      hasCreateOrUpdateEffect: true;\n      imports: [ 'CreateRecommendedProductInput' ];\n      optionsType: CreateRecommendedProductOptions;\n      selectionType: AvailableRecommendedProductSelection;\n      schemaType: Query[\"recommendedProduct\"];\n      defaultSelection: typeof DefaultRecommendedProductSelection;\n    }\n  bulkCreate: {\n      /**\n        * Executes the bulkCreate action with the given inputs.\n        */\n       <Options extends CreateRecommendedProductOptions>(\n          inputs: (FullyQualifiedCreateRecommendedProductVariables | CreateRecommendedProductVariables)[],\n          options?: LimitToKnownKeys<Options, CreateRecommendedProductOptions>\n       ): Promise<CreateRecommendedProductResult<Options>[]>\n      type: 'action';\n      operationName: 'bulkCreateRecommendedProducts';\n      isBulk: true;\n      isDeleter: false;\n      hasReturnType: false;\n      acceptsModelInput: true;\n      operatesWithRecordIdentity: false;\n      singleActionFunctionName: 'create';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      modelSelectionField: typeof pluralModelApiIdentifier;\n      optionsType: CreateRecommendedProductOptions;\n      namespace: null;\n      variables: {\n          inputs: { required: true, type: '[BulkCreateRecommendedProductsInput!]' }\n        };\n      variablesType: (FullyQualifiedCreateRecommendedProductVariables | CreateRecommendedProductVariables)[];\n      paramOnlyVariables: [];\n      selectionType: AvailableRecommendedProductSelection;\n      schemaType: Query[\"recommendedProduct\"];\n      defaultSelection: typeof DefaultRecommendedProductSelection;\n    }\n  update: {\n      /**\n       * Executes the update actionon one record specified by `id`.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the flat style, all-params-together overload that most use cases should use.\n      *\n      * @example\n      * * const recommendedProductRecord = await api.recommendedProduct.update(\"1\", {\n        *   chatLog: {\n        *     _link: \"1\",\n        *   },\n        *   product: {\n        *     _link: \"1\",\n        *   },\n        * });\n      **/\n      <Options extends UpdateRecommendedProductOptions>(\n        id: string,\n        variables: UpdateRecommendedProductVariables,\n        options?: LimitToKnownKeys<Options, UpdateRecommendedProductOptions>\n      ): Promise<UpdateRecommendedProductResult<Options>>;\n      /**\n       * Executes the update actionon one record specified by `id`.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the fully qualified, nested api identifier style overload that should be used when there's an ambiguity between an action param and a model field.\n      *\n      * @example\n      * * const recommendedProductRecord = await api.recommendedProduct.update(\"1\", {\n        *   recommendedProduct: {\n        *     chatLog: {\n        *       _link: \"1\",\n        *     },\n        *     product: {\n        *       _link: \"1\",\n        *     },\n        *   },\n        * });\n      **/\n      <Options extends UpdateRecommendedProductOptions>(\n        id: string,\n        variables: FullyQualifiedUpdateRecommendedProductVariables,\n        options?: LimitToKnownKeys<Options, UpdateRecommendedProductOptions>\n      ): Promise<UpdateRecommendedProductResult<Options>>;\n      type: 'action';\n      operationName: 'updateRecommendedProduct';\n      operationReturnType: 'UpdateRecommendedProduct';\n      namespace: null;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      operatesWithRecordIdentity: true;\n      modelSelectionField: typeof modelApiIdentifier;\n      isBulk: false;\n      isDeleter: false;\n      variables: {\n          id: { required: true, type: 'GadgetID' },\n          recommendedProduct: { required: false, type: 'UpdateRecommendedProductInput' }\n        };\n      variablesType: (\n              { id: string }\n              & (FullyQualifiedUpdateRecommendedProductVariables | UpdateRecommendedProductVariables)\n            );\n      hasAmbiguousIdentifier: false;\n      paramOnlyVariables: [];\n      hasReturnType: false;\n      acceptsModelInput: true;\n      hasCreateOrUpdateEffect: true;\n      imports: [ 'UpdateRecommendedProductInput' ];\n      optionsType: UpdateRecommendedProductOptions;\n      selectionType: AvailableRecommendedProductSelection;\n      schemaType: Query[\"recommendedProduct\"];\n      defaultSelection: typeof DefaultRecommendedProductSelection;\n    }\n  bulkUpdate: {\n      /**\n        * Executes the bulkUpdate action with the given inputs.\n        */\n       <Options extends UpdateRecommendedProductOptions>(\n          inputs: (FullyQualifiedUpdateRecommendedProductVariables | UpdateRecommendedProductVariables & { id: string })[],\n          options?: LimitToKnownKeys<Options, UpdateRecommendedProductOptions>\n       ): Promise<UpdateRecommendedProductResult<Options>[]>\n      type: 'action';\n      operationName: 'bulkUpdateRecommendedProducts';\n      isBulk: true;\n      isDeleter: false;\n      hasReturnType: false;\n      acceptsModelInput: true;\n      operatesWithRecordIdentity: true;\n      singleActionFunctionName: 'update';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      modelSelectionField: typeof pluralModelApiIdentifier;\n      optionsType: UpdateRecommendedProductOptions;\n      namespace: null;\n      variables: {\n          inputs: { required: true, type: '[BulkUpdateRecommendedProductsInput!]' }\n        };\n      variablesType: (FullyQualifiedUpdateRecommendedProductVariables | UpdateRecommendedProductVariables & { id: string })[];\n      paramOnlyVariables: [];\n      selectionType: AvailableRecommendedProductSelection;\n      schemaType: Query[\"recommendedProduct\"];\n      defaultSelection: typeof DefaultRecommendedProductSelection;\n    }\n  delete: {\n      /**\n       * Executes the delete actionon one record specified by `id`.Deletes the record on the server. Returns a Promise that resolves if the delete succeeds.\n      *\n      * This is the fully qualified, nested api identifier style overload that should be used when there's an ambiguity between an action param and a model field.\n      *\n      * @example\n      * * await api.recommendedProduct.delete(\"1\");\n      **/\n      <Options extends DeleteRecommendedProductOptions>(\n        id: string,\n      \n        options?: LimitToKnownKeys<Options, DeleteRecommendedProductOptions>\n      ): Promise<DeleteRecommendedProductResult<Options>>;\n      type: 'action';\n      operationName: 'deleteRecommendedProduct';\n      operationReturnType: 'DeleteRecommendedProduct';\n      namespace: null;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      operatesWithRecordIdentity: true;\n      modelSelectionField: typeof modelApiIdentifier;\n      isBulk: false;\n      isDeleter: true;\n      variables: { id: { required: true, type: 'GadgetID' } };\n      variablesType: (\n              { id: string }\n              \n            );\n      hasAmbiguousIdentifier: false;\n      paramOnlyVariables: [];\n      hasReturnType: false;\n      acceptsModelInput: false;\n      hasCreateOrUpdateEffect: false;\n      imports: [];\n      optionsType: DeleteRecommendedProductOptions;\n      selectionType: Record<string, never>;\n      schemaType: null;\n      defaultSelection: null;\n    }\n  bulkDelete: {\n      /**\n        * Executes the bulkDelete action with the given inputs.Deletes the records on the server.\n        */\n       <Options extends DeleteRecommendedProductOptions>(\n          ids: string[],\n          options?: LimitToKnownKeys<Options, DeleteRecommendedProductOptions>\n       ): Promise<DeleteRecommendedProductResult<Options>[]>\n      type: 'action';\n      operationName: 'bulkDeleteRecommendedProducts';\n      isBulk: true;\n      isDeleter: true;\n      hasReturnType: false;\n      acceptsModelInput: false;\n      operatesWithRecordIdentity: true;\n      singleActionFunctionName: 'delete';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      modelSelectionField: typeof pluralModelApiIdentifier;\n      optionsType: DeleteRecommendedProductOptions;\n      namespace: null;\n      variables: { ids: { required: true, type: '[GadgetID!]' } };\n      variablesType: IDsList | undefined;\n      paramOnlyVariables: [];\n      selectionType: Record<string, never>;\n      schemaType: null;\n      defaultSelection: null;\n    }\n  upsert: {\n      /**\n       * Executes the upsert action.Accepts the parameters for the action via the `variables` argument.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the flat style, all-params-together overload that most use cases should use.\n      *\n      * @example\n      * * const result = await api.recommendedProduct.upsert({\n        *   chatLog: {\n        *     _link: \"1\",\n        *   },\n        *   id: \"1\",\n        *   product: {\n        *     _link: \"1\",\n        *   },\n        * });\n      **/\n      <Options extends UpsertRecommendedProductOptions>(\n      \n        variables: UpsertRecommendedProductVariables,\n        options?: LimitToKnownKeys<Options, UpsertRecommendedProductOptions>\n      ): Promise<UpsertRecommendedProductResult<Options>>;\n      /**\n       * Executes the upsert action.Accepts the parameters for the action via the `variables` argument.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the fully qualified, nested api identifier style overload that should be used when there's an ambiguity between an action param and a model field.\n      *\n      * @example\n      * * const result = await api.recommendedProduct.upsert({\n        *   recommendedProduct: {\n        *     chatLog: {\n        *       _link: \"1\",\n        *     },\n        *     id: \"1\",\n        *     product: {\n        *       _link: \"1\",\n        *     },\n        *   },\n        * });\n      **/\n      <Options extends UpsertRecommendedProductOptions>(\n      \n        variables: FullyQualifiedUpsertRecommendedProductVariables,\n        options?: LimitToKnownKeys<Options, UpsertRecommendedProductOptions>\n      ): Promise<UpsertRecommendedProductResult<Options>>;\n      type: 'action';\n      operationName: 'upsertRecommendedProduct';\n      operationReturnType: 'UpsertRecommendedProduct';\n      namespace: null;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      operatesWithRecordIdentity: false;\n      modelSelectionField: typeof modelApiIdentifier;\n      isBulk: false;\n      isDeleter: false;\n      variables: {\n          on: { required: false, type: '[String!]' },\n          recommendedProduct: { required: false, type: 'UpsertRecommendedProductInput' }\n        };\n      variablesType: ((\n               \n               & (FullyQualifiedUpsertRecommendedProductVariables | UpsertRecommendedProductVariables)\n             ) | undefined);\n      hasAmbiguousIdentifier: false;\n      paramOnlyVariables: [ 'on' ];\n      hasReturnType: {\n          '... on CreateRecommendedProductResult': { hasReturnType: false },\n          '... on UpdateRecommendedProductResult': { hasReturnType: false }\n        };\n      acceptsModelInput: true;\n      hasCreateOrUpdateEffect: true;\n      imports: [ 'Scalars', 'UpsertRecommendedProductInput' ];\n      optionsType: UpsertRecommendedProductOptions;\n      selectionType: AvailableRecommendedProductSelection;\n      schemaType: Query[\"recommendedProduct\"];\n      defaultSelection: typeof DefaultRecommendedProductSelection;\n    }\n  bulkUpsert: {\n      /**\n        * Executes the bulkUpsert action with the given inputs.\n        */\n       <Options extends UpsertRecommendedProductOptions>(\n          inputs: (FullyQualifiedUpsertRecommendedProductVariables | UpsertRecommendedProductVariables)[],\n          options?: LimitToKnownKeys<Options, UpsertRecommendedProductOptions>\n       ): Promise<any[]>\n      type: 'action';\n      operationName: 'bulkUpsertRecommendedProducts';\n      isBulk: true;\n      isDeleter: false;\n      hasReturnType: false;\n      acceptsModelInput: true;\n      operatesWithRecordIdentity: false;\n      singleActionFunctionName: 'upsert';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      modelSelectionField: typeof pluralModelApiIdentifier;\n      optionsType: UpsertRecommendedProductOptions;\n      namespace: null;\n      variables: {\n          inputs: { required: true, type: '[BulkUpsertRecommendedProductsInput!]' }\n        };\n      variablesType: (FullyQualifiedUpsertRecommendedProductVariables | UpsertRecommendedProductVariables)[];\n      paramOnlyVariables: [ 'on' ];\n      selectionType: AvailableRecommendedProductSelection;\n      schemaType: Query[\"recommendedProduct\"];\n      defaultSelection: typeof DefaultRecommendedProductSelection;\n    }\n  view: {\n      (query: string, variables?: Record<string, unknown>): Promise<unknown>\n      type: 'computedView';\n      operationName: 'view';\n      gqlFieldName: 'recommendedProductGellyView';\n      namespace: null;\n      imports: [];\n      variables: {\n          query: { type: 'String', required: true },\n          args: { type: 'JSONObject' }\n        };\n      variablesType: Record<string, unknown>;\n      resultType: Promise<unknown>;\n      plan: never;\n    }\n};\n\n/**\n * A manager for the recommendedProduct model with all the available operations for reading and writing to it.*/\nexport const RecommendedProductManager = buildModelManager(\n  modelApiIdentifier,\n  pluralModelApiIdentifier,\n  DefaultRecommendedProductSelection,\n  [\n    {\n      type: 'findOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultRecommendedProductSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultRecommendedProductSelection,\n      namespace: null\n    },\n    {\n      type: 'findMany',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultRecommendedProductSelection,\n      namespace: null\n    },\n    {\n      type: 'findFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultRecommendedProductSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultRecommendedProductSelection,\n      namespace: null\n    },\n    {\n      type: 'findOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'findById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultRecommendedProductSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'maybeFindById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultRecommendedProductSelection,\n      namespace: null\n    },\n    {\n      type: 'action',\n      operationName: 'createRecommendedProduct',\n      operationReturnType: 'CreateRecommendedProduct',\n      functionName: 'create',\n      namespace: null,\n      modelApiIdentifier: modelApiIdentifier,\n      operatesWithRecordIdentity: false,\n      modelSelectionField: modelApiIdentifier,\n      isBulk: false,\n      isDeleter: false,\n      variables: {\n        recommendedProduct: { required: false, type: 'CreateRecommendedProductInput' }\n      },\n      hasAmbiguousIdentifier: false,\n      paramOnlyVariables: [],\n      hasReturnType: false,\n      acceptsModelInput: true,\n      hasCreateOrUpdateEffect: true,\n      defaultSelection: DefaultRecommendedProductSelection\n    },\n    {\n      type: 'action',\n      operationName: 'bulkCreateRecommendedProducts',\n      functionName: 'bulkCreate',\n      isBulk: true,\n      isDeleter: false,\n      hasReturnType: false,\n      acceptsModelInput: true,\n      operatesWithRecordIdentity: false,\n      singleActionFunctionName: 'create',\n      modelApiIdentifier: modelApiIdentifier,\n      modelSelectionField: pluralModelApiIdentifier,\n      namespace: null,\n      variables: {\n        inputs: { required: true, type: '[BulkCreateRecommendedProductsInput!]' }\n      },\n      paramOnlyVariables: [],\n      defaultSelection: DefaultRecommendedProductSelection\n    },\n    {\n      type: 'action',\n      operationName: 'updateRecommendedProduct',\n      operationReturnType: 'UpdateRecommendedProduct',\n      functionName: 'update',\n      namespace: null,\n      modelApiIdentifier: modelApiIdentifier,\n      operatesWithRecordIdentity: true,\n      modelSelectionField: modelApiIdentifier,\n      isBulk: false,\n      isDeleter: false,\n      variables: {\n        id: { required: true, type: 'GadgetID' },\n        recommendedProduct: { required: false, type: 'UpdateRecommendedProductInput' }\n      },\n      hasAmbiguousIdentifier: false,\n      paramOnlyVariables: [],\n      hasReturnType: false,\n      acceptsModelInput: true,\n      hasCreateOrUpdateEffect: true,\n      defaultSelection: DefaultRecommendedProductSelection\n    },\n    {\n      type: 'action',\n      operationName: 'bulkUpdateRecommendedProducts',\n      functionName: 'bulkUpdate',\n      isBulk: true,\n      isDeleter: false,\n      hasReturnType: false,\n      acceptsModelInput: true,\n      operatesWithRecordIdentity: true,\n      singleActionFunctionName: 'update',\n      modelApiIdentifier: modelApiIdentifier,\n      modelSelectionField: pluralModelApiIdentifier,\n      namespace: null,\n      variables: {\n        inputs: { required: true, type: '[BulkUpdateRecommendedProductsInput!]' }\n      },\n      paramOnlyVariables: [],\n      defaultSelection: DefaultRecommendedProductSelection\n    },\n    {\n      type: 'action',\n      operationName: 'deleteRecommendedProduct',\n      operationReturnType: 'DeleteRecommendedProduct',\n      functionName: 'delete',\n      namespace: null,\n      modelApiIdentifier: modelApiIdentifier,\n      operatesWithRecordIdentity: true,\n      modelSelectionField: modelApiIdentifier,\n      isBulk: false,\n      isDeleter: true,\n      variables: { id: { required: true, type: 'GadgetID' } },\n      hasAmbiguousIdentifier: false,\n      paramOnlyVariables: [],\n      hasReturnType: false,\n      acceptsModelInput: false,\n      hasCreateOrUpdateEffect: false,\n      defaultSelection: null\n    },\n    {\n      type: 'action',\n      operationName: 'bulkDeleteRecommendedProducts',\n      functionName: 'bulkDelete',\n      isBulk: true,\n      isDeleter: true,\n      hasReturnType: false,\n      acceptsModelInput: false,\n      operatesWithRecordIdentity: true,\n      singleActionFunctionName: 'delete',\n      modelApiIdentifier: modelApiIdentifier,\n      modelSelectionField: pluralModelApiIdentifier,\n      namespace: null,\n      variables: { ids: { required: true, type: '[GadgetID!]' } },\n      paramOnlyVariables: [],\n      defaultSelection: null\n    },\n    {\n      type: 'action',\n      operationName: 'upsertRecommendedProduct',\n      operationReturnType: 'UpsertRecommendedProduct',\n      functionName: 'upsert',\n      namespace: null,\n      modelApiIdentifier: modelApiIdentifier,\n      operatesWithRecordIdentity: false,\n      modelSelectionField: modelApiIdentifier,\n      isBulk: false,\n      isDeleter: false,\n      variables: {\n        on: { required: false, type: '[String!]' },\n        recommendedProduct: { required: false, type: 'UpsertRecommendedProductInput' }\n      },\n      hasAmbiguousIdentifier: false,\n      paramOnlyVariables: [ 'on' ],\n      hasReturnType: {\n        '... on CreateRecommendedProductResult': { hasReturnType: false },\n        '... on UpdateRecommendedProductResult': { hasReturnType: false }\n      },\n      acceptsModelInput: true,\n      hasCreateOrUpdateEffect: true,\n      defaultSelection: DefaultRecommendedProductSelection\n    },\n    {\n      type: 'action',\n      operationName: 'bulkUpsertRecommendedProducts',\n      functionName: 'bulkUpsert',\n      isBulk: true,\n      isDeleter: false,\n      hasReturnType: false,\n      acceptsModelInput: true,\n      operatesWithRecordIdentity: false,\n      singleActionFunctionName: 'upsert',\n      modelApiIdentifier: modelApiIdentifier,\n      modelSelectionField: pluralModelApiIdentifier,\n      namespace: null,\n      variables: {\n        inputs: { required: true, type: '[BulkUpsertRecommendedProductsInput!]' }\n      },\n      paramOnlyVariables: [ 'on' ],\n      defaultSelection: DefaultRecommendedProductSelection\n    },\n    {\n      type: 'computedView',\n      operationName: 'view',\n      functionName: 'view',\n      gqlFieldName: 'recommendedProductGellyView',\n      namespace: null,\n      variables: {\n        query: { type: 'String', required: true },\n        args: { type: 'JSONObject' }\n      }\n    }\n  ] as const\n) as unknown as {\n  // Gadget generates these model manager classes at runtime dynamically, which means there is no source code for the class. This is done to make the bundle size of the client as small as possible, avoiding a bunch of repeated source code in favour of one small builder function. The TypeScript types above document the exact interface of the constructed class.\n  new(connection: GadgetConnection): RecommendedProductManager;\n};", "import {\n  GadgetConnection,\n  GadgetRecord,\n  GadgetRecordImplementation,\n  GadgetRecordList,\n  GadgetNonUniqueDataError,\n  actionRunner,\n  findManyRunner,\n  findOneRunner,\n  findOneByFieldRunner,\n  FieldSelection,\n  LimitToKnownKeys,\n  Selectable\n} from \"@gadgetinc/api-client-core\";\n\nimport {\n  Query,\n  ExplicitNestingRequired,\n\n  IDsList,\n  PromiseOrLiveIterator,\n  Warehouse,\n  AvailableWarehouseSelection,\n  WarehouseSort,\n  WarehouseFilter,\n  CreateWarehouseInput,\n  UpdateWarehouseInput,\n  Scalars,\n  UpsertWarehouseInput\n} from \"../types.js\";\n\nimport { buildModelManager } from \"../builder.js\";\nimport { AvailableSelection, AllFieldsSelected, DefaultSelection, Select, DeepFilterNever } from \"../utils.js\";\n\n/**\n* A type that holds only the selected fields (and nested fields) of warehouse. The present fields in the result type of this are dynamic based on the options to each call that uses it.\n* The selected fields are sometimes given by the `Options` at `Options[\"select\"]`, and if a selection isn't made in the options, we use the default selection from above.\n*/\nexport type SelectedWarehouseOrDefault<Options extends Selectable<AvailableWarehouseSelection>> = DeepFilterNever<\n    Select<\n      Warehouse,\n      DefaultSelection<\n        AvailableWarehouseSelection,\n        Options,\n        typeof DefaultWarehouseSelection\n      >\n    >\n  >;\n\n/**\n * A type that represents a `GadgetRecord` type for warehouse.\n * It selects all fields of the model by default. If you want to represent a record type with a subset of fields, you could pass in an object in the `Selection` type parameter.\n *\n * @example\n * ```ts\n * const someFunction = (record: WarehouseRecord, recordWithName: WarehouseRecord<{ select: { name: true; } }>) => {\n *   // The type of the `record` variable will include all fields of the model.\n *   const name = record.name;\n *   const otherField = record.otherField;\n *\n *   // The type of the `recordWithName` variable will only include the selected fields.\n *   const name = recordWithName.name;\n *   const otherField = recordWithName.otherField; // Type error: Property 'otherField' does not exist on type 'GadgetRecord<{ name: true; }>'.\n * }\n * ```\n */\nexport type WarehouseRecord<Selection extends AvailableWarehouseSelection | undefined = typeof DefaultWarehouseSelection> = DeepFilterNever<\n  GadgetRecord<\n    SelectedWarehouseOrDefault<{\n      select: Selection;\n    }>\n  >\n>;\n\nexport const DefaultWarehouseSelection = {\n     __typename: true,\n     id: true,\n     createdAt: true,\n     description: true,\n     description_ru: true,\n     ref: true,\n     site_key: true,\n     status: true,\n     updatedAt: true\n   } as const;\nconst modelApiIdentifier = \"warehouse\" as const;\nconst pluralModelApiIdentifier = \"warehouses\" as const;\n/** Options that can be passed to the `WarehouseManager#findOne` method */\n export interface FindOneWarehouseOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableWarehouseSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `WarehouseManager#maybeFindOne` method */\n export interface MaybeFindOneWarehouseOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableWarehouseSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `WarehouseManager#findMany` method */\n export interface FindManyWarehousesOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableWarehouseSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: WarehouseSort | WarehouseSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: WarehouseFilter | WarehouseFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n  first?: number | null;\n  last?: number | null;\n  after?: string | null;\n  before?: string | null;\n};\n/** Options that can be passed to the `WarehouseManager#findFirst` method */\n export interface FindFirstWarehouseOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableWarehouseSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: WarehouseSort | WarehouseSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: WarehouseFilter | WarehouseFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\n/** Options that can be passed to the `WarehouseManager#maybeFindFirst` method */\n export interface MaybeFindFirstWarehouseOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableWarehouseSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: WarehouseSort | WarehouseSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: WarehouseFilter | WarehouseFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\nexport interface CreateWarehouseOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableWarehouseSelection;\n};\nexport interface UpdateWarehouseOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableWarehouseSelection;\n};\nexport interface DeleteWarehouseOptions {\n\n};\nexport interface UpsertWarehouseOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableWarehouseSelection;\n};\n/**\n * The fully-qualified, expanded form of the inputs for executing the create action.\n * The flattened style should be preferred over this style, but for models with ambiguous API identifiers, this style can be used to remove any ambiguity.\n **/\nexport type FullyQualifiedCreateWarehouseVariables = {\n  warehouse?: CreateWarehouseInput;\n}\n/**\n * The inputs for executing create on warehouse.\n * This is the flattened style of inputs, suitable for general use, and should be preferred.\n **/\nexport type CreateWarehouseVariables = CreateWarehouseInput;\n/**\n * The return value from executing create on warehouse\n * Is a GadgetRecord of the model's type.\n **/\nexport type CreateWarehouseResult<Options extends CreateWarehouseOptions> = SelectedWarehouseOrDefault<Options> extends void ?\n      void :\n      GadgetRecord<SelectedWarehouseOrDefault<Options>>;\n/**\n * The fully-qualified, expanded form of the inputs for executing the update action.\n * The flattened style should be preferred over this style, but for models with ambiguous API identifiers, this style can be used to remove any ambiguity.\n **/\nexport type FullyQualifiedUpdateWarehouseVariables = {\n  warehouse?: UpdateWarehouseInput;\n}\n/**\n * The inputs for executing update on warehouse.\n * This is the flattened style of inputs, suitable for general use, and should be preferred.\n **/\nexport type UpdateWarehouseVariables = UpdateWarehouseInput;\n/**\n * The return value from executing update on warehouse\n * Is a GadgetRecord of the model's type.\n **/\nexport type UpdateWarehouseResult<Options extends UpdateWarehouseOptions> = SelectedWarehouseOrDefault<Options> extends void ?\n      void :\n      GadgetRecord<SelectedWarehouseOrDefault<Options>>;\n/**\n * The return value from executing delete on warehouse\n * Is void because this action deletes the record\n **/\nexport type DeleteWarehouseResult<Options extends DeleteWarehouseOptions> = void;\n/**\n * The fully-qualified, expanded form of the inputs for executing the upsert action.\n * The flattened style should be preferred over this style, but for models with ambiguous API identifiers, this style can be used to remove any ambiguity.\n **/\nexport type FullyQualifiedUpsertWarehouseVariables = {\n  on?: ((Scalars['String'] | null))[];\n  warehouse?: UpsertWarehouseInput;\n}\n/**\n * The inputs for executing upsert on warehouse.\n * This is the flattened style of inputs, suitable for general use, and should be preferred.\n **/\nexport type UpsertWarehouseVariables = Omit<\n     UpsertWarehouseInput,\n     \"on\"\n   > & {\n     on?: ((Scalars['String'] | null))[];\n   };\n/**\n * The return value from executing upsert on warehouse\n *\n **/\nexport type UpsertWarehouseResult<Options extends UpsertWarehouseOptions> = SelectedWarehouseOrDefault<Options> extends void ?\n      void :\n      GadgetRecord<SelectedWarehouseOrDefault<Options>>;\n\n/**\n * A manager for the warehouse model with all the available operations for reading and writing to it.*/\nexport type WarehouseManager = {\n  readonly connection: GadgetConnection;\n\n  findOne: {\n      /**\n       * Finds one warehouse by ID. Returns a `Promise` that resolves to the record if found and rejects the promise if the record isn't found.\n       **/\n      <Options extends FindOneWarehouseOptions>(id: string, options?: LimitToKnownKeys<Options, FindOneWarehouseOptions>): PromiseOrLiveIterator<Options,WarehouseRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultWarehouseSelection;\n      namespace: null;\n      optionsType: FindOneWarehouseOptions;\n      selectionType: AvailableWarehouseSelection;\n      schemaType: Query[\"warehouse\"];\n    }\n  maybeFindOne: {\n      /**\n       * Finds one warehouse by ID. Returns a `Promise` that resolves to the record if found and returns null otherwise.\n       **/\n      <Options extends MaybeFindOneWarehouseOptions>(id: string, options?: LimitToKnownKeys<Options, MaybeFindOneWarehouseOptions>): PromiseOrLiveIterator<Options,WarehouseRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: MaybeFindOneWarehouseOptions;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultWarehouseSelection;\n      namespace: null;\n      selectionType: AvailableWarehouseSelection;\n      schemaType: Query[\"warehouse\"];\n    }\n  findMany: {\n      /**\n       * Finds many warehouse. Returns a `Promise` for a `GadgetRecordList` of objects according to the passed `options`. Optionally filters the returned records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindManyWarehousesOptions>(options?: LimitToKnownKeys<Options, FindManyWarehousesOptions>): PromiseOrLiveIterator<Options,GadgetRecordList<WarehouseRecord<Options[\"select\"]>>>;\n      type: 'findMany';\n      operationName: typeof pluralModelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: FindManyWarehousesOptions;\n      defaultSelection: typeof DefaultWarehouseSelection;\n      namespace: null;\n      selectionType: AvailableWarehouseSelection;\n      schemaType: Query[\"warehouse\"];\n    }\n  findFirst: {\n      /**\n       * Finds the first matching warehouse. Returns a `Promise` that resolves to a record if found and rejects the promise if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindFirstWarehouseOptions>(options?: LimitToKnownKeys<Options, FindFirstWarehouseOptions>): PromiseOrLiveIterator<Options,WarehouseRecord<Options[\"select\"]>>;\n      type: 'findFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: FindFirstWarehouseOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultWarehouseSelection;\n      namespace: null;\n      selectionType: AvailableWarehouseSelection;\n      schemaType: Query[\"warehouse\"];\n    }\n  maybeFindFirst: {\n      /**\n       * Finds the first matching warehouse. Returns a `Promise` that resolves to a record if found, or null if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` pagination options.\n       **/\n      <Options extends MaybeFindFirstWarehouseOptions>(options?: LimitToKnownKeys<Options, MaybeFindFirstWarehouseOptions>): PromiseOrLiveIterator<Options,WarehouseRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: MaybeFindFirstWarehouseOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultWarehouseSelection;\n      namespace: null;\n      selectionType: AvailableWarehouseSelection;\n      schemaType: Query[\"warehouse\"];\n    }\n  findById: {\n      /**\n      * Finds one warehouse by its id. Returns a Promise that resolves to the record if found and rejects the promise if the record isn't found.\n      **/\n      <Options extends FindOneWarehouseOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneWarehouseOptions>): PromiseOrLiveIterator<Options,WarehouseRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneWarehouseOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultWarehouseSelection;\n      namespace: null;\n      selectionType: AvailableWarehouseSelection;\n      schemaType: Query[\"warehouse\"];\n    }\n  maybeFindById: {\n      /**\n      * Finds one warehouse by its id. Returns a Promise that resolves to the record if found and returns null if the record isn't found.\n      **/\n      <Options extends FindOneWarehouseOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneWarehouseOptions>): Promise<WarehouseRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneWarehouseOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultWarehouseSelection;\n      namespace: null;\n      selectionType: AvailableWarehouseSelection;\n      schemaType: Query[\"warehouse\"];\n    }\n  create: {\n      /**\n       * Executes the create action.Accepts the parameters for the action via the `variables` argument.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the flat style, all-params-together overload that most use cases should use.\n      *\n      * @example\n      * * const warehouseRecord = await api.warehouse.create({\n        *   description: \"example value for description\",\n        *   description_ru: \"example value for description_ru\",\n        *   ref: \"example value for ref\",\n        *   site_key: 123,\n        *   status: \"example value for status\",\n        * });\n      **/\n      <Options extends CreateWarehouseOptions>(\n      \n        variables: CreateWarehouseVariables,\n        options?: LimitToKnownKeys<Options, CreateWarehouseOptions>\n      ): Promise<CreateWarehouseResult<Options>>;\n      /**\n       * Executes the create action.Accepts the parameters for the action via the `variables` argument.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the fully qualified, nested api identifier style overload that should be used when there's an ambiguity between an action param and a model field.\n      *\n      * @example\n      * * const warehouseRecord = await api.warehouse.create({\n        *   warehouse: {\n        *     description: \"example value for description\",\n        *     description_ru: \"example value for description_ru\",\n        *     ref: \"example value for ref\",\n        *     site_key: 123,\n        *     status: \"example value for status\",\n        *   },\n        * });\n      **/\n      <Options extends CreateWarehouseOptions>(\n      \n        variables: FullyQualifiedCreateWarehouseVariables,\n        options?: LimitToKnownKeys<Options, CreateWarehouseOptions>\n      ): Promise<CreateWarehouseResult<Options>>;\n      type: 'action';\n      operationName: 'createWarehouse';\n      operationReturnType: 'CreateWarehouse';\n      namespace: null;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      operatesWithRecordIdentity: false;\n      modelSelectionField: typeof modelApiIdentifier;\n      isBulk: false;\n      isDeleter: false;\n      variables: { warehouse: { required: false, type: 'CreateWarehouseInput' } };\n      variablesType: ((\n               \n               & (FullyQualifiedCreateWarehouseVariables | CreateWarehouseVariables)\n             ) | undefined);\n      hasAmbiguousIdentifier: false;\n      paramOnlyVariables: [];\n      hasReturnType: false;\n      acceptsModelInput: true;\n      hasCreateOrUpdateEffect: true;\n      imports: [ 'CreateWarehouseInput' ];\n      optionsType: CreateWarehouseOptions;\n      selectionType: AvailableWarehouseSelection;\n      schemaType: Query[\"warehouse\"];\n      defaultSelection: typeof DefaultWarehouseSelection;\n    }\n  bulkCreate: {\n      /**\n        * Executes the bulkCreate action with the given inputs.\n        */\n       <Options extends CreateWarehouseOptions>(\n          inputs: (FullyQualifiedCreateWarehouseVariables | CreateWarehouseVariables)[],\n          options?: LimitToKnownKeys<Options, CreateWarehouseOptions>\n       ): Promise<CreateWarehouseResult<Options>[]>\n      type: 'action';\n      operationName: 'bulkCreateWarehouses';\n      isBulk: true;\n      isDeleter: false;\n      hasReturnType: false;\n      acceptsModelInput: true;\n      operatesWithRecordIdentity: false;\n      singleActionFunctionName: 'create';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      modelSelectionField: typeof pluralModelApiIdentifier;\n      optionsType: CreateWarehouseOptions;\n      namespace: null;\n      variables: { inputs: { required: true, type: '[BulkCreateWarehousesInput!]' } };\n      variablesType: (FullyQualifiedCreateWarehouseVariables | CreateWarehouseVariables)[];\n      paramOnlyVariables: [];\n      selectionType: AvailableWarehouseSelection;\n      schemaType: Query[\"warehouse\"];\n      defaultSelection: typeof DefaultWarehouseSelection;\n    }\n  update: {\n      /**\n       * Executes the update actionon one record specified by `id`.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the flat style, all-params-together overload that most use cases should use.\n      *\n      * @example\n      * * const warehouseRecord = await api.warehouse.update(\"1\", {\n        *   description: \"example value for description\",\n        *   description_ru: \"example value for description_ru\",\n        *   ref: \"example value for ref\",\n        *   site_key: 123,\n        *   status: \"example value for status\",\n        * });\n      **/\n      <Options extends UpdateWarehouseOptions>(\n        id: string,\n        variables: UpdateWarehouseVariables,\n        options?: LimitToKnownKeys<Options, UpdateWarehouseOptions>\n      ): Promise<UpdateWarehouseResult<Options>>;\n      /**\n       * Executes the update actionon one record specified by `id`.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the fully qualified, nested api identifier style overload that should be used when there's an ambiguity between an action param and a model field.\n      *\n      * @example\n      * * const warehouseRecord = await api.warehouse.update(\"1\", {\n        *   warehouse: {\n        *     description: \"example value for description\",\n        *     description_ru: \"example value for description_ru\",\n        *     ref: \"example value for ref\",\n        *     site_key: 123,\n        *     status: \"example value for status\",\n        *   },\n        * });\n      **/\n      <Options extends UpdateWarehouseOptions>(\n        id: string,\n        variables: FullyQualifiedUpdateWarehouseVariables,\n        options?: LimitToKnownKeys<Options, UpdateWarehouseOptions>\n      ): Promise<UpdateWarehouseResult<Options>>;\n      type: 'action';\n      operationName: 'updateWarehouse';\n      operationReturnType: 'UpdateWarehouse';\n      namespace: null;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      operatesWithRecordIdentity: true;\n      modelSelectionField: typeof modelApiIdentifier;\n      isBulk: false;\n      isDeleter: false;\n      variables: {\n          id: { required: true, type: 'GadgetID' },\n          warehouse: { required: false, type: 'UpdateWarehouseInput' }\n        };\n      variablesType: (\n              { id: string }\n              & (FullyQualifiedUpdateWarehouseVariables | UpdateWarehouseVariables)\n            );\n      hasAmbiguousIdentifier: false;\n      paramOnlyVariables: [];\n      hasReturnType: false;\n      acceptsModelInput: true;\n      hasCreateOrUpdateEffect: true;\n      imports: [ 'UpdateWarehouseInput' ];\n      optionsType: UpdateWarehouseOptions;\n      selectionType: AvailableWarehouseSelection;\n      schemaType: Query[\"warehouse\"];\n      defaultSelection: typeof DefaultWarehouseSelection;\n    }\n  bulkUpdate: {\n      /**\n        * Executes the bulkUpdate action with the given inputs.\n        */\n       <Options extends UpdateWarehouseOptions>(\n          inputs: (FullyQualifiedUpdateWarehouseVariables | UpdateWarehouseVariables & { id: string })[],\n          options?: LimitToKnownKeys<Options, UpdateWarehouseOptions>\n       ): Promise<UpdateWarehouseResult<Options>[]>\n      type: 'action';\n      operationName: 'bulkUpdateWarehouses';\n      isBulk: true;\n      isDeleter: false;\n      hasReturnType: false;\n      acceptsModelInput: true;\n      operatesWithRecordIdentity: true;\n      singleActionFunctionName: 'update';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      modelSelectionField: typeof pluralModelApiIdentifier;\n      optionsType: UpdateWarehouseOptions;\n      namespace: null;\n      variables: { inputs: { required: true, type: '[BulkUpdateWarehousesInput!]' } };\n      variablesType: (FullyQualifiedUpdateWarehouseVariables | UpdateWarehouseVariables & { id: string })[];\n      paramOnlyVariables: [];\n      selectionType: AvailableWarehouseSelection;\n      schemaType: Query[\"warehouse\"];\n      defaultSelection: typeof DefaultWarehouseSelection;\n    }\n  delete: {\n      /**\n       * Executes the delete actionon one record specified by `id`.Deletes the record on the server. Returns a Promise that resolves if the delete succeeds.\n      *\n      * This is the fully qualified, nested api identifier style overload that should be used when there's an ambiguity between an action param and a model field.\n      *\n      * @example\n      * * await api.warehouse.delete(\"1\");\n      **/\n      <Options extends DeleteWarehouseOptions>(\n        id: string,\n      \n        options?: LimitToKnownKeys<Options, DeleteWarehouseOptions>\n      ): Promise<DeleteWarehouseResult<Options>>;\n      type: 'action';\n      operationName: 'deleteWarehouse';\n      operationReturnType: 'DeleteWarehouse';\n      namespace: null;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      operatesWithRecordIdentity: true;\n      modelSelectionField: typeof modelApiIdentifier;\n      isBulk: false;\n      isDeleter: true;\n      variables: { id: { required: true, type: 'GadgetID' } };\n      variablesType: (\n              { id: string }\n              \n            );\n      hasAmbiguousIdentifier: false;\n      paramOnlyVariables: [];\n      hasReturnType: false;\n      acceptsModelInput: false;\n      hasCreateOrUpdateEffect: false;\n      imports: [];\n      optionsType: DeleteWarehouseOptions;\n      selectionType: Record<string, never>;\n      schemaType: null;\n      defaultSelection: null;\n    }\n  bulkDelete: {\n      /**\n        * Executes the bulkDelete action with the given inputs.Deletes the records on the server.\n        */\n       <Options extends DeleteWarehouseOptions>(\n          ids: string[],\n          options?: LimitToKnownKeys<Options, DeleteWarehouseOptions>\n       ): Promise<DeleteWarehouseResult<Options>[]>\n      type: 'action';\n      operationName: 'bulkDeleteWarehouses';\n      isBulk: true;\n      isDeleter: true;\n      hasReturnType: false;\n      acceptsModelInput: false;\n      operatesWithRecordIdentity: true;\n      singleActionFunctionName: 'delete';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      modelSelectionField: typeof pluralModelApiIdentifier;\n      optionsType: DeleteWarehouseOptions;\n      namespace: null;\n      variables: { ids: { required: true, type: '[GadgetID!]' } };\n      variablesType: IDsList | undefined;\n      paramOnlyVariables: [];\n      selectionType: Record<string, never>;\n      schemaType: null;\n      defaultSelection: null;\n    }\n  upsert: {\n      /**\n       * Executes the upsert action.Accepts the parameters for the action via the `variables` argument.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the flat style, all-params-together overload that most use cases should use.\n      *\n      * @example\n      * * const result = await api.warehouse.upsert({\n        *   description: \"example value for description\",\n        *   description_ru: \"example value for description_ru\",\n        *   id: \"1\",\n        *   site_key: 123,\n        *   status: \"example value for status\",\n        * });\n      **/\n      <Options extends UpsertWarehouseOptions>(\n      \n        variables: UpsertWarehouseVariables,\n        options?: LimitToKnownKeys<Options, UpsertWarehouseOptions>\n      ): Promise<UpsertWarehouseResult<Options>>;\n      /**\n       * Executes the upsert action.Accepts the parameters for the action via the `variables` argument.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the fully qualified, nested api identifier style overload that should be used when there's an ambiguity between an action param and a model field.\n      *\n      * @example\n      * * const result = await api.warehouse.upsert({\n        *   warehouse: {\n        *     description: \"example value for description\",\n        *     description_ru: \"example value for description_ru\",\n        *     id: \"1\",\n        *     site_key: 123,\n        *     status: \"example value for status\",\n        *   },\n        * });\n      **/\n      <Options extends UpsertWarehouseOptions>(\n      \n        variables: FullyQualifiedUpsertWarehouseVariables,\n        options?: LimitToKnownKeys<Options, UpsertWarehouseOptions>\n      ): Promise<UpsertWarehouseResult<Options>>;\n      type: 'action';\n      operationName: 'upsertWarehouse';\n      operationReturnType: 'UpsertWarehouse';\n      namespace: null;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      operatesWithRecordIdentity: false;\n      modelSelectionField: typeof modelApiIdentifier;\n      isBulk: false;\n      isDeleter: false;\n      variables: {\n          on: { required: false, type: '[String!]' },\n          warehouse: { required: false, type: 'UpsertWarehouseInput' }\n        };\n      variablesType: ((\n               \n               & (FullyQualifiedUpsertWarehouseVariables | UpsertWarehouseVariables)\n             ) | undefined);\n      hasAmbiguousIdentifier: false;\n      paramOnlyVariables: [ 'on' ];\n      hasReturnType: {\n          '... on CreateWarehouseResult': { hasReturnType: false },\n          '... on UpdateWarehouseResult': { hasReturnType: false }\n        };\n      acceptsModelInput: true;\n      hasCreateOrUpdateEffect: true;\n      imports: [ 'Scalars', 'UpsertWarehouseInput' ];\n      optionsType: UpsertWarehouseOptions;\n      selectionType: AvailableWarehouseSelection;\n      schemaType: Query[\"warehouse\"];\n      defaultSelection: typeof DefaultWarehouseSelection;\n    }\n  bulkUpsert: {\n      /**\n        * Executes the bulkUpsert action with the given inputs.\n        */\n       <Options extends UpsertWarehouseOptions>(\n          inputs: (FullyQualifiedUpsertWarehouseVariables | UpsertWarehouseVariables)[],\n          options?: LimitToKnownKeys<Options, UpsertWarehouseOptions>\n       ): Promise<any[]>\n      type: 'action';\n      operationName: 'bulkUpsertWarehouses';\n      isBulk: true;\n      isDeleter: false;\n      hasReturnType: false;\n      acceptsModelInput: true;\n      operatesWithRecordIdentity: false;\n      singleActionFunctionName: 'upsert';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      modelSelectionField: typeof pluralModelApiIdentifier;\n      optionsType: UpsertWarehouseOptions;\n      namespace: null;\n      variables: { inputs: { required: true, type: '[BulkUpsertWarehousesInput!]' } };\n      variablesType: (FullyQualifiedUpsertWarehouseVariables | UpsertWarehouseVariables)[];\n      paramOnlyVariables: [ 'on' ];\n      selectionType: AvailableWarehouseSelection;\n      schemaType: Query[\"warehouse\"];\n      defaultSelection: typeof DefaultWarehouseSelection;\n    }\n  view: {\n      (query: string, variables?: Record<string, unknown>): Promise<unknown>\n      type: 'computedView';\n      operationName: 'view';\n      gqlFieldName: 'warehouseGellyView';\n      namespace: null;\n      imports: [];\n      variables: {\n          query: { type: 'String', required: true },\n          args: { type: 'JSONObject' }\n        };\n      variablesType: Record<string, unknown>;\n      resultType: Promise<unknown>;\n      plan: never;\n    }\n};\n\n/**\n * A manager for the warehouse model with all the available operations for reading and writing to it.*/\nexport const WarehouseManager = buildModelManager(\n  modelApiIdentifier,\n  pluralModelApiIdentifier,\n  DefaultWarehouseSelection,\n  [\n    {\n      type: 'findOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultWarehouseSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultWarehouseSelection,\n      namespace: null\n    },\n    {\n      type: 'findMany',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultWarehouseSelection,\n      namespace: null\n    },\n    {\n      type: 'findFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultWarehouseSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultWarehouseSelection,\n      namespace: null\n    },\n    {\n      type: 'findOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'findById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultWarehouseSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'maybeFindById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultWarehouseSelection,\n      namespace: null\n    },\n    {\n      type: 'action',\n      operationName: 'createWarehouse',\n      operationReturnType: 'CreateWarehouse',\n      functionName: 'create',\n      namespace: null,\n      modelApiIdentifier: modelApiIdentifier,\n      operatesWithRecordIdentity: false,\n      modelSelectionField: modelApiIdentifier,\n      isBulk: false,\n      isDeleter: false,\n      variables: { warehouse: { required: false, type: 'CreateWarehouseInput' } },\n      hasAmbiguousIdentifier: false,\n      paramOnlyVariables: [],\n      hasReturnType: false,\n      acceptsModelInput: true,\n      hasCreateOrUpdateEffect: true,\n      defaultSelection: DefaultWarehouseSelection\n    },\n    {\n      type: 'action',\n      operationName: 'bulkCreateWarehouses',\n      functionName: 'bulkCreate',\n      isBulk: true,\n      isDeleter: false,\n      hasReturnType: false,\n      acceptsModelInput: true,\n      operatesWithRecordIdentity: false,\n      singleActionFunctionName: 'create',\n      modelApiIdentifier: modelApiIdentifier,\n      modelSelectionField: pluralModelApiIdentifier,\n      namespace: null,\n      variables: {\n        inputs: { required: true, type: '[BulkCreateWarehousesInput!]' }\n      },\n      paramOnlyVariables: [],\n      defaultSelection: DefaultWarehouseSelection\n    },\n    {\n      type: 'action',\n      operationName: 'updateWarehouse',\n      operationReturnType: 'UpdateWarehouse',\n      functionName: 'update',\n      namespace: null,\n      modelApiIdentifier: modelApiIdentifier,\n      operatesWithRecordIdentity: true,\n      modelSelectionField: modelApiIdentifier,\n      isBulk: false,\n      isDeleter: false,\n      variables: {\n        id: { required: true, type: 'GadgetID' },\n        warehouse: { required: false, type: 'UpdateWarehouseInput' }\n      },\n      hasAmbiguousIdentifier: false,\n      paramOnlyVariables: [],\n      hasReturnType: false,\n      acceptsModelInput: true,\n      hasCreateOrUpdateEffect: true,\n      defaultSelection: DefaultWarehouseSelection\n    },\n    {\n      type: 'action',\n      operationName: 'bulkUpdateWarehouses',\n      functionName: 'bulkUpdate',\n      isBulk: true,\n      isDeleter: false,\n      hasReturnType: false,\n      acceptsModelInput: true,\n      operatesWithRecordIdentity: true,\n      singleActionFunctionName: 'update',\n      modelApiIdentifier: modelApiIdentifier,\n      modelSelectionField: pluralModelApiIdentifier,\n      namespace: null,\n      variables: {\n        inputs: { required: true, type: '[BulkUpdateWarehousesInput!]' }\n      },\n      paramOnlyVariables: [],\n      defaultSelection: DefaultWarehouseSelection\n    },\n    {\n      type: 'action',\n      operationName: 'deleteWarehouse',\n      operationReturnType: 'DeleteWarehouse',\n      functionName: 'delete',\n      namespace: null,\n      modelApiIdentifier: modelApiIdentifier,\n      operatesWithRecordIdentity: true,\n      modelSelectionField: modelApiIdentifier,\n      isBulk: false,\n      isDeleter: true,\n      variables: { id: { required: true, type: 'GadgetID' } },\n      hasAmbiguousIdentifier: false,\n      paramOnlyVariables: [],\n      hasReturnType: false,\n      acceptsModelInput: false,\n      hasCreateOrUpdateEffect: false,\n      defaultSelection: null\n    },\n    {\n      type: 'action',\n      operationName: 'bulkDeleteWarehouses',\n      functionName: 'bulkDelete',\n      isBulk: true,\n      isDeleter: true,\n      hasReturnType: false,\n      acceptsModelInput: false,\n      operatesWithRecordIdentity: true,\n      singleActionFunctionName: 'delete',\n      modelApiIdentifier: modelApiIdentifier,\n      modelSelectionField: pluralModelApiIdentifier,\n      namespace: null,\n      variables: { ids: { required: true, type: '[GadgetID!]' } },\n      paramOnlyVariables: [],\n      defaultSelection: null\n    },\n    {\n      type: 'action',\n      operationName: 'upsertWarehouse',\n      operationReturnType: 'UpsertWarehouse',\n      functionName: 'upsert',\n      namespace: null,\n      modelApiIdentifier: modelApiIdentifier,\n      operatesWithRecordIdentity: false,\n      modelSelectionField: modelApiIdentifier,\n      isBulk: false,\n      isDeleter: false,\n      variables: {\n        on: { required: false, type: '[String!]' },\n        warehouse: { required: false, type: 'UpsertWarehouseInput' }\n      },\n      hasAmbiguousIdentifier: false,\n      paramOnlyVariables: [ 'on' ],\n      hasReturnType: {\n        '... on CreateWarehouseResult': { hasReturnType: false },\n        '... on UpdateWarehouseResult': { hasReturnType: false }\n      },\n      acceptsModelInput: true,\n      hasCreateOrUpdateEffect: true,\n      defaultSelection: DefaultWarehouseSelection\n    },\n    {\n      type: 'action',\n      operationName: 'bulkUpsertWarehouses',\n      functionName: 'bulkUpsert',\n      isBulk: true,\n      isDeleter: false,\n      hasReturnType: false,\n      acceptsModelInput: true,\n      operatesWithRecordIdentity: false,\n      singleActionFunctionName: 'upsert',\n      modelApiIdentifier: modelApiIdentifier,\n      modelSelectionField: pluralModelApiIdentifier,\n      namespace: null,\n      variables: {\n        inputs: { required: true, type: '[BulkUpsertWarehousesInput!]' }\n      },\n      paramOnlyVariables: [ 'on' ],\n      defaultSelection: DefaultWarehouseSelection\n    },\n    {\n      type: 'computedView',\n      operationName: 'view',\n      functionName: 'view',\n      gqlFieldName: 'warehouseGellyView',\n      namespace: null,\n      variables: {\n        query: { type: 'String', required: true },\n        args: { type: 'JSONObject' }\n      }\n    }\n  ] as const\n) as unknown as {\n  // Gadget generates these model manager classes at runtime dynamically, which means there is no source code for the class. This is done to make the bundle size of the client as small as possible, avoiding a bunch of repeated source code in favour of one small builder function. The TypeScript types above document the exact interface of the constructed class.\n  new(connection: GadgetConnection): WarehouseManager;\n};", "import {\n  GadgetConnection,\n  GadgetRecord,\n  GadgetRecordImplementation,\n  GadgetRecordList,\n  GadgetNonUniqueDataError,\n  actionRunner,\n  findManyRunner,\n  findOneRunner,\n  findOneByFieldRunner,\n  FieldSelection,\n  LimitToKnownKeys,\n  Selectable\n} from \"@gadgetinc/api-client-core\";\n\nimport {\n  Query,\n  ExplicitNestingRequired,\n\n  IDsList,\n  PromiseOrLiveIterator,\n  ShopifyCompany,\n  AvailableShopifyCompanySelection,\n  ShopifyCompanySort,\n  ShopifyCompanyFilter\n} from \"../types.js\";\n\nimport { buildModelManager } from \"../builder.js\";\nimport { AvailableSelection, AllFieldsSelected, DefaultSelection, Select, DeepFilterNever } from \"../utils.js\";\n\n/**\n* A type that holds only the selected fields (and nested fields) of shopifyCompany. The present fields in the result type of this are dynamic based on the options to each call that uses it.\n* The selected fields are sometimes given by the `Options` at `Options[\"select\"]`, and if a selection isn't made in the options, we use the default selection from above.\n*/\nexport type SelectedShopifyCompanyOrDefault<Options extends Selectable<AvailableShopifyCompanySelection>> = DeepFilterNever<\n    Select<\n      ShopifyCompany,\n      DefaultSelection<\n        AvailableShopifyCompanySelection,\n        Options,\n        typeof DefaultShopifyCompanySelection\n      >\n    >\n  >;\n\n/**\n * A type that represents a `GadgetRecord` type for shopifyCompany.\n * It selects all fields of the model by default. If you want to represent a record type with a subset of fields, you could pass in an object in the `Selection` type parameter.\n *\n * @example\n * ```ts\n * const someFunction = (record: ShopifyCompanyRecord, recordWithName: ShopifyCompanyRecord<{ select: { name: true; } }>) => {\n *   // The type of the `record` variable will include all fields of the model.\n *   const name = record.name;\n *   const otherField = record.otherField;\n *\n *   // The type of the `recordWithName` variable will only include the selected fields.\n *   const name = recordWithName.name;\n *   const otherField = recordWithName.otherField; // Type error: Property 'otherField' does not exist on type 'GadgetRecord<{ name: true; }>'.\n * }\n * ```\n */\nexport type ShopifyCompanyRecord<Selection extends AvailableShopifyCompanySelection | undefined = typeof DefaultShopifyCompanySelection> = DeepFilterNever<\n  GadgetRecord<\n    SelectedShopifyCompanyOrDefault<{\n      select: Selection;\n    }>\n  >\n>;\n\nexport const DefaultShopifyCompanySelection = {\n     __typename: true,\n     id: true,\n     contactCount: true,\n     contactsCount: true,\n     createdAt: true,\n     customerSince: true,\n     defaultRoleId: true,\n     externalId: true,\n     lifetimeDuration: true,\n     locationsCount: true,\n     name: true,\n     note: true,\n     ordersCount: true,\n     shopId: true,\n     shopifyCompanyId: true,\n     shopifyCreatedAt: true,\n     shopifyUpdatedAt: true,\n     totalSpent: true,\n     updatedAt: true\n   } as const;\nconst modelApiIdentifier = \"shopifyCompany\" as const;\nconst pluralModelApiIdentifier = \"shopifyCompanies\" as const;\n/** Options that can be passed to the `ShopifyCompanyManager#findOne` method */\n export interface FindOneShopifyCompanyOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCompanySelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `ShopifyCompanyManager#maybeFindOne` method */\n export interface MaybeFindOneShopifyCompanyOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCompanySelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `ShopifyCompanyManager#findMany` method */\n export interface FindManyShopifyCompaniesOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCompanySelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyCompanySort | ShopifyCompanySort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyCompanyFilter | ShopifyCompanyFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n  first?: number | null;\n  last?: number | null;\n  after?: string | null;\n  before?: string | null;\n};\n/** Options that can be passed to the `ShopifyCompanyManager#findFirst` method */\n export interface FindFirstShopifyCompanyOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCompanySelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyCompanySort | ShopifyCompanySort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyCompanyFilter | ShopifyCompanyFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\n/** Options that can be passed to the `ShopifyCompanyManager#maybeFindFirst` method */\n export interface MaybeFindFirstShopifyCompanyOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCompanySelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyCompanySort | ShopifyCompanySort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyCompanyFilter | ShopifyCompanyFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\nexport interface CreateShopifyCompanyOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCompanySelection;\n};\nexport interface UpdateShopifyCompanyOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCompanySelection;\n};\nexport interface DeleteShopifyCompanyOptions {\n\n};\n\n/**\n * A manager for the shopifyCompany model with all the available operations for reading and writing to it.*/\nexport type ShopifyCompanyManager = {\n  readonly connection: GadgetConnection;\n\n  findOne: {\n      /**\n       * Finds one shopifyCompany by ID. Returns a `Promise` that resolves to the record if found and rejects the promise if the record isn't found.\n       **/\n      <Options extends FindOneShopifyCompanyOptions>(id: string, options?: LimitToKnownKeys<Options, FindOneShopifyCompanyOptions>): PromiseOrLiveIterator<Options,ShopifyCompanyRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultShopifyCompanySelection;\n      namespace: null;\n      optionsType: FindOneShopifyCompanyOptions;\n      selectionType: AvailableShopifyCompanySelection;\n      schemaType: Query[\"shopifyCompany\"];\n    }\n  maybeFindOne: {\n      /**\n       * Finds one shopifyCompany by ID. Returns a `Promise` that resolves to the record if found and returns null otherwise.\n       **/\n      <Options extends MaybeFindOneShopifyCompanyOptions>(id: string, options?: LimitToKnownKeys<Options, MaybeFindOneShopifyCompanyOptions>): PromiseOrLiveIterator<Options,ShopifyCompanyRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: MaybeFindOneShopifyCompanyOptions;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultShopifyCompanySelection;\n      namespace: null;\n      selectionType: AvailableShopifyCompanySelection;\n      schemaType: Query[\"shopifyCompany\"];\n    }\n  findMany: {\n      /**\n       * Finds many shopifyCompany. Returns a `Promise` for a `GadgetRecordList` of objects according to the passed `options`. Optionally filters the returned records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindManyShopifyCompaniesOptions>(options?: LimitToKnownKeys<Options, FindManyShopifyCompaniesOptions>): PromiseOrLiveIterator<Options,GadgetRecordList<ShopifyCompanyRecord<Options[\"select\"]>>>;\n      type: 'findMany';\n      operationName: typeof pluralModelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: FindManyShopifyCompaniesOptions;\n      defaultSelection: typeof DefaultShopifyCompanySelection;\n      namespace: null;\n      selectionType: AvailableShopifyCompanySelection;\n      schemaType: Query[\"shopifyCompany\"];\n    }\n  findFirst: {\n      /**\n       * Finds the first matching shopifyCompany. Returns a `Promise` that resolves to a record if found and rejects the promise if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindFirstShopifyCompanyOptions>(options?: LimitToKnownKeys<Options, FindFirstShopifyCompanyOptions>): PromiseOrLiveIterator<Options,ShopifyCompanyRecord<Options[\"select\"]>>;\n      type: 'findFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: FindFirstShopifyCompanyOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyCompanySelection;\n      namespace: null;\n      selectionType: AvailableShopifyCompanySelection;\n      schemaType: Query[\"shopifyCompany\"];\n    }\n  maybeFindFirst: {\n      /**\n       * Finds the first matching shopifyCompany. Returns a `Promise` that resolves to a record if found, or null if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` pagination options.\n       **/\n      <Options extends MaybeFindFirstShopifyCompanyOptions>(options?: LimitToKnownKeys<Options, MaybeFindFirstShopifyCompanyOptions>): PromiseOrLiveIterator<Options,ShopifyCompanyRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: MaybeFindFirstShopifyCompanyOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyCompanySelection;\n      namespace: null;\n      selectionType: AvailableShopifyCompanySelection;\n      schemaType: Query[\"shopifyCompany\"];\n    }\n  findById: {\n      /**\n      * Finds one shopifyCompany by its id. Returns a Promise that resolves to the record if found and rejects the promise if the record isn't found.\n      **/\n      <Options extends FindOneShopifyCompanyOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneShopifyCompanyOptions>): PromiseOrLiveIterator<Options,ShopifyCompanyRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneShopifyCompanyOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyCompanySelection;\n      namespace: null;\n      selectionType: AvailableShopifyCompanySelection;\n      schemaType: Query[\"shopifyCompany\"];\n    }\n  maybeFindById: {\n      /**\n      * Finds one shopifyCompany by its id. Returns a Promise that resolves to the record if found and returns null if the record isn't found.\n      **/\n      <Options extends FindOneShopifyCompanyOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneShopifyCompanyOptions>): Promise<ShopifyCompanyRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneShopifyCompanyOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyCompanySelection;\n      namespace: null;\n      selectionType: AvailableShopifyCompanySelection;\n      schemaType: Query[\"shopifyCompany\"];\n    }\n  create: {\n      /**\n       * @deprecated The action create on model shopifyCompany does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'createShopifyCompany';\n      errorMessage: string;\n      optionsType: CreateShopifyCompanyOptions;\n      actionApiIdentifier: 'create';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyCompany.create';\n    }\n  bulkCreate: {\n      /**\n       * @deprecated The action create on model shopifyCompany does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkCreateShopifyCompanies';\n      errorMessage: string;\n      optionsType: CreateShopifyCompanyOptions;\n      actionApiIdentifier: 'create';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyCompany.bulkCreate';\n    }\n  update: {\n      /**\n       * @deprecated The action update on model shopifyCompany does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'updateShopifyCompany';\n      errorMessage: string;\n      optionsType: UpdateShopifyCompanyOptions;\n      actionApiIdentifier: 'update';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyCompany.update';\n    }\n  bulkUpdate: {\n      /**\n       * @deprecated The action update on model shopifyCompany does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkUpdateShopifyCompanies';\n      errorMessage: string;\n      optionsType: UpdateShopifyCompanyOptions;\n      actionApiIdentifier: 'update';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyCompany.bulkUpdate';\n    }\n  delete: {\n      /**\n       * @deprecated The action delete on model shopifyCompany does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'deleteShopifyCompany';\n      errorMessage: string;\n      optionsType: DeleteShopifyCompanyOptions;\n      actionApiIdentifier: 'delete';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyCompany.delete';\n    }\n  bulkDelete: {\n      /**\n       * @deprecated The action delete on model shopifyCompany does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkDeleteShopifyCompanies';\n      errorMessage: string;\n      optionsType: DeleteShopifyCompanyOptions;\n      actionApiIdentifier: 'delete';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyCompany.bulkDelete';\n    }\n  view: {\n      (query: string, variables?: Record<string, unknown>): Promise<unknown>\n      type: 'computedView';\n      operationName: 'view';\n      gqlFieldName: 'shopifyCompanyGellyView';\n      namespace: null;\n      imports: [];\n      variables: {\n          query: { type: 'String', required: true },\n          args: { type: 'JSONObject' }\n        };\n      variablesType: Record<string, unknown>;\n      resultType: Promise<unknown>;\n      plan: never;\n    }\n};\n\n/**\n * A manager for the shopifyCompany model with all the available operations for reading and writing to it.*/\nexport const ShopifyCompanyManager = buildModelManager(\n  modelApiIdentifier,\n  pluralModelApiIdentifier,\n  DefaultShopifyCompanySelection,\n  [\n    {\n      type: 'findOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultShopifyCompanySelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultShopifyCompanySelection,\n      namespace: null\n    },\n    {\n      type: 'findMany',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyCompanySelection,\n      namespace: null\n    },\n    {\n      type: 'findFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyCompanySelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyCompanySelection,\n      namespace: null\n    },\n    {\n      type: 'findOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'findById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyCompanySelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'maybeFindById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyCompanySelection,\n      namespace: null\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'createShopifyCompany',\n      functionName: 'create',\n      errorMessage: 'The action create on model shopifyCompany does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'create',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyCompany.create'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkCreateShopifyCompanies',\n      functionName: 'bulkCreate',\n      errorMessage: 'The action create on model shopifyCompany does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'create',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyCompany.bulkCreate'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'updateShopifyCompany',\n      functionName: 'update',\n      errorMessage: 'The action update on model shopifyCompany does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'update',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyCompany.update'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkUpdateShopifyCompanies',\n      functionName: 'bulkUpdate',\n      errorMessage: 'The action update on model shopifyCompany does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'update',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyCompany.bulkUpdate'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'deleteShopifyCompany',\n      functionName: 'delete',\n      errorMessage: 'The action delete on model shopifyCompany does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'delete',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyCompany.delete'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkDeleteShopifyCompanies',\n      functionName: 'bulkDelete',\n      errorMessage: 'The action delete on model shopifyCompany does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'delete',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyCompany.bulkDelete'\n    },\n    {\n      type: 'computedView',\n      operationName: 'view',\n      functionName: 'view',\n      gqlFieldName: 'shopifyCompanyGellyView',\n      namespace: null,\n      variables: {\n        query: { type: 'String', required: true },\n        args: { type: 'JSONObject' }\n      }\n    }\n  ] as const\n) as unknown as {\n  // Gadget generates these model manager classes at runtime dynamically, which means there is no source code for the class. This is done to make the bundle size of the client as small as possible, avoiding a bunch of repeated source code in favour of one small builder function. The TypeScript types above document the exact interface of the constructed class.\n  new(connection: GadgetConnection): ShopifyCompanyManager;\n};", "import {\n  GadgetConnection,\n  GadgetRecord,\n  GadgetRecordImplementation,\n  GadgetRecordList,\n  GadgetNonUniqueDataError,\n  actionRunner,\n  findManyRunner,\n  findOneRunner,\n  findOneByFieldRunner,\n  FieldSelection,\n  LimitToKnownKeys,\n  Selectable\n} from \"@gadgetinc/api-client-core\";\n\nimport {\n  Query,\n  ExplicitNestingRequired,\n\n  IDsList,\n  PromiseOrLiveIterator,\n  ShopifyCompanyAddress,\n  AvailableShopifyCompanyAddressSelection,\n  ShopifyCompanyAddressSort,\n  ShopifyCompanyAddressFilter\n} from \"../types.js\";\n\nimport { buildModelManager } from \"../builder.js\";\nimport { AvailableSelection, AllFieldsSelected, DefaultSelection, Select, DeepFilterNever } from \"../utils.js\";\n\n/**\n* A type that holds only the selected fields (and nested fields) of shopifyCompanyAddress. The present fields in the result type of this are dynamic based on the options to each call that uses it.\n* The selected fields are sometimes given by the `Options` at `Options[\"select\"]`, and if a selection isn't made in the options, we use the default selection from above.\n*/\nexport type SelectedShopifyCompanyAddressOrDefault<Options extends Selectable<AvailableShopifyCompanyAddressSelection>> = DeepFilterNever<\n    Select<\n      ShopifyCompanyAddress,\n      DefaultSelection<\n        AvailableShopifyCompanyAddressSelection,\n        Options,\n        typeof DefaultShopifyCompanyAddressSelection\n      >\n    >\n  >;\n\n/**\n * A type that represents a `GadgetRecord` type for shopifyCompanyAddress.\n * It selects all fields of the model by default. If you want to represent a record type with a subset of fields, you could pass in an object in the `Selection` type parameter.\n *\n * @example\n * ```ts\n * const someFunction = (record: ShopifyCompanyAddressRecord, recordWithName: ShopifyCompanyAddressRecord<{ select: { name: true; } }>) => {\n *   // The type of the `record` variable will include all fields of the model.\n *   const name = record.name;\n *   const otherField = record.otherField;\n *\n *   // The type of the `recordWithName` variable will only include the selected fields.\n *   const name = recordWithName.name;\n *   const otherField = recordWithName.otherField; // Type error: Property 'otherField' does not exist on type 'GadgetRecord<{ name: true; }>'.\n * }\n * ```\n */\nexport type ShopifyCompanyAddressRecord<Selection extends AvailableShopifyCompanyAddressSelection | undefined = typeof DefaultShopifyCompanyAddressSelection> = DeepFilterNever<\n  GadgetRecord<\n    SelectedShopifyCompanyAddressOrDefault<{\n      select: Selection;\n    }>\n  >\n>;\n\nexport const DefaultShopifyCompanyAddressSelection = {\n     __typename: true,\n     id: true,\n     address1: true,\n     address2: true,\n     city: true,\n     companyBillingLocationId: true,\n     companyName: true,\n     companyShippingLocationId: true,\n     country: true,\n     countryCode: true,\n     createdAt: true,\n     formattedAddress: true,\n     formattedArea: true,\n     phone: true,\n     province: true,\n     recipient: true,\n     shopId: true,\n     updatedAt: true,\n     zipCode: true,\n     zoneCode: true\n   } as const;\nconst modelApiIdentifier = \"shopifyCompanyAddress\" as const;\nconst pluralModelApiIdentifier = \"shopifyCompanyAddresses\" as const;\n/** Options that can be passed to the `ShopifyCompanyAddressManager#findOne` method */\n export interface FindOneShopifyCompanyAddressOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCompanyAddressSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `ShopifyCompanyAddressManager#maybeFindOne` method */\n export interface MaybeFindOneShopifyCompanyAddressOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCompanyAddressSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `ShopifyCompanyAddressManager#findMany` method */\n export interface FindManyShopifyCompanyAddressesOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCompanyAddressSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyCompanyAddressSort | ShopifyCompanyAddressSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyCompanyAddressFilter | ShopifyCompanyAddressFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n  first?: number | null;\n  last?: number | null;\n  after?: string | null;\n  before?: string | null;\n};\n/** Options that can be passed to the `ShopifyCompanyAddressManager#findFirst` method */\n export interface FindFirstShopifyCompanyAddressOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCompanyAddressSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyCompanyAddressSort | ShopifyCompanyAddressSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyCompanyAddressFilter | ShopifyCompanyAddressFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\n/** Options that can be passed to the `ShopifyCompanyAddressManager#maybeFindFirst` method */\n export interface MaybeFindFirstShopifyCompanyAddressOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCompanyAddressSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyCompanyAddressSort | ShopifyCompanyAddressSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyCompanyAddressFilter | ShopifyCompanyAddressFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\nexport interface CreateShopifyCompanyAddressOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCompanyAddressSelection;\n};\nexport interface UpdateShopifyCompanyAddressOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCompanyAddressSelection;\n};\nexport interface DeleteShopifyCompanyAddressOptions {\n\n};\n\n/**\n * A manager for the shopifyCompanyAddress model with all the available operations for reading and writing to it.*/\nexport type ShopifyCompanyAddressManager = {\n  readonly connection: GadgetConnection;\n\n  findOne: {\n      /**\n       * Finds one shopifyCompanyAddress by ID. Returns a `Promise` that resolves to the record if found and rejects the promise if the record isn't found.\n       **/\n      <Options extends FindOneShopifyCompanyAddressOptions>(id: string, options?: LimitToKnownKeys<Options, FindOneShopifyCompanyAddressOptions>): PromiseOrLiveIterator<Options,ShopifyCompanyAddressRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultShopifyCompanyAddressSelection;\n      namespace: null;\n      optionsType: FindOneShopifyCompanyAddressOptions;\n      selectionType: AvailableShopifyCompanyAddressSelection;\n      schemaType: Query[\"shopifyCompanyAddress\"];\n    }\n  maybeFindOne: {\n      /**\n       * Finds one shopifyCompanyAddress by ID. Returns a `Promise` that resolves to the record if found and returns null otherwise.\n       **/\n      <Options extends MaybeFindOneShopifyCompanyAddressOptions>(id: string, options?: LimitToKnownKeys<Options, MaybeFindOneShopifyCompanyAddressOptions>): PromiseOrLiveIterator<Options,ShopifyCompanyAddressRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: MaybeFindOneShopifyCompanyAddressOptions;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultShopifyCompanyAddressSelection;\n      namespace: null;\n      selectionType: AvailableShopifyCompanyAddressSelection;\n      schemaType: Query[\"shopifyCompanyAddress\"];\n    }\n  findMany: {\n      /**\n       * Finds many shopifyCompanyAddress. Returns a `Promise` for a `GadgetRecordList` of objects according to the passed `options`. Optionally filters the returned records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindManyShopifyCompanyAddressesOptions>(options?: LimitToKnownKeys<Options, FindManyShopifyCompanyAddressesOptions>): PromiseOrLiveIterator<Options,GadgetRecordList<ShopifyCompanyAddressRecord<Options[\"select\"]>>>;\n      type: 'findMany';\n      operationName: typeof pluralModelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: FindManyShopifyCompanyAddressesOptions;\n      defaultSelection: typeof DefaultShopifyCompanyAddressSelection;\n      namespace: null;\n      selectionType: AvailableShopifyCompanyAddressSelection;\n      schemaType: Query[\"shopifyCompanyAddress\"];\n    }\n  findFirst: {\n      /**\n       * Finds the first matching shopifyCompanyAddress. Returns a `Promise` that resolves to a record if found and rejects the promise if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindFirstShopifyCompanyAddressOptions>(options?: LimitToKnownKeys<Options, FindFirstShopifyCompanyAddressOptions>): PromiseOrLiveIterator<Options,ShopifyCompanyAddressRecord<Options[\"select\"]>>;\n      type: 'findFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: FindFirstShopifyCompanyAddressOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyCompanyAddressSelection;\n      namespace: null;\n      selectionType: AvailableShopifyCompanyAddressSelection;\n      schemaType: Query[\"shopifyCompanyAddress\"];\n    }\n  maybeFindFirst: {\n      /**\n       * Finds the first matching shopifyCompanyAddress. Returns a `Promise` that resolves to a record if found, or null if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` pagination options.\n       **/\n      <Options extends MaybeFindFirstShopifyCompanyAddressOptions>(options?: LimitToKnownKeys<Options, MaybeFindFirstShopifyCompanyAddressOptions>): PromiseOrLiveIterator<Options,ShopifyCompanyAddressRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: MaybeFindFirstShopifyCompanyAddressOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyCompanyAddressSelection;\n      namespace: null;\n      selectionType: AvailableShopifyCompanyAddressSelection;\n      schemaType: Query[\"shopifyCompanyAddress\"];\n    }\n  findById: {\n      /**\n      * Finds one shopifyCompanyAddress by its id. Returns a Promise that resolves to the record if found and rejects the promise if the record isn't found.\n      **/\n      <Options extends FindOneShopifyCompanyAddressOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneShopifyCompanyAddressOptions>): PromiseOrLiveIterator<Options,ShopifyCompanyAddressRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneShopifyCompanyAddressOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyCompanyAddressSelection;\n      namespace: null;\n      selectionType: AvailableShopifyCompanyAddressSelection;\n      schemaType: Query[\"shopifyCompanyAddress\"];\n    }\n  maybeFindById: {\n      /**\n      * Finds one shopifyCompanyAddress by its id. Returns a Promise that resolves to the record if found and returns null if the record isn't found.\n      **/\n      <Options extends FindOneShopifyCompanyAddressOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneShopifyCompanyAddressOptions>): Promise<ShopifyCompanyAddressRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneShopifyCompanyAddressOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyCompanyAddressSelection;\n      namespace: null;\n      selectionType: AvailableShopifyCompanyAddressSelection;\n      schemaType: Query[\"shopifyCompanyAddress\"];\n    }\n  create: {\n      /**\n       * @deprecated The action create on model shopifyCompanyAddress does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'createShopifyCompanyAddress';\n      errorMessage: string;\n      optionsType: CreateShopifyCompanyAddressOptions;\n      actionApiIdentifier: 'create';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyCompanyAddress.create';\n    }\n  bulkCreate: {\n      /**\n       * @deprecated The action create on model shopifyCompanyAddress does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkCreateShopifyCompanyAddresses';\n      errorMessage: string;\n      optionsType: CreateShopifyCompanyAddressOptions;\n      actionApiIdentifier: 'create';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyCompanyAddress.bulkCreate';\n    }\n  update: {\n      /**\n       * @deprecated The action update on model shopifyCompanyAddress does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'updateShopifyCompanyAddress';\n      errorMessage: string;\n      optionsType: UpdateShopifyCompanyAddressOptions;\n      actionApiIdentifier: 'update';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyCompanyAddress.update';\n    }\n  bulkUpdate: {\n      /**\n       * @deprecated The action update on model shopifyCompanyAddress does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkUpdateShopifyCompanyAddresses';\n      errorMessage: string;\n      optionsType: UpdateShopifyCompanyAddressOptions;\n      actionApiIdentifier: 'update';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyCompanyAddress.bulkUpdate';\n    }\n  delete: {\n      /**\n       * @deprecated The action delete on model shopifyCompanyAddress does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'deleteShopifyCompanyAddress';\n      errorMessage: string;\n      optionsType: DeleteShopifyCompanyAddressOptions;\n      actionApiIdentifier: 'delete';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyCompanyAddress.delete';\n    }\n  bulkDelete: {\n      /**\n       * @deprecated The action delete on model shopifyCompanyAddress does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkDeleteShopifyCompanyAddresses';\n      errorMessage: string;\n      optionsType: DeleteShopifyCompanyAddressOptions;\n      actionApiIdentifier: 'delete';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyCompanyAddress.bulkDelete';\n    }\n  view: {\n      (query: string, variables?: Record<string, unknown>): Promise<unknown>\n      type: 'computedView';\n      operationName: 'view';\n      gqlFieldName: 'shopifyCompanyAddressGellyView';\n      namespace: null;\n      imports: [];\n      variables: {\n          query: { type: 'String', required: true },\n          args: { type: 'JSONObject' }\n        };\n      variablesType: Record<string, unknown>;\n      resultType: Promise<unknown>;\n      plan: never;\n    }\n};\n\n/**\n * A manager for the shopifyCompanyAddress model with all the available operations for reading and writing to it.*/\nexport const ShopifyCompanyAddressManager = buildModelManager(\n  modelApiIdentifier,\n  pluralModelApiIdentifier,\n  DefaultShopifyCompanyAddressSelection,\n  [\n    {\n      type: 'findOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultShopifyCompanyAddressSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultShopifyCompanyAddressSelection,\n      namespace: null\n    },\n    {\n      type: 'findMany',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyCompanyAddressSelection,\n      namespace: null\n    },\n    {\n      type: 'findFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyCompanyAddressSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyCompanyAddressSelection,\n      namespace: null\n    },\n    {\n      type: 'findOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'findById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyCompanyAddressSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'maybeFindById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyCompanyAddressSelection,\n      namespace: null\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'createShopifyCompanyAddress',\n      functionName: 'create',\n      errorMessage: 'The action create on model shopifyCompanyAddress does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'create',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyCompanyAddress.create'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkCreateShopifyCompanyAddresses',\n      functionName: 'bulkCreate',\n      errorMessage: 'The action create on model shopifyCompanyAddress does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'create',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyCompanyAddress.bulkCreate'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'updateShopifyCompanyAddress',\n      functionName: 'update',\n      errorMessage: 'The action update on model shopifyCompanyAddress does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'update',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyCompanyAddress.update'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkUpdateShopifyCompanyAddresses',\n      functionName: 'bulkUpdate',\n      errorMessage: 'The action update on model shopifyCompanyAddress does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'update',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyCompanyAddress.bulkUpdate'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'deleteShopifyCompanyAddress',\n      functionName: 'delete',\n      errorMessage: 'The action delete on model shopifyCompanyAddress does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'delete',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyCompanyAddress.delete'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkDeleteShopifyCompanyAddresses',\n      functionName: 'bulkDelete',\n      errorMessage: 'The action delete on model shopifyCompanyAddress does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'delete',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyCompanyAddress.bulkDelete'\n    },\n    {\n      type: 'computedView',\n      operationName: 'view',\n      functionName: 'view',\n      gqlFieldName: 'shopifyCompanyAddressGellyView',\n      namespace: null,\n      variables: {\n        query: { type: 'String', required: true },\n        args: { type: 'JSONObject' }\n      }\n    }\n  ] as const\n) as unknown as {\n  // Gadget generates these model manager classes at runtime dynamically, which means there is no source code for the class. This is done to make the bundle size of the client as small as possible, avoiding a bunch of repeated source code in favour of one small builder function. The TypeScript types above document the exact interface of the constructed class.\n  new(connection: GadgetConnection): ShopifyCompanyAddressManager;\n};", "import {\n  GadgetConnection,\n  GadgetRecord,\n  GadgetRecordImplementation,\n  GadgetRecordList,\n  GadgetNonUniqueDataError,\n  actionRunner,\n  findManyRunner,\n  findOneRunner,\n  findOneByFieldRunner,\n  FieldSelection,\n  LimitToKnownKeys,\n  Selectable\n} from \"@gadgetinc/api-client-core\";\n\nimport {\n  Query,\n  ExplicitNestingRequired,\n\n  IDsList,\n  PromiseOrLiveIterator,\n  ShopifyCompanyContact,\n  AvailableShopifyCompanyContactSelection,\n  ShopifyCompanyContactSort,\n  ShopifyCompanyContactFilter\n} from \"../types.js\";\n\nimport { buildModelManager } from \"../builder.js\";\nimport { AvailableSelection, AllFieldsSelected, DefaultSelection, Select, DeepFilterNever } from \"../utils.js\";\n\n/**\n* A type that holds only the selected fields (and nested fields) of shopifyCompanyContact. The present fields in the result type of this are dynamic based on the options to each call that uses it.\n* The selected fields are sometimes given by the `Options` at `Options[\"select\"]`, and if a selection isn't made in the options, we use the default selection from above.\n*/\nexport type SelectedShopifyCompanyContactOrDefault<Options extends Selectable<AvailableShopifyCompanyContactSelection>> = DeepFilterNever<\n    Select<\n      ShopifyCompanyContact,\n      DefaultSelection<\n        AvailableShopifyCompanyContactSelection,\n        Options,\n        typeof DefaultShopifyCompanyContactSelection\n      >\n    >\n  >;\n\n/**\n * A type that represents a `GadgetRecord` type for shopifyCompanyContact.\n * It selects all fields of the model by default. If you want to represent a record type with a subset of fields, you could pass in an object in the `Selection` type parameter.\n *\n * @example\n * ```ts\n * const someFunction = (record: ShopifyCompanyContactRecord, recordWithName: ShopifyCompanyContactRecord<{ select: { name: true; } }>) => {\n *   // The type of the `record` variable will include all fields of the model.\n *   const name = record.name;\n *   const otherField = record.otherField;\n *\n *   // The type of the `recordWithName` variable will only include the selected fields.\n *   const name = recordWithName.name;\n *   const otherField = recordWithName.otherField; // Type error: Property 'otherField' does not exist on type 'GadgetRecord<{ name: true; }>'.\n * }\n * ```\n */\nexport type ShopifyCompanyContactRecord<Selection extends AvailableShopifyCompanyContactSelection | undefined = typeof DefaultShopifyCompanyContactSelection> = DeepFilterNever<\n  GadgetRecord<\n    SelectedShopifyCompanyContactOrDefault<{\n      select: Selection;\n    }>\n  >\n>;\n\nexport const DefaultShopifyCompanyContactSelection = {\n     __typename: true,\n     id: true,\n     companyId: true,\n     createdAt: true,\n     customerId: true,\n     isMainContact: true,\n     lifetimeDuration: true,\n     locale: true,\n     shopId: true,\n     shopifyCreatedAt: true,\n     shopifyUpdatedAt: true,\n     title: true,\n     updatedAt: true\n   } as const;\nconst modelApiIdentifier = \"shopifyCompanyContact\" as const;\nconst pluralModelApiIdentifier = \"shopifyCompanyContacts\" as const;\n/** Options that can be passed to the `ShopifyCompanyContactManager#findOne` method */\n export interface FindOneShopifyCompanyContactOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCompanyContactSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `ShopifyCompanyContactManager#maybeFindOne` method */\n export interface MaybeFindOneShopifyCompanyContactOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCompanyContactSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `ShopifyCompanyContactManager#findMany` method */\n export interface FindManyShopifyCompanyContactsOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCompanyContactSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyCompanyContactSort | ShopifyCompanyContactSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyCompanyContactFilter | ShopifyCompanyContactFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n  first?: number | null;\n  last?: number | null;\n  after?: string | null;\n  before?: string | null;\n};\n/** Options that can be passed to the `ShopifyCompanyContactManager#findFirst` method */\n export interface FindFirstShopifyCompanyContactOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCompanyContactSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyCompanyContactSort | ShopifyCompanyContactSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyCompanyContactFilter | ShopifyCompanyContactFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\n/** Options that can be passed to the `ShopifyCompanyContactManager#maybeFindFirst` method */\n export interface MaybeFindFirstShopifyCompanyContactOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCompanyContactSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyCompanyContactSort | ShopifyCompanyContactSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyCompanyContactFilter | ShopifyCompanyContactFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\nexport interface CreateShopifyCompanyContactOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCompanyContactSelection;\n};\nexport interface UpdateShopifyCompanyContactOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCompanyContactSelection;\n};\nexport interface DeleteShopifyCompanyContactOptions {\n\n};\n\n/**\n * A manager for the shopifyCompanyContact model with all the available operations for reading and writing to it.*/\nexport type ShopifyCompanyContactManager = {\n  readonly connection: GadgetConnection;\n\n  findOne: {\n      /**\n       * Finds one shopifyCompanyContact by ID. Returns a `Promise` that resolves to the record if found and rejects the promise if the record isn't found.\n       **/\n      <Options extends FindOneShopifyCompanyContactOptions>(id: string, options?: LimitToKnownKeys<Options, FindOneShopifyCompanyContactOptions>): PromiseOrLiveIterator<Options,ShopifyCompanyContactRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultShopifyCompanyContactSelection;\n      namespace: null;\n      optionsType: FindOneShopifyCompanyContactOptions;\n      selectionType: AvailableShopifyCompanyContactSelection;\n      schemaType: Query[\"shopifyCompanyContact\"];\n    }\n  maybeFindOne: {\n      /**\n       * Finds one shopifyCompanyContact by ID. Returns a `Promise` that resolves to the record if found and returns null otherwise.\n       **/\n      <Options extends MaybeFindOneShopifyCompanyContactOptions>(id: string, options?: LimitToKnownKeys<Options, MaybeFindOneShopifyCompanyContactOptions>): PromiseOrLiveIterator<Options,ShopifyCompanyContactRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: MaybeFindOneShopifyCompanyContactOptions;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultShopifyCompanyContactSelection;\n      namespace: null;\n      selectionType: AvailableShopifyCompanyContactSelection;\n      schemaType: Query[\"shopifyCompanyContact\"];\n    }\n  findMany: {\n      /**\n       * Finds many shopifyCompanyContact. Returns a `Promise` for a `GadgetRecordList` of objects according to the passed `options`. Optionally filters the returned records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindManyShopifyCompanyContactsOptions>(options?: LimitToKnownKeys<Options, FindManyShopifyCompanyContactsOptions>): PromiseOrLiveIterator<Options,GadgetRecordList<ShopifyCompanyContactRecord<Options[\"select\"]>>>;\n      type: 'findMany';\n      operationName: typeof pluralModelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: FindManyShopifyCompanyContactsOptions;\n      defaultSelection: typeof DefaultShopifyCompanyContactSelection;\n      namespace: null;\n      selectionType: AvailableShopifyCompanyContactSelection;\n      schemaType: Query[\"shopifyCompanyContact\"];\n    }\n  findFirst: {\n      /**\n       * Finds the first matching shopifyCompanyContact. Returns a `Promise` that resolves to a record if found and rejects the promise if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindFirstShopifyCompanyContactOptions>(options?: LimitToKnownKeys<Options, FindFirstShopifyCompanyContactOptions>): PromiseOrLiveIterator<Options,ShopifyCompanyContactRecord<Options[\"select\"]>>;\n      type: 'findFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: FindFirstShopifyCompanyContactOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyCompanyContactSelection;\n      namespace: null;\n      selectionType: AvailableShopifyCompanyContactSelection;\n      schemaType: Query[\"shopifyCompanyContact\"];\n    }\n  maybeFindFirst: {\n      /**\n       * Finds the first matching shopifyCompanyContact. Returns a `Promise` that resolves to a record if found, or null if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` pagination options.\n       **/\n      <Options extends MaybeFindFirstShopifyCompanyContactOptions>(options?: LimitToKnownKeys<Options, MaybeFindFirstShopifyCompanyContactOptions>): PromiseOrLiveIterator<Options,ShopifyCompanyContactRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: MaybeFindFirstShopifyCompanyContactOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyCompanyContactSelection;\n      namespace: null;\n      selectionType: AvailableShopifyCompanyContactSelection;\n      schemaType: Query[\"shopifyCompanyContact\"];\n    }\n  findById: {\n      /**\n      * Finds one shopifyCompanyContact by its id. Returns a Promise that resolves to the record if found and rejects the promise if the record isn't found.\n      **/\n      <Options extends FindOneShopifyCompanyContactOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneShopifyCompanyContactOptions>): PromiseOrLiveIterator<Options,ShopifyCompanyContactRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneShopifyCompanyContactOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyCompanyContactSelection;\n      namespace: null;\n      selectionType: AvailableShopifyCompanyContactSelection;\n      schemaType: Query[\"shopifyCompanyContact\"];\n    }\n  maybeFindById: {\n      /**\n      * Finds one shopifyCompanyContact by its id. Returns a Promise that resolves to the record if found and returns null if the record isn't found.\n      **/\n      <Options extends FindOneShopifyCompanyContactOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneShopifyCompanyContactOptions>): Promise<ShopifyCompanyContactRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneShopifyCompanyContactOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyCompanyContactSelection;\n      namespace: null;\n      selectionType: AvailableShopifyCompanyContactSelection;\n      schemaType: Query[\"shopifyCompanyContact\"];\n    }\n  create: {\n      /**\n       * @deprecated The action create on model shopifyCompanyContact does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'createShopifyCompanyContact';\n      errorMessage: string;\n      optionsType: CreateShopifyCompanyContactOptions;\n      actionApiIdentifier: 'create';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyCompanyContact.create';\n    }\n  bulkCreate: {\n      /**\n       * @deprecated The action create on model shopifyCompanyContact does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkCreateShopifyCompanyContacts';\n      errorMessage: string;\n      optionsType: CreateShopifyCompanyContactOptions;\n      actionApiIdentifier: 'create';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyCompanyContact.bulkCreate';\n    }\n  update: {\n      /**\n       * @deprecated The action update on model shopifyCompanyContact does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'updateShopifyCompanyContact';\n      errorMessage: string;\n      optionsType: UpdateShopifyCompanyContactOptions;\n      actionApiIdentifier: 'update';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyCompanyContact.update';\n    }\n  bulkUpdate: {\n      /**\n       * @deprecated The action update on model shopifyCompanyContact does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkUpdateShopifyCompanyContacts';\n      errorMessage: string;\n      optionsType: UpdateShopifyCompanyContactOptions;\n      actionApiIdentifier: 'update';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyCompanyContact.bulkUpdate';\n    }\n  delete: {\n      /**\n       * @deprecated The action delete on model shopifyCompanyContact does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'deleteShopifyCompanyContact';\n      errorMessage: string;\n      optionsType: DeleteShopifyCompanyContactOptions;\n      actionApiIdentifier: 'delete';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyCompanyContact.delete';\n    }\n  bulkDelete: {\n      /**\n       * @deprecated The action delete on model shopifyCompanyContact does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkDeleteShopifyCompanyContacts';\n      errorMessage: string;\n      optionsType: DeleteShopifyCompanyContactOptions;\n      actionApiIdentifier: 'delete';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyCompanyContact.bulkDelete';\n    }\n  view: {\n      (query: string, variables?: Record<string, unknown>): Promise<unknown>\n      type: 'computedView';\n      operationName: 'view';\n      gqlFieldName: 'shopifyCompanyContactGellyView';\n      namespace: null;\n      imports: [];\n      variables: {\n          query: { type: 'String', required: true },\n          args: { type: 'JSONObject' }\n        };\n      variablesType: Record<string, unknown>;\n      resultType: Promise<unknown>;\n      plan: never;\n    }\n};\n\n/**\n * A manager for the shopifyCompanyContact model with all the available operations for reading and writing to it.*/\nexport const ShopifyCompanyContactManager = buildModelManager(\n  modelApiIdentifier,\n  pluralModelApiIdentifier,\n  DefaultShopifyCompanyContactSelection,\n  [\n    {\n      type: 'findOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultShopifyCompanyContactSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultShopifyCompanyContactSelection,\n      namespace: null\n    },\n    {\n      type: 'findMany',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyCompanyContactSelection,\n      namespace: null\n    },\n    {\n      type: 'findFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyCompanyContactSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyCompanyContactSelection,\n      namespace: null\n    },\n    {\n      type: 'findOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'findById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyCompanyContactSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'maybeFindById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyCompanyContactSelection,\n      namespace: null\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'createShopifyCompanyContact',\n      functionName: 'create',\n      errorMessage: 'The action create on model shopifyCompanyContact does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'create',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyCompanyContact.create'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkCreateShopifyCompanyContacts',\n      functionName: 'bulkCreate',\n      errorMessage: 'The action create on model shopifyCompanyContact does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'create',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyCompanyContact.bulkCreate'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'updateShopifyCompanyContact',\n      functionName: 'update',\n      errorMessage: 'The action update on model shopifyCompanyContact does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'update',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyCompanyContact.update'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkUpdateShopifyCompanyContacts',\n      functionName: 'bulkUpdate',\n      errorMessage: 'The action update on model shopifyCompanyContact does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'update',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyCompanyContact.bulkUpdate'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'deleteShopifyCompanyContact',\n      functionName: 'delete',\n      errorMessage: 'The action delete on model shopifyCompanyContact does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'delete',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyCompanyContact.delete'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkDeleteShopifyCompanyContacts',\n      functionName: 'bulkDelete',\n      errorMessage: 'The action delete on model shopifyCompanyContact does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'delete',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyCompanyContact.bulkDelete'\n    },\n    {\n      type: 'computedView',\n      operationName: 'view',\n      functionName: 'view',\n      gqlFieldName: 'shopifyCompanyContactGellyView',\n      namespace: null,\n      variables: {\n        query: { type: 'String', required: true },\n        args: { type: 'JSONObject' }\n      }\n    }\n  ] as const\n) as unknown as {\n  // Gadget generates these model manager classes at runtime dynamically, which means there is no source code for the class. This is done to make the bundle size of the client as small as possible, avoiding a bunch of repeated source code in favour of one small builder function. The TypeScript types above document the exact interface of the constructed class.\n  new(connection: GadgetConnection): ShopifyCompanyContactManager;\n};", "import {\n  GadgetConnection,\n  GadgetRecord,\n  GadgetRecordImplementation,\n  GadgetRecordList,\n  GadgetNonUniqueDataError,\n  actionRunner,\n  findManyRunner,\n  findOneRunner,\n  findOneByFieldRunner,\n  FieldSelection,\n  LimitToKnownKeys,\n  Selectable\n} from \"@gadgetinc/api-client-core\";\n\nimport {\n  Query,\n  ExplicitNestingRequired,\n\n  IDsList,\n  PromiseOrLiveIterator,\n  ShopifyCompanyContactRole,\n  AvailableShopifyCompanyContactRoleSelection,\n  ShopifyCompanyContactRoleSort,\n  ShopifyCompanyContactRoleFilter,\n  CreateShopifyCompanyContactRoleInput,\n  UpdateShopifyCompanyContactRoleInput,\n  Scalars,\n  UpsertShopifyCompanyContactRoleInput\n} from \"../types.js\";\n\nimport { buildModelManager } from \"../builder.js\";\nimport { AvailableSelection, AllFieldsSelected, DefaultSelection, Select, DeepFilterNever } from \"../utils.js\";\n\n/**\n* A type that holds only the selected fields (and nested fields) of shopifyCompanyContactRole. The present fields in the result type of this are dynamic based on the options to each call that uses it.\n* The selected fields are sometimes given by the `Options` at `Options[\"select\"]`, and if a selection isn't made in the options, we use the default selection from above.\n*/\nexport type SelectedShopifyCompanyContactRoleOrDefault<Options extends Selectable<AvailableShopifyCompanyContactRoleSelection>> = DeepFilterNever<\n    Select<\n      ShopifyCompanyContactRole,\n      DefaultSelection<\n        AvailableShopifyCompanyContactRoleSelection,\n        Options,\n        typeof DefaultShopifyCompanyContactRoleSelection\n      >\n    >\n  >;\n\n/**\n * A type that represents a `GadgetRecord` type for shopifyCompanyContactRole.\n * It selects all fields of the model by default. If you want to represent a record type with a subset of fields, you could pass in an object in the `Selection` type parameter.\n *\n * @example\n * ```ts\n * const someFunction = (record: ShopifyCompanyContactRoleRecord, recordWithName: ShopifyCompanyContactRoleRecord<{ select: { name: true; } }>) => {\n *   // The type of the `record` variable will include all fields of the model.\n *   const name = record.name;\n *   const otherField = record.otherField;\n *\n *   // The type of the `recordWithName` variable will only include the selected fields.\n *   const name = recordWithName.name;\n *   const otherField = recordWithName.otherField; // Type error: Property 'otherField' does not exist on type 'GadgetRecord<{ name: true; }>'.\n * }\n * ```\n */\nexport type ShopifyCompanyContactRoleRecord<Selection extends AvailableShopifyCompanyContactRoleSelection | undefined = typeof DefaultShopifyCompanyContactRoleSelection> = DeepFilterNever<\n  GadgetRecord<\n    SelectedShopifyCompanyContactRoleOrDefault<{\n      select: Selection;\n    }>\n  >\n>;\n\nexport const DefaultShopifyCompanyContactRoleSelection = {\n     __typename: true,\n     id: true,\n     companyId: true,\n     createdAt: true,\n     shopId: true,\n     updatedAt: true\n   } as const;\nconst modelApiIdentifier = \"shopifyCompanyContactRole\" as const;\nconst pluralModelApiIdentifier = \"shopifyCompanyContactRoles\" as const;\n/** Options that can be passed to the `ShopifyCompanyContactRoleManager#findOne` method */\n export interface FindOneShopifyCompanyContactRoleOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCompanyContactRoleSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `ShopifyCompanyContactRoleManager#maybeFindOne` method */\n export interface MaybeFindOneShopifyCompanyContactRoleOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCompanyContactRoleSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `ShopifyCompanyContactRoleManager#findMany` method */\n export interface FindManyShopifyCompanyContactRolesOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCompanyContactRoleSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyCompanyContactRoleSort | ShopifyCompanyContactRoleSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyCompanyContactRoleFilter | ShopifyCompanyContactRoleFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n  first?: number | null;\n  last?: number | null;\n  after?: string | null;\n  before?: string | null;\n};\n/** Options that can be passed to the `ShopifyCompanyContactRoleManager#findFirst` method */\n export interface FindFirstShopifyCompanyContactRoleOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCompanyContactRoleSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyCompanyContactRoleSort | ShopifyCompanyContactRoleSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyCompanyContactRoleFilter | ShopifyCompanyContactRoleFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\n/** Options that can be passed to the `ShopifyCompanyContactRoleManager#maybeFindFirst` method */\n export interface MaybeFindFirstShopifyCompanyContactRoleOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCompanyContactRoleSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyCompanyContactRoleSort | ShopifyCompanyContactRoleSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyCompanyContactRoleFilter | ShopifyCompanyContactRoleFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\nexport interface CreateShopifyCompanyContactRoleOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCompanyContactRoleSelection;\n};\nexport interface UpdateShopifyCompanyContactRoleOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCompanyContactRoleSelection;\n};\nexport interface DeleteShopifyCompanyContactRoleOptions {\n\n};\nexport interface UpsertShopifyCompanyContactRoleOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCompanyContactRoleSelection;\n};\n/**\n * The fully-qualified, expanded form of the inputs for executing the create action.\n * The flattened style should be preferred over this style, but for models with ambiguous API identifiers, this style can be used to remove any ambiguity.\n **/\nexport type FullyQualifiedCreateShopifyCompanyContactRoleVariables = {\n  shopifyCompanyContactRole?: CreateShopifyCompanyContactRoleInput;\n}\n/**\n * The inputs for executing create on shopifyCompanyContactRole.\n * This is the flattened style of inputs, suitable for general use, and should be preferred.\n **/\nexport type CreateShopifyCompanyContactRoleVariables = CreateShopifyCompanyContactRoleInput;\n/**\n * The return value from executing create on shopifyCompanyContactRole\n * Is a GadgetRecord of the model's type.\n **/\nexport type CreateShopifyCompanyContactRoleResult<Options extends CreateShopifyCompanyContactRoleOptions> = SelectedShopifyCompanyContactRoleOrDefault<Options> extends void ?\n      void :\n      GadgetRecord<SelectedShopifyCompanyContactRoleOrDefault<Options>>;\n/**\n * The fully-qualified, expanded form of the inputs for executing the update action.\n * The flattened style should be preferred over this style, but for models with ambiguous API identifiers, this style can be used to remove any ambiguity.\n **/\nexport type FullyQualifiedUpdateShopifyCompanyContactRoleVariables = {\n  shopifyCompanyContactRole?: UpdateShopifyCompanyContactRoleInput;\n}\n/**\n * The inputs for executing update on shopifyCompanyContactRole.\n * This is the flattened style of inputs, suitable for general use, and should be preferred.\n **/\nexport type UpdateShopifyCompanyContactRoleVariables = UpdateShopifyCompanyContactRoleInput;\n/**\n * The return value from executing update on shopifyCompanyContactRole\n * Is a GadgetRecord of the model's type.\n **/\nexport type UpdateShopifyCompanyContactRoleResult<Options extends UpdateShopifyCompanyContactRoleOptions> = SelectedShopifyCompanyContactRoleOrDefault<Options> extends void ?\n      void :\n      GadgetRecord<SelectedShopifyCompanyContactRoleOrDefault<Options>>;\n/**\n * The return value from executing delete on shopifyCompanyContactRole\n * Is void because this action deletes the record\n **/\nexport type DeleteShopifyCompanyContactRoleResult<Options extends DeleteShopifyCompanyContactRoleOptions> = void;\n/**\n * The fully-qualified, expanded form of the inputs for executing the upsert action.\n * The flattened style should be preferred over this style, but for models with ambiguous API identifiers, this style can be used to remove any ambiguity.\n **/\nexport type FullyQualifiedUpsertShopifyCompanyContactRoleVariables = {\n  on?: ((Scalars['String'] | null))[];\n  shopifyCompanyContactRole?: UpsertShopifyCompanyContactRoleInput;\n}\n/**\n * The inputs for executing upsert on shopifyCompanyContactRole.\n * This is the flattened style of inputs, suitable for general use, and should be preferred.\n **/\nexport type UpsertShopifyCompanyContactRoleVariables = Omit<\n     UpsertShopifyCompanyContactRoleInput,\n     \"on\"\n   > & {\n     on?: ((Scalars['String'] | null))[];\n   };\n/**\n * The return value from executing upsert on shopifyCompanyContactRole\n *\n **/\nexport type UpsertShopifyCompanyContactRoleResult<Options extends UpsertShopifyCompanyContactRoleOptions> = SelectedShopifyCompanyContactRoleOrDefault<Options> extends void ?\n      void :\n      GadgetRecord<SelectedShopifyCompanyContactRoleOrDefault<Options>>;\n\n/**\n * A manager for the shopifyCompanyContactRole model with all the available operations for reading and writing to it.*/\nexport type ShopifyCompanyContactRoleManager = {\n  readonly connection: GadgetConnection;\n\n  findOne: {\n      /**\n       * Finds one shopifyCompanyContactRole by ID. Returns a `Promise` that resolves to the record if found and rejects the promise if the record isn't found.\n       **/\n      <Options extends FindOneShopifyCompanyContactRoleOptions>(id: string, options?: LimitToKnownKeys<Options, FindOneShopifyCompanyContactRoleOptions>): PromiseOrLiveIterator<Options,ShopifyCompanyContactRoleRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultShopifyCompanyContactRoleSelection;\n      namespace: null;\n      optionsType: FindOneShopifyCompanyContactRoleOptions;\n      selectionType: AvailableShopifyCompanyContactRoleSelection;\n      schemaType: Query[\"shopifyCompanyContactRole\"];\n    }\n  maybeFindOne: {\n      /**\n       * Finds one shopifyCompanyContactRole by ID. Returns a `Promise` that resolves to the record if found and returns null otherwise.\n       **/\n      <Options extends MaybeFindOneShopifyCompanyContactRoleOptions>(id: string, options?: LimitToKnownKeys<Options, MaybeFindOneShopifyCompanyContactRoleOptions>): PromiseOrLiveIterator<Options,ShopifyCompanyContactRoleRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: MaybeFindOneShopifyCompanyContactRoleOptions;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultShopifyCompanyContactRoleSelection;\n      namespace: null;\n      selectionType: AvailableShopifyCompanyContactRoleSelection;\n      schemaType: Query[\"shopifyCompanyContactRole\"];\n    }\n  findMany: {\n      /**\n       * Finds many shopifyCompanyContactRole. Returns a `Promise` for a `GadgetRecordList` of objects according to the passed `options`. Optionally filters the returned records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindManyShopifyCompanyContactRolesOptions>(options?: LimitToKnownKeys<Options, FindManyShopifyCompanyContactRolesOptions>): PromiseOrLiveIterator<Options,GadgetRecordList<ShopifyCompanyContactRoleRecord<Options[\"select\"]>>>;\n      type: 'findMany';\n      operationName: typeof pluralModelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: FindManyShopifyCompanyContactRolesOptions;\n      defaultSelection: typeof DefaultShopifyCompanyContactRoleSelection;\n      namespace: null;\n      selectionType: AvailableShopifyCompanyContactRoleSelection;\n      schemaType: Query[\"shopifyCompanyContactRole\"];\n    }\n  findFirst: {\n      /**\n       * Finds the first matching shopifyCompanyContactRole. Returns a `Promise` that resolves to a record if found and rejects the promise if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindFirstShopifyCompanyContactRoleOptions>(options?: LimitToKnownKeys<Options, FindFirstShopifyCompanyContactRoleOptions>): PromiseOrLiveIterator<Options,ShopifyCompanyContactRoleRecord<Options[\"select\"]>>;\n      type: 'findFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: FindFirstShopifyCompanyContactRoleOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyCompanyContactRoleSelection;\n      namespace: null;\n      selectionType: AvailableShopifyCompanyContactRoleSelection;\n      schemaType: Query[\"shopifyCompanyContactRole\"];\n    }\n  maybeFindFirst: {\n      /**\n       * Finds the first matching shopifyCompanyContactRole. Returns a `Promise` that resolves to a record if found, or null if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` pagination options.\n       **/\n      <Options extends MaybeFindFirstShopifyCompanyContactRoleOptions>(options?: LimitToKnownKeys<Options, MaybeFindFirstShopifyCompanyContactRoleOptions>): PromiseOrLiveIterator<Options,ShopifyCompanyContactRoleRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: MaybeFindFirstShopifyCompanyContactRoleOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyCompanyContactRoleSelection;\n      namespace: null;\n      selectionType: AvailableShopifyCompanyContactRoleSelection;\n      schemaType: Query[\"shopifyCompanyContactRole\"];\n    }\n  findById: {\n      /**\n      * Finds one shopifyCompanyContactRole by its id. Returns a Promise that resolves to the record if found and rejects the promise if the record isn't found.\n      **/\n      <Options extends FindOneShopifyCompanyContactRoleOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneShopifyCompanyContactRoleOptions>): PromiseOrLiveIterator<Options,ShopifyCompanyContactRoleRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneShopifyCompanyContactRoleOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyCompanyContactRoleSelection;\n      namespace: null;\n      selectionType: AvailableShopifyCompanyContactRoleSelection;\n      schemaType: Query[\"shopifyCompanyContactRole\"];\n    }\n  maybeFindById: {\n      /**\n      * Finds one shopifyCompanyContactRole by its id. Returns a Promise that resolves to the record if found and returns null if the record isn't found.\n      **/\n      <Options extends FindOneShopifyCompanyContactRoleOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneShopifyCompanyContactRoleOptions>): Promise<ShopifyCompanyContactRoleRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneShopifyCompanyContactRoleOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyCompanyContactRoleSelection;\n      namespace: null;\n      selectionType: AvailableShopifyCompanyContactRoleSelection;\n      schemaType: Query[\"shopifyCompanyContactRole\"];\n    }\n  create: {\n      /**\n       * Executes the create action.Accepts the parameters for the action via the `variables` argument.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the flat style, all-params-together overload that most use cases should use.\n      *\n      * @example\n      * * const shopifyCompanyContactRoleRecord = await api.shopifyCompanyContactRole.create({\n        *   company: {\n        *     _link: \"1\",\n        *   },\n        *   id: \"1\",\n        *   shop: {\n        *     _link: \"1\",\n        *   },\n        * });\n      **/\n      <Options extends CreateShopifyCompanyContactRoleOptions>(\n      \n        variables: CreateShopifyCompanyContactRoleVariables,\n        options?: LimitToKnownKeys<Options, CreateShopifyCompanyContactRoleOptions>\n      ): Promise<CreateShopifyCompanyContactRoleResult<Options>>;\n      /**\n       * Executes the create action.Accepts the parameters for the action via the `variables` argument.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the fully qualified, nested api identifier style overload that should be used when there's an ambiguity between an action param and a model field.\n      *\n      * @example\n      * * const shopifyCompanyContactRoleRecord = await api.shopifyCompanyContactRole.create({\n        *   shopifyCompanyContactRole: {\n        *     company: {\n        *       _link: \"1\",\n        *     },\n        *     id: \"1\",\n        *     shop: {\n        *       _link: \"1\",\n        *     },\n        *   },\n        * });\n      **/\n      <Options extends CreateShopifyCompanyContactRoleOptions>(\n      \n        variables: FullyQualifiedCreateShopifyCompanyContactRoleVariables,\n        options?: LimitToKnownKeys<Options, CreateShopifyCompanyContactRoleOptions>\n      ): Promise<CreateShopifyCompanyContactRoleResult<Options>>;\n      type: 'action';\n      operationName: 'createShopifyCompanyContactRole';\n      operationReturnType: 'CreateShopifyCompanyContactRole';\n      namespace: null;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      operatesWithRecordIdentity: false;\n      modelSelectionField: typeof modelApiIdentifier;\n      isBulk: false;\n      isDeleter: false;\n      variables: {\n          shopifyCompanyContactRole: { required: false, type: 'CreateShopifyCompanyContactRoleInput' }\n        };\n      variablesType: ((\n               \n               & (FullyQualifiedCreateShopifyCompanyContactRoleVariables | CreateShopifyCompanyContactRoleVariables)\n             ) | undefined);\n      hasAmbiguousIdentifier: false;\n      paramOnlyVariables: [];\n      hasReturnType: false;\n      acceptsModelInput: true;\n      hasCreateOrUpdateEffect: true;\n      imports: [ 'CreateShopifyCompanyContactRoleInput' ];\n      optionsType: CreateShopifyCompanyContactRoleOptions;\n      selectionType: AvailableShopifyCompanyContactRoleSelection;\n      schemaType: Query[\"shopifyCompanyContactRole\"];\n      defaultSelection: typeof DefaultShopifyCompanyContactRoleSelection;\n    }\n  bulkCreate: {\n      /**\n        * Executes the bulkCreate action with the given inputs.\n        */\n       <Options extends CreateShopifyCompanyContactRoleOptions>(\n          inputs: (FullyQualifiedCreateShopifyCompanyContactRoleVariables | CreateShopifyCompanyContactRoleVariables)[],\n          options?: LimitToKnownKeys<Options, CreateShopifyCompanyContactRoleOptions>\n       ): Promise<CreateShopifyCompanyContactRoleResult<Options>[]>\n      type: 'action';\n      operationName: 'bulkCreateShopifyCompanyContactRoles';\n      isBulk: true;\n      isDeleter: false;\n      hasReturnType: false;\n      acceptsModelInput: true;\n      operatesWithRecordIdentity: false;\n      singleActionFunctionName: 'create';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      modelSelectionField: typeof pluralModelApiIdentifier;\n      optionsType: CreateShopifyCompanyContactRoleOptions;\n      namespace: null;\n      variables: {\n          inputs: {\n            required: true,\n            type: '[BulkCreateShopifyCompanyContactRolesInput!]'\n          }\n        };\n      variablesType: (FullyQualifiedCreateShopifyCompanyContactRoleVariables | CreateShopifyCompanyContactRoleVariables)[];\n      paramOnlyVariables: [];\n      selectionType: AvailableShopifyCompanyContactRoleSelection;\n      schemaType: Query[\"shopifyCompanyContactRole\"];\n      defaultSelection: typeof DefaultShopifyCompanyContactRoleSelection;\n    }\n  update: {\n      /**\n       * Executes the update actionon one record specified by `id`.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the flat style, all-params-together overload that most use cases should use.\n      *\n      * @example\n      * * const shopifyCompanyContactRoleRecord = await api.shopifyCompanyContactRole.update(\"1\", {\n        *   company: {\n        *     _link: \"1\",\n        *   },\n        *   id: \"1\",\n        *   shop: {\n        *     _link: \"1\",\n        *   },\n        * });\n      **/\n      <Options extends UpdateShopifyCompanyContactRoleOptions>(\n        id: string,\n        variables: UpdateShopifyCompanyContactRoleVariables,\n        options?: LimitToKnownKeys<Options, UpdateShopifyCompanyContactRoleOptions>\n      ): Promise<UpdateShopifyCompanyContactRoleResult<Options>>;\n      /**\n       * Executes the update actionon one record specified by `id`.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the fully qualified, nested api identifier style overload that should be used when there's an ambiguity between an action param and a model field.\n      *\n      * @example\n      * * const shopifyCompanyContactRoleRecord = await api.shopifyCompanyContactRole.update(\"1\", {\n        *   shopifyCompanyContactRole: {\n        *     company: {\n        *       _link: \"1\",\n        *     },\n        *     id: \"1\",\n        *     shop: {\n        *       _link: \"1\",\n        *     },\n        *   },\n        * });\n      **/\n      <Options extends UpdateShopifyCompanyContactRoleOptions>(\n        id: string,\n        variables: FullyQualifiedUpdateShopifyCompanyContactRoleVariables,\n        options?: LimitToKnownKeys<Options, UpdateShopifyCompanyContactRoleOptions>\n      ): Promise<UpdateShopifyCompanyContactRoleResult<Options>>;\n      type: 'action';\n      operationName: 'updateShopifyCompanyContactRole';\n      operationReturnType: 'UpdateShopifyCompanyContactRole';\n      namespace: null;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      operatesWithRecordIdentity: true;\n      modelSelectionField: typeof modelApiIdentifier;\n      isBulk: false;\n      isDeleter: false;\n      variables: {\n          id: { required: true, type: 'GadgetID' },\n          shopifyCompanyContactRole: { required: false, type: 'UpdateShopifyCompanyContactRoleInput' }\n        };\n      variablesType: (\n              { id: string }\n              & (FullyQualifiedUpdateShopifyCompanyContactRoleVariables | UpdateShopifyCompanyContactRoleVariables)\n            );\n      hasAmbiguousIdentifier: false;\n      paramOnlyVariables: [];\n      hasReturnType: false;\n      acceptsModelInput: true;\n      hasCreateOrUpdateEffect: true;\n      imports: [ 'UpdateShopifyCompanyContactRoleInput' ];\n      optionsType: UpdateShopifyCompanyContactRoleOptions;\n      selectionType: AvailableShopifyCompanyContactRoleSelection;\n      schemaType: Query[\"shopifyCompanyContactRole\"];\n      defaultSelection: typeof DefaultShopifyCompanyContactRoleSelection;\n    }\n  bulkUpdate: {\n      /**\n        * Executes the bulkUpdate action with the given inputs.\n        */\n       <Options extends UpdateShopifyCompanyContactRoleOptions>(\n          inputs: (FullyQualifiedUpdateShopifyCompanyContactRoleVariables | UpdateShopifyCompanyContactRoleVariables & { id: string })[],\n          options?: LimitToKnownKeys<Options, UpdateShopifyCompanyContactRoleOptions>\n       ): Promise<UpdateShopifyCompanyContactRoleResult<Options>[]>\n      type: 'action';\n      operationName: 'bulkUpdateShopifyCompanyContactRoles';\n      isBulk: true;\n      isDeleter: false;\n      hasReturnType: false;\n      acceptsModelInput: true;\n      operatesWithRecordIdentity: true;\n      singleActionFunctionName: 'update';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      modelSelectionField: typeof pluralModelApiIdentifier;\n      optionsType: UpdateShopifyCompanyContactRoleOptions;\n      namespace: null;\n      variables: {\n          inputs: {\n            required: true,\n            type: '[BulkUpdateShopifyCompanyContactRolesInput!]'\n          }\n        };\n      variablesType: (FullyQualifiedUpdateShopifyCompanyContactRoleVariables | UpdateShopifyCompanyContactRoleVariables & { id: string })[];\n      paramOnlyVariables: [];\n      selectionType: AvailableShopifyCompanyContactRoleSelection;\n      schemaType: Query[\"shopifyCompanyContactRole\"];\n      defaultSelection: typeof DefaultShopifyCompanyContactRoleSelection;\n    }\n  delete: {\n      /**\n       * Executes the delete actionon one record specified by `id`.Deletes the record on the server. Returns a Promise that resolves if the delete succeeds.\n      *\n      * This is the fully qualified, nested api identifier style overload that should be used when there's an ambiguity between an action param and a model field.\n      *\n      * @example\n      * * await api.shopifyCompanyContactRole.delete(\"1\");\n      **/\n      <Options extends DeleteShopifyCompanyContactRoleOptions>(\n        id: string,\n      \n        options?: LimitToKnownKeys<Options, DeleteShopifyCompanyContactRoleOptions>\n      ): Promise<DeleteShopifyCompanyContactRoleResult<Options>>;\n      type: 'action';\n      operationName: 'deleteShopifyCompanyContactRole';\n      operationReturnType: 'DeleteShopifyCompanyContactRole';\n      namespace: null;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      operatesWithRecordIdentity: true;\n      modelSelectionField: typeof modelApiIdentifier;\n      isBulk: false;\n      isDeleter: true;\n      variables: { id: { required: true, type: 'GadgetID' } };\n      variablesType: (\n              { id: string }\n              \n            );\n      hasAmbiguousIdentifier: false;\n      paramOnlyVariables: [];\n      hasReturnType: false;\n      acceptsModelInput: false;\n      hasCreateOrUpdateEffect: false;\n      imports: [];\n      optionsType: DeleteShopifyCompanyContactRoleOptions;\n      selectionType: Record<string, never>;\n      schemaType: null;\n      defaultSelection: null;\n    }\n  bulkDelete: {\n      /**\n        * Executes the bulkDelete action with the given inputs.Deletes the records on the server.\n        */\n       <Options extends DeleteShopifyCompanyContactRoleOptions>(\n          ids: string[],\n          options?: LimitToKnownKeys<Options, DeleteShopifyCompanyContactRoleOptions>\n       ): Promise<DeleteShopifyCompanyContactRoleResult<Options>[]>\n      type: 'action';\n      operationName: 'bulkDeleteShopifyCompanyContactRoles';\n      isBulk: true;\n      isDeleter: true;\n      hasReturnType: false;\n      acceptsModelInput: false;\n      operatesWithRecordIdentity: true;\n      singleActionFunctionName: 'delete';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      modelSelectionField: typeof pluralModelApiIdentifier;\n      optionsType: DeleteShopifyCompanyContactRoleOptions;\n      namespace: null;\n      variables: { ids: { required: true, type: '[GadgetID!]' } };\n      variablesType: IDsList | undefined;\n      paramOnlyVariables: [];\n      selectionType: Record<string, never>;\n      schemaType: null;\n      defaultSelection: null;\n    }\n  upsert: {\n      /**\n       * Executes the upsert action.Accepts the parameters for the action via the `variables` argument.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the flat style, all-params-together overload that most use cases should use.\n      *\n      * @example\n      * * const result = await api.shopifyCompanyContactRole.upsert({\n        *   company: {\n        *     _link: \"1\",\n        *   },\n        *   id: \"1\",\n        *   shop: {\n        *     _link: \"1\",\n        *   },\n        * });\n      **/\n      <Options extends UpsertShopifyCompanyContactRoleOptions>(\n      \n        variables: UpsertShopifyCompanyContactRoleVariables,\n        options?: LimitToKnownKeys<Options, UpsertShopifyCompanyContactRoleOptions>\n      ): Promise<UpsertShopifyCompanyContactRoleResult<Options>>;\n      /**\n       * Executes the upsert action.Accepts the parameters for the action via the `variables` argument.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the fully qualified, nested api identifier style overload that should be used when there's an ambiguity between an action param and a model field.\n      *\n      * @example\n      * * const result = await api.shopifyCompanyContactRole.upsert({\n        *   shopifyCompanyContactRole: {\n        *     company: {\n        *       _link: \"1\",\n        *     },\n        *     id: \"1\",\n        *     shop: {\n        *       _link: \"1\",\n        *     },\n        *   },\n        * });\n      **/\n      <Options extends UpsertShopifyCompanyContactRoleOptions>(\n      \n        variables: FullyQualifiedUpsertShopifyCompanyContactRoleVariables,\n        options?: LimitToKnownKeys<Options, UpsertShopifyCompanyContactRoleOptions>\n      ): Promise<UpsertShopifyCompanyContactRoleResult<Options>>;\n      type: 'action';\n      operationName: 'upsertShopifyCompanyContactRole';\n      operationReturnType: 'UpsertShopifyCompanyContactRole';\n      namespace: null;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      operatesWithRecordIdentity: false;\n      modelSelectionField: typeof modelApiIdentifier;\n      isBulk: false;\n      isDeleter: false;\n      variables: {\n          on: { required: false, type: '[String!]' },\n          shopifyCompanyContactRole: { required: false, type: 'UpsertShopifyCompanyContactRoleInput' }\n        };\n      variablesType: ((\n               \n               & (FullyQualifiedUpsertShopifyCompanyContactRoleVariables | UpsertShopifyCompanyContactRoleVariables)\n             ) | undefined);\n      hasAmbiguousIdentifier: false;\n      paramOnlyVariables: [ 'on' ];\n      hasReturnType: {\n          '... on CreateShopifyCompanyContactRoleResult': { hasReturnType: false },\n          '... on UpdateShopifyCompanyContactRoleResult': { hasReturnType: false }\n        };\n      acceptsModelInput: true;\n      hasCreateOrUpdateEffect: true;\n      imports: [ 'Scalars', 'UpsertShopifyCompanyContactRoleInput' ];\n      optionsType: UpsertShopifyCompanyContactRoleOptions;\n      selectionType: AvailableShopifyCompanyContactRoleSelection;\n      schemaType: Query[\"shopifyCompanyContactRole\"];\n      defaultSelection: typeof DefaultShopifyCompanyContactRoleSelection;\n    }\n  bulkUpsert: {\n      /**\n        * Executes the bulkUpsert action with the given inputs.\n        */\n       <Options extends UpsertShopifyCompanyContactRoleOptions>(\n          inputs: (FullyQualifiedUpsertShopifyCompanyContactRoleVariables | UpsertShopifyCompanyContactRoleVariables)[],\n          options?: LimitToKnownKeys<Options, UpsertShopifyCompanyContactRoleOptions>\n       ): Promise<any[]>\n      type: 'action';\n      operationName: 'bulkUpsertShopifyCompanyContactRoles';\n      isBulk: true;\n      isDeleter: false;\n      hasReturnType: false;\n      acceptsModelInput: true;\n      operatesWithRecordIdentity: false;\n      singleActionFunctionName: 'upsert';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      modelSelectionField: typeof pluralModelApiIdentifier;\n      optionsType: UpsertShopifyCompanyContactRoleOptions;\n      namespace: null;\n      variables: {\n          inputs: {\n            required: true,\n            type: '[BulkUpsertShopifyCompanyContactRolesInput!]'\n          }\n        };\n      variablesType: (FullyQualifiedUpsertShopifyCompanyContactRoleVariables | UpsertShopifyCompanyContactRoleVariables)[];\n      paramOnlyVariables: [ 'on' ];\n      selectionType: AvailableShopifyCompanyContactRoleSelection;\n      schemaType: Query[\"shopifyCompanyContactRole\"];\n      defaultSelection: typeof DefaultShopifyCompanyContactRoleSelection;\n    }\n  view: {\n      (query: string, variables?: Record<string, unknown>): Promise<unknown>\n      type: 'computedView';\n      operationName: 'view';\n      gqlFieldName: 'shopifyCompanyContactRoleGellyView';\n      namespace: null;\n      imports: [];\n      variables: {\n          query: { type: 'String', required: true },\n          args: { type: 'JSONObject' }\n        };\n      variablesType: Record<string, unknown>;\n      resultType: Promise<unknown>;\n      plan: never;\n    }\n};\n\n/**\n * A manager for the shopifyCompanyContactRole model with all the available operations for reading and writing to it.*/\nexport const ShopifyCompanyContactRoleManager = buildModelManager(\n  modelApiIdentifier,\n  pluralModelApiIdentifier,\n  DefaultShopifyCompanyContactRoleSelection,\n  [\n    {\n      type: 'findOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultShopifyCompanyContactRoleSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultShopifyCompanyContactRoleSelection,\n      namespace: null\n    },\n    {\n      type: 'findMany',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyCompanyContactRoleSelection,\n      namespace: null\n    },\n    {\n      type: 'findFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyCompanyContactRoleSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyCompanyContactRoleSelection,\n      namespace: null\n    },\n    {\n      type: 'findOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'findById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyCompanyContactRoleSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'maybeFindById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyCompanyContactRoleSelection,\n      namespace: null\n    },\n    {\n      type: 'action',\n      operationName: 'createShopifyCompanyContactRole',\n      operationReturnType: 'CreateShopifyCompanyContactRole',\n      functionName: 'create',\n      namespace: null,\n      modelApiIdentifier: modelApiIdentifier,\n      operatesWithRecordIdentity: false,\n      modelSelectionField: modelApiIdentifier,\n      isBulk: false,\n      isDeleter: false,\n      variables: {\n        shopifyCompanyContactRole: { required: false, type: 'CreateShopifyCompanyContactRoleInput' }\n      },\n      hasAmbiguousIdentifier: false,\n      paramOnlyVariables: [],\n      hasReturnType: false,\n      acceptsModelInput: true,\n      hasCreateOrUpdateEffect: true,\n      defaultSelection: DefaultShopifyCompanyContactRoleSelection\n    },\n    {\n      type: 'action',\n      operationName: 'bulkCreateShopifyCompanyContactRoles',\n      functionName: 'bulkCreate',\n      isBulk: true,\n      isDeleter: false,\n      hasReturnType: false,\n      acceptsModelInput: true,\n      operatesWithRecordIdentity: false,\n      singleActionFunctionName: 'create',\n      modelApiIdentifier: modelApiIdentifier,\n      modelSelectionField: pluralModelApiIdentifier,\n      namespace: null,\n      variables: {\n        inputs: {\n          required: true,\n          type: '[BulkCreateShopifyCompanyContactRolesInput!]'\n        }\n      },\n      paramOnlyVariables: [],\n      defaultSelection: DefaultShopifyCompanyContactRoleSelection\n    },\n    {\n      type: 'action',\n      operationName: 'updateShopifyCompanyContactRole',\n      operationReturnType: 'UpdateShopifyCompanyContactRole',\n      functionName: 'update',\n      namespace: null,\n      modelApiIdentifier: modelApiIdentifier,\n      operatesWithRecordIdentity: true,\n      modelSelectionField: modelApiIdentifier,\n      isBulk: false,\n      isDeleter: false,\n      variables: {\n        id: { required: true, type: 'GadgetID' },\n        shopifyCompanyContactRole: { required: false, type: 'UpdateShopifyCompanyContactRoleInput' }\n      },\n      hasAmbiguousIdentifier: false,\n      paramOnlyVariables: [],\n      hasReturnType: false,\n      acceptsModelInput: true,\n      hasCreateOrUpdateEffect: true,\n      defaultSelection: DefaultShopifyCompanyContactRoleSelection\n    },\n    {\n      type: 'action',\n      operationName: 'bulkUpdateShopifyCompanyContactRoles',\n      functionName: 'bulkUpdate',\n      isBulk: true,\n      isDeleter: false,\n      hasReturnType: false,\n      acceptsModelInput: true,\n      operatesWithRecordIdentity: true,\n      singleActionFunctionName: 'update',\n      modelApiIdentifier: modelApiIdentifier,\n      modelSelectionField: pluralModelApiIdentifier,\n      namespace: null,\n      variables: {\n        inputs: {\n          required: true,\n          type: '[BulkUpdateShopifyCompanyContactRolesInput!]'\n        }\n      },\n      paramOnlyVariables: [],\n      defaultSelection: DefaultShopifyCompanyContactRoleSelection\n    },\n    {\n      type: 'action',\n      operationName: 'deleteShopifyCompanyContactRole',\n      operationReturnType: 'DeleteShopifyCompanyContactRole',\n      functionName: 'delete',\n      namespace: null,\n      modelApiIdentifier: modelApiIdentifier,\n      operatesWithRecordIdentity: true,\n      modelSelectionField: modelApiIdentifier,\n      isBulk: false,\n      isDeleter: true,\n      variables: { id: { required: true, type: 'GadgetID' } },\n      hasAmbiguousIdentifier: false,\n      paramOnlyVariables: [],\n      hasReturnType: false,\n      acceptsModelInput: false,\n      hasCreateOrUpdateEffect: false,\n      defaultSelection: null\n    },\n    {\n      type: 'action',\n      operationName: 'bulkDeleteShopifyCompanyContactRoles',\n      functionName: 'bulkDelete',\n      isBulk: true,\n      isDeleter: true,\n      hasReturnType: false,\n      acceptsModelInput: false,\n      operatesWithRecordIdentity: true,\n      singleActionFunctionName: 'delete',\n      modelApiIdentifier: modelApiIdentifier,\n      modelSelectionField: pluralModelApiIdentifier,\n      namespace: null,\n      variables: { ids: { required: true, type: '[GadgetID!]' } },\n      paramOnlyVariables: [],\n      defaultSelection: null\n    },\n    {\n      type: 'action',\n      operationName: 'upsertShopifyCompanyContactRole',\n      operationReturnType: 'UpsertShopifyCompanyContactRole',\n      functionName: 'upsert',\n      namespace: null,\n      modelApiIdentifier: modelApiIdentifier,\n      operatesWithRecordIdentity: false,\n      modelSelectionField: modelApiIdentifier,\n      isBulk: false,\n      isDeleter: false,\n      variables: {\n        on: { required: false, type: '[String!]' },\n        shopifyCompanyContactRole: { required: false, type: 'UpsertShopifyCompanyContactRoleInput' }\n      },\n      hasAmbiguousIdentifier: false,\n      paramOnlyVariables: [ 'on' ],\n      hasReturnType: {\n        '... on CreateShopifyCompanyContactRoleResult': { hasReturnType: false },\n        '... on UpdateShopifyCompanyContactRoleResult': { hasReturnType: false }\n      },\n      acceptsModelInput: true,\n      hasCreateOrUpdateEffect: true,\n      defaultSelection: DefaultShopifyCompanyContactRoleSelection\n    },\n    {\n      type: 'action',\n      operationName: 'bulkUpsertShopifyCompanyContactRoles',\n      functionName: 'bulkUpsert',\n      isBulk: true,\n      isDeleter: false,\n      hasReturnType: false,\n      acceptsModelInput: true,\n      operatesWithRecordIdentity: false,\n      singleActionFunctionName: 'upsert',\n      modelApiIdentifier: modelApiIdentifier,\n      modelSelectionField: pluralModelApiIdentifier,\n      namespace: null,\n      variables: {\n        inputs: {\n          required: true,\n          type: '[BulkUpsertShopifyCompanyContactRolesInput!]'\n        }\n      },\n      paramOnlyVariables: [ 'on' ],\n      defaultSelection: DefaultShopifyCompanyContactRoleSelection\n    },\n    {\n      type: 'computedView',\n      operationName: 'view',\n      functionName: 'view',\n      gqlFieldName: 'shopifyCompanyContactRoleGellyView',\n      namespace: null,\n      variables: {\n        query: { type: 'String', required: true },\n        args: { type: 'JSONObject' }\n      }\n    }\n  ] as const\n) as unknown as {\n  // Gadget generates these model manager classes at runtime dynamically, which means there is no source code for the class. This is done to make the bundle size of the client as small as possible, avoiding a bunch of repeated source code in favour of one small builder function. The TypeScript types above document the exact interface of the constructed class.\n  new(connection: GadgetConnection): ShopifyCompanyContactRoleManager;\n};", "import {\n  GadgetConnection,\n  GadgetRecord,\n  GadgetRecordImplementation,\n  GadgetRecordList,\n  GadgetNonUniqueDataError,\n  actionRunner,\n  findManyRunner,\n  findOneRunner,\n  findOneByFieldRunner,\n  FieldSelection,\n  LimitToKnownKeys,\n  Selectable\n} from \"@gadgetinc/api-client-core\";\n\nimport {\n  Query,\n  ExplicitNestingRequired,\n\n  IDsList,\n  PromiseOrLiveIterator,\n  ShopifyCompanyContactRoleAssignment,\n  AvailableShopifyCompanyContactRoleAssignmentSelection,\n  ShopifyCompanyContactRoleAssignmentSort,\n  ShopifyCompanyContactRoleAssignmentFilter,\n  CreateShopifyCompanyContactRoleAssignmentInput,\n  UpdateShopifyCompanyContactRoleAssignmentInput,\n  Scalars,\n  UpsertShopifyCompanyContactRoleAssignmentInput\n} from \"../types.js\";\n\nimport { buildModelManager } from \"../builder.js\";\nimport { AvailableSelection, AllFieldsSelected, DefaultSelection, Select, DeepFilterNever } from \"../utils.js\";\n\n/**\n* A type that holds only the selected fields (and nested fields) of shopifyCompanyContactRoleAssignment. The present fields in the result type of this are dynamic based on the options to each call that uses it.\n* The selected fields are sometimes given by the `Options` at `Options[\"select\"]`, and if a selection isn't made in the options, we use the default selection from above.\n*/\nexport type SelectedShopifyCompanyContactRoleAssignmentOrDefault<Options extends Selectable<AvailableShopifyCompanyContactRoleAssignmentSelection>> = DeepFilterNever<\n    Select<\n      ShopifyCompanyContactRoleAssignment,\n      DefaultSelection<\n        AvailableShopifyCompanyContactRoleAssignmentSelection,\n        Options,\n        typeof DefaultShopifyCompanyContactRoleAssignmentSelection\n      >\n    >\n  >;\n\n/**\n * A type that represents a `GadgetRecord` type for shopifyCompanyContactRoleAssignment.\n * It selects all fields of the model by default. If you want to represent a record type with a subset of fields, you could pass in an object in the `Selection` type parameter.\n *\n * @example\n * ```ts\n * const someFunction = (record: ShopifyCompanyContactRoleAssignmentRecord, recordWithName: ShopifyCompanyContactRoleAssignmentRecord<{ select: { name: true; } }>) => {\n *   // The type of the `record` variable will include all fields of the model.\n *   const name = record.name;\n *   const otherField = record.otherField;\n *\n *   // The type of the `recordWithName` variable will only include the selected fields.\n *   const name = recordWithName.name;\n *   const otherField = recordWithName.otherField; // Type error: Property 'otherField' does not exist on type 'GadgetRecord<{ name: true; }>'.\n * }\n * ```\n */\nexport type ShopifyCompanyContactRoleAssignmentRecord<Selection extends AvailableShopifyCompanyContactRoleAssignmentSelection | undefined = typeof DefaultShopifyCompanyContactRoleAssignmentSelection> = DeepFilterNever<\n  GadgetRecord<\n    SelectedShopifyCompanyContactRoleAssignmentOrDefault<{\n      select: Selection;\n    }>\n  >\n>;\n\nexport const DefaultShopifyCompanyContactRoleAssignmentSelection = {\n     __typename: true,\n     id: true,\n     companyContactId: true,\n     companyId: true,\n     companyLocationId: true,\n     createdAt: true,\n     roleId: true,\n     shopId: true,\n     updatedAt: true\n   } as const;\nconst modelApiIdentifier = \"shopifyCompanyContactRoleAssignment\" as const;\nconst pluralModelApiIdentifier = \"shopifyCompanyContactRoleAssignments\" as const;\n/** Options that can be passed to the `ShopifyCompanyContactRoleAssignmentManager#findOne` method */\n export interface FindOneShopifyCompanyContactRoleAssignmentOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCompanyContactRoleAssignmentSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `ShopifyCompanyContactRoleAssignmentManager#maybeFindOne` method */\n export interface MaybeFindOneShopifyCompanyContactRoleAssignmentOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCompanyContactRoleAssignmentSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `ShopifyCompanyContactRoleAssignmentManager#findMany` method */\n export interface FindManyShopifyCompanyContactRoleAssignmentsOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCompanyContactRoleAssignmentSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyCompanyContactRoleAssignmentSort | ShopifyCompanyContactRoleAssignmentSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyCompanyContactRoleAssignmentFilter | ShopifyCompanyContactRoleAssignmentFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n  first?: number | null;\n  last?: number | null;\n  after?: string | null;\n  before?: string | null;\n};\n/** Options that can be passed to the `ShopifyCompanyContactRoleAssignmentManager#findFirst` method */\n export interface FindFirstShopifyCompanyContactRoleAssignmentOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCompanyContactRoleAssignmentSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyCompanyContactRoleAssignmentSort | ShopifyCompanyContactRoleAssignmentSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyCompanyContactRoleAssignmentFilter | ShopifyCompanyContactRoleAssignmentFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\n/** Options that can be passed to the `ShopifyCompanyContactRoleAssignmentManager#maybeFindFirst` method */\n export interface MaybeFindFirstShopifyCompanyContactRoleAssignmentOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCompanyContactRoleAssignmentSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyCompanyContactRoleAssignmentSort | ShopifyCompanyContactRoleAssignmentSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyCompanyContactRoleAssignmentFilter | ShopifyCompanyContactRoleAssignmentFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\nexport interface CreateShopifyCompanyContactRoleAssignmentOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCompanyContactRoleAssignmentSelection;\n};\nexport interface UpdateShopifyCompanyContactRoleAssignmentOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCompanyContactRoleAssignmentSelection;\n};\nexport interface DeleteShopifyCompanyContactRoleAssignmentOptions {\n\n};\nexport interface UpsertShopifyCompanyContactRoleAssignmentOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCompanyContactRoleAssignmentSelection;\n};\n/**\n * The fully-qualified, expanded form of the inputs for executing the create action.\n * The flattened style should be preferred over this style, but for models with ambiguous API identifiers, this style can be used to remove any ambiguity.\n **/\nexport type FullyQualifiedCreateShopifyCompanyContactRoleAssignmentVariables = {\n  shopifyCompanyContactRoleAssignment?: CreateShopifyCompanyContactRoleAssignmentInput;\n}\n/**\n * The inputs for executing create on shopifyCompanyContactRoleAssignment.\n * This is the flattened style of inputs, suitable for general use, and should be preferred.\n **/\nexport type CreateShopifyCompanyContactRoleAssignmentVariables = CreateShopifyCompanyContactRoleAssignmentInput;\n/**\n * The return value from executing create on shopifyCompanyContactRoleAssignment\n * Is a GadgetRecord of the model's type.\n **/\nexport type CreateShopifyCompanyContactRoleAssignmentResult<Options extends CreateShopifyCompanyContactRoleAssignmentOptions> = SelectedShopifyCompanyContactRoleAssignmentOrDefault<Options> extends void ?\n      void :\n      GadgetRecord<SelectedShopifyCompanyContactRoleAssignmentOrDefault<Options>>;\n/**\n * The fully-qualified, expanded form of the inputs for executing the update action.\n * The flattened style should be preferred over this style, but for models with ambiguous API identifiers, this style can be used to remove any ambiguity.\n **/\nexport type FullyQualifiedUpdateShopifyCompanyContactRoleAssignmentVariables = {\n  shopifyCompanyContactRoleAssignment?: UpdateShopifyCompanyContactRoleAssignmentInput;\n}\n/**\n * The inputs for executing update on shopifyCompanyContactRoleAssignment.\n * This is the flattened style of inputs, suitable for general use, and should be preferred.\n **/\nexport type UpdateShopifyCompanyContactRoleAssignmentVariables = UpdateShopifyCompanyContactRoleAssignmentInput;\n/**\n * The return value from executing update on shopifyCompanyContactRoleAssignment\n * Is a GadgetRecord of the model's type.\n **/\nexport type UpdateShopifyCompanyContactRoleAssignmentResult<Options extends UpdateShopifyCompanyContactRoleAssignmentOptions> = SelectedShopifyCompanyContactRoleAssignmentOrDefault<Options> extends void ?\n      void :\n      GadgetRecord<SelectedShopifyCompanyContactRoleAssignmentOrDefault<Options>>;\n/**\n * The return value from executing delete on shopifyCompanyContactRoleAssignment\n * Is void because this action deletes the record\n **/\nexport type DeleteShopifyCompanyContactRoleAssignmentResult<Options extends DeleteShopifyCompanyContactRoleAssignmentOptions> = void;\n/**\n * The fully-qualified, expanded form of the inputs for executing the upsert action.\n * The flattened style should be preferred over this style, but for models with ambiguous API identifiers, this style can be used to remove any ambiguity.\n **/\nexport type FullyQualifiedUpsertShopifyCompanyContactRoleAssignmentVariables = {\n  on?: ((Scalars['String'] | null))[];\n  shopifyCompanyContactRoleAssignment?: UpsertShopifyCompanyContactRoleAssignmentInput;\n}\n/**\n * The inputs for executing upsert on shopifyCompanyContactRoleAssignment.\n * This is the flattened style of inputs, suitable for general use, and should be preferred.\n **/\nexport type UpsertShopifyCompanyContactRoleAssignmentVariables = Omit<\n     UpsertShopifyCompanyContactRoleAssignmentInput,\n     \"on\"\n   > & {\n     on?: ((Scalars['String'] | null))[];\n   };\n/**\n * The return value from executing upsert on shopifyCompanyContactRoleAssignment\n *\n **/\nexport type UpsertShopifyCompanyContactRoleAssignmentResult<Options extends UpsertShopifyCompanyContactRoleAssignmentOptions> = SelectedShopifyCompanyContactRoleAssignmentOrDefault<Options> extends void ?\n      void :\n      GadgetRecord<SelectedShopifyCompanyContactRoleAssignmentOrDefault<Options>>;\n\n/**\n * A manager for the shopifyCompanyContactRoleAssignment model with all the available operations for reading and writing to it.*/\nexport type ShopifyCompanyContactRoleAssignmentManager = {\n  readonly connection: GadgetConnection;\n\n  findOne: {\n      /**\n       * Finds one shopifyCompanyContactRoleAssignment by ID. Returns a `Promise` that resolves to the record if found and rejects the promise if the record isn't found.\n       **/\n      <Options extends FindOneShopifyCompanyContactRoleAssignmentOptions>(id: string, options?: LimitToKnownKeys<Options, FindOneShopifyCompanyContactRoleAssignmentOptions>): PromiseOrLiveIterator<Options,ShopifyCompanyContactRoleAssignmentRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultShopifyCompanyContactRoleAssignmentSelection;\n      namespace: null;\n      optionsType: FindOneShopifyCompanyContactRoleAssignmentOptions;\n      selectionType: AvailableShopifyCompanyContactRoleAssignmentSelection;\n      schemaType: Query[\"shopifyCompanyContactRoleAssignment\"];\n    }\n  maybeFindOne: {\n      /**\n       * Finds one shopifyCompanyContactRoleAssignment by ID. Returns a `Promise` that resolves to the record if found and returns null otherwise.\n       **/\n      <Options extends MaybeFindOneShopifyCompanyContactRoleAssignmentOptions>(id: string, options?: LimitToKnownKeys<Options, MaybeFindOneShopifyCompanyContactRoleAssignmentOptions>): PromiseOrLiveIterator<Options,ShopifyCompanyContactRoleAssignmentRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: MaybeFindOneShopifyCompanyContactRoleAssignmentOptions;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultShopifyCompanyContactRoleAssignmentSelection;\n      namespace: null;\n      selectionType: AvailableShopifyCompanyContactRoleAssignmentSelection;\n      schemaType: Query[\"shopifyCompanyContactRoleAssignment\"];\n    }\n  findMany: {\n      /**\n       * Finds many shopifyCompanyContactRoleAssignment. Returns a `Promise` for a `GadgetRecordList` of objects according to the passed `options`. Optionally filters the returned records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindManyShopifyCompanyContactRoleAssignmentsOptions>(options?: LimitToKnownKeys<Options, FindManyShopifyCompanyContactRoleAssignmentsOptions>): PromiseOrLiveIterator<Options,GadgetRecordList<ShopifyCompanyContactRoleAssignmentRecord<Options[\"select\"]>>>;\n      type: 'findMany';\n      operationName: typeof pluralModelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: FindManyShopifyCompanyContactRoleAssignmentsOptions;\n      defaultSelection: typeof DefaultShopifyCompanyContactRoleAssignmentSelection;\n      namespace: null;\n      selectionType: AvailableShopifyCompanyContactRoleAssignmentSelection;\n      schemaType: Query[\"shopifyCompanyContactRoleAssignment\"];\n    }\n  findFirst: {\n      /**\n       * Finds the first matching shopifyCompanyContactRoleAssignment. Returns a `Promise` that resolves to a record if found and rejects the promise if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindFirstShopifyCompanyContactRoleAssignmentOptions>(options?: LimitToKnownKeys<Options, FindFirstShopifyCompanyContactRoleAssignmentOptions>): PromiseOrLiveIterator<Options,ShopifyCompanyContactRoleAssignmentRecord<Options[\"select\"]>>;\n      type: 'findFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: FindFirstShopifyCompanyContactRoleAssignmentOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyCompanyContactRoleAssignmentSelection;\n      namespace: null;\n      selectionType: AvailableShopifyCompanyContactRoleAssignmentSelection;\n      schemaType: Query[\"shopifyCompanyContactRoleAssignment\"];\n    }\n  maybeFindFirst: {\n      /**\n       * Finds the first matching shopifyCompanyContactRoleAssignment. Returns a `Promise` that resolves to a record if found, or null if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` pagination options.\n       **/\n      <Options extends MaybeFindFirstShopifyCompanyContactRoleAssignmentOptions>(options?: LimitToKnownKeys<Options, MaybeFindFirstShopifyCompanyContactRoleAssignmentOptions>): PromiseOrLiveIterator<Options,ShopifyCompanyContactRoleAssignmentRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: MaybeFindFirstShopifyCompanyContactRoleAssignmentOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyCompanyContactRoleAssignmentSelection;\n      namespace: null;\n      selectionType: AvailableShopifyCompanyContactRoleAssignmentSelection;\n      schemaType: Query[\"shopifyCompanyContactRoleAssignment\"];\n    }\n  findById: {\n      /**\n      * Finds one shopifyCompanyContactRoleAssignment by its id. Returns a Promise that resolves to the record if found and rejects the promise if the record isn't found.\n      **/\n      <Options extends FindOneShopifyCompanyContactRoleAssignmentOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneShopifyCompanyContactRoleAssignmentOptions>): PromiseOrLiveIterator<Options,ShopifyCompanyContactRoleAssignmentRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneShopifyCompanyContactRoleAssignmentOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyCompanyContactRoleAssignmentSelection;\n      namespace: null;\n      selectionType: AvailableShopifyCompanyContactRoleAssignmentSelection;\n      schemaType: Query[\"shopifyCompanyContactRoleAssignment\"];\n    }\n  maybeFindById: {\n      /**\n      * Finds one shopifyCompanyContactRoleAssignment by its id. Returns a Promise that resolves to the record if found and returns null if the record isn't found.\n      **/\n      <Options extends FindOneShopifyCompanyContactRoleAssignmentOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneShopifyCompanyContactRoleAssignmentOptions>): Promise<ShopifyCompanyContactRoleAssignmentRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneShopifyCompanyContactRoleAssignmentOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyCompanyContactRoleAssignmentSelection;\n      namespace: null;\n      selectionType: AvailableShopifyCompanyContactRoleAssignmentSelection;\n      schemaType: Query[\"shopifyCompanyContactRoleAssignment\"];\n    }\n  create: {\n      /**\n       * Executes the create action.Accepts the parameters for the action via the `variables` argument.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the flat style, all-params-together overload that most use cases should use.\n      *\n      * @example\n      * * const shopifyCompanyContactRoleAssignmentRecord = await api.shopifyCompanyContactRoleAssignment.create({\n        *   company: {\n        *     _link: \"1\",\n        *   },\n        *   companyContact: {\n        *     _link: \"1\",\n        *   },\n        *   companyLocation: {\n        *     _link: \"1\",\n        *   },\n        *   id: \"1\",\n        *   role: {\n        *     _link: \"1\",\n        *   },\n        * });\n      **/\n      <Options extends CreateShopifyCompanyContactRoleAssignmentOptions>(\n      \n        variables: CreateShopifyCompanyContactRoleAssignmentVariables,\n        options?: LimitToKnownKeys<Options, CreateShopifyCompanyContactRoleAssignmentOptions>\n      ): Promise<CreateShopifyCompanyContactRoleAssignmentResult<Options>>;\n      /**\n       * Executes the create action.Accepts the parameters for the action via the `variables` argument.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the fully qualified, nested api identifier style overload that should be used when there's an ambiguity between an action param and a model field.\n      *\n      * @example\n      * * const shopifyCompanyContactRoleAssignmentRecord = await api.shopifyCompanyContactRoleAssignment.create({\n        *   shopifyCompanyContactRoleAssignment: {\n        *     company: {\n        *       _link: \"1\",\n        *     },\n        *     companyContact: {\n        *       _link: \"1\",\n        *     },\n        *     companyLocation: {\n        *       _link: \"1\",\n        *     },\n        *     id: \"1\",\n        *     role: {\n        *       _link: \"1\",\n        *     },\n        *   },\n        * });\n      **/\n      <Options extends CreateShopifyCompanyContactRoleAssignmentOptions>(\n      \n        variables: FullyQualifiedCreateShopifyCompanyContactRoleAssignmentVariables,\n        options?: LimitToKnownKeys<Options, CreateShopifyCompanyContactRoleAssignmentOptions>\n      ): Promise<CreateShopifyCompanyContactRoleAssignmentResult<Options>>;\n      type: 'action';\n      operationName: 'createShopifyCompanyContactRoleAssignment';\n      operationReturnType: 'CreateShopifyCompanyContactRoleAssignment';\n      namespace: null;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      operatesWithRecordIdentity: false;\n      modelSelectionField: typeof modelApiIdentifier;\n      isBulk: false;\n      isDeleter: false;\n      variables: {\n          shopifyCompanyContactRoleAssignment: {\n            required: false,\n            type: 'CreateShopifyCompanyContactRoleAssignmentInput'\n          }\n        };\n      variablesType: ((\n               \n               & (FullyQualifiedCreateShopifyCompanyContactRoleAssignmentVariables | CreateShopifyCompanyContactRoleAssignmentVariables)\n             ) | undefined);\n      hasAmbiguousIdentifier: false;\n      paramOnlyVariables: [];\n      hasReturnType: false;\n      acceptsModelInput: true;\n      hasCreateOrUpdateEffect: true;\n      imports: [ 'CreateShopifyCompanyContactRoleAssignmentInput' ];\n      optionsType: CreateShopifyCompanyContactRoleAssignmentOptions;\n      selectionType: AvailableShopifyCompanyContactRoleAssignmentSelection;\n      schemaType: Query[\"shopifyCompanyContactRoleAssignment\"];\n      defaultSelection: typeof DefaultShopifyCompanyContactRoleAssignmentSelection;\n    }\n  bulkCreate: {\n      /**\n        * Executes the bulkCreate action with the given inputs.\n        */\n       <Options extends CreateShopifyCompanyContactRoleAssignmentOptions>(\n          inputs: (FullyQualifiedCreateShopifyCompanyContactRoleAssignmentVariables | CreateShopifyCompanyContactRoleAssignmentVariables)[],\n          options?: LimitToKnownKeys<Options, CreateShopifyCompanyContactRoleAssignmentOptions>\n       ): Promise<CreateShopifyCompanyContactRoleAssignmentResult<Options>[]>\n      type: 'action';\n      operationName: 'bulkCreateShopifyCompanyContactRoleAssignments';\n      isBulk: true;\n      isDeleter: false;\n      hasReturnType: false;\n      acceptsModelInput: true;\n      operatesWithRecordIdentity: false;\n      singleActionFunctionName: 'create';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      modelSelectionField: typeof pluralModelApiIdentifier;\n      optionsType: CreateShopifyCompanyContactRoleAssignmentOptions;\n      namespace: null;\n      variables: {\n          inputs: {\n            required: true,\n            type: '[BulkCreateShopifyCompanyContactRoleAssignmentsInput!]'\n          }\n        };\n      variablesType: (FullyQualifiedCreateShopifyCompanyContactRoleAssignmentVariables | CreateShopifyCompanyContactRoleAssignmentVariables)[];\n      paramOnlyVariables: [];\n      selectionType: AvailableShopifyCompanyContactRoleAssignmentSelection;\n      schemaType: Query[\"shopifyCompanyContactRoleAssignment\"];\n      defaultSelection: typeof DefaultShopifyCompanyContactRoleAssignmentSelection;\n    }\n  update: {\n      /**\n       * Executes the update actionon one record specified by `id`.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the flat style, all-params-together overload that most use cases should use.\n      *\n      * @example\n      * * const shopifyCompanyContactRoleAssignmentRecord = await api.shopifyCompanyContactRoleAssignment.update(\"1\", {\n        *   company: {\n        *     _link: \"1\",\n        *   },\n        *   companyContact: {\n        *     _link: \"1\",\n        *   },\n        *   companyLocation: {\n        *     _link: \"1\",\n        *   },\n        *   id: \"1\",\n        *   role: {\n        *     _link: \"1\",\n        *   },\n        * });\n      **/\n      <Options extends UpdateShopifyCompanyContactRoleAssignmentOptions>(\n        id: string,\n        variables: UpdateShopifyCompanyContactRoleAssignmentVariables,\n        options?: LimitToKnownKeys<Options, UpdateShopifyCompanyContactRoleAssignmentOptions>\n      ): Promise<UpdateShopifyCompanyContactRoleAssignmentResult<Options>>;\n      /**\n       * Executes the update actionon one record specified by `id`.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the fully qualified, nested api identifier style overload that should be used when there's an ambiguity between an action param and a model field.\n      *\n      * @example\n      * * const shopifyCompanyContactRoleAssignmentRecord = await api.shopifyCompanyContactRoleAssignment.update(\"1\", {\n        *   shopifyCompanyContactRoleAssignment: {\n        *     company: {\n        *       _link: \"1\",\n        *     },\n        *     companyContact: {\n        *       _link: \"1\",\n        *     },\n        *     companyLocation: {\n        *       _link: \"1\",\n        *     },\n        *     id: \"1\",\n        *     role: {\n        *       _link: \"1\",\n        *     },\n        *   },\n        * });\n      **/\n      <Options extends UpdateShopifyCompanyContactRoleAssignmentOptions>(\n        id: string,\n        variables: FullyQualifiedUpdateShopifyCompanyContactRoleAssignmentVariables,\n        options?: LimitToKnownKeys<Options, UpdateShopifyCompanyContactRoleAssignmentOptions>\n      ): Promise<UpdateShopifyCompanyContactRoleAssignmentResult<Options>>;\n      type: 'action';\n      operationName: 'updateShopifyCompanyContactRoleAssignment';\n      operationReturnType: 'UpdateShopifyCompanyContactRoleAssignment';\n      namespace: null;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      operatesWithRecordIdentity: true;\n      modelSelectionField: typeof modelApiIdentifier;\n      isBulk: false;\n      isDeleter: false;\n      variables: {\n          id: { required: true, type: 'GadgetID' },\n          shopifyCompanyContactRoleAssignment: {\n            required: false,\n            type: 'UpdateShopifyCompanyContactRoleAssignmentInput'\n          }\n        };\n      variablesType: (\n              { id: string }\n              & (FullyQualifiedUpdateShopifyCompanyContactRoleAssignmentVariables | UpdateShopifyCompanyContactRoleAssignmentVariables)\n            );\n      hasAmbiguousIdentifier: false;\n      paramOnlyVariables: [];\n      hasReturnType: false;\n      acceptsModelInput: true;\n      hasCreateOrUpdateEffect: true;\n      imports: [ 'UpdateShopifyCompanyContactRoleAssignmentInput' ];\n      optionsType: UpdateShopifyCompanyContactRoleAssignmentOptions;\n      selectionType: AvailableShopifyCompanyContactRoleAssignmentSelection;\n      schemaType: Query[\"shopifyCompanyContactRoleAssignment\"];\n      defaultSelection: typeof DefaultShopifyCompanyContactRoleAssignmentSelection;\n    }\n  bulkUpdate: {\n      /**\n        * Executes the bulkUpdate action with the given inputs.\n        */\n       <Options extends UpdateShopifyCompanyContactRoleAssignmentOptions>(\n          inputs: (FullyQualifiedUpdateShopifyCompanyContactRoleAssignmentVariables | UpdateShopifyCompanyContactRoleAssignmentVariables & { id: string })[],\n          options?: LimitToKnownKeys<Options, UpdateShopifyCompanyContactRoleAssignmentOptions>\n       ): Promise<UpdateShopifyCompanyContactRoleAssignmentResult<Options>[]>\n      type: 'action';\n      operationName: 'bulkUpdateShopifyCompanyContactRoleAssignments';\n      isBulk: true;\n      isDeleter: false;\n      hasReturnType: false;\n      acceptsModelInput: true;\n      operatesWithRecordIdentity: true;\n      singleActionFunctionName: 'update';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      modelSelectionField: typeof pluralModelApiIdentifier;\n      optionsType: UpdateShopifyCompanyContactRoleAssignmentOptions;\n      namespace: null;\n      variables: {\n          inputs: {\n            required: true,\n            type: '[BulkUpdateShopifyCompanyContactRoleAssignmentsInput!]'\n          }\n        };\n      variablesType: (FullyQualifiedUpdateShopifyCompanyContactRoleAssignmentVariables | UpdateShopifyCompanyContactRoleAssignmentVariables & { id: string })[];\n      paramOnlyVariables: [];\n      selectionType: AvailableShopifyCompanyContactRoleAssignmentSelection;\n      schemaType: Query[\"shopifyCompanyContactRoleAssignment\"];\n      defaultSelection: typeof DefaultShopifyCompanyContactRoleAssignmentSelection;\n    }\n  delete: {\n      /**\n       * Executes the delete actionon one record specified by `id`.Deletes the record on the server. Returns a Promise that resolves if the delete succeeds.\n      *\n      * This is the fully qualified, nested api identifier style overload that should be used when there's an ambiguity between an action param and a model field.\n      *\n      * @example\n      * * await api.shopifyCompanyContactRoleAssignment.delete(\"1\");\n      **/\n      <Options extends DeleteShopifyCompanyContactRoleAssignmentOptions>(\n        id: string,\n      \n        options?: LimitToKnownKeys<Options, DeleteShopifyCompanyContactRoleAssignmentOptions>\n      ): Promise<DeleteShopifyCompanyContactRoleAssignmentResult<Options>>;\n      type: 'action';\n      operationName: 'deleteShopifyCompanyContactRoleAssignment';\n      operationReturnType: 'DeleteShopifyCompanyContactRoleAssignment';\n      namespace: null;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      operatesWithRecordIdentity: true;\n      modelSelectionField: typeof modelApiIdentifier;\n      isBulk: false;\n      isDeleter: true;\n      variables: { id: { required: true, type: 'GadgetID' } };\n      variablesType: (\n              { id: string }\n              \n            );\n      hasAmbiguousIdentifier: false;\n      paramOnlyVariables: [];\n      hasReturnType: false;\n      acceptsModelInput: false;\n      hasCreateOrUpdateEffect: false;\n      imports: [];\n      optionsType: DeleteShopifyCompanyContactRoleAssignmentOptions;\n      selectionType: Record<string, never>;\n      schemaType: null;\n      defaultSelection: null;\n    }\n  bulkDelete: {\n      /**\n        * Executes the bulkDelete action with the given inputs.Deletes the records on the server.\n        */\n       <Options extends DeleteShopifyCompanyContactRoleAssignmentOptions>(\n          ids: string[],\n          options?: LimitToKnownKeys<Options, DeleteShopifyCompanyContactRoleAssignmentOptions>\n       ): Promise<DeleteShopifyCompanyContactRoleAssignmentResult<Options>[]>\n      type: 'action';\n      operationName: 'bulkDeleteShopifyCompanyContactRoleAssignments';\n      isBulk: true;\n      isDeleter: true;\n      hasReturnType: false;\n      acceptsModelInput: false;\n      operatesWithRecordIdentity: true;\n      singleActionFunctionName: 'delete';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      modelSelectionField: typeof pluralModelApiIdentifier;\n      optionsType: DeleteShopifyCompanyContactRoleAssignmentOptions;\n      namespace: null;\n      variables: { ids: { required: true, type: '[GadgetID!]' } };\n      variablesType: IDsList | undefined;\n      paramOnlyVariables: [];\n      selectionType: Record<string, never>;\n      schemaType: null;\n      defaultSelection: null;\n    }\n  upsert: {\n      /**\n       * Executes the upsert action.Accepts the parameters for the action via the `variables` argument.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the flat style, all-params-together overload that most use cases should use.\n      *\n      * @example\n      * * const result = await api.shopifyCompanyContactRoleAssignment.upsert({\n        *   company: {\n        *     _link: \"1\",\n        *   },\n        *   companyContact: {\n        *     _link: \"1\",\n        *   },\n        *   id: \"1\",\n        *   role: {\n        *     _link: \"1\",\n        *   },\n        * });\n      **/\n      <Options extends UpsertShopifyCompanyContactRoleAssignmentOptions>(\n      \n        variables: UpsertShopifyCompanyContactRoleAssignmentVariables,\n        options?: LimitToKnownKeys<Options, UpsertShopifyCompanyContactRoleAssignmentOptions>\n      ): Promise<UpsertShopifyCompanyContactRoleAssignmentResult<Options>>;\n      /**\n       * Executes the upsert action.Accepts the parameters for the action via the `variables` argument.Runs the action and returns a Promise for the updated record.\n      *\n      * This is the fully qualified, nested api identifier style overload that should be used when there's an ambiguity between an action param and a model field.\n      *\n      * @example\n      * * const result = await api.shopifyCompanyContactRoleAssignment.upsert({\n        *   shopifyCompanyContactRoleAssignment: {\n        *     company: {\n        *       _link: \"1\",\n        *     },\n        *     companyContact: {\n        *       _link: \"1\",\n        *     },\n        *     id: \"1\",\n        *     role: {\n        *       _link: \"1\",\n        *     },\n        *   },\n        * });\n      **/\n      <Options extends UpsertShopifyCompanyContactRoleAssignmentOptions>(\n      \n        variables: FullyQualifiedUpsertShopifyCompanyContactRoleAssignmentVariables,\n        options?: LimitToKnownKeys<Options, UpsertShopifyCompanyContactRoleAssignmentOptions>\n      ): Promise<UpsertShopifyCompanyContactRoleAssignmentResult<Options>>;\n      type: 'action';\n      operationName: 'upsertShopifyCompanyContactRoleAssignment';\n      operationReturnType: 'UpsertShopifyCompanyContactRoleAssignment';\n      namespace: null;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      operatesWithRecordIdentity: false;\n      modelSelectionField: typeof modelApiIdentifier;\n      isBulk: false;\n      isDeleter: false;\n      variables: {\n          on: { required: false, type: '[String!]' },\n          shopifyCompanyContactRoleAssignment: {\n            required: false,\n            type: 'UpsertShopifyCompanyContactRoleAssignmentInput'\n          }\n        };\n      variablesType: ((\n               \n               & (FullyQualifiedUpsertShopifyCompanyContactRoleAssignmentVariables | UpsertShopifyCompanyContactRoleAssignmentVariables)\n             ) | undefined);\n      hasAmbiguousIdentifier: false;\n      paramOnlyVariables: [ 'on' ];\n      hasReturnType: {\n          '... on CreateShopifyCompanyContactRoleAssignmentResult': { hasReturnType: false },\n          '... on UpdateShopifyCompanyContactRoleAssignmentResult': { hasReturnType: false }\n        };\n      acceptsModelInput: true;\n      hasCreateOrUpdateEffect: true;\n      imports: [ 'Scalars', 'UpsertShopifyCompanyContactRoleAssignmentInput' ];\n      optionsType: UpsertShopifyCompanyContactRoleAssignmentOptions;\n      selectionType: AvailableShopifyCompanyContactRoleAssignmentSelection;\n      schemaType: Query[\"shopifyCompanyContactRoleAssignment\"];\n      defaultSelection: typeof DefaultShopifyCompanyContactRoleAssignmentSelection;\n    }\n  bulkUpsert: {\n      /**\n        * Executes the bulkUpsert action with the given inputs.\n        */\n       <Options extends UpsertShopifyCompanyContactRoleAssignmentOptions>(\n          inputs: (FullyQualifiedUpsertShopifyCompanyContactRoleAssignmentVariables | UpsertShopifyCompanyContactRoleAssignmentVariables)[],\n          options?: LimitToKnownKeys<Options, UpsertShopifyCompanyContactRoleAssignmentOptions>\n       ): Promise<any[]>\n      type: 'action';\n      operationName: 'bulkUpsertShopifyCompanyContactRoleAssignments';\n      isBulk: true;\n      isDeleter: false;\n      hasReturnType: false;\n      acceptsModelInput: true;\n      operatesWithRecordIdentity: false;\n      singleActionFunctionName: 'upsert';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      modelSelectionField: typeof pluralModelApiIdentifier;\n      optionsType: UpsertShopifyCompanyContactRoleAssignmentOptions;\n      namespace: null;\n      variables: {\n          inputs: {\n            required: true,\n            type: '[BulkUpsertShopifyCompanyContactRoleAssignmentsInput!]'\n          }\n        };\n      variablesType: (FullyQualifiedUpsertShopifyCompanyContactRoleAssignmentVariables | UpsertShopifyCompanyContactRoleAssignmentVariables)[];\n      paramOnlyVariables: [ 'on' ];\n      selectionType: AvailableShopifyCompanyContactRoleAssignmentSelection;\n      schemaType: Query[\"shopifyCompanyContactRoleAssignment\"];\n      defaultSelection: typeof DefaultShopifyCompanyContactRoleAssignmentSelection;\n    }\n  view: {\n      (query: string, variables?: Record<string, unknown>): Promise<unknown>\n      type: 'computedView';\n      operationName: 'view';\n      gqlFieldName: 'shopifyCompanyContactRoleAssignmentGellyView';\n      namespace: null;\n      imports: [];\n      variables: {\n          query: { type: 'String', required: true },\n          args: { type: 'JSONObject' }\n        };\n      variablesType: Record<string, unknown>;\n      resultType: Promise<unknown>;\n      plan: never;\n    }\n};\n\n/**\n * A manager for the shopifyCompanyContactRoleAssignment model with all the available operations for reading and writing to it.*/\nexport const ShopifyCompanyContactRoleAssignmentManager = buildModelManager(\n  modelApiIdentifier,\n  pluralModelApiIdentifier,\n  DefaultShopifyCompanyContactRoleAssignmentSelection,\n  [\n    {\n      type: 'findOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultShopifyCompanyContactRoleAssignmentSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultShopifyCompanyContactRoleAssignmentSelection,\n      namespace: null\n    },\n    {\n      type: 'findMany',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyCompanyContactRoleAssignmentSelection,\n      namespace: null\n    },\n    {\n      type: 'findFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyCompanyContactRoleAssignmentSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyCompanyContactRoleAssignmentSelection,\n      namespace: null\n    },\n    {\n      type: 'findOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'findById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyCompanyContactRoleAssignmentSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'maybeFindById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyCompanyContactRoleAssignmentSelection,\n      namespace: null\n    },\n    {\n      type: 'action',\n      operationName: 'createShopifyCompanyContactRoleAssignment',\n      operationReturnType: 'CreateShopifyCompanyContactRoleAssignment',\n      functionName: 'create',\n      namespace: null,\n      modelApiIdentifier: modelApiIdentifier,\n      operatesWithRecordIdentity: false,\n      modelSelectionField: modelApiIdentifier,\n      isBulk: false,\n      isDeleter: false,\n      variables: {\n        shopifyCompanyContactRoleAssignment: {\n          required: false,\n          type: 'CreateShopifyCompanyContactRoleAssignmentInput'\n        }\n      },\n      hasAmbiguousIdentifier: false,\n      paramOnlyVariables: [],\n      hasReturnType: false,\n      acceptsModelInput: true,\n      hasCreateOrUpdateEffect: true,\n      defaultSelection: DefaultShopifyCompanyContactRoleAssignmentSelection\n    },\n    {\n      type: 'action',\n      operationName: 'bulkCreateShopifyCompanyContactRoleAssignments',\n      functionName: 'bulkCreate',\n      isBulk: true,\n      isDeleter: false,\n      hasReturnType: false,\n      acceptsModelInput: true,\n      operatesWithRecordIdentity: false,\n      singleActionFunctionName: 'create',\n      modelApiIdentifier: modelApiIdentifier,\n      modelSelectionField: pluralModelApiIdentifier,\n      namespace: null,\n      variables: {\n        inputs: {\n          required: true,\n          type: '[BulkCreateShopifyCompanyContactRoleAssignmentsInput!]'\n        }\n      },\n      paramOnlyVariables: [],\n      defaultSelection: DefaultShopifyCompanyContactRoleAssignmentSelection\n    },\n    {\n      type: 'action',\n      operationName: 'updateShopifyCompanyContactRoleAssignment',\n      operationReturnType: 'UpdateShopifyCompanyContactRoleAssignment',\n      functionName: 'update',\n      namespace: null,\n      modelApiIdentifier: modelApiIdentifier,\n      operatesWithRecordIdentity: true,\n      modelSelectionField: modelApiIdentifier,\n      isBulk: false,\n      isDeleter: false,\n      variables: {\n        id: { required: true, type: 'GadgetID' },\n        shopifyCompanyContactRoleAssignment: {\n          required: false,\n          type: 'UpdateShopifyCompanyContactRoleAssignmentInput'\n        }\n      },\n      hasAmbiguousIdentifier: false,\n      paramOnlyVariables: [],\n      hasReturnType: false,\n      acceptsModelInput: true,\n      hasCreateOrUpdateEffect: true,\n      defaultSelection: DefaultShopifyCompanyContactRoleAssignmentSelection\n    },\n    {\n      type: 'action',\n      operationName: 'bulkUpdateShopifyCompanyContactRoleAssignments',\n      functionName: 'bulkUpdate',\n      isBulk: true,\n      isDeleter: false,\n      hasReturnType: false,\n      acceptsModelInput: true,\n      operatesWithRecordIdentity: true,\n      singleActionFunctionName: 'update',\n      modelApiIdentifier: modelApiIdentifier,\n      modelSelectionField: pluralModelApiIdentifier,\n      namespace: null,\n      variables: {\n        inputs: {\n          required: true,\n          type: '[BulkUpdateShopifyCompanyContactRoleAssignmentsInput!]'\n        }\n      },\n      paramOnlyVariables: [],\n      defaultSelection: DefaultShopifyCompanyContactRoleAssignmentSelection\n    },\n    {\n      type: 'action',\n      operationName: 'deleteShopifyCompanyContactRoleAssignment',\n      operationReturnType: 'DeleteShopifyCompanyContactRoleAssignment',\n      functionName: 'delete',\n      namespace: null,\n      modelApiIdentifier: modelApiIdentifier,\n      operatesWithRecordIdentity: true,\n      modelSelectionField: modelApiIdentifier,\n      isBulk: false,\n      isDeleter: true,\n      variables: { id: { required: true, type: 'GadgetID' } },\n      hasAmbiguousIdentifier: false,\n      paramOnlyVariables: [],\n      hasReturnType: false,\n      acceptsModelInput: false,\n      hasCreateOrUpdateEffect: false,\n      defaultSelection: null\n    },\n    {\n      type: 'action',\n      operationName: 'bulkDeleteShopifyCompanyContactRoleAssignments',\n      functionName: 'bulkDelete',\n      isBulk: true,\n      isDeleter: true,\n      hasReturnType: false,\n      acceptsModelInput: false,\n      operatesWithRecordIdentity: true,\n      singleActionFunctionName: 'delete',\n      modelApiIdentifier: modelApiIdentifier,\n      modelSelectionField: pluralModelApiIdentifier,\n      namespace: null,\n      variables: { ids: { required: true, type: '[GadgetID!]' } },\n      paramOnlyVariables: [],\n      defaultSelection: null\n    },\n    {\n      type: 'action',\n      operationName: 'upsertShopifyCompanyContactRoleAssignment',\n      operationReturnType: 'UpsertShopifyCompanyContactRoleAssignment',\n      functionName: 'upsert',\n      namespace: null,\n      modelApiIdentifier: modelApiIdentifier,\n      operatesWithRecordIdentity: false,\n      modelSelectionField: modelApiIdentifier,\n      isBulk: false,\n      isDeleter: false,\n      variables: {\n        on: { required: false, type: '[String!]' },\n        shopifyCompanyContactRoleAssignment: {\n          required: false,\n          type: 'UpsertShopifyCompanyContactRoleAssignmentInput'\n        }\n      },\n      hasAmbiguousIdentifier: false,\n      paramOnlyVariables: [ 'on' ],\n      hasReturnType: {\n        '... on CreateShopifyCompanyContactRoleAssignmentResult': { hasReturnType: false },\n        '... on UpdateShopifyCompanyContactRoleAssignmentResult': { hasReturnType: false }\n      },\n      acceptsModelInput: true,\n      hasCreateOrUpdateEffect: true,\n      defaultSelection: DefaultShopifyCompanyContactRoleAssignmentSelection\n    },\n    {\n      type: 'action',\n      operationName: 'bulkUpsertShopifyCompanyContactRoleAssignments',\n      functionName: 'bulkUpsert',\n      isBulk: true,\n      isDeleter: false,\n      hasReturnType: false,\n      acceptsModelInput: true,\n      operatesWithRecordIdentity: false,\n      singleActionFunctionName: 'upsert',\n      modelApiIdentifier: modelApiIdentifier,\n      modelSelectionField: pluralModelApiIdentifier,\n      namespace: null,\n      variables: {\n        inputs: {\n          required: true,\n          type: '[BulkUpsertShopifyCompanyContactRoleAssignmentsInput!]'\n        }\n      },\n      paramOnlyVariables: [ 'on' ],\n      defaultSelection: DefaultShopifyCompanyContactRoleAssignmentSelection\n    },\n    {\n      type: 'computedView',\n      operationName: 'view',\n      functionName: 'view',\n      gqlFieldName: 'shopifyCompanyContactRoleAssignmentGellyView',\n      namespace: null,\n      variables: {\n        query: { type: 'String', required: true },\n        args: { type: 'JSONObject' }\n      }\n    }\n  ] as const\n) as unknown as {\n  // Gadget generates these model manager classes at runtime dynamically, which means there is no source code for the class. This is done to make the bundle size of the client as small as possible, avoiding a bunch of repeated source code in favour of one small builder function. The TypeScript types above document the exact interface of the constructed class.\n  new(connection: GadgetConnection): ShopifyCompanyContactRoleAssignmentManager;\n};", "import {\n  GadgetConnection,\n  GadgetRecord,\n  GadgetRecordImplementation,\n  GadgetRecordList,\n  GadgetNonUniqueDataError,\n  actionRunner,\n  findManyRunner,\n  findOneRunner,\n  findOneByFieldRunner,\n  FieldSelection,\n  LimitToKnownKeys,\n  Selectable\n} from \"@gadgetinc/api-client-core\";\n\nimport {\n  Query,\n  ExplicitNestingRequired,\n\n  IDsList,\n  PromiseOrLiveIterator,\n  ShopifyCompanyLocation,\n  AvailableShopifyCompanyLocationSelection,\n  ShopifyCompanyLocationSort,\n  ShopifyCompanyLocationFilter\n} from \"../types.js\";\n\nimport { buildModelManager } from \"../builder.js\";\nimport { AvailableSelection, AllFieldsSelected, DefaultSelection, Select, DeepFilterNever } from \"../utils.js\";\n\n/**\n* A type that holds only the selected fields (and nested fields) of shopifyCompanyLocation. The present fields in the result type of this are dynamic based on the options to each call that uses it.\n* The selected fields are sometimes given by the `Options` at `Options[\"select\"]`, and if a selection isn't made in the options, we use the default selection from above.\n*/\nexport type SelectedShopifyCompanyLocationOrDefault<Options extends Selectable<AvailableShopifyCompanyLocationSelection>> = DeepFilterNever<\n    Select<\n      ShopifyCompanyLocation,\n      DefaultSelection<\n        AvailableShopifyCompanyLocationSelection,\n        Options,\n        typeof DefaultShopifyCompanyLocationSelection\n      >\n    >\n  >;\n\n/**\n * A type that represents a `GadgetRecord` type for shopifyCompanyLocation.\n * It selects all fields of the model by default. If you want to represent a record type with a subset of fields, you could pass in an object in the `Selection` type parameter.\n *\n * @example\n * ```ts\n * const someFunction = (record: ShopifyCompanyLocationRecord, recordWithName: ShopifyCompanyLocationRecord<{ select: { name: true; } }>) => {\n *   // The type of the `record` variable will include all fields of the model.\n *   const name = record.name;\n *   const otherField = record.otherField;\n *\n *   // The type of the `recordWithName` variable will only include the selected fields.\n *   const name = recordWithName.name;\n *   const otherField = recordWithName.otherField; // Type error: Property 'otherField' does not exist on type 'GadgetRecord<{ name: true; }>'.\n * }\n * ```\n */\nexport type ShopifyCompanyLocationRecord<Selection extends AvailableShopifyCompanyLocationSelection | undefined = typeof DefaultShopifyCompanyLocationSelection> = DeepFilterNever<\n  GadgetRecord<\n    SelectedShopifyCompanyLocationOrDefault<{\n      select: Selection;\n    }>\n  >\n>;\n\nexport const DefaultShopifyCompanyLocationSelection = {\n     __typename: true,\n     id: true,\n     buyerExperienceConfiguration: true,\n     companyId: true,\n     createdAt: true,\n     currency: true,\n     externalId: true,\n     locale: true,\n     name: true,\n     note: true,\n     ordersCount: true,\n     phone: true,\n     shopId: true,\n     shopifyCreatedAt: true,\n     shopifyUpdatedAt: true,\n     taxExemptions: true,\n     taxRegistrationId: true,\n     timelineComment: true,\n     totalSpent: true,\n     updatedAt: true\n   } as const;\nconst modelApiIdentifier = \"shopifyCompanyLocation\" as const;\nconst pluralModelApiIdentifier = \"shopifyCompanyLocations\" as const;\n/** Options that can be passed to the `ShopifyCompanyLocationManager#findOne` method */\n export interface FindOneShopifyCompanyLocationOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCompanyLocationSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `ShopifyCompanyLocationManager#maybeFindOne` method */\n export interface MaybeFindOneShopifyCompanyLocationOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCompanyLocationSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `ShopifyCompanyLocationManager#findMany` method */\n export interface FindManyShopifyCompanyLocationsOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCompanyLocationSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyCompanyLocationSort | ShopifyCompanyLocationSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyCompanyLocationFilter | ShopifyCompanyLocationFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n  first?: number | null;\n  last?: number | null;\n  after?: string | null;\n  before?: string | null;\n};\n/** Options that can be passed to the `ShopifyCompanyLocationManager#findFirst` method */\n export interface FindFirstShopifyCompanyLocationOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCompanyLocationSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyCompanyLocationSort | ShopifyCompanyLocationSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyCompanyLocationFilter | ShopifyCompanyLocationFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\n/** Options that can be passed to the `ShopifyCompanyLocationManager#maybeFindFirst` method */\n export interface MaybeFindFirstShopifyCompanyLocationOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCompanyLocationSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyCompanyLocationSort | ShopifyCompanyLocationSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyCompanyLocationFilter | ShopifyCompanyLocationFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\nexport interface CreateShopifyCompanyLocationOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCompanyLocationSelection;\n};\nexport interface UpdateShopifyCompanyLocationOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyCompanyLocationSelection;\n};\nexport interface DeleteShopifyCompanyLocationOptions {\n\n};\n\n/**\n * A manager for the shopifyCompanyLocation model with all the available operations for reading and writing to it.*/\nexport type ShopifyCompanyLocationManager = {\n  readonly connection: GadgetConnection;\n\n  findOne: {\n      /**\n       * Finds one shopifyCompanyLocation by ID. Returns a `Promise` that resolves to the record if found and rejects the promise if the record isn't found.\n       **/\n      <Options extends FindOneShopifyCompanyLocationOptions>(id: string, options?: LimitToKnownKeys<Options, FindOneShopifyCompanyLocationOptions>): PromiseOrLiveIterator<Options,ShopifyCompanyLocationRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultShopifyCompanyLocationSelection;\n      namespace: null;\n      optionsType: FindOneShopifyCompanyLocationOptions;\n      selectionType: AvailableShopifyCompanyLocationSelection;\n      schemaType: Query[\"shopifyCompanyLocation\"];\n    }\n  maybeFindOne: {\n      /**\n       * Finds one shopifyCompanyLocation by ID. Returns a `Promise` that resolves to the record if found and returns null otherwise.\n       **/\n      <Options extends MaybeFindOneShopifyCompanyLocationOptions>(id: string, options?: LimitToKnownKeys<Options, MaybeFindOneShopifyCompanyLocationOptions>): PromiseOrLiveIterator<Options,ShopifyCompanyLocationRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: MaybeFindOneShopifyCompanyLocationOptions;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultShopifyCompanyLocationSelection;\n      namespace: null;\n      selectionType: AvailableShopifyCompanyLocationSelection;\n      schemaType: Query[\"shopifyCompanyLocation\"];\n    }\n  findMany: {\n      /**\n       * Finds many shopifyCompanyLocation. Returns a `Promise` for a `GadgetRecordList` of objects according to the passed `options`. Optionally filters the returned records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindManyShopifyCompanyLocationsOptions>(options?: LimitToKnownKeys<Options, FindManyShopifyCompanyLocationsOptions>): PromiseOrLiveIterator<Options,GadgetRecordList<ShopifyCompanyLocationRecord<Options[\"select\"]>>>;\n      type: 'findMany';\n      operationName: typeof pluralModelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: FindManyShopifyCompanyLocationsOptions;\n      defaultSelection: typeof DefaultShopifyCompanyLocationSelection;\n      namespace: null;\n      selectionType: AvailableShopifyCompanyLocationSelection;\n      schemaType: Query[\"shopifyCompanyLocation\"];\n    }\n  findFirst: {\n      /**\n       * Finds the first matching shopifyCompanyLocation. Returns a `Promise` that resolves to a record if found and rejects the promise if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindFirstShopifyCompanyLocationOptions>(options?: LimitToKnownKeys<Options, FindFirstShopifyCompanyLocationOptions>): PromiseOrLiveIterator<Options,ShopifyCompanyLocationRecord<Options[\"select\"]>>;\n      type: 'findFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: FindFirstShopifyCompanyLocationOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyCompanyLocationSelection;\n      namespace: null;\n      selectionType: AvailableShopifyCompanyLocationSelection;\n      schemaType: Query[\"shopifyCompanyLocation\"];\n    }\n  maybeFindFirst: {\n      /**\n       * Finds the first matching shopifyCompanyLocation. Returns a `Promise` that resolves to a record if found, or null if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` pagination options.\n       **/\n      <Options extends MaybeFindFirstShopifyCompanyLocationOptions>(options?: LimitToKnownKeys<Options, MaybeFindFirstShopifyCompanyLocationOptions>): PromiseOrLiveIterator<Options,ShopifyCompanyLocationRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: MaybeFindFirstShopifyCompanyLocationOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyCompanyLocationSelection;\n      namespace: null;\n      selectionType: AvailableShopifyCompanyLocationSelection;\n      schemaType: Query[\"shopifyCompanyLocation\"];\n    }\n  findById: {\n      /**\n      * Finds one shopifyCompanyLocation by its id. Returns a Promise that resolves to the record if found and rejects the promise if the record isn't found.\n      **/\n      <Options extends FindOneShopifyCompanyLocationOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneShopifyCompanyLocationOptions>): PromiseOrLiveIterator<Options,ShopifyCompanyLocationRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneShopifyCompanyLocationOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyCompanyLocationSelection;\n      namespace: null;\n      selectionType: AvailableShopifyCompanyLocationSelection;\n      schemaType: Query[\"shopifyCompanyLocation\"];\n    }\n  maybeFindById: {\n      /**\n      * Finds one shopifyCompanyLocation by its id. Returns a Promise that resolves to the record if found and returns null if the record isn't found.\n      **/\n      <Options extends FindOneShopifyCompanyLocationOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneShopifyCompanyLocationOptions>): Promise<ShopifyCompanyLocationRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneShopifyCompanyLocationOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyCompanyLocationSelection;\n      namespace: null;\n      selectionType: AvailableShopifyCompanyLocationSelection;\n      schemaType: Query[\"shopifyCompanyLocation\"];\n    }\n  create: {\n      /**\n       * @deprecated The action create on model shopifyCompanyLocation does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'createShopifyCompanyLocation';\n      errorMessage: string;\n      optionsType: CreateShopifyCompanyLocationOptions;\n      actionApiIdentifier: 'create';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyCompanyLocation.create';\n    }\n  bulkCreate: {\n      /**\n       * @deprecated The action create on model shopifyCompanyLocation does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkCreateShopifyCompanyLocations';\n      errorMessage: string;\n      optionsType: CreateShopifyCompanyLocationOptions;\n      actionApiIdentifier: 'create';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyCompanyLocation.bulkCreate';\n    }\n  update: {\n      /**\n       * @deprecated The action update on model shopifyCompanyLocation does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'updateShopifyCompanyLocation';\n      errorMessage: string;\n      optionsType: UpdateShopifyCompanyLocationOptions;\n      actionApiIdentifier: 'update';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyCompanyLocation.update';\n    }\n  bulkUpdate: {\n      /**\n       * @deprecated The action update on model shopifyCompanyLocation does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkUpdateShopifyCompanyLocations';\n      errorMessage: string;\n      optionsType: UpdateShopifyCompanyLocationOptions;\n      actionApiIdentifier: 'update';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyCompanyLocation.bulkUpdate';\n    }\n  delete: {\n      /**\n       * @deprecated The action delete on model shopifyCompanyLocation does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'deleteShopifyCompanyLocation';\n      errorMessage: string;\n      optionsType: DeleteShopifyCompanyLocationOptions;\n      actionApiIdentifier: 'delete';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyCompanyLocation.delete';\n    }\n  bulkDelete: {\n      /**\n       * @deprecated The action delete on model shopifyCompanyLocation does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkDeleteShopifyCompanyLocations';\n      errorMessage: string;\n      optionsType: DeleteShopifyCompanyLocationOptions;\n      actionApiIdentifier: 'delete';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyCompanyLocation.bulkDelete';\n    }\n  view: {\n      (query: string, variables?: Record<string, unknown>): Promise<unknown>\n      type: 'computedView';\n      operationName: 'view';\n      gqlFieldName: 'shopifyCompanyLocationGellyView';\n      namespace: null;\n      imports: [];\n      variables: {\n          query: { type: 'String', required: true },\n          args: { type: 'JSONObject' }\n        };\n      variablesType: Record<string, unknown>;\n      resultType: Promise<unknown>;\n      plan: never;\n    }\n};\n\n/**\n * A manager for the shopifyCompanyLocation model with all the available operations for reading and writing to it.*/\nexport const ShopifyCompanyLocationManager = buildModelManager(\n  modelApiIdentifier,\n  pluralModelApiIdentifier,\n  DefaultShopifyCompanyLocationSelection,\n  [\n    {\n      type: 'findOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultShopifyCompanyLocationSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultShopifyCompanyLocationSelection,\n      namespace: null\n    },\n    {\n      type: 'findMany',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyCompanyLocationSelection,\n      namespace: null\n    },\n    {\n      type: 'findFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyCompanyLocationSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyCompanyLocationSelection,\n      namespace: null\n    },\n    {\n      type: 'findOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'findById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyCompanyLocationSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'maybeFindById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyCompanyLocationSelection,\n      namespace: null\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'createShopifyCompanyLocation',\n      functionName: 'create',\n      errorMessage: 'The action create on model shopifyCompanyLocation does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'create',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyCompanyLocation.create'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkCreateShopifyCompanyLocations',\n      functionName: 'bulkCreate',\n      errorMessage: 'The action create on model shopifyCompanyLocation does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'create',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyCompanyLocation.bulkCreate'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'updateShopifyCompanyLocation',\n      functionName: 'update',\n      errorMessage: 'The action update on model shopifyCompanyLocation does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'update',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyCompanyLocation.update'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkUpdateShopifyCompanyLocations',\n      functionName: 'bulkUpdate',\n      errorMessage: 'The action update on model shopifyCompanyLocation does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'update',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyCompanyLocation.bulkUpdate'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'deleteShopifyCompanyLocation',\n      functionName: 'delete',\n      errorMessage: 'The action delete on model shopifyCompanyLocation does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'delete',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyCompanyLocation.delete'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkDeleteShopifyCompanyLocations',\n      functionName: 'bulkDelete',\n      errorMessage: 'The action delete on model shopifyCompanyLocation does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'delete',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyCompanyLocation.bulkDelete'\n    },\n    {\n      type: 'computedView',\n      operationName: 'view',\n      functionName: 'view',\n      gqlFieldName: 'shopifyCompanyLocationGellyView',\n      namespace: null,\n      variables: {\n        query: { type: 'String', required: true },\n        args: { type: 'JSONObject' }\n      }\n    }\n  ] as const\n) as unknown as {\n  // Gadget generates these model manager classes at runtime dynamically, which means there is no source code for the class. This is done to make the bundle size of the client as small as possible, avoiding a bunch of repeated source code in favour of one small builder function. The TypeScript types above document the exact interface of the constructed class.\n  new(connection: GadgetConnection): ShopifyCompanyLocationManager;\n};", "import {\n  GadgetConnection,\n  GadgetRecord,\n  GadgetRecordImplementation,\n  GadgetRecordList,\n  GadgetNonUniqueDataError,\n  actionRunner,\n  findManyRunner,\n  findOneRunner,\n  findOneByFieldRunner,\n  FieldSelection,\n  LimitToKnownKeys,\n  Selectable\n} from \"@gadgetinc/api-client-core\";\n\nimport {\n  Query,\n  ExplicitNestingRequired,\n\n  IDsList,\n  PromiseOrLiveIterator,\n  ShopifyShop,\n  AvailableShopifyShopSelection,\n  ShopifyShopSort,\n  ShopifyShopFilter\n} from \"../types.js\";\n\nimport { buildModelManager } from \"../builder.js\";\nimport { AvailableSelection, AllFieldsSelected, DefaultSelection, Select, DeepFilterNever } from \"../utils.js\";\n\n/**\n* A type that holds only the selected fields (and nested fields) of shopifyShop. The present fields in the result type of this are dynamic based on the options to each call that uses it.\n* The selected fields are sometimes given by the `Options` at `Options[\"select\"]`, and if a selection isn't made in the options, we use the default selection from above.\n*/\nexport type SelectedShopifyShopOrDefault<Options extends Selectable<AvailableShopifyShopSelection>> = DeepFilterNever<\n    Select<\n      ShopifyShop,\n      DefaultSelection<\n        AvailableShopifyShopSelection,\n        Options,\n        typeof DefaultShopifyShopSelection\n      >\n    >\n  >;\n\n/**\n * A type that represents a `GadgetRecord` type for shopifyShop.\n * It selects all fields of the model by default. If you want to represent a record type with a subset of fields, you could pass in an object in the `Selection` type parameter.\n *\n * @example\n * ```ts\n * const someFunction = (record: ShopifyShopRecord, recordWithName: ShopifyShopRecord<{ select: { name: true; } }>) => {\n *   // The type of the `record` variable will include all fields of the model.\n *   const name = record.name;\n *   const otherField = record.otherField;\n *\n *   // The type of the `recordWithName` variable will only include the selected fields.\n *   const name = recordWithName.name;\n *   const otherField = recordWithName.otherField; // Type error: Property 'otherField' does not exist on type 'GadgetRecord<{ name: true; }>'.\n * }\n * ```\n */\nexport type ShopifyShopRecord<Selection extends AvailableShopifyShopSelection | undefined = typeof DefaultShopifyShopSelection> = DeepFilterNever<\n  GadgetRecord<\n    SelectedShopifyShopOrDefault<{\n      select: Selection;\n    }>\n  >\n>;\n\nexport const DefaultShopifyShopSelection = {\n     __typename: true,\n     id: true,\n     state: true,\n     address1: true,\n     address2: true,\n     checkoutApiSupported: true,\n     city: true,\n     cookieConsentLevel: true,\n     country: true,\n     countryCode: true,\n     countryName: true,\n     countyTaxes: true,\n     createdAt: true,\n     currency: true,\n     customerAccountsV2: true,\n     customerEmail: true,\n     disabledWebhooks: true,\n     domain: true,\n     eligibleForCardReaderGiveaway: true,\n     eligibleForPayments: true,\n     email: true,\n     enabledPresentmentCurrencies: true,\n     finances: true,\n     forceSsl: true,\n     googleAppsDomain: true,\n     googleAppsLoginEnabled: true,\n     grantedScopes: true,\n     hasDiscounts: true,\n     hasGiftCards: true,\n     hasStorefront: true,\n     ianaTimezone: true,\n     installedViaApiKey: true,\n     latitude: true,\n     longitude: true,\n     marketingSmsContentEnabledAtCheckout: true,\n     moneyFormat: true,\n     moneyInEmailsFormat: true,\n     moneyWithCurrencyFormat: true,\n     moneyWithCurrencyInEmailsFormat: true,\n     multiLocationEnabled: true,\n     myshopifyDomain: true,\n     name: true,\n     passwordEnabled: true,\n     phone: true,\n     plan: true,\n     planDisplayName: true,\n     planName: true,\n     preLaunchEnabled: true,\n     primaryLocale: true,\n     primaryLocationId: true,\n     province: true,\n     provinceCode: true,\n     registeredWebhooks: true,\n     requiresExtraPaymentsAgreement: true,\n     setupRequired: true,\n     shopOwner: true,\n     shopifyCreatedAt: true,\n     shopifyUpdatedAt: true,\n     source: true,\n     taxShipping: true,\n     taxesIncluded: true,\n     timezone: true,\n     transactionalSmsDisabled: true,\n     updatedAt: true,\n     weightUnit: true,\n     zipCode: true\n   } as const;\nconst modelApiIdentifier = \"shopifyShop\" as const;\nconst pluralModelApiIdentifier = \"shopifyShops\" as const;\n/** Options that can be passed to the `ShopifyShopManager#findOne` method */\n export interface FindOneShopifyShopOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyShopSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `ShopifyShopManager#maybeFindOne` method */\n export interface MaybeFindOneShopifyShopOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyShopSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `ShopifyShopManager#findMany` method */\n export interface FindManyShopifyShopsOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyShopSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyShopSort | ShopifyShopSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyShopFilter | ShopifyShopFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n  first?: number | null;\n  last?: number | null;\n  after?: string | null;\n  before?: string | null;\n};\n/** Options that can be passed to the `ShopifyShopManager#findFirst` method */\n export interface FindFirstShopifyShopOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyShopSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyShopSort | ShopifyShopSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyShopFilter | ShopifyShopFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\n/** Options that can be passed to the `ShopifyShopManager#maybeFindFirst` method */\n export interface MaybeFindFirstShopifyShopOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyShopSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyShopSort | ShopifyShopSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyShopFilter | ShopifyShopFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\nexport interface UpdateShopifyShopOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyShopSelection;\n};\nexport interface InstallShopifyShopOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyShopSelection;\n};\nexport interface ReinstallShopifyShopOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyShopSelection;\n};\nexport interface UninstallShopifyShopOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyShopSelection;\n};\n\n/**\n * A manager for the shopifyShop model with all the available operations for reading and writing to it.*/\nexport type ShopifyShopManager = {\n  readonly connection: GadgetConnection;\n\n  findOne: {\n      /**\n       * Finds one shopifyShop by ID. Returns a `Promise` that resolves to the record if found and rejects the promise if the record isn't found.\n       **/\n      <Options extends FindOneShopifyShopOptions>(id: string, options?: LimitToKnownKeys<Options, FindOneShopifyShopOptions>): PromiseOrLiveIterator<Options,ShopifyShopRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultShopifyShopSelection;\n      namespace: null;\n      optionsType: FindOneShopifyShopOptions;\n      selectionType: AvailableShopifyShopSelection;\n      schemaType: Query[\"shopifyShop\"];\n    }\n  maybeFindOne: {\n      /**\n       * Finds one shopifyShop by ID. Returns a `Promise` that resolves to the record if found and returns null otherwise.\n       **/\n      <Options extends MaybeFindOneShopifyShopOptions>(id: string, options?: LimitToKnownKeys<Options, MaybeFindOneShopifyShopOptions>): PromiseOrLiveIterator<Options,ShopifyShopRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: MaybeFindOneShopifyShopOptions;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultShopifyShopSelection;\n      namespace: null;\n      selectionType: AvailableShopifyShopSelection;\n      schemaType: Query[\"shopifyShop\"];\n    }\n  findMany: {\n      /**\n       * Finds many shopifyShop. Returns a `Promise` for a `GadgetRecordList` of objects according to the passed `options`. Optionally filters the returned records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindManyShopifyShopsOptions>(options?: LimitToKnownKeys<Options, FindManyShopifyShopsOptions>): PromiseOrLiveIterator<Options,GadgetRecordList<ShopifyShopRecord<Options[\"select\"]>>>;\n      type: 'findMany';\n      operationName: typeof pluralModelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: FindManyShopifyShopsOptions;\n      defaultSelection: typeof DefaultShopifyShopSelection;\n      namespace: null;\n      selectionType: AvailableShopifyShopSelection;\n      schemaType: Query[\"shopifyShop\"];\n    }\n  findFirst: {\n      /**\n       * Finds the first matching shopifyShop. Returns a `Promise` that resolves to a record if found and rejects the promise if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindFirstShopifyShopOptions>(options?: LimitToKnownKeys<Options, FindFirstShopifyShopOptions>): PromiseOrLiveIterator<Options,ShopifyShopRecord<Options[\"select\"]>>;\n      type: 'findFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: FindFirstShopifyShopOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyShopSelection;\n      namespace: null;\n      selectionType: AvailableShopifyShopSelection;\n      schemaType: Query[\"shopifyShop\"];\n    }\n  maybeFindFirst: {\n      /**\n       * Finds the first matching shopifyShop. Returns a `Promise` that resolves to a record if found, or null if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` pagination options.\n       **/\n      <Options extends MaybeFindFirstShopifyShopOptions>(options?: LimitToKnownKeys<Options, MaybeFindFirstShopifyShopOptions>): PromiseOrLiveIterator<Options,ShopifyShopRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: MaybeFindFirstShopifyShopOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyShopSelection;\n      namespace: null;\n      selectionType: AvailableShopifyShopSelection;\n      schemaType: Query[\"shopifyShop\"];\n    }\n  findById: {\n      /**\n      * Finds one shopifyShop by its id. Returns a Promise that resolves to the record if found and rejects the promise if the record isn't found.\n      **/\n      <Options extends FindOneShopifyShopOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneShopifyShopOptions>): PromiseOrLiveIterator<Options,ShopifyShopRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneShopifyShopOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyShopSelection;\n      namespace: null;\n      selectionType: AvailableShopifyShopSelection;\n      schemaType: Query[\"shopifyShop\"];\n    }\n  maybeFindById: {\n      /**\n      * Finds one shopifyShop by its id. Returns a Promise that resolves to the record if found and returns null if the record isn't found.\n      **/\n      <Options extends FindOneShopifyShopOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneShopifyShopOptions>): Promise<ShopifyShopRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneShopifyShopOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyShopSelection;\n      namespace: null;\n      selectionType: AvailableShopifyShopSelection;\n      schemaType: Query[\"shopifyShop\"];\n    }\n  update: {\n      /**\n       * @deprecated The action update on model shopifyShop does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'updateShopifyShop';\n      errorMessage: string;\n      optionsType: UpdateShopifyShopOptions;\n      actionApiIdentifier: 'update';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyShop.update';\n    }\n  bulkUpdate: {\n      /**\n       * @deprecated The action update on model shopifyShop does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkUpdateShopifyShops';\n      errorMessage: string;\n      optionsType: UpdateShopifyShopOptions;\n      actionApiIdentifier: 'update';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyShop.bulkUpdate';\n    }\n  install: {\n      /**\n       * @deprecated The action install on model shopifyShop does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'installShopifyShop';\n      errorMessage: string;\n      optionsType: InstallShopifyShopOptions;\n      actionApiIdentifier: 'install';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyShop.install';\n    }\n  bulkInstall: {\n      /**\n       * @deprecated The action install on model shopifyShop does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkInstallShopifyShops';\n      errorMessage: string;\n      optionsType: InstallShopifyShopOptions;\n      actionApiIdentifier: 'install';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyShop.bulkInstall';\n    }\n  reinstall: {\n      /**\n       * @deprecated The action reinstall on model shopifyShop does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'reinstallShopifyShop';\n      errorMessage: string;\n      optionsType: ReinstallShopifyShopOptions;\n      actionApiIdentifier: 'reinstall';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyShop.reinstall';\n    }\n  bulkReinstall: {\n      /**\n       * @deprecated The action reinstall on model shopifyShop does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkReinstallShopifyShops';\n      errorMessage: string;\n      optionsType: ReinstallShopifyShopOptions;\n      actionApiIdentifier: 'reinstall';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyShop.bulkReinstall';\n    }\n  uninstall: {\n      /**\n       * @deprecated The action uninstall on model shopifyShop does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'uninstallShopifyShop';\n      errorMessage: string;\n      optionsType: UninstallShopifyShopOptions;\n      actionApiIdentifier: 'uninstall';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyShop.uninstall';\n    }\n  bulkUninstall: {\n      /**\n       * @deprecated The action uninstall on model shopifyShop does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkUninstallShopifyShops';\n      errorMessage: string;\n      optionsType: UninstallShopifyShopOptions;\n      actionApiIdentifier: 'uninstall';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyShop.bulkUninstall';\n    }\n  view: {\n      (query: string, variables?: Record<string, unknown>): Promise<unknown>\n      type: 'computedView';\n      operationName: 'view';\n      gqlFieldName: 'shopifyShopGellyView';\n      namespace: null;\n      imports: [];\n      variables: {\n          query: { type: 'String', required: true },\n          args: { type: 'JSONObject' }\n        };\n      variablesType: Record<string, unknown>;\n      resultType: Promise<unknown>;\n      plan: never;\n    }\n};\n\n/**\n * A manager for the shopifyShop model with all the available operations for reading and writing to it.*/\nexport const ShopifyShopManager = buildModelManager(\n  modelApiIdentifier,\n  pluralModelApiIdentifier,\n  DefaultShopifyShopSelection,\n  [\n    {\n      type: 'findOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultShopifyShopSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultShopifyShopSelection,\n      namespace: null\n    },\n    {\n      type: 'findMany',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyShopSelection,\n      namespace: null\n    },\n    {\n      type: 'findFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyShopSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyShopSelection,\n      namespace: null\n    },\n    {\n      type: 'findOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'findById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyShopSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'maybeFindById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyShopSelection,\n      namespace: null\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'updateShopifyShop',\n      functionName: 'update',\n      errorMessage: 'The action update on model shopifyShop does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'update',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyShop.update'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkUpdateShopifyShops',\n      functionName: 'bulkUpdate',\n      errorMessage: 'The action update on model shopifyShop does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'update',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyShop.bulkUpdate'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'installShopifyShop',\n      functionName: 'install',\n      errorMessage: 'The action install on model shopifyShop does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'install',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyShop.install'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkInstallShopifyShops',\n      functionName: 'bulkInstall',\n      errorMessage: 'The action install on model shopifyShop does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'install',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyShop.bulkInstall'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'reinstallShopifyShop',\n      functionName: 'reinstall',\n      errorMessage: 'The action reinstall on model shopifyShop does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'reinstall',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyShop.reinstall'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkReinstallShopifyShops',\n      functionName: 'bulkReinstall',\n      errorMessage: 'The action reinstall on model shopifyShop does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'reinstall',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyShop.bulkReinstall'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'uninstallShopifyShop',\n      functionName: 'uninstall',\n      errorMessage: 'The action uninstall on model shopifyShop does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'uninstall',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyShop.uninstall'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkUninstallShopifyShops',\n      functionName: 'bulkUninstall',\n      errorMessage: 'The action uninstall on model shopifyShop does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'uninstall',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyShop.bulkUninstall'\n    },\n    {\n      type: 'computedView',\n      operationName: 'view',\n      functionName: 'view',\n      gqlFieldName: 'shopifyShopGellyView',\n      namespace: null,\n      variables: {\n        query: { type: 'String', required: true },\n        args: { type: 'JSONObject' }\n      }\n    }\n  ] as const\n) as unknown as {\n  // Gadget generates these model manager classes at runtime dynamically, which means there is no source code for the class. This is done to make the bundle size of the client as small as possible, avoiding a bunch of repeated source code in favour of one small builder function. The TypeScript types above document the exact interface of the constructed class.\n  new(connection: GadgetConnection): ShopifyShopManager;\n};", "import {\n  GadgetConnection,\n  GadgetRecord,\n  GadgetRecordImplementation,\n  GadgetRecordList,\n  GadgetNonUniqueDataError,\n  actionRunner,\n  findManyRunner,\n  findOneRunner,\n  findOneByFieldRunner,\n  FieldSelection,\n  LimitToKnownKeys,\n  Selectable\n} from \"@gadgetinc/api-client-core\";\n\nimport {\n  Query,\n  ExplicitNestingRequired,\n\n  IDsList,\n  PromiseOrLiveIterator,\n  ShopifyLocation,\n  AvailableShopifyLocationSelection,\n  ShopifyLocationSort,\n  ShopifyLocationFilter\n} from \"../types.js\";\n\nimport { buildModelManager } from \"../builder.js\";\nimport { AvailableSelection, AllFieldsSelected, DefaultSelection, Select, DeepFilterNever } from \"../utils.js\";\n\n/**\n* A type that holds only the selected fields (and nested fields) of shopifyLocation. The present fields in the result type of this are dynamic based on the options to each call that uses it.\n* The selected fields are sometimes given by the `Options` at `Options[\"select\"]`, and if a selection isn't made in the options, we use the default selection from above.\n*/\nexport type SelectedShopifyLocationOrDefault<Options extends Selectable<AvailableShopifyLocationSelection>> = DeepFilterNever<\n    Select<\n      ShopifyLocation,\n      DefaultSelection<\n        AvailableShopifyLocationSelection,\n        Options,\n        typeof DefaultShopifyLocationSelection\n      >\n    >\n  >;\n\n/**\n * A type that represents a `GadgetRecord` type for shopifyLocation.\n * It selects all fields of the model by default. If you want to represent a record type with a subset of fields, you could pass in an object in the `Selection` type parameter.\n *\n * @example\n * ```ts\n * const someFunction = (record: ShopifyLocationRecord, recordWithName: ShopifyLocationRecord<{ select: { name: true; } }>) => {\n *   // The type of the `record` variable will include all fields of the model.\n *   const name = record.name;\n *   const otherField = record.otherField;\n *\n *   // The type of the `recordWithName` variable will only include the selected fields.\n *   const name = recordWithName.name;\n *   const otherField = recordWithName.otherField; // Type error: Property 'otherField' does not exist on type 'GadgetRecord<{ name: true; }>'.\n * }\n * ```\n */\nexport type ShopifyLocationRecord<Selection extends AvailableShopifyLocationSelection | undefined = typeof DefaultShopifyLocationSelection> = DeepFilterNever<\n  GadgetRecord<\n    SelectedShopifyLocationOrDefault<{\n      select: Selection;\n    }>\n  >\n>;\n\nexport const DefaultShopifyLocationSelection = {\n     __typename: true,\n     id: true,\n     active: true,\n     address1: true,\n     address2: true,\n     city: true,\n     country: true,\n     countryCode: true,\n     createdAt: true,\n     legacy: true,\n     localizedCountryName: true,\n     localizedProvinceName: true,\n     name: true,\n     phone: true,\n     province: true,\n     provinceCode: true,\n     shopId: true,\n     shopifyCreatedAt: true,\n     shopifyUpdatedAt: true,\n     updatedAt: true,\n     zipCode: true\n   } as const;\nconst modelApiIdentifier = \"shopifyLocation\" as const;\nconst pluralModelApiIdentifier = \"shopifyLocations\" as const;\n/** Options that can be passed to the `ShopifyLocationManager#findOne` method */\n export interface FindOneShopifyLocationOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyLocationSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `ShopifyLocationManager#maybeFindOne` method */\n export interface MaybeFindOneShopifyLocationOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyLocationSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `ShopifyLocationManager#findMany` method */\n export interface FindManyShopifyLocationsOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyLocationSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyLocationSort | ShopifyLocationSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyLocationFilter | ShopifyLocationFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n  first?: number | null;\n  last?: number | null;\n  after?: string | null;\n  before?: string | null;\n};\n/** Options that can be passed to the `ShopifyLocationManager#findFirst` method */\n export interface FindFirstShopifyLocationOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyLocationSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyLocationSort | ShopifyLocationSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyLocationFilter | ShopifyLocationFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\n/** Options that can be passed to the `ShopifyLocationManager#maybeFindFirst` method */\n export interface MaybeFindFirstShopifyLocationOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyLocationSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyLocationSort | ShopifyLocationSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyLocationFilter | ShopifyLocationFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\nexport interface CreateShopifyLocationOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyLocationSelection;\n};\nexport interface UpdateShopifyLocationOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyLocationSelection;\n};\nexport interface DeleteShopifyLocationOptions {\n\n};\n\n/**\n * A manager for the shopifyLocation model with all the available operations for reading and writing to it.*/\nexport type ShopifyLocationManager = {\n  readonly connection: GadgetConnection;\n\n  findOne: {\n      /**\n       * Finds one shopifyLocation by ID. Returns a `Promise` that resolves to the record if found and rejects the promise if the record isn't found.\n       **/\n      <Options extends FindOneShopifyLocationOptions>(id: string, options?: LimitToKnownKeys<Options, FindOneShopifyLocationOptions>): PromiseOrLiveIterator<Options,ShopifyLocationRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultShopifyLocationSelection;\n      namespace: null;\n      optionsType: FindOneShopifyLocationOptions;\n      selectionType: AvailableShopifyLocationSelection;\n      schemaType: Query[\"shopifyLocation\"];\n    }\n  maybeFindOne: {\n      /**\n       * Finds one shopifyLocation by ID. Returns a `Promise` that resolves to the record if found and returns null otherwise.\n       **/\n      <Options extends MaybeFindOneShopifyLocationOptions>(id: string, options?: LimitToKnownKeys<Options, MaybeFindOneShopifyLocationOptions>): PromiseOrLiveIterator<Options,ShopifyLocationRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: MaybeFindOneShopifyLocationOptions;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultShopifyLocationSelection;\n      namespace: null;\n      selectionType: AvailableShopifyLocationSelection;\n      schemaType: Query[\"shopifyLocation\"];\n    }\n  findMany: {\n      /**\n       * Finds many shopifyLocation. Returns a `Promise` for a `GadgetRecordList` of objects according to the passed `options`. Optionally filters the returned records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindManyShopifyLocationsOptions>(options?: LimitToKnownKeys<Options, FindManyShopifyLocationsOptions>): PromiseOrLiveIterator<Options,GadgetRecordList<ShopifyLocationRecord<Options[\"select\"]>>>;\n      type: 'findMany';\n      operationName: typeof pluralModelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: FindManyShopifyLocationsOptions;\n      defaultSelection: typeof DefaultShopifyLocationSelection;\n      namespace: null;\n      selectionType: AvailableShopifyLocationSelection;\n      schemaType: Query[\"shopifyLocation\"];\n    }\n  findFirst: {\n      /**\n       * Finds the first matching shopifyLocation. Returns a `Promise` that resolves to a record if found and rejects the promise if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindFirstShopifyLocationOptions>(options?: LimitToKnownKeys<Options, FindFirstShopifyLocationOptions>): PromiseOrLiveIterator<Options,ShopifyLocationRecord<Options[\"select\"]>>;\n      type: 'findFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: FindFirstShopifyLocationOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyLocationSelection;\n      namespace: null;\n      selectionType: AvailableShopifyLocationSelection;\n      schemaType: Query[\"shopifyLocation\"];\n    }\n  maybeFindFirst: {\n      /**\n       * Finds the first matching shopifyLocation. Returns a `Promise` that resolves to a record if found, or null if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` pagination options.\n       **/\n      <Options extends MaybeFindFirstShopifyLocationOptions>(options?: LimitToKnownKeys<Options, MaybeFindFirstShopifyLocationOptions>): PromiseOrLiveIterator<Options,ShopifyLocationRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: MaybeFindFirstShopifyLocationOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyLocationSelection;\n      namespace: null;\n      selectionType: AvailableShopifyLocationSelection;\n      schemaType: Query[\"shopifyLocation\"];\n    }\n  findById: {\n      /**\n      * Finds one shopifyLocation by its id. Returns a Promise that resolves to the record if found and rejects the promise if the record isn't found.\n      **/\n      <Options extends FindOneShopifyLocationOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneShopifyLocationOptions>): PromiseOrLiveIterator<Options,ShopifyLocationRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneShopifyLocationOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyLocationSelection;\n      namespace: null;\n      selectionType: AvailableShopifyLocationSelection;\n      schemaType: Query[\"shopifyLocation\"];\n    }\n  maybeFindById: {\n      /**\n      * Finds one shopifyLocation by its id. Returns a Promise that resolves to the record if found and returns null if the record isn't found.\n      **/\n      <Options extends FindOneShopifyLocationOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneShopifyLocationOptions>): Promise<ShopifyLocationRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneShopifyLocationOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyLocationSelection;\n      namespace: null;\n      selectionType: AvailableShopifyLocationSelection;\n      schemaType: Query[\"shopifyLocation\"];\n    }\n  create: {\n      /**\n       * @deprecated The action create on model shopifyLocation does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'createShopifyLocation';\n      errorMessage: string;\n      optionsType: CreateShopifyLocationOptions;\n      actionApiIdentifier: 'create';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyLocation.create';\n    }\n  bulkCreate: {\n      /**\n       * @deprecated The action create on model shopifyLocation does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkCreateShopifyLocations';\n      errorMessage: string;\n      optionsType: CreateShopifyLocationOptions;\n      actionApiIdentifier: 'create';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyLocation.bulkCreate';\n    }\n  update: {\n      /**\n       * @deprecated The action update on model shopifyLocation does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'updateShopifyLocation';\n      errorMessage: string;\n      optionsType: UpdateShopifyLocationOptions;\n      actionApiIdentifier: 'update';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyLocation.update';\n    }\n  bulkUpdate: {\n      /**\n       * @deprecated The action update on model shopifyLocation does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkUpdateShopifyLocations';\n      errorMessage: string;\n      optionsType: UpdateShopifyLocationOptions;\n      actionApiIdentifier: 'update';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyLocation.bulkUpdate';\n    }\n  delete: {\n      /**\n       * @deprecated The action delete on model shopifyLocation does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'deleteShopifyLocation';\n      errorMessage: string;\n      optionsType: DeleteShopifyLocationOptions;\n      actionApiIdentifier: 'delete';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyLocation.delete';\n    }\n  bulkDelete: {\n      /**\n       * @deprecated The action delete on model shopifyLocation does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkDeleteShopifyLocations';\n      errorMessage: string;\n      optionsType: DeleteShopifyLocationOptions;\n      actionApiIdentifier: 'delete';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyLocation.bulkDelete';\n    }\n  view: {\n      (query: string, variables?: Record<string, unknown>): Promise<unknown>\n      type: 'computedView';\n      operationName: 'view';\n      gqlFieldName: 'shopifyLocationGellyView';\n      namespace: null;\n      imports: [];\n      variables: {\n          query: { type: 'String', required: true },\n          args: { type: 'JSONObject' }\n        };\n      variablesType: Record<string, unknown>;\n      resultType: Promise<unknown>;\n      plan: never;\n    }\n};\n\n/**\n * A manager for the shopifyLocation model with all the available operations for reading and writing to it.*/\nexport const ShopifyLocationManager = buildModelManager(\n  modelApiIdentifier,\n  pluralModelApiIdentifier,\n  DefaultShopifyLocationSelection,\n  [\n    {\n      type: 'findOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultShopifyLocationSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultShopifyLocationSelection,\n      namespace: null\n    },\n    {\n      type: 'findMany',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyLocationSelection,\n      namespace: null\n    },\n    {\n      type: 'findFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyLocationSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyLocationSelection,\n      namespace: null\n    },\n    {\n      type: 'findOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'findById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyLocationSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'maybeFindById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyLocationSelection,\n      namespace: null\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'createShopifyLocation',\n      functionName: 'create',\n      errorMessage: 'The action create on model shopifyLocation does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'create',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyLocation.create'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkCreateShopifyLocations',\n      functionName: 'bulkCreate',\n      errorMessage: 'The action create on model shopifyLocation does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'create',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyLocation.bulkCreate'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'updateShopifyLocation',\n      functionName: 'update',\n      errorMessage: 'The action update on model shopifyLocation does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'update',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyLocation.update'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkUpdateShopifyLocations',\n      functionName: 'bulkUpdate',\n      errorMessage: 'The action update on model shopifyLocation does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'update',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyLocation.bulkUpdate'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'deleteShopifyLocation',\n      functionName: 'delete',\n      errorMessage: 'The action delete on model shopifyLocation does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'delete',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyLocation.delete'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkDeleteShopifyLocations',\n      functionName: 'bulkDelete',\n      errorMessage: 'The action delete on model shopifyLocation does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'delete',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyLocation.bulkDelete'\n    },\n    {\n      type: 'computedView',\n      operationName: 'view',\n      functionName: 'view',\n      gqlFieldName: 'shopifyLocationGellyView',\n      namespace: null,\n      variables: {\n        query: { type: 'String', required: true },\n        args: { type: 'JSONObject' }\n      }\n    }\n  ] as const\n) as unknown as {\n  // Gadget generates these model manager classes at runtime dynamically, which means there is no source code for the class. This is done to make the bundle size of the client as small as possible, avoiding a bunch of repeated source code in favour of one small builder function. The TypeScript types above document the exact interface of the constructed class.\n  new(connection: GadgetConnection): ShopifyLocationManager;\n};", "import {\n  GadgetConnection,\n  GadgetRecord,\n  GadgetRecordImplementation,\n  GadgetRecordList,\n  GadgetNonUniqueDataError,\n  actionRunner,\n  findManyRunner,\n  findOneRunner,\n  findOneByFieldRunner,\n  FieldSelection,\n  LimitToKnownKeys,\n  Selectable\n} from \"@gadgetinc/api-client-core\";\n\nimport {\n  Query,\n  ExplicitNestingRequired,\n\n  IDsList,\n  PromiseOrLiveIterator,\n  ShopifyFulfillment,\n  AvailableShopifyFulfillmentSelection,\n  ShopifyFulfillmentSort,\n  ShopifyFulfillmentFilter\n} from \"../types.js\";\n\nimport { buildModelManager } from \"../builder.js\";\nimport { AvailableSelection, AllFieldsSelected, DefaultSelection, Select, DeepFilterNever } from \"../utils.js\";\n\n/**\n* A type that holds only the selected fields (and nested fields) of shopifyFulfillment. The present fields in the result type of this are dynamic based on the options to each call that uses it.\n* The selected fields are sometimes given by the `Options` at `Options[\"select\"]`, and if a selection isn't made in the options, we use the default selection from above.\n*/\nexport type SelectedShopifyFulfillmentOrDefault<Options extends Selectable<AvailableShopifyFulfillmentSelection>> = DeepFilterNever<\n    Select<\n      ShopifyFulfillment,\n      DefaultSelection<\n        AvailableShopifyFulfillmentSelection,\n        Options,\n        typeof DefaultShopifyFulfillmentSelection\n      >\n    >\n  >;\n\n/**\n * A type that represents a `GadgetRecord` type for shopifyFulfillment.\n * It selects all fields of the model by default. If you want to represent a record type with a subset of fields, you could pass in an object in the `Selection` type parameter.\n *\n * @example\n * ```ts\n * const someFunction = (record: ShopifyFulfillmentRecord, recordWithName: ShopifyFulfillmentRecord<{ select: { name: true; } }>) => {\n *   // The type of the `record` variable will include all fields of the model.\n *   const name = record.name;\n *   const otherField = record.otherField;\n *\n *   // The type of the `recordWithName` variable will only include the selected fields.\n *   const name = recordWithName.name;\n *   const otherField = recordWithName.otherField; // Type error: Property 'otherField' does not exist on type 'GadgetRecord<{ name: true; }>'.\n * }\n * ```\n */\nexport type ShopifyFulfillmentRecord<Selection extends AvailableShopifyFulfillmentSelection | undefined = typeof DefaultShopifyFulfillmentSelection> = DeepFilterNever<\n  GadgetRecord<\n    SelectedShopifyFulfillmentOrDefault<{\n      select: Selection;\n    }>\n  >\n>;\n\nexport const DefaultShopifyFulfillmentSelection = {\n     __typename: true,\n     id: true,\n     createdAt: true,\n     locationId: true,\n     name: true,\n     notifyCustomer: true,\n     orderId: true,\n     originAddress: true,\n     receipt: true,\n     service: true,\n     shipmentStatus: true,\n     shopId: true,\n     shopifyCreatedAt: true,\n     shopifyUpdatedAt: true,\n     status: true,\n     trackingCompany: true,\n     trackingNumbers: true,\n     trackingUrls: true,\n     updatedAt: true,\n     variantInventoryManagement: true\n   } as const;\nconst modelApiIdentifier = \"shopifyFulfillment\" as const;\nconst pluralModelApiIdentifier = \"shopifyFulfillments\" as const;\n/** Options that can be passed to the `ShopifyFulfillmentManager#findOne` method */\n export interface FindOneShopifyFulfillmentOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyFulfillmentSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `ShopifyFulfillmentManager#maybeFindOne` method */\n export interface MaybeFindOneShopifyFulfillmentOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyFulfillmentSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `ShopifyFulfillmentManager#findMany` method */\n export interface FindManyShopifyFulfillmentsOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyFulfillmentSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyFulfillmentSort | ShopifyFulfillmentSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyFulfillmentFilter | ShopifyFulfillmentFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n  first?: number | null;\n  last?: number | null;\n  after?: string | null;\n  before?: string | null;\n};\n/** Options that can be passed to the `ShopifyFulfillmentManager#findFirst` method */\n export interface FindFirstShopifyFulfillmentOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyFulfillmentSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyFulfillmentSort | ShopifyFulfillmentSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyFulfillmentFilter | ShopifyFulfillmentFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\n/** Options that can be passed to the `ShopifyFulfillmentManager#maybeFindFirst` method */\n export interface MaybeFindFirstShopifyFulfillmentOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyFulfillmentSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyFulfillmentSort | ShopifyFulfillmentSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyFulfillmentFilter | ShopifyFulfillmentFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\nexport interface CreateShopifyFulfillmentOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyFulfillmentSelection;\n};\nexport interface UpdateShopifyFulfillmentOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyFulfillmentSelection;\n};\nexport interface DeleteShopifyFulfillmentOptions {\n\n};\n\n/**\n * A manager for the shopifyFulfillment model with all the available operations for reading and writing to it.*/\nexport type ShopifyFulfillmentManager = {\n  readonly connection: GadgetConnection;\n\n  findOne: {\n      /**\n       * Finds one shopifyFulfillment by ID. Returns a `Promise` that resolves to the record if found and rejects the promise if the record isn't found.\n       **/\n      <Options extends FindOneShopifyFulfillmentOptions>(id: string, options?: LimitToKnownKeys<Options, FindOneShopifyFulfillmentOptions>): PromiseOrLiveIterator<Options,ShopifyFulfillmentRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultShopifyFulfillmentSelection;\n      namespace: null;\n      optionsType: FindOneShopifyFulfillmentOptions;\n      selectionType: AvailableShopifyFulfillmentSelection;\n      schemaType: Query[\"shopifyFulfillment\"];\n    }\n  maybeFindOne: {\n      /**\n       * Finds one shopifyFulfillment by ID. Returns a `Promise` that resolves to the record if found and returns null otherwise.\n       **/\n      <Options extends MaybeFindOneShopifyFulfillmentOptions>(id: string, options?: LimitToKnownKeys<Options, MaybeFindOneShopifyFulfillmentOptions>): PromiseOrLiveIterator<Options,ShopifyFulfillmentRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: MaybeFindOneShopifyFulfillmentOptions;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultShopifyFulfillmentSelection;\n      namespace: null;\n      selectionType: AvailableShopifyFulfillmentSelection;\n      schemaType: Query[\"shopifyFulfillment\"];\n    }\n  findMany: {\n      /**\n       * Finds many shopifyFulfillment. Returns a `Promise` for a `GadgetRecordList` of objects according to the passed `options`. Optionally filters the returned records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindManyShopifyFulfillmentsOptions>(options?: LimitToKnownKeys<Options, FindManyShopifyFulfillmentsOptions>): PromiseOrLiveIterator<Options,GadgetRecordList<ShopifyFulfillmentRecord<Options[\"select\"]>>>;\n      type: 'findMany';\n      operationName: typeof pluralModelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: FindManyShopifyFulfillmentsOptions;\n      defaultSelection: typeof DefaultShopifyFulfillmentSelection;\n      namespace: null;\n      selectionType: AvailableShopifyFulfillmentSelection;\n      schemaType: Query[\"shopifyFulfillment\"];\n    }\n  findFirst: {\n      /**\n       * Finds the first matching shopifyFulfillment. Returns a `Promise` that resolves to a record if found and rejects the promise if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindFirstShopifyFulfillmentOptions>(options?: LimitToKnownKeys<Options, FindFirstShopifyFulfillmentOptions>): PromiseOrLiveIterator<Options,ShopifyFulfillmentRecord<Options[\"select\"]>>;\n      type: 'findFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: FindFirstShopifyFulfillmentOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyFulfillmentSelection;\n      namespace: null;\n      selectionType: AvailableShopifyFulfillmentSelection;\n      schemaType: Query[\"shopifyFulfillment\"];\n    }\n  maybeFindFirst: {\n      /**\n       * Finds the first matching shopifyFulfillment. Returns a `Promise` that resolves to a record if found, or null if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` pagination options.\n       **/\n      <Options extends MaybeFindFirstShopifyFulfillmentOptions>(options?: LimitToKnownKeys<Options, MaybeFindFirstShopifyFulfillmentOptions>): PromiseOrLiveIterator<Options,ShopifyFulfillmentRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: MaybeFindFirstShopifyFulfillmentOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyFulfillmentSelection;\n      namespace: null;\n      selectionType: AvailableShopifyFulfillmentSelection;\n      schemaType: Query[\"shopifyFulfillment\"];\n    }\n  findById: {\n      /**\n      * Finds one shopifyFulfillment by its id. Returns a Promise that resolves to the record if found and rejects the promise if the record isn't found.\n      **/\n      <Options extends FindOneShopifyFulfillmentOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneShopifyFulfillmentOptions>): PromiseOrLiveIterator<Options,ShopifyFulfillmentRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneShopifyFulfillmentOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyFulfillmentSelection;\n      namespace: null;\n      selectionType: AvailableShopifyFulfillmentSelection;\n      schemaType: Query[\"shopifyFulfillment\"];\n    }\n  maybeFindById: {\n      /**\n      * Finds one shopifyFulfillment by its id. Returns a Promise that resolves to the record if found and returns null if the record isn't found.\n      **/\n      <Options extends FindOneShopifyFulfillmentOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneShopifyFulfillmentOptions>): Promise<ShopifyFulfillmentRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneShopifyFulfillmentOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyFulfillmentSelection;\n      namespace: null;\n      selectionType: AvailableShopifyFulfillmentSelection;\n      schemaType: Query[\"shopifyFulfillment\"];\n    }\n  create: {\n      /**\n       * @deprecated The action create on model shopifyFulfillment does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'createShopifyFulfillment';\n      errorMessage: string;\n      optionsType: CreateShopifyFulfillmentOptions;\n      actionApiIdentifier: 'create';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyFulfillment.create';\n    }\n  bulkCreate: {\n      /**\n       * @deprecated The action create on model shopifyFulfillment does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkCreateShopifyFulfillments';\n      errorMessage: string;\n      optionsType: CreateShopifyFulfillmentOptions;\n      actionApiIdentifier: 'create';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyFulfillment.bulkCreate';\n    }\n  update: {\n      /**\n       * @deprecated The action update on model shopifyFulfillment does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'updateShopifyFulfillment';\n      errorMessage: string;\n      optionsType: UpdateShopifyFulfillmentOptions;\n      actionApiIdentifier: 'update';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyFulfillment.update';\n    }\n  bulkUpdate: {\n      /**\n       * @deprecated The action update on model shopifyFulfillment does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkUpdateShopifyFulfillments';\n      errorMessage: string;\n      optionsType: UpdateShopifyFulfillmentOptions;\n      actionApiIdentifier: 'update';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyFulfillment.bulkUpdate';\n    }\n  delete: {\n      /**\n       * @deprecated The action delete on model shopifyFulfillment does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'deleteShopifyFulfillment';\n      errorMessage: string;\n      optionsType: DeleteShopifyFulfillmentOptions;\n      actionApiIdentifier: 'delete';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyFulfillment.delete';\n    }\n  bulkDelete: {\n      /**\n       * @deprecated The action delete on model shopifyFulfillment does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkDeleteShopifyFulfillments';\n      errorMessage: string;\n      optionsType: DeleteShopifyFulfillmentOptions;\n      actionApiIdentifier: 'delete';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyFulfillment.bulkDelete';\n    }\n  view: {\n      (query: string, variables?: Record<string, unknown>): Promise<unknown>\n      type: 'computedView';\n      operationName: 'view';\n      gqlFieldName: 'shopifyFulfillmentGellyView';\n      namespace: null;\n      imports: [];\n      variables: {\n          query: { type: 'String', required: true },\n          args: { type: 'JSONObject' }\n        };\n      variablesType: Record<string, unknown>;\n      resultType: Promise<unknown>;\n      plan: never;\n    }\n};\n\n/**\n * A manager for the shopifyFulfillment model with all the available operations for reading and writing to it.*/\nexport const ShopifyFulfillmentManager = buildModelManager(\n  modelApiIdentifier,\n  pluralModelApiIdentifier,\n  DefaultShopifyFulfillmentSelection,\n  [\n    {\n      type: 'findOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultShopifyFulfillmentSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultShopifyFulfillmentSelection,\n      namespace: null\n    },\n    {\n      type: 'findMany',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyFulfillmentSelection,\n      namespace: null\n    },\n    {\n      type: 'findFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyFulfillmentSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyFulfillmentSelection,\n      namespace: null\n    },\n    {\n      type: 'findOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'findById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyFulfillmentSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'maybeFindById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyFulfillmentSelection,\n      namespace: null\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'createShopifyFulfillment',\n      functionName: 'create',\n      errorMessage: 'The action create on model shopifyFulfillment does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'create',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyFulfillment.create'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkCreateShopifyFulfillments',\n      functionName: 'bulkCreate',\n      errorMessage: 'The action create on model shopifyFulfillment does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'create',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyFulfillment.bulkCreate'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'updateShopifyFulfillment',\n      functionName: 'update',\n      errorMessage: 'The action update on model shopifyFulfillment does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'update',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyFulfillment.update'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkUpdateShopifyFulfillments',\n      functionName: 'bulkUpdate',\n      errorMessage: 'The action update on model shopifyFulfillment does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'update',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyFulfillment.bulkUpdate'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'deleteShopifyFulfillment',\n      functionName: 'delete',\n      errorMessage: 'The action delete on model shopifyFulfillment does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'delete',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyFulfillment.delete'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkDeleteShopifyFulfillments',\n      functionName: 'bulkDelete',\n      errorMessage: 'The action delete on model shopifyFulfillment does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'delete',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyFulfillment.bulkDelete'\n    },\n    {\n      type: 'computedView',\n      operationName: 'view',\n      functionName: 'view',\n      gqlFieldName: 'shopifyFulfillmentGellyView',\n      namespace: null,\n      variables: {\n        query: { type: 'String', required: true },\n        args: { type: 'JSONObject' }\n      }\n    }\n  ] as const\n) as unknown as {\n  // Gadget generates these model manager classes at runtime dynamically, which means there is no source code for the class. This is done to make the bundle size of the client as small as possible, avoiding a bunch of repeated source code in favour of one small builder function. The TypeScript types above document the exact interface of the constructed class.\n  new(connection: GadgetConnection): ShopifyFulfillmentManager;\n};", "import {\n  GadgetConnection,\n  GadgetRecord,\n  GadgetRecordImplementation,\n  GadgetRecordList,\n  GadgetNonUniqueDataError,\n  actionRunner,\n  findManyRunner,\n  findOneRunner,\n  findOneByFieldRunner,\n  FieldSelection,\n  LimitToKnownKeys,\n  Selectable\n} from \"@gadgetinc/api-client-core\";\n\nimport {\n  Query,\n  ExplicitNestingRequired,\n\n  IDsList,\n  PromiseOrLiveIterator,\n  ShopifyFulfillmentEvent,\n  AvailableShopifyFulfillmentEventSelection,\n  ShopifyFulfillmentEventSort,\n  ShopifyFulfillmentEventFilter\n} from \"../types.js\";\n\nimport { buildModelManager } from \"../builder.js\";\nimport { AvailableSelection, AllFieldsSelected, DefaultSelection, Select, DeepFilterNever } from \"../utils.js\";\n\n/**\n* A type that holds only the selected fields (and nested fields) of shopifyFulfillmentEvent. The present fields in the result type of this are dynamic based on the options to each call that uses it.\n* The selected fields are sometimes given by the `Options` at `Options[\"select\"]`, and if a selection isn't made in the options, we use the default selection from above.\n*/\nexport type SelectedShopifyFulfillmentEventOrDefault<Options extends Selectable<AvailableShopifyFulfillmentEventSelection>> = DeepFilterNever<\n    Select<\n      ShopifyFulfillmentEvent,\n      DefaultSelection<\n        AvailableShopifyFulfillmentEventSelection,\n        Options,\n        typeof DefaultShopifyFulfillmentEventSelection\n      >\n    >\n  >;\n\n/**\n * A type that represents a `GadgetRecord` type for shopifyFulfillmentEvent.\n * It selects all fields of the model by default. If you want to represent a record type with a subset of fields, you could pass in an object in the `Selection` type parameter.\n *\n * @example\n * ```ts\n * const someFunction = (record: ShopifyFulfillmentEventRecord, recordWithName: ShopifyFulfillmentEventRecord<{ select: { name: true; } }>) => {\n *   // The type of the `record` variable will include all fields of the model.\n *   const name = record.name;\n *   const otherField = record.otherField;\n *\n *   // The type of the `recordWithName` variable will only include the selected fields.\n *   const name = recordWithName.name;\n *   const otherField = recordWithName.otherField; // Type error: Property 'otherField' does not exist on type 'GadgetRecord<{ name: true; }>'.\n * }\n * ```\n */\nexport type ShopifyFulfillmentEventRecord<Selection extends AvailableShopifyFulfillmentEventSelection | undefined = typeof DefaultShopifyFulfillmentEventSelection> = DeepFilterNever<\n  GadgetRecord<\n    SelectedShopifyFulfillmentEventOrDefault<{\n      select: Selection;\n    }>\n  >\n>;\n\nexport const DefaultShopifyFulfillmentEventSelection = {\n     __typename: true,\n     id: true,\n     address1: true,\n     city: true,\n     country: true,\n     createdAt: true,\n     estimatedDeliveryAt: true,\n     fulfillmentId: true,\n     happenedAt: true,\n     latitude: true,\n     longitude: true,\n     message: true,\n     orderId: true,\n     province: true,\n     shopId: true,\n     shopifyCreatedAt: true,\n     shopifyUpdatedAt: true,\n     status: true,\n     updatedAt: true,\n     zipCode: true\n   } as const;\nconst modelApiIdentifier = \"shopifyFulfillmentEvent\" as const;\nconst pluralModelApiIdentifier = \"shopifyFulfillmentEvents\" as const;\n/** Options that can be passed to the `ShopifyFulfillmentEventManager#findOne` method */\n export interface FindOneShopifyFulfillmentEventOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyFulfillmentEventSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `ShopifyFulfillmentEventManager#maybeFindOne` method */\n export interface MaybeFindOneShopifyFulfillmentEventOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyFulfillmentEventSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `ShopifyFulfillmentEventManager#findMany` method */\n export interface FindManyShopifyFulfillmentEventsOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyFulfillmentEventSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyFulfillmentEventSort | ShopifyFulfillmentEventSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyFulfillmentEventFilter | ShopifyFulfillmentEventFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n  first?: number | null;\n  last?: number | null;\n  after?: string | null;\n  before?: string | null;\n};\n/** Options that can be passed to the `ShopifyFulfillmentEventManager#findFirst` method */\n export interface FindFirstShopifyFulfillmentEventOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyFulfillmentEventSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyFulfillmentEventSort | ShopifyFulfillmentEventSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyFulfillmentEventFilter | ShopifyFulfillmentEventFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\n/** Options that can be passed to the `ShopifyFulfillmentEventManager#maybeFindFirst` method */\n export interface MaybeFindFirstShopifyFulfillmentEventOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyFulfillmentEventSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyFulfillmentEventSort | ShopifyFulfillmentEventSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyFulfillmentEventFilter | ShopifyFulfillmentEventFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\nexport interface CreateShopifyFulfillmentEventOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyFulfillmentEventSelection;\n};\nexport interface UpdateShopifyFulfillmentEventOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyFulfillmentEventSelection;\n};\nexport interface DeleteShopifyFulfillmentEventOptions {\n\n};\n\n/**\n * A manager for the shopifyFulfillmentEvent model with all the available operations for reading and writing to it.*/\nexport type ShopifyFulfillmentEventManager = {\n  readonly connection: GadgetConnection;\n\n  findOne: {\n      /**\n       * Finds one shopifyFulfillmentEvent by ID. Returns a `Promise` that resolves to the record if found and rejects the promise if the record isn't found.\n       **/\n      <Options extends FindOneShopifyFulfillmentEventOptions>(id: string, options?: LimitToKnownKeys<Options, FindOneShopifyFulfillmentEventOptions>): PromiseOrLiveIterator<Options,ShopifyFulfillmentEventRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultShopifyFulfillmentEventSelection;\n      namespace: null;\n      optionsType: FindOneShopifyFulfillmentEventOptions;\n      selectionType: AvailableShopifyFulfillmentEventSelection;\n      schemaType: Query[\"shopifyFulfillmentEvent\"];\n    }\n  maybeFindOne: {\n      /**\n       * Finds one shopifyFulfillmentEvent by ID. Returns a `Promise` that resolves to the record if found and returns null otherwise.\n       **/\n      <Options extends MaybeFindOneShopifyFulfillmentEventOptions>(id: string, options?: LimitToKnownKeys<Options, MaybeFindOneShopifyFulfillmentEventOptions>): PromiseOrLiveIterator<Options,ShopifyFulfillmentEventRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: MaybeFindOneShopifyFulfillmentEventOptions;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultShopifyFulfillmentEventSelection;\n      namespace: null;\n      selectionType: AvailableShopifyFulfillmentEventSelection;\n      schemaType: Query[\"shopifyFulfillmentEvent\"];\n    }\n  findMany: {\n      /**\n       * Finds many shopifyFulfillmentEvent. Returns a `Promise` for a `GadgetRecordList` of objects according to the passed `options`. Optionally filters the returned records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindManyShopifyFulfillmentEventsOptions>(options?: LimitToKnownKeys<Options, FindManyShopifyFulfillmentEventsOptions>): PromiseOrLiveIterator<Options,GadgetRecordList<ShopifyFulfillmentEventRecord<Options[\"select\"]>>>;\n      type: 'findMany';\n      operationName: typeof pluralModelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: FindManyShopifyFulfillmentEventsOptions;\n      defaultSelection: typeof DefaultShopifyFulfillmentEventSelection;\n      namespace: null;\n      selectionType: AvailableShopifyFulfillmentEventSelection;\n      schemaType: Query[\"shopifyFulfillmentEvent\"];\n    }\n  findFirst: {\n      /**\n       * Finds the first matching shopifyFulfillmentEvent. Returns a `Promise` that resolves to a record if found and rejects the promise if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindFirstShopifyFulfillmentEventOptions>(options?: LimitToKnownKeys<Options, FindFirstShopifyFulfillmentEventOptions>): PromiseOrLiveIterator<Options,ShopifyFulfillmentEventRecord<Options[\"select\"]>>;\n      type: 'findFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: FindFirstShopifyFulfillmentEventOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyFulfillmentEventSelection;\n      namespace: null;\n      selectionType: AvailableShopifyFulfillmentEventSelection;\n      schemaType: Query[\"shopifyFulfillmentEvent\"];\n    }\n  maybeFindFirst: {\n      /**\n       * Finds the first matching shopifyFulfillmentEvent. Returns a `Promise` that resolves to a record if found, or null if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` pagination options.\n       **/\n      <Options extends MaybeFindFirstShopifyFulfillmentEventOptions>(options?: LimitToKnownKeys<Options, MaybeFindFirstShopifyFulfillmentEventOptions>): PromiseOrLiveIterator<Options,ShopifyFulfillmentEventRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: MaybeFindFirstShopifyFulfillmentEventOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyFulfillmentEventSelection;\n      namespace: null;\n      selectionType: AvailableShopifyFulfillmentEventSelection;\n      schemaType: Query[\"shopifyFulfillmentEvent\"];\n    }\n  findById: {\n      /**\n      * Finds one shopifyFulfillmentEvent by its id. Returns a Promise that resolves to the record if found and rejects the promise if the record isn't found.\n      **/\n      <Options extends FindOneShopifyFulfillmentEventOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneShopifyFulfillmentEventOptions>): PromiseOrLiveIterator<Options,ShopifyFulfillmentEventRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneShopifyFulfillmentEventOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyFulfillmentEventSelection;\n      namespace: null;\n      selectionType: AvailableShopifyFulfillmentEventSelection;\n      schemaType: Query[\"shopifyFulfillmentEvent\"];\n    }\n  maybeFindById: {\n      /**\n      * Finds one shopifyFulfillmentEvent by its id. Returns a Promise that resolves to the record if found and returns null if the record isn't found.\n      **/\n      <Options extends FindOneShopifyFulfillmentEventOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneShopifyFulfillmentEventOptions>): Promise<ShopifyFulfillmentEventRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneShopifyFulfillmentEventOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyFulfillmentEventSelection;\n      namespace: null;\n      selectionType: AvailableShopifyFulfillmentEventSelection;\n      schemaType: Query[\"shopifyFulfillmentEvent\"];\n    }\n  create: {\n      /**\n       * @deprecated The action create on model shopifyFulfillmentEvent does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'createShopifyFulfillmentEvent';\n      errorMessage: string;\n      optionsType: CreateShopifyFulfillmentEventOptions;\n      actionApiIdentifier: 'create';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyFulfillmentEvent.create';\n    }\n  bulkCreate: {\n      /**\n       * @deprecated The action create on model shopifyFulfillmentEvent does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkCreateShopifyFulfillmentEvents';\n      errorMessage: string;\n      optionsType: CreateShopifyFulfillmentEventOptions;\n      actionApiIdentifier: 'create';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyFulfillmentEvent.bulkCreate';\n    }\n  update: {\n      /**\n       * @deprecated The action update on model shopifyFulfillmentEvent does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'updateShopifyFulfillmentEvent';\n      errorMessage: string;\n      optionsType: UpdateShopifyFulfillmentEventOptions;\n      actionApiIdentifier: 'update';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyFulfillmentEvent.update';\n    }\n  bulkUpdate: {\n      /**\n       * @deprecated The action update on model shopifyFulfillmentEvent does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkUpdateShopifyFulfillmentEvents';\n      errorMessage: string;\n      optionsType: UpdateShopifyFulfillmentEventOptions;\n      actionApiIdentifier: 'update';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyFulfillmentEvent.bulkUpdate';\n    }\n  delete: {\n      /**\n       * @deprecated The action delete on model shopifyFulfillmentEvent does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'deleteShopifyFulfillmentEvent';\n      errorMessage: string;\n      optionsType: DeleteShopifyFulfillmentEventOptions;\n      actionApiIdentifier: 'delete';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyFulfillmentEvent.delete';\n    }\n  bulkDelete: {\n      /**\n       * @deprecated The action delete on model shopifyFulfillmentEvent does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkDeleteShopifyFulfillmentEvents';\n      errorMessage: string;\n      optionsType: DeleteShopifyFulfillmentEventOptions;\n      actionApiIdentifier: 'delete';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyFulfillmentEvent.bulkDelete';\n    }\n  view: {\n      (query: string, variables?: Record<string, unknown>): Promise<unknown>\n      type: 'computedView';\n      operationName: 'view';\n      gqlFieldName: 'shopifyFulfillmentEventGellyView';\n      namespace: null;\n      imports: [];\n      variables: {\n          query: { type: 'String', required: true },\n          args: { type: 'JSONObject' }\n        };\n      variablesType: Record<string, unknown>;\n      resultType: Promise<unknown>;\n      plan: never;\n    }\n};\n\n/**\n * A manager for the shopifyFulfillmentEvent model with all the available operations for reading and writing to it.*/\nexport const ShopifyFulfillmentEventManager = buildModelManager(\n  modelApiIdentifier,\n  pluralModelApiIdentifier,\n  DefaultShopifyFulfillmentEventSelection,\n  [\n    {\n      type: 'findOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultShopifyFulfillmentEventSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultShopifyFulfillmentEventSelection,\n      namespace: null\n    },\n    {\n      type: 'findMany',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyFulfillmentEventSelection,\n      namespace: null\n    },\n    {\n      type: 'findFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyFulfillmentEventSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyFulfillmentEventSelection,\n      namespace: null\n    },\n    {\n      type: 'findOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'findById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyFulfillmentEventSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'maybeFindById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyFulfillmentEventSelection,\n      namespace: null\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'createShopifyFulfillmentEvent',\n      functionName: 'create',\n      errorMessage: 'The action create on model shopifyFulfillmentEvent does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'create',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyFulfillmentEvent.create'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkCreateShopifyFulfillmentEvents',\n      functionName: 'bulkCreate',\n      errorMessage: 'The action create on model shopifyFulfillmentEvent does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'create',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyFulfillmentEvent.bulkCreate'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'updateShopifyFulfillmentEvent',\n      functionName: 'update',\n      errorMessage: 'The action update on model shopifyFulfillmentEvent does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'update',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyFulfillmentEvent.update'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkUpdateShopifyFulfillmentEvents',\n      functionName: 'bulkUpdate',\n      errorMessage: 'The action update on model shopifyFulfillmentEvent does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'update',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyFulfillmentEvent.bulkUpdate'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'deleteShopifyFulfillmentEvent',\n      functionName: 'delete',\n      errorMessage: 'The action delete on model shopifyFulfillmentEvent does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'delete',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyFulfillmentEvent.delete'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkDeleteShopifyFulfillmentEvents',\n      functionName: 'bulkDelete',\n      errorMessage: 'The action delete on model shopifyFulfillmentEvent does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'delete',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyFulfillmentEvent.bulkDelete'\n    },\n    {\n      type: 'computedView',\n      operationName: 'view',\n      functionName: 'view',\n      gqlFieldName: 'shopifyFulfillmentEventGellyView',\n      namespace: null,\n      variables: {\n        query: { type: 'String', required: true },\n        args: { type: 'JSONObject' }\n      }\n    }\n  ] as const\n) as unknown as {\n  // Gadget generates these model manager classes at runtime dynamically, which means there is no source code for the class. This is done to make the bundle size of the client as small as possible, avoiding a bunch of repeated source code in favour of one small builder function. The TypeScript types above document the exact interface of the constructed class.\n  new(connection: GadgetConnection): ShopifyFulfillmentEventManager;\n};", "import {\n  GadgetConnection,\n  GadgetRecord,\n  GadgetRecordImplementation,\n  GadgetRecordList,\n  GadgetNonUniqueDataError,\n  actionRunner,\n  findManyRunner,\n  findOneRunner,\n  findOneByFieldRunner,\n  FieldSelection,\n  LimitToKnownKeys,\n  Selectable\n} from \"@gadgetinc/api-client-core\";\n\nimport {\n  Query,\n  ExplicitNestingRequired,\n\n  IDsList,\n  PromiseOrLiveIterator,\n  ShopifyFulfillmentLineItem,\n  AvailableShopifyFulfillmentLineItemSelection,\n  ShopifyFulfillmentLineItemSort,\n  ShopifyFulfillmentLineItemFilter\n} from \"../types.js\";\n\nimport { buildModelManager } from \"../builder.js\";\nimport { AvailableSelection, AllFieldsSelected, DefaultSelection, Select, DeepFilterNever } from \"../utils.js\";\n\n/**\n* A type that holds only the selected fields (and nested fields) of shopifyFulfillmentLineItem. The present fields in the result type of this are dynamic based on the options to each call that uses it.\n* The selected fields are sometimes given by the `Options` at `Options[\"select\"]`, and if a selection isn't made in the options, we use the default selection from above.\n*/\nexport type SelectedShopifyFulfillmentLineItemOrDefault<Options extends Selectable<AvailableShopifyFulfillmentLineItemSelection>> = DeepFilterNever<\n    Select<\n      ShopifyFulfillmentLineItem,\n      DefaultSelection<\n        AvailableShopifyFulfillmentLineItemSelection,\n        Options,\n        typeof DefaultShopifyFulfillmentLineItemSelection\n      >\n    >\n  >;\n\n/**\n * A type that represents a `GadgetRecord` type for shopifyFulfillmentLineItem.\n * It selects all fields of the model by default. If you want to represent a record type with a subset of fields, you could pass in an object in the `Selection` type parameter.\n *\n * @example\n * ```ts\n * const someFunction = (record: ShopifyFulfillmentLineItemRecord, recordWithName: ShopifyFulfillmentLineItemRecord<{ select: { name: true; } }>) => {\n *   // The type of the `record` variable will include all fields of the model.\n *   const name = record.name;\n *   const otherField = record.otherField;\n *\n *   // The type of the `recordWithName` variable will only include the selected fields.\n *   const name = recordWithName.name;\n *   const otherField = recordWithName.otherField; // Type error: Property 'otherField' does not exist on type 'GadgetRecord<{ name: true; }>'.\n * }\n * ```\n */\nexport type ShopifyFulfillmentLineItemRecord<Selection extends AvailableShopifyFulfillmentLineItemSelection | undefined = typeof DefaultShopifyFulfillmentLineItemSelection> = DeepFilterNever<\n  GadgetRecord<\n    SelectedShopifyFulfillmentLineItemOrDefault<{\n      select: Selection;\n    }>\n  >\n>;\n\nexport const DefaultShopifyFulfillmentLineItemSelection = {\n     __typename: true,\n     id: true,\n     createdAt: true,\n     discountedTotalSet: true,\n     fulfillmentId: true,\n     orderLineItemId: true,\n     originalTotalSet: true,\n     quantity: true,\n     shopId: true,\n     updatedAt: true\n   } as const;\nconst modelApiIdentifier = \"shopifyFulfillmentLineItem\" as const;\nconst pluralModelApiIdentifier = \"shopifyFulfillmentLineItems\" as const;\n/** Options that can be passed to the `ShopifyFulfillmentLineItemManager#findOne` method */\n export interface FindOneShopifyFulfillmentLineItemOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyFulfillmentLineItemSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `ShopifyFulfillmentLineItemManager#maybeFindOne` method */\n export interface MaybeFindOneShopifyFulfillmentLineItemOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyFulfillmentLineItemSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `ShopifyFulfillmentLineItemManager#findMany` method */\n export interface FindManyShopifyFulfillmentLineItemsOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyFulfillmentLineItemSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyFulfillmentLineItemSort | ShopifyFulfillmentLineItemSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyFulfillmentLineItemFilter | ShopifyFulfillmentLineItemFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n  first?: number | null;\n  last?: number | null;\n  after?: string | null;\n  before?: string | null;\n};\n/** Options that can be passed to the `ShopifyFulfillmentLineItemManager#findFirst` method */\n export interface FindFirstShopifyFulfillmentLineItemOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyFulfillmentLineItemSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyFulfillmentLineItemSort | ShopifyFulfillmentLineItemSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyFulfillmentLineItemFilter | ShopifyFulfillmentLineItemFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\n/** Options that can be passed to the `ShopifyFulfillmentLineItemManager#maybeFindFirst` method */\n export interface MaybeFindFirstShopifyFulfillmentLineItemOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyFulfillmentLineItemSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyFulfillmentLineItemSort | ShopifyFulfillmentLineItemSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyFulfillmentLineItemFilter | ShopifyFulfillmentLineItemFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\nexport interface CreateShopifyFulfillmentLineItemOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyFulfillmentLineItemSelection;\n};\nexport interface UpdateShopifyFulfillmentLineItemOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyFulfillmentLineItemSelection;\n};\nexport interface DeleteShopifyFulfillmentLineItemOptions {\n\n};\n\n/**\n * A manager for the shopifyFulfillmentLineItem model with all the available operations for reading and writing to it.*/\nexport type ShopifyFulfillmentLineItemManager = {\n  readonly connection: GadgetConnection;\n\n  findOne: {\n      /**\n       * Finds one shopifyFulfillmentLineItem by ID. Returns a `Promise` that resolves to the record if found and rejects the promise if the record isn't found.\n       **/\n      <Options extends FindOneShopifyFulfillmentLineItemOptions>(id: string, options?: LimitToKnownKeys<Options, FindOneShopifyFulfillmentLineItemOptions>): PromiseOrLiveIterator<Options,ShopifyFulfillmentLineItemRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultShopifyFulfillmentLineItemSelection;\n      namespace: null;\n      optionsType: FindOneShopifyFulfillmentLineItemOptions;\n      selectionType: AvailableShopifyFulfillmentLineItemSelection;\n      schemaType: Query[\"shopifyFulfillmentLineItem\"];\n    }\n  maybeFindOne: {\n      /**\n       * Finds one shopifyFulfillmentLineItem by ID. Returns a `Promise` that resolves to the record if found and returns null otherwise.\n       **/\n      <Options extends MaybeFindOneShopifyFulfillmentLineItemOptions>(id: string, options?: LimitToKnownKeys<Options, MaybeFindOneShopifyFulfillmentLineItemOptions>): PromiseOrLiveIterator<Options,ShopifyFulfillmentLineItemRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: MaybeFindOneShopifyFulfillmentLineItemOptions;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultShopifyFulfillmentLineItemSelection;\n      namespace: null;\n      selectionType: AvailableShopifyFulfillmentLineItemSelection;\n      schemaType: Query[\"shopifyFulfillmentLineItem\"];\n    }\n  findMany: {\n      /**\n       * Finds many shopifyFulfillmentLineItem. Returns a `Promise` for a `GadgetRecordList` of objects according to the passed `options`. Optionally filters the returned records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindManyShopifyFulfillmentLineItemsOptions>(options?: LimitToKnownKeys<Options, FindManyShopifyFulfillmentLineItemsOptions>): PromiseOrLiveIterator<Options,GadgetRecordList<ShopifyFulfillmentLineItemRecord<Options[\"select\"]>>>;\n      type: 'findMany';\n      operationName: typeof pluralModelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: FindManyShopifyFulfillmentLineItemsOptions;\n      defaultSelection: typeof DefaultShopifyFulfillmentLineItemSelection;\n      namespace: null;\n      selectionType: AvailableShopifyFulfillmentLineItemSelection;\n      schemaType: Query[\"shopifyFulfillmentLineItem\"];\n    }\n  findFirst: {\n      /**\n       * Finds the first matching shopifyFulfillmentLineItem. Returns a `Promise` that resolves to a record if found and rejects the promise if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindFirstShopifyFulfillmentLineItemOptions>(options?: LimitToKnownKeys<Options, FindFirstShopifyFulfillmentLineItemOptions>): PromiseOrLiveIterator<Options,ShopifyFulfillmentLineItemRecord<Options[\"select\"]>>;\n      type: 'findFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: FindFirstShopifyFulfillmentLineItemOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyFulfillmentLineItemSelection;\n      namespace: null;\n      selectionType: AvailableShopifyFulfillmentLineItemSelection;\n      schemaType: Query[\"shopifyFulfillmentLineItem\"];\n    }\n  maybeFindFirst: {\n      /**\n       * Finds the first matching shopifyFulfillmentLineItem. Returns a `Promise` that resolves to a record if found, or null if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` pagination options.\n       **/\n      <Options extends MaybeFindFirstShopifyFulfillmentLineItemOptions>(options?: LimitToKnownKeys<Options, MaybeFindFirstShopifyFulfillmentLineItemOptions>): PromiseOrLiveIterator<Options,ShopifyFulfillmentLineItemRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: MaybeFindFirstShopifyFulfillmentLineItemOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyFulfillmentLineItemSelection;\n      namespace: null;\n      selectionType: AvailableShopifyFulfillmentLineItemSelection;\n      schemaType: Query[\"shopifyFulfillmentLineItem\"];\n    }\n  findById: {\n      /**\n      * Finds one shopifyFulfillmentLineItem by its id. Returns a Promise that resolves to the record if found and rejects the promise if the record isn't found.\n      **/\n      <Options extends FindOneShopifyFulfillmentLineItemOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneShopifyFulfillmentLineItemOptions>): PromiseOrLiveIterator<Options,ShopifyFulfillmentLineItemRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneShopifyFulfillmentLineItemOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyFulfillmentLineItemSelection;\n      namespace: null;\n      selectionType: AvailableShopifyFulfillmentLineItemSelection;\n      schemaType: Query[\"shopifyFulfillmentLineItem\"];\n    }\n  maybeFindById: {\n      /**\n      * Finds one shopifyFulfillmentLineItem by its id. Returns a Promise that resolves to the record if found and returns null if the record isn't found.\n      **/\n      <Options extends FindOneShopifyFulfillmentLineItemOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneShopifyFulfillmentLineItemOptions>): Promise<ShopifyFulfillmentLineItemRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneShopifyFulfillmentLineItemOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyFulfillmentLineItemSelection;\n      namespace: null;\n      selectionType: AvailableShopifyFulfillmentLineItemSelection;\n      schemaType: Query[\"shopifyFulfillmentLineItem\"];\n    }\n  create: {\n      /**\n       * @deprecated The action create on model shopifyFulfillmentLineItem does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'createShopifyFulfillmentLineItem';\n      errorMessage: string;\n      optionsType: CreateShopifyFulfillmentLineItemOptions;\n      actionApiIdentifier: 'create';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyFulfillmentLineItem.create';\n    }\n  bulkCreate: {\n      /**\n       * @deprecated The action create on model shopifyFulfillmentLineItem does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkCreateShopifyFulfillmentLineItems';\n      errorMessage: string;\n      optionsType: CreateShopifyFulfillmentLineItemOptions;\n      actionApiIdentifier: 'create';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyFulfillmentLineItem.bulkCreate';\n    }\n  update: {\n      /**\n       * @deprecated The action update on model shopifyFulfillmentLineItem does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'updateShopifyFulfillmentLineItem';\n      errorMessage: string;\n      optionsType: UpdateShopifyFulfillmentLineItemOptions;\n      actionApiIdentifier: 'update';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyFulfillmentLineItem.update';\n    }\n  bulkUpdate: {\n      /**\n       * @deprecated The action update on model shopifyFulfillmentLineItem does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkUpdateShopifyFulfillmentLineItems';\n      errorMessage: string;\n      optionsType: UpdateShopifyFulfillmentLineItemOptions;\n      actionApiIdentifier: 'update';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyFulfillmentLineItem.bulkUpdate';\n    }\n  delete: {\n      /**\n       * @deprecated The action delete on model shopifyFulfillmentLineItem does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'deleteShopifyFulfillmentLineItem';\n      errorMessage: string;\n      optionsType: DeleteShopifyFulfillmentLineItemOptions;\n      actionApiIdentifier: 'delete';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyFulfillmentLineItem.delete';\n    }\n  bulkDelete: {\n      /**\n       * @deprecated The action delete on model shopifyFulfillmentLineItem does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkDeleteShopifyFulfillmentLineItems';\n      errorMessage: string;\n      optionsType: DeleteShopifyFulfillmentLineItemOptions;\n      actionApiIdentifier: 'delete';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyFulfillmentLineItem.bulkDelete';\n    }\n  view: {\n      (query: string, variables?: Record<string, unknown>): Promise<unknown>\n      type: 'computedView';\n      operationName: 'view';\n      gqlFieldName: 'shopifyFulfillmentLineItemGellyView';\n      namespace: null;\n      imports: [];\n      variables: {\n          query: { type: 'String', required: true },\n          args: { type: 'JSONObject' }\n        };\n      variablesType: Record<string, unknown>;\n      resultType: Promise<unknown>;\n      plan: never;\n    }\n};\n\n/**\n * A manager for the shopifyFulfillmentLineItem model with all the available operations for reading and writing to it.*/\nexport const ShopifyFulfillmentLineItemManager = buildModelManager(\n  modelApiIdentifier,\n  pluralModelApiIdentifier,\n  DefaultShopifyFulfillmentLineItemSelection,\n  [\n    {\n      type: 'findOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultShopifyFulfillmentLineItemSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultShopifyFulfillmentLineItemSelection,\n      namespace: null\n    },\n    {\n      type: 'findMany',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyFulfillmentLineItemSelection,\n      namespace: null\n    },\n    {\n      type: 'findFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyFulfillmentLineItemSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyFulfillmentLineItemSelection,\n      namespace: null\n    },\n    {\n      type: 'findOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'findById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyFulfillmentLineItemSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'maybeFindById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyFulfillmentLineItemSelection,\n      namespace: null\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'createShopifyFulfillmentLineItem',\n      functionName: 'create',\n      errorMessage: 'The action create on model shopifyFulfillmentLineItem does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'create',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyFulfillmentLineItem.create'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkCreateShopifyFulfillmentLineItems',\n      functionName: 'bulkCreate',\n      errorMessage: 'The action create on model shopifyFulfillmentLineItem does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'create',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyFulfillmentLineItem.bulkCreate'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'updateShopifyFulfillmentLineItem',\n      functionName: 'update',\n      errorMessage: 'The action update on model shopifyFulfillmentLineItem does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'update',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyFulfillmentLineItem.update'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkUpdateShopifyFulfillmentLineItems',\n      functionName: 'bulkUpdate',\n      errorMessage: 'The action update on model shopifyFulfillmentLineItem does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'update',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyFulfillmentLineItem.bulkUpdate'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'deleteShopifyFulfillmentLineItem',\n      functionName: 'delete',\n      errorMessage: 'The action delete on model shopifyFulfillmentLineItem does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'delete',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyFulfillmentLineItem.delete'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkDeleteShopifyFulfillmentLineItems',\n      functionName: 'bulkDelete',\n      errorMessage: 'The action delete on model shopifyFulfillmentLineItem does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'delete',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyFulfillmentLineItem.bulkDelete'\n    },\n    {\n      type: 'computedView',\n      operationName: 'view',\n      functionName: 'view',\n      gqlFieldName: 'shopifyFulfillmentLineItemGellyView',\n      namespace: null,\n      variables: {\n        query: { type: 'String', required: true },\n        args: { type: 'JSONObject' }\n      }\n    }\n  ] as const\n) as unknown as {\n  // Gadget generates these model manager classes at runtime dynamically, which means there is no source code for the class. This is done to make the bundle size of the client as small as possible, avoiding a bunch of repeated source code in favour of one small builder function. The TypeScript types above document the exact interface of the constructed class.\n  new(connection: GadgetConnection): ShopifyFulfillmentLineItemManager;\n};", "import {\n  GadgetConnection,\n  GadgetRecord,\n  GadgetRecordImplementation,\n  GadgetRecordList,\n  GadgetNonUniqueDataError,\n  actionRunner,\n  findManyRunner,\n  findOneRunner,\n  findOneByFieldRunner,\n  FieldSelection,\n  LimitToKnownKeys,\n  Selectable\n} from \"@gadgetinc/api-client-core\";\n\nimport {\n  Query,\n  ExplicitNestingRequired,\n\n  IDsList,\n  PromiseOrLiveIterator,\n  ShopifyOrderLineItem,\n  AvailableShopifyOrderLineItemSelection,\n  ShopifyOrderLineItemSort,\n  ShopifyOrderLineItemFilter\n} from \"../types.js\";\n\nimport { buildModelManager } from \"../builder.js\";\nimport { AvailableSelection, AllFieldsSelected, DefaultSelection, Select, DeepFilterNever } from \"../utils.js\";\n\n/**\n* A type that holds only the selected fields (and nested fields) of shopifyOrderLineItem. The present fields in the result type of this are dynamic based on the options to each call that uses it.\n* The selected fields are sometimes given by the `Options` at `Options[\"select\"]`, and if a selection isn't made in the options, we use the default selection from above.\n*/\nexport type SelectedShopifyOrderLineItemOrDefault<Options extends Selectable<AvailableShopifyOrderLineItemSelection>> = DeepFilterNever<\n    Select<\n      ShopifyOrderLineItem,\n      DefaultSelection<\n        AvailableShopifyOrderLineItemSelection,\n        Options,\n        typeof DefaultShopifyOrderLineItemSelection\n      >\n    >\n  >;\n\n/**\n * A type that represents a `GadgetRecord` type for shopifyOrderLineItem.\n * It selects all fields of the model by default. If you want to represent a record type with a subset of fields, you could pass in an object in the `Selection` type parameter.\n *\n * @example\n * ```ts\n * const someFunction = (record: ShopifyOrderLineItemRecord, recordWithName: ShopifyOrderLineItemRecord<{ select: { name: true; } }>) => {\n *   // The type of the `record` variable will include all fields of the model.\n *   const name = record.name;\n *   const otherField = record.otherField;\n *\n *   // The type of the `recordWithName` variable will only include the selected fields.\n *   const name = recordWithName.name;\n *   const otherField = recordWithName.otherField; // Type error: Property 'otherField' does not exist on type 'GadgetRecord<{ name: true; }>'.\n * }\n * ```\n */\nexport type ShopifyOrderLineItemRecord<Selection extends AvailableShopifyOrderLineItemSelection | undefined = typeof DefaultShopifyOrderLineItemSelection> = DeepFilterNever<\n  GadgetRecord<\n    SelectedShopifyOrderLineItemOrDefault<{\n      select: Selection;\n    }>\n  >\n>;\n\nexport const DefaultShopifyOrderLineItemSelection = {\n     __typename: true,\n     id: true,\n     attributedStaffs: true,\n     createdAt: true,\n     currentQuantity: true,\n     discountAllocations: true,\n     fulfillableQuantity: true,\n     fulfillmentService: true,\n     fulfillmentStatus: true,\n     giftCard: true,\n     grams: true,\n     name: true,\n     orderId: true,\n     originLocationId: true,\n     price: true,\n     priceSet: true,\n     productExists: true,\n     productId: true,\n     properties: true,\n     quantity: true,\n     requiresShipping: true,\n     shopId: true,\n     shopifyCreatedAt: true,\n     shopifyUpdatedAt: true,\n     sku: true,\n     taxLines: true,\n     taxable: true,\n     title: true,\n     totalDiscount: true,\n     totalDiscountSet: true,\n     updatedAt: true,\n     variantId: true,\n     variantInventoryManagement: true,\n     variantTitle: true,\n     vendor: true\n   } as const;\nconst modelApiIdentifier = \"shopifyOrderLineItem\" as const;\nconst pluralModelApiIdentifier = \"shopifyOrderLineItems\" as const;\n/** Options that can be passed to the `ShopifyOrderLineItemManager#findOne` method */\n export interface FindOneShopifyOrderLineItemOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyOrderLineItemSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `ShopifyOrderLineItemManager#maybeFindOne` method */\n export interface MaybeFindOneShopifyOrderLineItemOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyOrderLineItemSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `ShopifyOrderLineItemManager#findMany` method */\n export interface FindManyShopifyOrderLineItemsOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyOrderLineItemSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyOrderLineItemSort | ShopifyOrderLineItemSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyOrderLineItemFilter | ShopifyOrderLineItemFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n  first?: number | null;\n  last?: number | null;\n  after?: string | null;\n  before?: string | null;\n};\n/** Options that can be passed to the `ShopifyOrderLineItemManager#findFirst` method */\n export interface FindFirstShopifyOrderLineItemOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyOrderLineItemSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyOrderLineItemSort | ShopifyOrderLineItemSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyOrderLineItemFilter | ShopifyOrderLineItemFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\n/** Options that can be passed to the `ShopifyOrderLineItemManager#maybeFindFirst` method */\n export interface MaybeFindFirstShopifyOrderLineItemOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyOrderLineItemSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyOrderLineItemSort | ShopifyOrderLineItemSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyOrderLineItemFilter | ShopifyOrderLineItemFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\nexport interface CreateShopifyOrderLineItemOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyOrderLineItemSelection;\n};\nexport interface UpdateShopifyOrderLineItemOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyOrderLineItemSelection;\n};\nexport interface DeleteShopifyOrderLineItemOptions {\n\n};\n\n/**\n * A manager for the shopifyOrderLineItem model with all the available operations for reading and writing to it.*/\nexport type ShopifyOrderLineItemManager = {\n  readonly connection: GadgetConnection;\n\n  findOne: {\n      /**\n       * Finds one shopifyOrderLineItem by ID. Returns a `Promise` that resolves to the record if found and rejects the promise if the record isn't found.\n       **/\n      <Options extends FindOneShopifyOrderLineItemOptions>(id: string, options?: LimitToKnownKeys<Options, FindOneShopifyOrderLineItemOptions>): PromiseOrLiveIterator<Options,ShopifyOrderLineItemRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultShopifyOrderLineItemSelection;\n      namespace: null;\n      optionsType: FindOneShopifyOrderLineItemOptions;\n      selectionType: AvailableShopifyOrderLineItemSelection;\n      schemaType: Query[\"shopifyOrderLineItem\"];\n    }\n  maybeFindOne: {\n      /**\n       * Finds one shopifyOrderLineItem by ID. Returns a `Promise` that resolves to the record if found and returns null otherwise.\n       **/\n      <Options extends MaybeFindOneShopifyOrderLineItemOptions>(id: string, options?: LimitToKnownKeys<Options, MaybeFindOneShopifyOrderLineItemOptions>): PromiseOrLiveIterator<Options,ShopifyOrderLineItemRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: MaybeFindOneShopifyOrderLineItemOptions;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultShopifyOrderLineItemSelection;\n      namespace: null;\n      selectionType: AvailableShopifyOrderLineItemSelection;\n      schemaType: Query[\"shopifyOrderLineItem\"];\n    }\n  findMany: {\n      /**\n       * Finds many shopifyOrderLineItem. Returns a `Promise` for a `GadgetRecordList` of objects according to the passed `options`. Optionally filters the returned records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindManyShopifyOrderLineItemsOptions>(options?: LimitToKnownKeys<Options, FindManyShopifyOrderLineItemsOptions>): PromiseOrLiveIterator<Options,GadgetRecordList<ShopifyOrderLineItemRecord<Options[\"select\"]>>>;\n      type: 'findMany';\n      operationName: typeof pluralModelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: FindManyShopifyOrderLineItemsOptions;\n      defaultSelection: typeof DefaultShopifyOrderLineItemSelection;\n      namespace: null;\n      selectionType: AvailableShopifyOrderLineItemSelection;\n      schemaType: Query[\"shopifyOrderLineItem\"];\n    }\n  findFirst: {\n      /**\n       * Finds the first matching shopifyOrderLineItem. Returns a `Promise` that resolves to a record if found and rejects the promise if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindFirstShopifyOrderLineItemOptions>(options?: LimitToKnownKeys<Options, FindFirstShopifyOrderLineItemOptions>): PromiseOrLiveIterator<Options,ShopifyOrderLineItemRecord<Options[\"select\"]>>;\n      type: 'findFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: FindFirstShopifyOrderLineItemOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyOrderLineItemSelection;\n      namespace: null;\n      selectionType: AvailableShopifyOrderLineItemSelection;\n      schemaType: Query[\"shopifyOrderLineItem\"];\n    }\n  maybeFindFirst: {\n      /**\n       * Finds the first matching shopifyOrderLineItem. Returns a `Promise` that resolves to a record if found, or null if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` pagination options.\n       **/\n      <Options extends MaybeFindFirstShopifyOrderLineItemOptions>(options?: LimitToKnownKeys<Options, MaybeFindFirstShopifyOrderLineItemOptions>): PromiseOrLiveIterator<Options,ShopifyOrderLineItemRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: MaybeFindFirstShopifyOrderLineItemOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyOrderLineItemSelection;\n      namespace: null;\n      selectionType: AvailableShopifyOrderLineItemSelection;\n      schemaType: Query[\"shopifyOrderLineItem\"];\n    }\n  findById: {\n      /**\n      * Finds one shopifyOrderLineItem by its id. Returns a Promise that resolves to the record if found and rejects the promise if the record isn't found.\n      **/\n      <Options extends FindOneShopifyOrderLineItemOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneShopifyOrderLineItemOptions>): PromiseOrLiveIterator<Options,ShopifyOrderLineItemRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneShopifyOrderLineItemOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyOrderLineItemSelection;\n      namespace: null;\n      selectionType: AvailableShopifyOrderLineItemSelection;\n      schemaType: Query[\"shopifyOrderLineItem\"];\n    }\n  maybeFindById: {\n      /**\n      * Finds one shopifyOrderLineItem by its id. Returns a Promise that resolves to the record if found and returns null if the record isn't found.\n      **/\n      <Options extends FindOneShopifyOrderLineItemOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneShopifyOrderLineItemOptions>): Promise<ShopifyOrderLineItemRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneShopifyOrderLineItemOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyOrderLineItemSelection;\n      namespace: null;\n      selectionType: AvailableShopifyOrderLineItemSelection;\n      schemaType: Query[\"shopifyOrderLineItem\"];\n    }\n  create: {\n      /**\n       * @deprecated The action create on model shopifyOrderLineItem does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'createShopifyOrderLineItem';\n      errorMessage: string;\n      optionsType: CreateShopifyOrderLineItemOptions;\n      actionApiIdentifier: 'create';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyOrderLineItem.create';\n    }\n  bulkCreate: {\n      /**\n       * @deprecated The action create on model shopifyOrderLineItem does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkCreateShopifyOrderLineItems';\n      errorMessage: string;\n      optionsType: CreateShopifyOrderLineItemOptions;\n      actionApiIdentifier: 'create';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyOrderLineItem.bulkCreate';\n    }\n  update: {\n      /**\n       * @deprecated The action update on model shopifyOrderLineItem does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'updateShopifyOrderLineItem';\n      errorMessage: string;\n      optionsType: UpdateShopifyOrderLineItemOptions;\n      actionApiIdentifier: 'update';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyOrderLineItem.update';\n    }\n  bulkUpdate: {\n      /**\n       * @deprecated The action update on model shopifyOrderLineItem does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkUpdateShopifyOrderLineItems';\n      errorMessage: string;\n      optionsType: UpdateShopifyOrderLineItemOptions;\n      actionApiIdentifier: 'update';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyOrderLineItem.bulkUpdate';\n    }\n  delete: {\n      /**\n       * @deprecated The action delete on model shopifyOrderLineItem does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'deleteShopifyOrderLineItem';\n      errorMessage: string;\n      optionsType: DeleteShopifyOrderLineItemOptions;\n      actionApiIdentifier: 'delete';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyOrderLineItem.delete';\n    }\n  bulkDelete: {\n      /**\n       * @deprecated The action delete on model shopifyOrderLineItem does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkDeleteShopifyOrderLineItems';\n      errorMessage: string;\n      optionsType: DeleteShopifyOrderLineItemOptions;\n      actionApiIdentifier: 'delete';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyOrderLineItem.bulkDelete';\n    }\n  view: {\n      (query: string, variables?: Record<string, unknown>): Promise<unknown>\n      type: 'computedView';\n      operationName: 'view';\n      gqlFieldName: 'shopifyOrderLineItemGellyView';\n      namespace: null;\n      imports: [];\n      variables: {\n          query: { type: 'String', required: true },\n          args: { type: 'JSONObject' }\n        };\n      variablesType: Record<string, unknown>;\n      resultType: Promise<unknown>;\n      plan: never;\n    }\n};\n\n/**\n * A manager for the shopifyOrderLineItem model with all the available operations for reading and writing to it.*/\nexport const ShopifyOrderLineItemManager = buildModelManager(\n  modelApiIdentifier,\n  pluralModelApiIdentifier,\n  DefaultShopifyOrderLineItemSelection,\n  [\n    {\n      type: 'findOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultShopifyOrderLineItemSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultShopifyOrderLineItemSelection,\n      namespace: null\n    },\n    {\n      type: 'findMany',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyOrderLineItemSelection,\n      namespace: null\n    },\n    {\n      type: 'findFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyOrderLineItemSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyOrderLineItemSelection,\n      namespace: null\n    },\n    {\n      type: 'findOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'findById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyOrderLineItemSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'maybeFindById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyOrderLineItemSelection,\n      namespace: null\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'createShopifyOrderLineItem',\n      functionName: 'create',\n      errorMessage: 'The action create on model shopifyOrderLineItem does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'create',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyOrderLineItem.create'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkCreateShopifyOrderLineItems',\n      functionName: 'bulkCreate',\n      errorMessage: 'The action create on model shopifyOrderLineItem does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'create',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyOrderLineItem.bulkCreate'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'updateShopifyOrderLineItem',\n      functionName: 'update',\n      errorMessage: 'The action update on model shopifyOrderLineItem does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'update',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyOrderLineItem.update'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkUpdateShopifyOrderLineItems',\n      functionName: 'bulkUpdate',\n      errorMessage: 'The action update on model shopifyOrderLineItem does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'update',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyOrderLineItem.bulkUpdate'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'deleteShopifyOrderLineItem',\n      functionName: 'delete',\n      errorMessage: 'The action delete on model shopifyOrderLineItem does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'delete',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyOrderLineItem.delete'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkDeleteShopifyOrderLineItems',\n      functionName: 'bulkDelete',\n      errorMessage: 'The action delete on model shopifyOrderLineItem does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'delete',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyOrderLineItem.bulkDelete'\n    },\n    {\n      type: 'computedView',\n      operationName: 'view',\n      functionName: 'view',\n      gqlFieldName: 'shopifyOrderLineItemGellyView',\n      namespace: null,\n      variables: {\n        query: { type: 'String', required: true },\n        args: { type: 'JSONObject' }\n      }\n    }\n  ] as const\n) as unknown as {\n  // Gadget generates these model manager classes at runtime dynamically, which means there is no source code for the class. This is done to make the bundle size of the client as small as possible, avoiding a bunch of repeated source code in favour of one small builder function. The TypeScript types above document the exact interface of the constructed class.\n  new(connection: GadgetConnection): ShopifyOrderLineItemManager;\n};", "import {\n  GadgetConnection,\n  GadgetRecord,\n  GadgetRecordImplementation,\n  GadgetRecordList,\n  GadgetNonUniqueDataError,\n  actionRunner,\n  findManyRunner,\n  findOneRunner,\n  findOneByFieldRunner,\n  FieldSelection,\n  LimitToKnownKeys,\n  Selectable\n} from \"@gadgetinc/api-client-core\";\n\nimport {\n  Query,\n  ExplicitNestingRequired,\n\n  IDsList,\n  PromiseOrLiveIterator,\n  ShopifyOrderTransaction,\n  AvailableShopifyOrderTransactionSelection,\n  ShopifyOrderTransactionSort,\n  ShopifyOrderTransactionFilter\n} from \"../types.js\";\n\nimport { buildModelManager } from \"../builder.js\";\nimport { AvailableSelection, AllFieldsSelected, DefaultSelection, Select, DeepFilterNever } from \"../utils.js\";\n\n/**\n* A type that holds only the selected fields (and nested fields) of shopifyOrderTransaction. The present fields in the result type of this are dynamic based on the options to each call that uses it.\n* The selected fields are sometimes given by the `Options` at `Options[\"select\"]`, and if a selection isn't made in the options, we use the default selection from above.\n*/\nexport type SelectedShopifyOrderTransactionOrDefault<Options extends Selectable<AvailableShopifyOrderTransactionSelection>> = DeepFilterNever<\n    Select<\n      ShopifyOrderTransaction,\n      DefaultSelection<\n        AvailableShopifyOrderTransactionSelection,\n        Options,\n        typeof DefaultShopifyOrderTransactionSelection\n      >\n    >\n  >;\n\n/**\n * A type that represents a `GadgetRecord` type for shopifyOrderTransaction.\n * It selects all fields of the model by default. If you want to represent a record type with a subset of fields, you could pass in an object in the `Selection` type parameter.\n *\n * @example\n * ```ts\n * const someFunction = (record: ShopifyOrderTransactionRecord, recordWithName: ShopifyOrderTransactionRecord<{ select: { name: true; } }>) => {\n *   // The type of the `record` variable will include all fields of the model.\n *   const name = record.name;\n *   const otherField = record.otherField;\n *\n *   // The type of the `recordWithName` variable will only include the selected fields.\n *   const name = recordWithName.name;\n *   const otherField = recordWithName.otherField; // Type error: Property 'otherField' does not exist on type 'GadgetRecord<{ name: true; }>'.\n * }\n * ```\n */\nexport type ShopifyOrderTransactionRecord<Selection extends AvailableShopifyOrderTransactionSelection | undefined = typeof DefaultShopifyOrderTransactionSelection> = DeepFilterNever<\n  GadgetRecord<\n    SelectedShopifyOrderTransactionOrDefault<{\n      select: Selection;\n    }>\n  >\n>;\n\nexport const DefaultShopifyOrderTransactionSelection = {\n     __typename: true,\n     id: true,\n     amount: true,\n     authorization: true,\n     authorizationExpiresAt: true,\n     createdAt: true,\n     currency: true,\n     errorCode: true,\n     extendedAuthorizationAttributes: true,\n     gateway: true,\n     kind: true,\n     locationId: true,\n     message: true,\n     multicapturable: true,\n     orderId: true,\n     parentId: true,\n     paymentDetails: true,\n     paymentId: true,\n     paymentsRefundAttributes: true,\n     processedAt: true,\n     receipt: true,\n     shopId: true,\n     shopifyCreatedAt: true,\n     sourceName: true,\n     status: true,\n     test: true,\n     totalUnsettledSet: true,\n     updatedAt: true\n   } as const;\nconst modelApiIdentifier = \"shopifyOrderTransaction\" as const;\nconst pluralModelApiIdentifier = \"shopifyOrderTransactions\" as const;\n/** Options that can be passed to the `ShopifyOrderTransactionManager#findOne` method */\n export interface FindOneShopifyOrderTransactionOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyOrderTransactionSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `ShopifyOrderTransactionManager#maybeFindOne` method */\n export interface MaybeFindOneShopifyOrderTransactionOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyOrderTransactionSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n};\n/** Options that can be passed to the `ShopifyOrderTransactionManager#findMany` method */\n export interface FindManyShopifyOrderTransactionsOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyOrderTransactionSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyOrderTransactionSort | ShopifyOrderTransactionSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyOrderTransactionFilter | ShopifyOrderTransactionFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n  first?: number | null;\n  last?: number | null;\n  after?: string | null;\n  before?: string | null;\n};\n/** Options that can be passed to the `ShopifyOrderTransactionManager#findFirst` method */\n export interface FindFirstShopifyOrderTransactionOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyOrderTransactionSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyOrderTransactionSort | ShopifyOrderTransactionSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyOrderTransactionFilter | ShopifyOrderTransactionFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\n/** Options that can be passed to the `ShopifyOrderTransactionManager#maybeFindFirst` method */\n export interface MaybeFindFirstShopifyOrderTransactionOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyOrderTransactionSelection;\n  /** Run a realtime query instead of running the query only once. Returns an AsyncIterator of new results when the result changes on the backend. */\n  live?: boolean;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyOrderTransactionSort | ShopifyOrderTransactionSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyOrderTransactionFilter | ShopifyOrderTransactionFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\nexport interface CreateShopifyOrderTransactionOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyOrderTransactionSelection;\n};\nexport interface UpdateShopifyOrderTransactionOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyOrderTransactionSelection;\n};\nexport interface DeleteShopifyOrderTransactionOptions {\n\n};\n\n/**\n * A manager for the shopifyOrderTransaction model with all the available operations for reading and writing to it.*/\nexport type ShopifyOrderTransactionManager = {\n  readonly connection: GadgetConnection;\n\n  findOne: {\n      /**\n       * Finds one shopifyOrderTransaction by ID. Returns a `Promise` that resolves to the record if found and rejects the promise if the record isn't found.\n       **/\n      <Options extends FindOneShopifyOrderTransactionOptions>(id: string, options?: LimitToKnownKeys<Options, FindOneShopifyOrderTransactionOptions>): PromiseOrLiveIterator<Options,ShopifyOrderTransactionRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultShopifyOrderTransactionSelection;\n      namespace: null;\n      optionsType: FindOneShopifyOrderTransactionOptions;\n      selectionType: AvailableShopifyOrderTransactionSelection;\n      schemaType: Query[\"shopifyOrderTransaction\"];\n    }\n  maybeFindOne: {\n      /**\n       * Finds one shopifyOrderTransaction by ID. Returns a `Promise` that resolves to the record if found and returns null otherwise.\n       **/\n      <Options extends MaybeFindOneShopifyOrderTransactionOptions>(id: string, options?: LimitToKnownKeys<Options, MaybeFindOneShopifyOrderTransactionOptions>): PromiseOrLiveIterator<Options,ShopifyOrderTransactionRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof modelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: MaybeFindOneShopifyOrderTransactionOptions;\n      findByVariableName: 'id';\n      defaultSelection: typeof DefaultShopifyOrderTransactionSelection;\n      namespace: null;\n      selectionType: AvailableShopifyOrderTransactionSelection;\n      schemaType: Query[\"shopifyOrderTransaction\"];\n    }\n  findMany: {\n      /**\n       * Finds many shopifyOrderTransaction. Returns a `Promise` for a `GadgetRecordList` of objects according to the passed `options`. Optionally filters the returned records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindManyShopifyOrderTransactionsOptions>(options?: LimitToKnownKeys<Options, FindManyShopifyOrderTransactionsOptions>): PromiseOrLiveIterator<Options,GadgetRecordList<ShopifyOrderTransactionRecord<Options[\"select\"]>>>;\n      type: 'findMany';\n      operationName: typeof pluralModelApiIdentifier;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      optionsType: FindManyShopifyOrderTransactionsOptions;\n      defaultSelection: typeof DefaultShopifyOrderTransactionSelection;\n      namespace: null;\n      selectionType: AvailableShopifyOrderTransactionSelection;\n      schemaType: Query[\"shopifyOrderTransaction\"];\n    }\n  findFirst: {\n      /**\n       * Finds the first matching shopifyOrderTransaction. Returns a `Promise` that resolves to a record if found and rejects the promise if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n       **/\n      <Options extends FindFirstShopifyOrderTransactionOptions>(options?: LimitToKnownKeys<Options, FindFirstShopifyOrderTransactionOptions>): PromiseOrLiveIterator<Options,ShopifyOrderTransactionRecord<Options[\"select\"]>>;\n      type: 'findFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: FindFirstShopifyOrderTransactionOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyOrderTransactionSelection;\n      namespace: null;\n      selectionType: AvailableShopifyOrderTransactionSelection;\n      schemaType: Query[\"shopifyOrderTransaction\"];\n    }\n  maybeFindFirst: {\n      /**\n       * Finds the first matching shopifyOrderTransaction. Returns a `Promise` that resolves to a record if found, or null if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` pagination options.\n       **/\n      <Options extends MaybeFindFirstShopifyOrderTransactionOptions>(options?: LimitToKnownKeys<Options, MaybeFindFirstShopifyOrderTransactionOptions>): PromiseOrLiveIterator<Options,ShopifyOrderTransactionRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindFirst';\n      operationName: typeof pluralModelApiIdentifier;\n      optionsType: MaybeFindFirstShopifyOrderTransactionOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyOrderTransactionSelection;\n      namespace: null;\n      selectionType: AvailableShopifyOrderTransactionSelection;\n      schemaType: Query[\"shopifyOrderTransaction\"];\n    }\n  findById: {\n      /**\n      * Finds one shopifyOrderTransaction by its id. Returns a Promise that resolves to the record if found and rejects the promise if the record isn't found.\n      **/\n      <Options extends FindOneShopifyOrderTransactionOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneShopifyOrderTransactionOptions>): PromiseOrLiveIterator<Options,ShopifyOrderTransactionRecord<Options[\"select\"]>>;\n      type: 'findOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneShopifyOrderTransactionOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyOrderTransactionSelection;\n      namespace: null;\n      selectionType: AvailableShopifyOrderTransactionSelection;\n      schemaType: Query[\"shopifyOrderTransaction\"];\n    }\n  maybeFindById: {\n      /**\n      * Finds one shopifyOrderTransaction by its id. Returns a Promise that resolves to the record if found and returns null if the record isn't found.\n      **/\n      <Options extends FindOneShopifyOrderTransactionOptions>(value: string, options?: LimitToKnownKeys<Options, FindOneShopifyOrderTransactionOptions>): Promise<ShopifyOrderTransactionRecord<Options[\"select\"]> | null>;\n      type: 'maybeFindOne';\n      operationName: typeof pluralModelApiIdentifier;\n      findByField: 'id';\n      findByVariableName: 'id';\n      optionsType: FindOneShopifyOrderTransactionOptions;\n      modelApiIdentifier: typeof modelApiIdentifier;\n      defaultSelection: typeof DefaultShopifyOrderTransactionSelection;\n      namespace: null;\n      selectionType: AvailableShopifyOrderTransactionSelection;\n      schemaType: Query[\"shopifyOrderTransaction\"];\n    }\n  create: {\n      /**\n       * @deprecated The action create on model shopifyOrderTransaction does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'createShopifyOrderTransaction';\n      errorMessage: string;\n      optionsType: CreateShopifyOrderTransactionOptions;\n      actionApiIdentifier: 'create';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyOrderTransaction.create';\n    }\n  bulkCreate: {\n      /**\n       * @deprecated The action create on model shopifyOrderTransaction does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkCreateShopifyOrderTransactions';\n      errorMessage: string;\n      optionsType: CreateShopifyOrderTransactionOptions;\n      actionApiIdentifier: 'create';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyOrderTransaction.bulkCreate';\n    }\n  update: {\n      /**\n       * @deprecated The action update on model shopifyOrderTransaction does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'updateShopifyOrderTransaction';\n      errorMessage: string;\n      optionsType: UpdateShopifyOrderTransactionOptions;\n      actionApiIdentifier: 'update';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyOrderTransaction.update';\n    }\n  bulkUpdate: {\n      /**\n       * @deprecated The action update on model shopifyOrderTransaction does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkUpdateShopifyOrderTransactions';\n      errorMessage: string;\n      optionsType: UpdateShopifyOrderTransactionOptions;\n      actionApiIdentifier: 'update';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyOrderTransaction.bulkUpdate';\n    }\n  delete: {\n      /**\n       * @deprecated The action delete on model shopifyOrderTransaction does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'deleteShopifyOrderTransaction';\n      errorMessage: string;\n      optionsType: DeleteShopifyOrderTransactionOptions;\n      actionApiIdentifier: 'delete';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyOrderTransaction.delete';\n    }\n  bulkDelete: {\n      /**\n       * @deprecated The action delete on model shopifyOrderTransaction does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers\n       */\n      (...args: any[]): never;\n      type: 'stubbedAction';\n      operationName: 'bulkDeleteShopifyOrderTransactions';\n      errorMessage: string;\n      optionsType: DeleteShopifyOrderTransactionOptions;\n      actionApiIdentifier: 'delete';\n      modelApiIdentifier: typeof modelApiIdentifier;\n      schemaType: null;\n      selectionType: Record<string, never>;\n      variables: {};\n      reason: 'MissingApiTrigger';\n      dataPath: 'shopifyOrderTransaction.bulkDelete';\n    }\n  view: {\n      (query: string, variables?: Record<string, unknown>): Promise<unknown>\n      type: 'computedView';\n      operationName: 'view';\n      gqlFieldName: 'shopifyOrderTransactionGellyView';\n      namespace: null;\n      imports: [];\n      variables: {\n          query: { type: 'String', required: true },\n          args: { type: 'JSONObject' }\n        };\n      variablesType: Record<string, unknown>;\n      resultType: Promise<unknown>;\n      plan: never;\n    }\n};\n\n/**\n * A manager for the shopifyOrderTransaction model with all the available operations for reading and writing to it.*/\nexport const ShopifyOrderTransactionManager = buildModelManager(\n  modelApiIdentifier,\n  pluralModelApiIdentifier,\n  DefaultShopifyOrderTransactionSelection,\n  [\n    {\n      type: 'findOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultShopifyOrderTransactionSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: modelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      findByVariableName: 'id',\n      defaultSelection: DefaultShopifyOrderTransactionSelection,\n      namespace: null\n    },\n    {\n      type: 'findMany',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyOrderTransactionSelection,\n      namespace: null\n    },\n    {\n      type: 'findFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyOrderTransactionSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindFirst',\n      operationName: pluralModelApiIdentifier,\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyOrderTransactionSelection,\n      namespace: null\n    },\n    {\n      type: 'findOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'findById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyOrderTransactionSelection,\n      namespace: null\n    },\n    {\n      type: 'maybeFindOne',\n      operationName: pluralModelApiIdentifier,\n      functionName: 'maybeFindById',\n      findByField: 'id',\n      findByVariableName: 'id',\n      modelApiIdentifier: modelApiIdentifier,\n      defaultSelection: DefaultShopifyOrderTransactionSelection,\n      namespace: null\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'createShopifyOrderTransaction',\n      functionName: 'create',\n      errorMessage: 'The action create on model shopifyOrderTransaction does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'create',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyOrderTransaction.create'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkCreateShopifyOrderTransactions',\n      functionName: 'bulkCreate',\n      errorMessage: 'The action create on model shopifyOrderTransaction does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'create',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyOrderTransaction.bulkCreate'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'updateShopifyOrderTransaction',\n      functionName: 'update',\n      errorMessage: 'The action update on model shopifyOrderTransaction does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'update',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyOrderTransaction.update'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkUpdateShopifyOrderTransactions',\n      functionName: 'bulkUpdate',\n      errorMessage: 'The action update on model shopifyOrderTransaction does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'update',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyOrderTransaction.bulkUpdate'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'deleteShopifyOrderTransaction',\n      functionName: 'delete',\n      errorMessage: 'The action delete on model shopifyOrderTransaction does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'delete',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyOrderTransaction.delete'\n    },\n    {\n      type: 'stubbedAction',\n      operationName: 'bulkDeleteShopifyOrderTransactions',\n      functionName: 'bulkDelete',\n      errorMessage: 'The action delete on model shopifyOrderTransaction does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers',\n      actionApiIdentifier: 'delete',\n      modelApiIdentifier: modelApiIdentifier,\n      variables: {},\n      reason: 'MissingApiTrigger',\n      dataPath: 'shopifyOrderTransaction.bulkDelete'\n    },\n    {\n      type: 'computedView',\n      operationName: 'view',\n      functionName: 'view',\n      gqlFieldName: 'shopifyOrderTransactionGellyView',\n      namespace: null,\n      variables: {\n        query: { type: 'String', required: true },\n        args: { type: 'JSONObject' }\n      }\n    }\n  ] as const\n) as unknown as {\n  // Gadget generates these model manager classes at runtime dynamically, which means there is no source code for the class. This is done to make the bundle size of the client as small as possible, avoiding a bunch of repeated source code in favour of one small builder function. The TypeScript types above document the exact interface of the constructed class.\n  new(connection: GadgetConnection): ShopifyOrderTransactionManager;\n};", "// generated with metadata generator for admin-action-block for fv ^1.4.0\n  import type { OperationContext, Exchange } from \"@urql/core\";\n  import { pipe, map } from \"wonka\";\n  import { assert, GadgetConnection, AuthenticationMode, GadgetTransaction, InternalModelManager, ActionFunctionMetadata, GlobalActionFunction, GadgetClientError, enqueueActionRunner, BackgroundActionHandle } from \"@gadgetinc/api-client-core\";\n  import type { ClientOptions as ApiClientOptions, AnyClient, AuthenticationModeOptions, EnqueueBackgroundActionOptions, AnyActionFunction } from '@gadgetinc/api-client-core';\n  import type { DocumentNode } from 'graphql';\n\n  import { buildGlobalAction, buildInlineComputedView } from \"./builder.js\";\n  import { Scalars } from \"./types.js\";\n  import { DefaultSessionSelection, SessionManager } from \"./models/Session.js\";\n  import { CurrentSessionManager } from \"./models/CurrentSession.js\";\n  import { DefaultShopifyGdprRequestSelection, ShopifyGdprRequestManager } from \"./models/ShopifyGdprRequest.js\";\n  import { DefaultShopifySyncSelection, ShopifySyncManager } from \"./models/ShopifySync.js\";\n  import { DefaultSmsTemplatesSelection, SmsTemplatesManager } from \"./models/SmsTemplates.js\";\n  import { DefaultAllowedTagSelection, AllowedTagManager } from \"./models/AllowedTag.js\";\n  import { DefaultShopifyCustomerSelection, ShopifyCustomerManager } from \"./models/ShopifyCustomer.js\";\n  import { DefaultShopifyCustomerAddressSelection, ShopifyCustomerAddressManager } from \"./models/ShopifyCustomerAddress.js\";\n  import { DefaultShopifyOrderSelection, ShopifyOrderManager } from \"./models/ShopifyOrder.js\";\n  import { DefaultShopifyProductSelection, ShopifyProductManager } from \"./models/ShopifyProduct.js\";\n  import { DefaultShopifyFileSelection, ShopifyFileManager } from \"./models/ShopifyFile.js\";\n  import { DefaultShopifyBulkOperationSelection, ShopifyBulkOperationManager } from \"./models/ShopifyBulkOperation.js\";\n  import { DefaultShopifyCustomerMergeableSelection, ShopifyCustomerMergeableManager } from \"./models/ShopifyCustomerMergeable.js\";\n  import { DefaultShopifyProductImageSelection, ShopifyProductImageManager } from \"./models/ShopifyProductImage.js\";\n  import { DefaultShopifyProductMediaSelection, ShopifyProductMediaManager } from \"./models/ShopifyProductMedia.js\";\n  import { DefaultShopifyProductOptionSelection, ShopifyProductOptionManager } from \"./models/ShopifyProductOption.js\";\n  import { DefaultShopifyProductVariantSelection, ShopifyProductVariantManager } from \"./models/ShopifyProductVariant.js\";\n  import { DefaultShopifyProductVariantMediaSelection, ShopifyProductVariantMediaManager } from \"./models/ShopifyProductVariantMedia.js\";\n  import { DefaultLastSKUSelection, LastSKUManager } from \"./models/LastSKU.js\";\n  import { DefaultBrainSessionSelection, BrainSessionManager } from \"./models/BrainSession.js\";\n  import { DefaultBrainCategoriesSelection, BrainCategoriesManager } from \"./models/BrainCategories.js\";\n  import { DefaultChatLogSelection, ChatLogManager } from \"./models/ChatLog.js\";\n  import { DefaultRecommendedProductSelection, RecommendedProductManager } from \"./models/RecommendedProduct.js\";\n  import { DefaultWarehouseSelection, WarehouseManager } from \"./models/Warehouse.js\";\n  import { DefaultShopifyCompanySelection, ShopifyCompanyManager } from \"./models/ShopifyCompany.js\";\n  import { DefaultShopifyCompanyAddressSelection, ShopifyCompanyAddressManager } from \"./models/ShopifyCompanyAddress.js\";\n  import { DefaultShopifyCompanyContactSelection, ShopifyCompanyContactManager } from \"./models/ShopifyCompanyContact.js\";\n  import { DefaultShopifyCompanyContactRoleSelection, ShopifyCompanyContactRoleManager } from \"./models/ShopifyCompanyContactRole.js\";\n  import { DefaultShopifyCompanyContactRoleAssignmentSelection, ShopifyCompanyContactRoleAssignmentManager } from \"./models/ShopifyCompanyContactRoleAssignment.js\";\n  import { DefaultShopifyCompanyLocationSelection, ShopifyCompanyLocationManager } from \"./models/ShopifyCompanyLocation.js\";\n  import { DefaultShopifyShopSelection, ShopifyShopManager } from \"./models/ShopifyShop.js\";\n  import { DefaultShopifyLocationSelection, ShopifyLocationManager } from \"./models/ShopifyLocation.js\";\n  import { DefaultShopifyFulfillmentSelection, ShopifyFulfillmentManager } from \"./models/ShopifyFulfillment.js\";\n  import { DefaultShopifyFulfillmentEventSelection, ShopifyFulfillmentEventManager } from \"./models/ShopifyFulfillmentEvent.js\";\n  import { DefaultShopifyFulfillmentLineItemSelection, ShopifyFulfillmentLineItemManager } from \"./models/ShopifyFulfillmentLineItem.js\";\n  import { DefaultShopifyOrderLineItemSelection, ShopifyOrderLineItemManager } from \"./models/ShopifyOrderLineItem.js\";\n  import { DefaultShopifyOrderTransactionSelection, ShopifyOrderTransactionManager } from \"./models/ShopifyOrderTransaction.js\";\n  export { DefaultSessionSelection, type SessionRecord } from \"./models/Session.js\";\n  export { DefaultShopifyGdprRequestSelection, type ShopifyGdprRequestRecord } from \"./models/ShopifyGdprRequest.js\";\n  export { DefaultShopifySyncSelection, type ShopifySyncRecord } from \"./models/ShopifySync.js\";\n  export { DefaultSmsTemplatesSelection, type SmsTemplatesRecord } from \"./models/SmsTemplates.js\";\n  export { DefaultAllowedTagSelection, type AllowedTagRecord } from \"./models/AllowedTag.js\";\n  export { DefaultShopifyCustomerSelection, type ShopifyCustomerRecord } from \"./models/ShopifyCustomer.js\";\n  export { DefaultShopifyCustomerAddressSelection, type ShopifyCustomerAddressRecord } from \"./models/ShopifyCustomerAddress.js\";\n  export { DefaultShopifyOrderSelection, type ShopifyOrderRecord } from \"./models/ShopifyOrder.js\";\n  export { DefaultShopifyProductSelection, type ShopifyProductRecord } from \"./models/ShopifyProduct.js\";\n  export { DefaultShopifyFileSelection, type ShopifyFileRecord } from \"./models/ShopifyFile.js\";\n  export { DefaultShopifyBulkOperationSelection, type ShopifyBulkOperationRecord } from \"./models/ShopifyBulkOperation.js\";\n  export { DefaultShopifyCustomerMergeableSelection, type ShopifyCustomerMergeableRecord } from \"./models/ShopifyCustomerMergeable.js\";\n  export { DefaultShopifyProductImageSelection, type ShopifyProductImageRecord } from \"./models/ShopifyProductImage.js\";\n  export { DefaultShopifyProductMediaSelection, type ShopifyProductMediaRecord } from \"./models/ShopifyProductMedia.js\";\n  export { DefaultShopifyProductOptionSelection, type ShopifyProductOptionRecord } from \"./models/ShopifyProductOption.js\";\n  export { DefaultShopifyProductVariantSelection, type ShopifyProductVariantRecord } from \"./models/ShopifyProductVariant.js\";\n  export { DefaultShopifyProductVariantMediaSelection, type ShopifyProductVariantMediaRecord } from \"./models/ShopifyProductVariantMedia.js\";\n  export { DefaultLastSKUSelection, type LastSKURecord } from \"./models/LastSKU.js\";\n  export { DefaultBrainSessionSelection, type BrainSessionRecord } from \"./models/BrainSession.js\";\n  export { DefaultBrainCategoriesSelection, type BrainCategoriesRecord } from \"./models/BrainCategories.js\";\n  export { DefaultChatLogSelection, type ChatLogRecord } from \"./models/ChatLog.js\";\n  export { DefaultRecommendedProductSelection, type RecommendedProductRecord } from \"./models/RecommendedProduct.js\";\n  export { DefaultWarehouseSelection, type WarehouseRecord } from \"./models/Warehouse.js\";\n  export { DefaultShopifyCompanySelection, type ShopifyCompanyRecord } from \"./models/ShopifyCompany.js\";\n  export { DefaultShopifyCompanyAddressSelection, type ShopifyCompanyAddressRecord } from \"./models/ShopifyCompanyAddress.js\";\n  export { DefaultShopifyCompanyContactSelection, type ShopifyCompanyContactRecord } from \"./models/ShopifyCompanyContact.js\";\n  export { DefaultShopifyCompanyContactRoleSelection, type ShopifyCompanyContactRoleRecord } from \"./models/ShopifyCompanyContactRole.js\";\n  export { DefaultShopifyCompanyContactRoleAssignmentSelection, type ShopifyCompanyContactRoleAssignmentRecord } from \"./models/ShopifyCompanyContactRoleAssignment.js\";\n  export { DefaultShopifyCompanyLocationSelection, type ShopifyCompanyLocationRecord } from \"./models/ShopifyCompanyLocation.js\";\n  export { DefaultShopifyShopSelection, type ShopifyShopRecord } from \"./models/ShopifyShop.js\";\n  export { DefaultShopifyLocationSelection, type ShopifyLocationRecord } from \"./models/ShopifyLocation.js\";\n  export { DefaultShopifyFulfillmentSelection, type ShopifyFulfillmentRecord } from \"./models/ShopifyFulfillment.js\";\n  export { DefaultShopifyFulfillmentEventSelection, type ShopifyFulfillmentEventRecord } from \"./models/ShopifyFulfillmentEvent.js\";\n  export { DefaultShopifyFulfillmentLineItemSelection, type ShopifyFulfillmentLineItemRecord } from \"./models/ShopifyFulfillmentLineItem.js\";\n  export { DefaultShopifyOrderLineItemSelection, type ShopifyOrderLineItemRecord } from \"./models/ShopifyOrderLineItem.js\";\n  export { DefaultShopifyOrderTransactionSelection, type ShopifyOrderTransactionRecord } from \"./models/ShopifyOrderTransaction.js\";\n\n  type BaseClientOptions = Omit<ApiClientOptions, \"authenticationMode\">;\n  export type ClientOptions = BaseClientOptions &\n    (\n      | {\n          /**\n           * The authentication strategy for connecting to the upstream API.\n           *\n           * Note: you can only declare authentication modes at the top level, or under the `authenticationMode` key.\n           * If you declare them at the top level and under the `authenticationMode` key at the same time, an error will be thrown.\n           **/\n          authenticationMode?: AuthenticationModeOptions;\n        }\n      | ({\n          authenticationMode?: never;\n        } & AuthenticationModeOptions)\n    );\n\n  type AllOptionalVariables<T> = Partial<T> extends T ? object : never;\n  export type InternalModelManagers = {\n     /** The internal API model manager for the session model */\n     session: InternalModelManager;\n     /** The internal API model manager for the shopifyGdprRequest model */\n     shopifyGdprRequest: InternalModelManager;\n     /** The internal API model manager for the shopifySync model */\n     shopifySync: InternalModelManager;\n     /** The internal API model manager for the smsTemplates model */\n     smsTemplates: InternalModelManager;\n     /** The internal API model manager for the allowedTag model */\n     allowedTag: InternalModelManager;\n     /** The internal API model manager for the shopifyCustomer model */\n     shopifyCustomer: InternalModelManager;\n     /** The internal API model manager for the shopifyCustomerAddress model */\n     shopifyCustomerAddress: InternalModelManager;\n     /** The internal API model manager for the shopifyOrder model */\n     shopifyOrder: InternalModelManager;\n     /** The internal API model manager for the shopifyProduct model */\n     shopifyProduct: InternalModelManager;\n     /** The internal API model manager for the shopifyFile model */\n     shopifyFile: InternalModelManager;\n     /** The internal API model manager for the shopifyBulkOperation model */\n     shopifyBulkOperation: InternalModelManager;\n     /** The internal API model manager for the shopifyCustomerMergeable model */\n     shopifyCustomerMergeable: InternalModelManager;\n     /** The internal API model manager for the shopifyProductImage model */\n     shopifyProductImage: InternalModelManager;\n     /** The internal API model manager for the shopifyProductMedia model */\n     shopifyProductMedia: InternalModelManager;\n     /** The internal API model manager for the shopifyProductOption model */\n     shopifyProductOption: InternalModelManager;\n     /** The internal API model manager for the shopifyProductVariant model */\n     shopifyProductVariant: InternalModelManager;\n     /** The internal API model manager for the shopifyProductVariantMedia model */\n     shopifyProductVariantMedia: InternalModelManager;\n     /** The internal API model manager for the lastSKU model */\n     lastSKU: InternalModelManager;\n     /** The internal API model manager for the brainSession model */\n     brainSession: InternalModelManager;\n     /** The internal API model manager for the brainCategories model */\n     brainCategories: InternalModelManager;\n     /** The internal API model manager for the chatLog model */\n     chatLog: InternalModelManager;\n     /** The internal API model manager for the recommendedProduct model */\n     recommendedProduct: InternalModelManager;\n     /** The internal API model manager for the warehouse model */\n     warehouse: InternalModelManager;\n     /** The internal API model manager for the shopifyCompany model */\n     shopifyCompany: InternalModelManager;\n     /** The internal API model manager for the shopifyCompanyAddress model */\n     shopifyCompanyAddress: InternalModelManager;\n     /** The internal API model manager for the shopifyCompanyContact model */\n     shopifyCompanyContact: InternalModelManager;\n     /** The internal API model manager for the shopifyCompanyContactRole model */\n     shopifyCompanyContactRole: InternalModelManager;\n     /** The internal API model manager for the shopifyCompanyContactRoleAssignment model */\n     shopifyCompanyContactRoleAssignment: InternalModelManager;\n     /** The internal API model manager for the shopifyCompanyLocation model */\n     shopifyCompanyLocation: InternalModelManager;\n     /** The internal API model manager for the shopifyShop model */\n     shopifyShop: InternalModelManager;\n     /** The internal API model manager for the shopifyLocation model */\n     shopifyLocation: InternalModelManager;\n     /** The internal API model manager for the shopifyFulfillment model */\n     shopifyFulfillment: InternalModelManager;\n     /** The internal API model manager for the shopifyFulfillmentEvent model */\n     shopifyFulfillmentEvent: InternalModelManager;\n     /** The internal API model manager for the shopifyFulfillmentLineItem model */\n     shopifyFulfillmentLineItem: InternalModelManager;\n     /** The internal API model manager for the shopifyOrderLineItem model */\n     shopifyOrderLineItem: InternalModelManager;\n     /** The internal API model manager for the shopifyOrderTransaction model */\n     shopifyOrderTransaction: InternalModelManager;\n   };\n\n  const productionEnv = \"production\";\n  const fallbackEnv = \"development\";\n\n  const availableAuthenticationModes = [\n    \"apiKey\",\n    \"browserSession\",\n    \"anonymous\",\n    \"internalAuthToken\",\n    \"internal\",\n    \"custom\",\n  ] as const satisfies readonly (keyof AuthenticationModeOptions)[];\n\n  export const maybeGetAuthenticationModeOptionsFromClientOptions = (options: ClientOptions): AuthenticationModeOptions | undefined => {\n    const topLevelAuthModes: AuthenticationModeOptions = {};\n    for (const key of availableAuthenticationModes) {\n      if (key in options) {\n        topLevelAuthModes[key] = (options as any)[key];\n      }\n    }\n\n    if (\"authenticationMode\" in options && Object.keys(topLevelAuthModes).length > 0) {\n      throw new GadgetClientError(\n        \"Declaring authentication modes at the top level and under the `authenticationMode` key at the same time is not allowed.\"\n      );\n    }\n\n    if (\"authenticationMode\" in options) {\n      return options.authenticationMode;\n    }\n\n    if (Object.keys(topLevelAuthModes).length === 0) {\n      return undefined;\n    }\n\n    return topLevelAuthModes;\n  };\n\n  /**\n   * Return the implicit environment\n   * We specifically use an environment variable  `process.env.GADGET_ENV` or similar so that bundlers like webpack or vite can string replace this value in built source codes with the user's desired value.\n   */\n  const getImplicitEnv = () => {\n    try {\n      return process.env.GADGET_ENV;\n    } catch (error) {\n      return undefined;\n    }\n  }\n\n  /**\n   * Function type for the inline view execution function.\n   * Includes overloads for all known instances collected from call sites.\n   **/\n  type InlineViewFunction = {\n    (query: string, variables?: Record<string, unknown>): Promise<unknown>\n  }\n\n  /**\n   * Root object used for interacting with the admin-action-block API. `AdminActionBlockClient` has `query` and `mutation` functions for executing raw GraphQL queries and mutations, as well as `ModelManager` objects for manipulating models with a JavaScript API. `AdminActionBlockClient` also has a `fetch` function for making raw requests to your backend.\n\nNote: When declaring authentication modes, you can only declare authentication modes at the top level, or under the `authenticationMode` key. If you declare them at the top level and under the `authenticationMode` key at the same time, an error will be thrown.\n   * */\n  export class AdminActionBlockClient implements AnyClient {\n    connection!: GadgetConnection;\n    readonly options: ClientOptions | undefined;\n\n    /** Executes the createWarehouses global action. */\n    createWarehouses = buildGlobalAction(this, {\n                         type: 'globalAction',\n                         functionName: 'createWarehouses',\n                         operationName: 'createWarehouses',\n                         operationReturnType: 'CreateWarehouses',\n                         namespace: null,\n                         variables: {}\n                       } as const) as unknown as {\n                       (): Promise<any>;\n                       type: 'globalAction';\n                       operationName: 'createWarehouses';\n                       operationReturnType: 'CreateWarehouses';\n                       namespace: null;\n                       typesImports: [];\n                       variables: {};\n                       variablesType: Record<string, never>;\n                     };\n    /** Executes the makeComplimantaries global action. */\n    makeComplimantaries = buildGlobalAction(this, {\n                         type: 'globalAction',\n                         functionName: 'makeComplimantaries',\n                         operationName: 'makeComplimantaries',\n                         operationReturnType: 'MakeComplimantaries',\n                         namespace: null,\n                         variables: {}\n                       } as const) as unknown as {\n                       (): Promise<any>;\n                       type: 'globalAction';\n                       operationName: 'makeComplimantaries';\n                       operationReturnType: 'MakeComplimantaries';\n                       namespace: null;\n                       typesImports: [];\n                       variables: {};\n                       variablesType: Record<string, never>;\n                     };\n    /** Executes the makeRelated global action. */\n    makeRelated = buildGlobalAction(this, {\n                         type: 'globalAction',\n                         functionName: 'makeRelated',\n                         operationName: 'makeRelated',\n                         operationReturnType: 'MakeRelated',\n                         namespace: null,\n                         variables: {}\n                       } as const) as unknown as {\n                       (): Promise<any>;\n                       type: 'globalAction';\n                       operationName: 'makeRelated';\n                       operationReturnType: 'MakeRelated';\n                       namespace: null;\n                       typesImports: [];\n                       variables: {};\n                       variablesType: Record<string, never>;\n                     };\n    /** Executes the rozetkaOrderProcessing global action. */\n    rozetkaOrderProcessing = buildGlobalAction(this, {\n                         type: 'globalAction',\n                         functionName: 'rozetkaOrderProcessing',\n                         operationName: 'rozetkaOrderProcessing',\n                         operationReturnType: 'RozetkaOrderProcessing',\n                         namespace: null,\n                         variables: {}\n                       } as const) as unknown as {\n                       (): Promise<any>;\n                       type: 'globalAction';\n                       operationName: 'rozetkaOrderProcessing';\n                       operationReturnType: 'RozetkaOrderProcessing';\n                       namespace: null;\n                       typesImports: [];\n                       variables: {};\n                       variablesType: Record<string, never>;\n                     };\n    /** Executes the scheduledShopifySync global action. */\n    scheduledShopifySync = buildGlobalAction(this, {\n                         type: 'globalAction',\n                         functionName: 'scheduledShopifySync',\n                         operationName: 'scheduledShopifySync',\n                         operationReturnType: 'ScheduledShopifySync',\n                         namespace: null,\n                         variables: {\n                           apiKeys: { required: false, type: '[String!]' },\n                           syncSince: { required: false, type: 'DateTime' },\n                           models: { required: false, type: '[String!]' },\n                           force: { required: false, type: 'Boolean' },\n                           startReason: { required: false, type: 'String' }\n                         }\n                       } as const) as unknown as {\n                       (variables?: {\n                                          apiKeys?: ((Scalars['String'] | null))[];\n                                          syncSince?: Date | Scalars['ISO8601DateString'] | null;\n                                          models?: ((Scalars['String'] | null))[];\n                                          force?: (Scalars['Boolean'] | null) | null;\n                                          startReason?: (Scalars['String'] | null) | null;\n                                        } | null): Promise<any>;\n                       type: 'globalAction';\n                       operationName: 'scheduledShopifySync';\n                       operationReturnType: 'ScheduledShopifySync';\n                       namespace: null;\n                       typesImports: [ 'Scalars' ];\n                       variables: {\n                           apiKeys: { required: false, type: '[String!]' },\n                           syncSince: { required: false, type: 'DateTime' },\n                           models: { required: false, type: '[String!]' },\n                           force: { required: false, type: 'Boolean' },\n                           startReason: { required: false, type: 'String' }\n                         };\n                       variablesType: {\n                               apiKeys?: ((Scalars['String'] | null))[];\n                               syncSince?: Date | Scalars['ISO8601DateString'] | null;\n                               models?: ((Scalars['String'] | null))[];\n                               force?: (Scalars['Boolean'] | null) | null;\n                               startReason?: (Scalars['String'] | null) | null;\n                             }\n                               | null\n                               | undefined;\n                     };\n    /** Executes the sync1 global action. */\n    sync1 = buildGlobalAction(this, {\n                         type: 'globalAction',\n                         functionName: 'sync1',\n                         operationName: 'sync1',\n                         operationReturnType: 'Sync1',\n                         namespace: null,\n                         variables: {}\n                       } as const) as unknown as {\n                       (): Promise<any>;\n                       type: 'globalAction';\n                       operationName: 'sync1';\n                       operationReturnType: 'Sync1';\n                       namespace: null;\n                       typesImports: [];\n                       variables: {};\n                       variablesType: Record<string, never>;\n                     };\n    /** Executes the sync2 global action. */\n    sync2 = buildGlobalAction(this, {\n                         type: 'globalAction',\n                         functionName: 'sync2',\n                         operationName: 'sync2',\n                         operationReturnType: 'Sync2',\n                         namespace: null,\n                         variables: {}\n                       } as const) as unknown as {\n                       (): Promise<any>;\n                       type: 'globalAction';\n                       operationName: 'sync2';\n                       operationReturnType: 'Sync2';\n                       namespace: null;\n                       typesImports: [];\n                       variables: {};\n                       variablesType: Record<string, never>;\n                     };\n    /** Executes the writeToShopify global action. */\n    writeToShopify = buildGlobalAction(this, {\n                         type: 'globalAction',\n                         functionName: 'writeToShopify',\n                         operationName: 'writeToShopify',\n                         operationReturnType: 'WriteToShopify',\n                         namespace: null,\n                         variables: {\n                           shopId: { required: false, type: 'String' },\n                           mutation: { required: false, type: 'String' },\n                           variables: { required: false, type: 'JSONObject' }\n                         }\n                       } as const) as unknown as {\n                       (variables?: {\n                                          shopId?: (Scalars['String'] | null) | null;\n                                          mutation?: (Scalars['String'] | null) | null;\n                                          variables?: (Scalars['JSONObject'] | null) | null;\n                                        } | null): Promise<any>;\n                       type: 'globalAction';\n                       operationName: 'writeToShopify';\n                       operationReturnType: 'WriteToShopify';\n                       namespace: null;\n                       typesImports: [ 'Scalars' ];\n                       variables: {\n                           shopId: { required: false, type: 'String' },\n                           mutation: { required: false, type: 'String' },\n                           variables: { required: false, type: 'JSONObject' }\n                         };\n                       variablesType: {\n                               shopId?: (Scalars['String'] | null) | null;\n                               mutation?: (Scalars['String'] | null) | null;\n                               variables?: (Scalars['JSONObject'] | null) | null;\n                             }\n                               | null\n                               | undefined;\n                     };\n    /** Executes an inline computed view. */\n    view: InlineViewFunction = buildInlineComputedView(this, {\n                               type: 'computedView',\n                               operationName: 'gellyView',\n                               functionName: 'view',\n                               gqlFieldName: 'gellyView',\n                               namespace: null,\n                               variables: {\n                                 query: { type: 'String', required: true },\n                                 args: { type: 'JSONObject' }\n                               }\n                             } as const);\n    session!: SessionManager;\n    currentSession!: CurrentSessionManager;\n    shopifyGdprRequest!: ShopifyGdprRequestManager;\n    shopifySync!: ShopifySyncManager;\n    smsTemplates!: SmsTemplatesManager;\n    allowedTag!: AllowedTagManager;\n    shopifyCustomer!: ShopifyCustomerManager;\n    shopifyCustomerAddress!: ShopifyCustomerAddressManager;\n    shopifyOrder!: ShopifyOrderManager;\n    shopifyProduct!: ShopifyProductManager;\n    shopifyFile!: ShopifyFileManager;\n    shopifyBulkOperation!: ShopifyBulkOperationManager;\n    shopifyCustomerMergeable!: ShopifyCustomerMergeableManager;\n    shopifyProductImage!: ShopifyProductImageManager;\n    shopifyProductMedia!: ShopifyProductMediaManager;\n    shopifyProductOption!: ShopifyProductOptionManager;\n    shopifyProductVariant!: ShopifyProductVariantManager;\n    shopifyProductVariantMedia!: ShopifyProductVariantMediaManager;\n    lastSKU!: LastSKUManager;\n    brainSession!: BrainSessionManager;\n    brainCategories!: BrainCategoriesManager;\n    chatLog!: ChatLogManager;\n    recommendedProduct!: RecommendedProductManager;\n    warehouse!: WarehouseManager;\n    shopifyCompany!: ShopifyCompanyManager;\n    shopifyCompanyAddress!: ShopifyCompanyAddressManager;\n    shopifyCompanyContact!: ShopifyCompanyContactManager;\n    shopifyCompanyContactRole!: ShopifyCompanyContactRoleManager;\n    shopifyCompanyContactRoleAssignment!: ShopifyCompanyContactRoleAssignmentManager;\n    shopifyCompanyLocation!: ShopifyCompanyLocationManager;\n    shopifyShop!: ShopifyShopManager;\n    shopifyLocation!: ShopifyLocationManager;\n    shopifyFulfillment!: ShopifyFulfillmentManager;\n    shopifyFulfillmentEvent!: ShopifyFulfillmentEventManager;\n    shopifyFulfillmentLineItem!: ShopifyFulfillmentLineItemManager;\n    shopifyOrderLineItem!: ShopifyOrderLineItemManager;\n    shopifyOrderTransaction!: ShopifyOrderTransactionManager;\n\n    /**\n    * Namespaced object for accessing models via the Gadget internal APIs, which provide lower level and higher privileged operations directly against the database. Useful for maintenance operations like migrations or correcting broken data, and for implementing the high level actions.\n    *\n    * Returns an object of model API identifiers to `InternalModelManager` objects.\n    *\n    * Example:\n    * `api.internal.user.findOne(...)`\n    */\n    internal!: InternalModelManagers;\n\n    /**\n     * The list of environments with a customized API root endpoint\n     */\n    apiRoots: Record<string, string> = {\"production\":\"https://admin-action-block.gadget.app/\",\"development\":\"https://admin-action-block--development.gadget.app/\"};\n\n\n\n    applicationId: string = \"159040\";\n    environment!: string;\n\n    constructor(options?: ClientOptions | undefined) {\n      let inSSRContext = false;\n      this.options = options;\n\n      try {\n        // @ts-ignore\n        inSSRContext = !!(import.meta.env && import.meta.env.SSR);\n      } catch (error) {\n        // no-op; this try-catch is here to prevent the empty-import-meta esbuild warning:\n      }\n\n      // Inside Vite SSR contexts on Gadget's app sandboxes, we use the global api client set up\n      // by the gadget-server package. This is so that the api client used in i.e. Remix loaders\n      // has all of the same auth and functionality as any other sandbox api client.\n      if (inSSRContext) {\n        const api = (globalThis as any).GadgetGlobals?.api;\n\n        if (api) {\n          return api.actAsSession;\n        }\n      }\n\n      // for multi environment apps (this one), we accept any 'ole string as an environment, and we look in GADGET_ENV to determine the environment if not passed explicitly\n      this.environment = (options?.environment ?? getImplicitEnv() ?? fallbackEnv).toLocaleLowerCase();\n      let apiRoot: string;\n      if (this.apiRoots[this.environment]) {\n        apiRoot = this.apiRoots[this.environment];\n      } else {\n        const envPart = this.environment == productionEnv ? \"\" : `--${this.environment}`;\n        apiRoot = `https://admin-action-block${envPart}.gadget.app`;\n      }\n\n      const exchanges = {...options?.exchanges};\n      if (this.environment !== productionEnv) {\n        const devHarnessExchange: Exchange = ({ forward }) => {\n          return operations$ => {\n            const operationResult$ = forward(operations$)\n\n            return pipe(\n              operationResult$,\n              map(result => {\n                try {\n                  if (typeof window !== \"undefined\" && typeof CustomEvent === \"function\") {\n                    const event = new CustomEvent(\"gadget:devharness:graphqlresult\", { detail: result });\n                    window.dispatchEvent(event);\n                  }\n                } catch (error: any) {\n                  // gracefully handle environments where CustomEvent is misbehaved like jsdom\n                  console.warn(\"[gadget] error dispatching gadget dev harness event\", error)\n                }\n\n                return result;\n              })\n            );\n          };\n        };\n\n        exchanges.beforeAll = [\n          devHarnessExchange,\n          ...(exchanges.beforeAll ?? []),\n        ];\n      }\n\n      const connectionOptions = {\n        endpoint: new URL(\"api/graphql\", apiRoot).toString(),\n        applicationId: this.applicationId,\n        authenticationMode: options?.authenticationMode,\n        ...options,\n        exchanges,\n        environment: this.environment,\n      }\n\n      const authenticationMode = maybeGetAuthenticationModeOptionsFromClientOptions(options ?? {});\n      connectionOptions.authenticationMode = authenticationMode ?? (typeof window == 'undefined' ? { anonymous: true } : { browserSession: true });\n\n      this.connection = new GadgetConnection(connectionOptions);\n\n      if (typeof window != 'undefined' && this.connection.authenticationMode == AuthenticationMode.APIKey && !(options as any)?.authenticationMode?.dangerouslyAllowBrowserApiKey) {\n        throw new Error(\"GGT_BROWSER_API_KEY_USAGE: Using a Gadget API key to authenticate this client object is insecure and will leak your API keys to attackers. Please use a different authentication mode.\")\n      }\n\n      // automatically use shopify authentication if no authentication method has been passed and the shopify app bridge is available\n      if (typeof options?.authenticationMode === \"undefined\" && typeof window !== \"undefined\" && (window as any).shopify?.idToken) {\n        this.connection.setAuthenticationMode({\n          custom: {\n            async processFetch(_input, init) {\n              const headers = new Headers(init.headers);\n              const idToken = await (window as any).shopify.idToken();\n              headers.append(\"Authorization\", \"ShopifySessionToken \"+ idToken);\n              init.headers ??= {};\n              headers.forEach(function (value, key) {\n                (init.headers as Record<string, string>)[key] = value;\n              });\n            },\n            async processTransactionConnectionParams(params) {\n              const idToken = await (window as any).shopify.idToken();\n              params.auth.shopifySessionToken = idToken;\n            },\n          },\n        });\n      }\n\n\n\n\n\n      this.session = new SessionManager(this.connection);\n      this.currentSession = new CurrentSessionManager(this.connection);\n      this.shopifyGdprRequest = new ShopifyGdprRequestManager(this.connection);\n      this.shopifySync = new ShopifySyncManager(this.connection);\n      this.smsTemplates = new SmsTemplatesManager(this.connection);\n      this.allowedTag = new AllowedTagManager(this.connection);\n      this.shopifyCustomer = new ShopifyCustomerManager(this.connection);\n      this.shopifyCustomerAddress = new ShopifyCustomerAddressManager(this.connection);\n      this.shopifyOrder = new ShopifyOrderManager(this.connection);\n      this.shopifyProduct = new ShopifyProductManager(this.connection);\n      this.shopifyFile = new ShopifyFileManager(this.connection);\n      this.shopifyBulkOperation = new ShopifyBulkOperationManager(this.connection);\n      this.shopifyCustomerMergeable = new ShopifyCustomerMergeableManager(this.connection);\n      this.shopifyProductImage = new ShopifyProductImageManager(this.connection);\n      this.shopifyProductMedia = new ShopifyProductMediaManager(this.connection);\n      this.shopifyProductOption = new ShopifyProductOptionManager(this.connection);\n      this.shopifyProductVariant = new ShopifyProductVariantManager(this.connection);\n      this.shopifyProductVariantMedia = new ShopifyProductVariantMediaManager(this.connection);\n      this.lastSKU = new LastSKUManager(this.connection);\n      this.brainSession = new BrainSessionManager(this.connection);\n      this.brainCategories = new BrainCategoriesManager(this.connection);\n      this.chatLog = new ChatLogManager(this.connection);\n      this.recommendedProduct = new RecommendedProductManager(this.connection);\n      this.warehouse = new WarehouseManager(this.connection);\n      this.shopifyCompany = new ShopifyCompanyManager(this.connection);\n      this.shopifyCompanyAddress = new ShopifyCompanyAddressManager(this.connection);\n      this.shopifyCompanyContact = new ShopifyCompanyContactManager(this.connection);\n      this.shopifyCompanyContactRole = new ShopifyCompanyContactRoleManager(this.connection);\n      this.shopifyCompanyContactRoleAssignment = new ShopifyCompanyContactRoleAssignmentManager(this.connection);\n      this.shopifyCompanyLocation = new ShopifyCompanyLocationManager(this.connection);\n      this.shopifyShop = new ShopifyShopManager(this.connection);\n      this.shopifyLocation = new ShopifyLocationManager(this.connection);\n      this.shopifyFulfillment = new ShopifyFulfillmentManager(this.connection);\n      this.shopifyFulfillmentEvent = new ShopifyFulfillmentEventManager(this.connection);\n      this.shopifyFulfillmentLineItem = new ShopifyFulfillmentLineItemManager(this.connection);\n      this.shopifyOrderLineItem = new ShopifyOrderLineItemManager(this.connection);\n      this.shopifyOrderTransaction = new ShopifyOrderTransactionManager(this.connection);\n\n      this.internal = {\n                        session: new InternalModelManager(\"session\", this.connection, {\"pluralApiIdentifier\":\"sessions\",\"hasAmbiguousIdentifiers\":false,\"namespace\":[]}),\n                        shopifyGdprRequest: new InternalModelManager(\"shopifyGdprRequest\", this.connection, {\"pluralApiIdentifier\":\"shopifyGdprRequests\",\"hasAmbiguousIdentifiers\":false,\"namespace\":[]}),\n                        shopifySync: new InternalModelManager(\"shopifySync\", this.connection, {\"pluralApiIdentifier\":\"shopifySyncs\",\"hasAmbiguousIdentifiers\":false,\"namespace\":[]}),\n                        smsTemplates: new InternalModelManager(\"smsTemplates\", this.connection, {\"pluralApiIdentifier\":\"smsTemplatess\",\"hasAmbiguousIdentifiers\":false,\"namespace\":[]}),\n                        allowedTag: new InternalModelManager(\"allowedTag\", this.connection, {\"pluralApiIdentifier\":\"allowedTags\",\"hasAmbiguousIdentifiers\":false,\"namespace\":[]}),\n                        shopifyCustomer: new InternalModelManager(\"shopifyCustomer\", this.connection, {\"pluralApiIdentifier\":\"shopifyCustomers\",\"hasAmbiguousIdentifiers\":false,\"namespace\":[]}),\n                        shopifyCustomerAddress: new InternalModelManager(\"shopifyCustomerAddress\", this.connection, {\"pluralApiIdentifier\":\"shopifyCustomerAddresses\",\"hasAmbiguousIdentifiers\":false,\"namespace\":[]}),\n                        shopifyOrder: new InternalModelManager(\"shopifyOrder\", this.connection, {\"pluralApiIdentifier\":\"shopifyOrders\",\"hasAmbiguousIdentifiers\":false,\"namespace\":[]}),\n                        shopifyProduct: new InternalModelManager(\"shopifyProduct\", this.connection, {\"pluralApiIdentifier\":\"shopifyProducts\",\"hasAmbiguousIdentifiers\":false,\"namespace\":[]}),\n                        shopifyFile: new InternalModelManager(\"shopifyFile\", this.connection, {\"pluralApiIdentifier\":\"shopifyFiles\",\"hasAmbiguousIdentifiers\":false,\"namespace\":[]}),\n                        shopifyBulkOperation: new InternalModelManager(\"shopifyBulkOperation\", this.connection, {\"pluralApiIdentifier\":\"shopifyBulkOperations\",\"hasAmbiguousIdentifiers\":false,\"namespace\":[]}),\n                        shopifyCustomerMergeable: new InternalModelManager(\"shopifyCustomerMergeable\", this.connection, {\"pluralApiIdentifier\":\"shopifyCustomerMergeables\",\"hasAmbiguousIdentifiers\":false,\"namespace\":[]}),\n                        shopifyProductImage: new InternalModelManager(\"shopifyProductImage\", this.connection, {\"pluralApiIdentifier\":\"shopifyProductImages\",\"hasAmbiguousIdentifiers\":false,\"namespace\":[]}),\n                        shopifyProductMedia: new InternalModelManager(\"shopifyProductMedia\", this.connection, {\"pluralApiIdentifier\":\"shopifyProductMedias\",\"hasAmbiguousIdentifiers\":false,\"namespace\":[]}),\n                        shopifyProductOption: new InternalModelManager(\"shopifyProductOption\", this.connection, {\"pluralApiIdentifier\":\"shopifyProductOptions\",\"hasAmbiguousIdentifiers\":false,\"namespace\":[]}),\n                        shopifyProductVariant: new InternalModelManager(\"shopifyProductVariant\", this.connection, {\"pluralApiIdentifier\":\"shopifyProductVariants\",\"hasAmbiguousIdentifiers\":false,\"namespace\":[]}),\n                        shopifyProductVariantMedia: new InternalModelManager(\"shopifyProductVariantMedia\", this.connection, {\"pluralApiIdentifier\":\"shopifyProductVariantMedias\",\"hasAmbiguousIdentifiers\":false,\"namespace\":[]}),\n                        lastSKU: new InternalModelManager(\"lastSKU\", this.connection, {\"pluralApiIdentifier\":\"lastSKUs\",\"hasAmbiguousIdentifiers\":false,\"namespace\":[]}),\n                        brainSession: new InternalModelManager(\"brainSession\", this.connection, {\"pluralApiIdentifier\":\"brainSessions\",\"hasAmbiguousIdentifiers\":false,\"namespace\":[]}),\n                        brainCategories: new InternalModelManager(\"brainCategories\", this.connection, {\"pluralApiIdentifier\":\"brainCategoriess\",\"hasAmbiguousIdentifiers\":false,\"namespace\":[]}),\n                        chatLog: new InternalModelManager(\"chatLog\", this.connection, {\"pluralApiIdentifier\":\"chatLogs\",\"hasAmbiguousIdentifiers\":false,\"namespace\":[]}),\n                        recommendedProduct: new InternalModelManager(\"recommendedProduct\", this.connection, {\"pluralApiIdentifier\":\"recommendedProducts\",\"hasAmbiguousIdentifiers\":false,\"namespace\":[]}),\n                        warehouse: new InternalModelManager(\"warehouse\", this.connection, {\"pluralApiIdentifier\":\"warehouses\",\"hasAmbiguousIdentifiers\":false,\"namespace\":[]}),\n                        shopifyCompany: new InternalModelManager(\"shopifyCompany\", this.connection, {\"pluralApiIdentifier\":\"shopifyCompanies\",\"hasAmbiguousIdentifiers\":true,\"namespace\":[]}),\n                        shopifyCompanyAddress: new InternalModelManager(\"shopifyCompanyAddress\", this.connection, {\"pluralApiIdentifier\":\"shopifyCompanyAddresses\",\"hasAmbiguousIdentifiers\":false,\"namespace\":[]}),\n                        shopifyCompanyContact: new InternalModelManager(\"shopifyCompanyContact\", this.connection, {\"pluralApiIdentifier\":\"shopifyCompanyContacts\",\"hasAmbiguousIdentifiers\":false,\"namespace\":[]}),\n                        shopifyCompanyContactRole: new InternalModelManager(\"shopifyCompanyContactRole\", this.connection, {\"pluralApiIdentifier\":\"shopifyCompanyContactRoles\",\"hasAmbiguousIdentifiers\":false,\"namespace\":[]}),\n                        shopifyCompanyContactRoleAssignment: new InternalModelManager(\"shopifyCompanyContactRoleAssignment\", this.connection, {\"pluralApiIdentifier\":\"shopifyCompanyContactRoleAssignments\",\"hasAmbiguousIdentifiers\":false,\"namespace\":[]}),\n                        shopifyCompanyLocation: new InternalModelManager(\"shopifyCompanyLocation\", this.connection, {\"pluralApiIdentifier\":\"shopifyCompanyLocations\",\"hasAmbiguousIdentifiers\":false,\"namespace\":[]}),\n                        shopifyShop: new InternalModelManager(\"shopifyShop\", this.connection, {\"pluralApiIdentifier\":\"shopifyShops\",\"hasAmbiguousIdentifiers\":false,\"namespace\":[]}),\n                        shopifyLocation: new InternalModelManager(\"shopifyLocation\", this.connection, {\"pluralApiIdentifier\":\"shopifyLocations\",\"hasAmbiguousIdentifiers\":false,\"namespace\":[]}),\n                        shopifyFulfillment: new InternalModelManager(\"shopifyFulfillment\", this.connection, {\"pluralApiIdentifier\":\"shopifyFulfillments\",\"hasAmbiguousIdentifiers\":false,\"namespace\":[]}),\n                        shopifyFulfillmentEvent: new InternalModelManager(\"shopifyFulfillmentEvent\", this.connection, {\"pluralApiIdentifier\":\"shopifyFulfillmentEvents\",\"hasAmbiguousIdentifiers\":false,\"namespace\":[]}),\n                        shopifyFulfillmentLineItem: new InternalModelManager(\"shopifyFulfillmentLineItem\", this.connection, {\"pluralApiIdentifier\":\"shopifyFulfillmentLineItems\",\"hasAmbiguousIdentifiers\":false,\"namespace\":[]}),\n                        shopifyOrderLineItem: new InternalModelManager(\"shopifyOrderLineItem\", this.connection, {\"pluralApiIdentifier\":\"shopifyOrderLineItems\",\"hasAmbiguousIdentifiers\":false,\"namespace\":[]}),\n                        shopifyOrderTransaction: new InternalModelManager(\"shopifyOrderTransaction\", this.connection, {\"pluralApiIdentifier\":\"shopifyOrderTransactions\",\"hasAmbiguousIdentifiers\":false,\"namespace\":[]}),\n                      };\n    }\n\n    /**\n     * Returns a new Client instance that will call the Gadget API as the application's admin user.\n     * This can only be used for API clients using internal authentication.\n     * @returns {AdminActionBlockClient} A new AdminActionBlockClient instance with admin authentication\n     */\n    get actAsAdmin(): AdminActionBlockClient {\n      assert(this.options?.authenticationMode?.internal, `actAsAdmin can only be used for API clients using internal authentication, this client is using ${JSON.stringify(this.options?.authenticationMode)}`)\n\n      return new AdminActionBlockClient({\n      ...this.options,\n      authenticationMode: {\n        internal: {\n          ...this.options!.authenticationMode!.internal!,\n          actAsSession: false,\n        }\n      }\n      });\n    }\n\n    /**\n     * Returns a new AdminActionBlockClient instance that will call the Gadget API as with the permission of the current session.\n     * This can only be used for API clients using internal authentication.\n     * @returns {AdminActionBlockClient} A new AdminActionBlockClient instance with session authentication\n     */\n    get actAsSession(): AdminActionBlockClient {\n      assert(this.options?.authenticationMode?.internal, \"actAsSession can only be used for API clients using internal authentication\")\n\n      return new AdminActionBlockClient({\n        ...this.options,\n        authenticationMode: {\n          internal: {\n            ...this.options!.authenticationMode!.internal!,\n            actAsSession: true,\n          }\n        }\n      })\n    }\n\n    /** Run an arbitrary GraphQL query. */\n    async query<T = any>(graphQL: string | DocumentNode, variables?: Record<string, any>, options?: Partial<OperationContext>): Promise<T> {\n      const {data, error} = await this.connection.currentClient.query(graphQL, variables, options).toPromise();\n      if (error) throw error\n      return data as T;\n    }\n\n    /** Run an arbitrary GraphQL mutation. */\n    async mutate<T = any>(graphQL: string | DocumentNode, variables?: Record<string, any>, options?: Partial<OperationContext>): Promise<T> {\n      const {data, error} = await this.connection.currentClient.mutation(graphQL, variables, options).toPromise();\n      if (error) throw error\n      return data as T;\n    }\n\n    /** Start a transaction against the Gadget backend which will atomically commit (or rollback). */\n    transaction = async <T>(callback: (transaction: GadgetTransaction) => Promise<T>): Promise<T> => {\n      return await this.connection.transaction(callback)\n    }\n\n    /**\n     * `fetch` function that works the same as the built-in `fetch` function, but automatically passes authentication information for this API client.\n     *\n     * @example\n     * await api.fetch(\"https://myapp--development.gadget.app/foo/bar\");\n     *\n     * @example\n     * // fetch a relative URL from the endpoint this API client is configured to fetch from\n     * await api.fetch(\"/foo/bar\");\n     **/\n    async fetch(input: RequestInfo | URL, init: RequestInit = {}): Promise<Response> {\n      return await this.connection.fetch(input, init);\n    }\n\n    /**\n    * Get a new direct upload token for file uploads to directly to cloud storage.\n    * See https://docs.gadget.dev/guides/storing-files#direct-uploads-using-tokens for more information\n    * @return { url: string, token: string } A `url` to upload one file to, and a token for that file to pass back to Gadget as an action input.\n    */\n    getDirectUploadToken = async (): Promise<{url: string, token: string}> => {\n      const result = await this.query(\"query GetDirectUploadToken($nonce: String) { gadgetMeta { directUploadToken(nonce: $nonce) { url, token } } }\", {nonce: Math.random().toString(36).slice(2, 7)}, {\n        requestPolicy: \"network-only\",\n      });\n      return (result as any).gadgetMeta.directUploadToken;\n    }\n\n    /**\n     * Enqueue one action for execution in the backend. The backend will run the action as soon as possible, and return a handle to the action right away that can be used to check its status.\n     *\n     * @param action The action to enqueue\n     * @param input The input variables for the action, in object form. Optional for actions that have only optional params, but required for actions with required params.\n     * @param options Background execution options for the action\n     *\n     * @example\n     * const handle = await api.enqueue(api.widget.update, { id: \"123\", name: \"new name\" });\n     *\n     * @example\n     * const handle = await api.enqueue(api.widget.create, { input: \"value\" }, { retries: 3, priority: \"HIGH\" });\n     *\n     * @example\n     * const handle = await api.enqueue(api.widget.delete, { id: \"123\" });\n     *\n     * @example\n     * const handle = await api.enqueue(api.someGlobalAction, { retries: 3, priority: \"LOW\" });\n     *\n     * @example\n     * const handle = await api.enqueue(api.someGlobalAction, { input: \"value\" });\n     *\n     * @example\n     * const handle = await api.enqueue(api.widget.bulkCreate, [{ name: \"new name b\" }, { name: \"new name b\" }]);\n     **/\n    async enqueue<SchemaT, Action extends AnyActionFunction & AllOptionalVariables<Action['variablesType']>>(action: Action, input?: Action[\"variablesType\"], options?: EnqueueBackgroundActionOptions<Action>): Promise<BackgroundActionHandle<SchemaT, Action>>;\n    /**\n     * Enqueue one action for execution in the backend. The backend will run the action as soon as possible, and return a handle to the action right away that can be used to check its status.\n     *\n     * @param action The action to enqueue\n     * @param input The id for the record to run the action on. This is only one overload of this function, see the other forms for other input types.\n     * @param options Background execution options for the action\n     *\n     * @example\n     * const handle = await api.enqueue(api.widget.update, { id: \"123\", name: \"new name\" });\n     *\n     * @example\n     * const handle = await api.enqueue(api.widget.create, { input: \"value\" }, { retries: 3, priority: \"HIGH\" });\n     *\n     * @example\n     * const handle = await api.enqueue(api.widget.delete, { id: \"123\" });\n     *\n     * @example\n     * const handle = await api.enqueue(api.widget.delete, \"123\");\n     *\n     * @example\n     * const handle = await api.enqueue(api.someGlobalAction, { retries: 3, priority: \"LOW\" });\n     *\n     * @example\n     * const handle = await api.enqueue(api.someGlobalAction, { input: \"value\" });\n     *\n     * @example\n     * const handle = await api.enqueue(api.widget.bulkCreate, [{ name: \"new name b\" }, { name: \"new name b\" }]);\n     **/\n    async enqueue<SchemaT, Action extends AnyActionFunction & {variablesType: {id: string}}>(action: Action, id: string, options?: EnqueueBackgroundActionOptions<Action>): Promise<BackgroundActionHandle<SchemaT, Action>>;\n    /**\n     * Enqueue one action for execution in the backend. The backend will run the action as soon as possible, and return a handle to the action right away that can be used to check its status. This is the variant of enqueue for actions which accept no inputs.\n     *\n     * @param action The action to enqueue.\n     * @param options Background execution options for the action\n     *\n     * @example\n     * const handle = await api.enqueue(api.widget.update, { id: \"123\", name: \"new name\" });\n     *\n     * @example\n     * const handle = await api.enqueue(api.widget.create, { input: \"value\" });\n     *\n     * @example\n     * const handle = await api.enqueue(api.widget.delete, { id: \"123\" });\n     *\n     * @example\n     * const handle = await api.enqueue(api.someGlobalAction);\n     *\n     * @example\n     * const handle = await api.enqueue(api.someGlobalAction, { input: \"value\" });\n     *\n     * @example\n     * const handle = await api.enqueue(api.widget.bulkCreate, [{ name: \"new name b\" }, { name: \"new name b\" }]);\n     **/\n    async enqueue<SchemaT, Action extends ActionFunctionMetadata<any, Record<string, never>, any, any, any, any> | GlobalActionFunction<Record<string, never>>>(action: Action, options?: EnqueueBackgroundActionOptions<Action>): Promise<BackgroundActionHandle<SchemaT, Action>>;\n    /**\n     * Enqueue a set of actions in bulk for execution. The backend will run each action as soon as possible, and return an array of handles to each action right away that can be used to check their statuses.\n     *\n     * @param bulkAction The bulk action to enqueue\n     * @param input The input variables for the action, in array or object form.\n     * @param options Background execution options for the action\n     *\n     * @example\n     * const handle = await api.enqueue(api.widget.bulkCreate, [{ name: \"foo\" }, {name: \"bar\"}], { retries: 3, priority: \"HIGH\" });\n     *\n     * @example\n     * const handle = await api.enqueue(api.widget.bulkDelete, [2, 42]);\n     *\n     * @example\n     * const handle = await api.enqueue(api.widget.addInventory, [{id: 1, amount: 10}, {id: 2, amount: 15}]);\n     *\n    **/\n    async enqueue<SchemaT, Action extends ActionFunctionMetadata<any, any, any, any, any, true>>(action: Action, input: Action[\"variablesType\"], options?: EnqueueBackgroundActionOptions<Action>): Promise<BackgroundActionHandle<SchemaT, Action>[]>;\n    /**\n     * Enqueue one action for execution in the backend. The backend will run the action as soon as possible, and return a handle to the action right away that can be used to check its status.\n     *\n     * @param action The action to enqueue\n     * @param input The input variables for the action, in object form. Optional for actions that have only optional params, but required for actions with required params.\n     * @param options Background execution options for the action\n     *\n     * @example\n     * const handle = await api.enqueue(api.widget.update, { id: \"123\", name: \"new name\" });\n     *\n     * @example\n     * const handle = await api.enqueue(api.widget.create, { input: \"value\" });\n     *\n     * @example\n     * const handle = await api.enqueue(api.widget.delete, { id: \"123\" });\n     *\n     * @example\n     * const handle = await api.enqueue(api.someGlobalAction);\n     *\n     * @example\n     * const handle = await api.enqueue(api.someGlobalAction, { input: \"value\" });\n     **/\n    async enqueue<SchemaT, Action extends AnyActionFunction>(action: Action, input: Action[\"variablesType\"], options?: EnqueueBackgroundActionOptions<Action>): Promise<BackgroundActionHandle<SchemaT, Action>>;\n    async enqueue<SchemaT, Action extends AnyActionFunction>(action: Action, inputOrOptions?: Action[\"variablesType\"] | EnqueueBackgroundActionOptions<Action>, maybeOptions?: EnqueueBackgroundActionOptions<Action>): Promise<BackgroundActionHandle<SchemaT, Action> | BackgroundActionHandle<SchemaT, Action>[]> {\n      assert(action, \".enqueue must be passed an action as the first argument but was passed undefined\");\n    \n      let input: Action[\"variablesType\"] | undefined;\n      let options: EnqueueBackgroundActionOptions<Action> | undefined;\n    \n      // process different overloads to pull out the input and or options\n      if (typeof maybeOptions !== \"undefined\") {\n        input = inputOrOptions;\n        options = maybeOptions;\n      } else if (!action.variables || Object.keys(action.variables).length == 0) {\n        input = {};\n        options = inputOrOptions;\n      } else {\n        if (typeof inputOrOptions == \"string\") {\n          // id input shorthand passes just the id as a string, wrap it into a variables object\n          input = { id: inputOrOptions };\n        } else {\n          input = inputOrOptions;\n        }\n        options = {};\n      }\n    \n      return await enqueueActionRunner(this.connection, action, input, options);\n    }\n    \n    /**\n     * Returns a handle for a given background action id\n     *\n     * @param action The action that was enqueued\n     * @param id The id of the background action\n     *\n     * @example\n     * const handle = api.handle(api.widget.update, \"app-job-12346\");\n     *\n     * @example\n     * const handle = api.handle(api.someGlobalAction, \"app-job-56789\");\n     **/\n    handle<SchemaT, Action extends AnyActionFunction>(action: Action, id: string): BackgroundActionHandle<SchemaT, Action> {\n      return new BackgroundActionHandle(this.connection, action, id);\n    }\n\n    toString(): string {\n      return `AdminActionBlockClient<${this.environment}>`;\n    }\n\n    toJSON(): string {\n      return this.toString()\n    }\n  }\n\n  (AdminActionBlockClient.prototype as any)[Symbol.for(\"gadget/modelRelationships\")] = {\"session\":{\"shop\":{\"type\":\"BelongsTo\",\"model\":\"shopifyShop\"}},\"shopifyGdprRequest\":{\"shop\":{\"type\":\"BelongsTo\",\"model\":\"shopifyShop\"}},\"shopifySync\":{\"shop\":{\"type\":\"BelongsTo\",\"model\":\"shopifyShop\"}},\"smsTemplates\":{},\"allowedTag\":{},\"shopifyCustomer\":{\"addresses\":{\"type\":\"HasMany\",\"model\":\"shopifyCustomerAddress\"},\"defaultAddress\":{\"type\":\"BelongsTo\",\"model\":\"shopifyCustomerAddress\"},\"shop\":{\"type\":\"BelongsTo\",\"model\":\"shopifyShop\"},\"orders\":{\"type\":\"HasMany\",\"model\":\"shopifyOrder\"},\"lastOrder\":{\"type\":\"BelongsTo\",\"model\":\"shopifyOrder\"},\"companyContacts\":{\"type\":\"HasMany\",\"model\":\"shopifyCompanyContact\"},\"mergeable\":{\"type\":\"HasOne\",\"model\":\"shopifyCustomerMergeable\"}},\"shopifyCustomerAddress\":{\"shopifyCustomer\":{\"type\":\"BelongsTo\",\"model\":\"shopifyCustomer\"},\"shop\":{\"type\":\"BelongsTo\",\"model\":\"shopifyShop\"}},\"shopifyOrder\":{\"customer\":{\"type\":\"BelongsTo\",\"model\":\"shopifyCustomer\"},\"shop\":{\"type\":\"BelongsTo\",\"model\":\"shopifyShop\"},\"purchasingCompany\":{\"type\":\"BelongsTo\",\"model\":\"shopifyCompany\"},\"purchasingCompanyContact\":{\"type\":\"BelongsTo\",\"model\":\"shopifyCompanyContact\"},\"purchasingCompanyLocation\":{\"type\":\"BelongsTo\",\"model\":\"shopifyCompanyLocation\"},\"location\":{\"type\":\"BelongsTo\",\"model\":\"shopifyLocation\"},\"retailLocation\":{\"type\":\"BelongsTo\",\"model\":\"shopifyLocation\"},\"fulfillments\":{\"type\":\"HasMany\",\"model\":\"shopifyFulfillment\"},\"lineItems\":{\"type\":\"HasMany\",\"model\":\"shopifyOrderLineItem\"},\"fulfillmentEvents\":{\"type\":\"HasMany\",\"model\":\"shopifyFulfillmentEvent\"},\"transactions\":{\"type\":\"HasMany\",\"model\":\"shopifyOrderTransaction\"}},\"shopifyProduct\":{\"shop\":{\"type\":\"BelongsTo\",\"model\":\"shopifyShop\"},\"images\":{\"type\":\"HasMany\",\"model\":\"shopifyProductImage\"},\"options\":{\"type\":\"HasMany\",\"model\":\"shopifyProductOption\"},\"variants\":{\"type\":\"HasMany\",\"model\":\"shopifyProductVariant\"},\"shopifyProductMedias\":{\"type\":\"HasMany\",\"model\":\"shopifyProductMedia\"},\"media\":{\"type\":\"HasManyThrough\",\"model\":\"shopifyFile\",\"through\":\"shopifyProductMedia\"},\"recommendedProducts\":{\"type\":\"HasMany\",\"model\":\"recommendedProduct\"},\"chatRecommendations\":{\"type\":\"HasManyThrough\",\"model\":\"chatLog\",\"through\":\"recommendedProduct\"},\"featuredMedia\":{\"type\":\"HasOne\",\"model\":\"shopifyProductMedia\"},\"orderLineItems\":{\"type\":\"HasMany\",\"model\":\"shopifyOrderLineItem\"}},\"shopifyFile\":{\"shop\":{\"type\":\"BelongsTo\",\"model\":\"shopifyShop\"},\"shopifyProductMedias\":{\"type\":\"HasMany\",\"model\":\"shopifyProductMedia\"},\"product\":{\"type\":\"HasManyThrough\",\"model\":\"shopifyProduct\",\"through\":\"shopifyProductMedia\"},\"shopifyProductVariantMedias\":{\"type\":\"HasMany\",\"model\":\"shopifyProductVariantMedia\"},\"productVariant\":{\"type\":\"HasManyThrough\",\"model\":\"shopifyProductVariant\",\"through\":\"shopifyProductVariantMedia\"}},\"shopifyBulkOperation\":{\"shop\":{\"type\":\"BelongsTo\",\"model\":\"shopifyShop\"}},\"shopifyCustomerMergeable\":{\"shopifyCustomer\":{\"type\":\"BelongsTo\",\"model\":\"shopifyCustomer\"},\"shop\":{\"type\":\"BelongsTo\",\"model\":\"shopifyShop\"}},\"shopifyProductImage\":{\"variants\":{\"type\":\"HasMany\",\"model\":\"shopifyProductVariant\"},\"product\":{\"type\":\"BelongsTo\",\"model\":\"shopifyProduct\"},\"shop\":{\"type\":\"BelongsTo\",\"model\":\"shopifyShop\"}},\"shopifyProductMedia\":{\"featuredMediaForProduct\":{\"type\":\"BelongsTo\",\"model\":\"shopifyProduct\"},\"file\":{\"type\":\"BelongsTo\",\"model\":\"shopifyFile\"},\"product\":{\"type\":\"BelongsTo\",\"model\":\"shopifyProduct\"},\"shop\":{\"type\":\"BelongsTo\",\"model\":\"shopifyShop\"}},\"shopifyProductOption\":{\"product\":{\"type\":\"BelongsTo\",\"model\":\"shopifyProduct\"},\"shop\":{\"type\":\"BelongsTo\",\"model\":\"shopifyShop\"}},\"shopifyProductVariant\":{\"shopifyProductVariantMedias\":{\"type\":\"HasMany\",\"model\":\"shopifyProductVariantMedia\"},\"media\":{\"type\":\"HasManyThrough\",\"model\":\"shopifyFile\",\"through\":\"shopifyProductVariantMedia\"},\"product\":{\"type\":\"BelongsTo\",\"model\":\"shopifyProduct\"},\"productImage\":{\"type\":\"BelongsTo\",\"model\":\"shopifyProductImage\"},\"shop\":{\"type\":\"BelongsTo\",\"model\":\"shopifyShop\"},\"orderLineItems\":{\"type\":\"HasMany\",\"model\":\"shopifyOrderLineItem\"}},\"shopifyProductVariantMedia\":{\"file\":{\"type\":\"BelongsTo\",\"model\":\"shopifyFile\"},\"productVariant\":{\"type\":\"BelongsTo\",\"model\":\"shopifyProductVariant\"},\"shop\":{\"type\":\"BelongsTo\",\"model\":\"shopifyShop\"}},\"lastSKU\":{},\"brainSession\":{},\"brainCategories\":{},\"chatLog\":{\"recommendedProducts\":{\"type\":\"HasManyThrough\",\"model\":\"shopifyProduct\",\"through\":\"recommendedProduct\"}},\"recommendedProduct\":{\"product\":{\"type\":\"BelongsTo\",\"model\":\"shopifyProduct\"},\"chatLog\":{\"type\":\"BelongsTo\",\"model\":\"chatLog\"}},\"warehouse\":{},\"shopifyCompany\":{\"defaultRole\":{\"type\":\"BelongsTo\",\"model\":\"shopifyCompanyContactRole\"},\"shopifyCompany\":{\"type\":\"BelongsTo\",\"model\":\"shopifyCompanyContact\"},\"orders\":{\"type\":\"HasMany\",\"model\":\"shopifyOrder\"},\"shop\":{\"type\":\"BelongsTo\",\"model\":\"shopifyShop\"},\"contactRoleAssignments\":{\"type\":\"HasMany\",\"model\":\"shopifyCompanyContactRoleAssignment\"}},\"shopifyCompanyAddress\":{\"shop\":{\"type\":\"BelongsTo\",\"model\":\"shopifyShop\"},\"companyBillingLocation\":{\"type\":\"BelongsTo\",\"model\":\"shopifyCompanyLocation\"},\"companyShippingLocation\":{\"type\":\"BelongsTo\",\"model\":\"shopifyCompanyLocation\"}},\"shopifyCompanyContact\":{\"orders\":{\"type\":\"HasMany\",\"model\":\"shopifyOrder\"},\"roleAssignments\":{\"type\":\"HasMany\",\"model\":\"shopifyCompanyContactRoleAssignment\"},\"company\":{\"type\":\"BelongsTo\",\"model\":\"shopifyCompany\"},\"customer\":{\"type\":\"BelongsTo\",\"model\":\"shopifyCustomer\"},\"shop\":{\"type\":\"BelongsTo\",\"model\":\"shopifyShop\"}},\"shopifyCompanyContactRole\":{\"company\":{\"type\":\"BelongsTo\",\"model\":\"shopifyCompany\"},\"shop\":{\"type\":\"BelongsTo\",\"model\":\"shopifyShop\"},\"shopifyCompany\":{\"type\":\"HasOne\",\"model\":\"shopifyCompany\"}},\"shopifyCompanyContactRoleAssignment\":{\"role\":{\"type\":\"BelongsTo\",\"model\":\"shopifyCompanyContactRole\"},\"company\":{\"type\":\"BelongsTo\",\"model\":\"shopifyCompany\"},\"companyContact\":{\"type\":\"BelongsTo\",\"model\":\"shopifyCompanyContact\"},\"companyLocation\":{\"type\":\"BelongsTo\",\"model\":\"shopifyCompanyLocation\"},\"shop\":{\"type\":\"BelongsTo\",\"model\":\"shopifyShop\"}},\"shopifyCompanyLocation\":{\"billingAddress\":{\"type\":\"HasOne\",\"model\":\"shopifyCompanyAddress\"},\"orders\":{\"type\":\"HasMany\",\"model\":\"shopifyOrder\"},\"company\":{\"type\":\"BelongsTo\",\"model\":\"shopifyCompany\"},\"shop\":{\"type\":\"BelongsTo\",\"model\":\"shopifyShop\"}},\"shopifyShop\":{\"productVariants\":{\"type\":\"HasMany\",\"model\":\"shopifyProductVariant\"},\"productMedia\":{\"type\":\"HasMany\",\"model\":\"shopifyProductMedia\"},\"companyContact\":{\"type\":\"HasMany\",\"model\":\"shopifyCompanyContact\"},\"companyContactRole\":{\"type\":\"HasMany\",\"model\":\"shopifyCompanyContactRole\"},\"orders\":{\"type\":\"HasMany\",\"model\":\"shopifyOrder\"},\"customerAddresses\":{\"type\":\"HasMany\",\"model\":\"shopifyCustomerAddress\"},\"customers\":{\"type\":\"HasMany\",\"model\":\"shopifyCustomer\"},\"companyLocation\":{\"type\":\"HasMany\",\"model\":\"shopifyCompanyLocation\"},\"files\":{\"type\":\"HasMany\",\"model\":\"shopifyFile\"},\"companyAddress\":{\"type\":\"HasMany\",\"model\":\"shopifyCompanyAddress\"},\"gdprRequests\":{\"type\":\"HasMany\",\"model\":\"shopifyGdprRequest\"},\"company\":{\"type\":\"HasMany\",\"model\":\"shopifyCompany\"},\"syncs\":{\"type\":\"HasMany\",\"model\":\"shopifySync\"},\"bulkOperations\":{\"type\":\"HasMany\",\"model\":\"shopifyBulkOperation\"},\"companyContactRoleAssignment\":{\"type\":\"HasMany\",\"model\":\"shopifyCompanyContactRoleAssignment\"},\"products\":{\"type\":\"HasMany\",\"model\":\"shopifyProduct\"},\"productVariantMedia\":{\"type\":\"HasMany\",\"model\":\"shopifyProductVariantMedia\"},\"productImages\":{\"type\":\"HasMany\",\"model\":\"shopifyProductImage\"},\"customerMergeables\":{\"type\":\"HasMany\",\"model\":\"shopifyCustomerMergeable\"},\"productOptions\":{\"type\":\"HasMany\",\"model\":\"shopifyProductOption\"},\"locations\":{\"type\":\"HasMany\",\"model\":\"shopifyLocation\"},\"primaryLocation\":{\"type\":\"BelongsTo\",\"model\":\"shopifyLocation\"},\"fulfillmentEvents\":{\"type\":\"HasMany\",\"model\":\"shopifyFulfillmentEvent\"},\"fulfillmentLineItems\":{\"type\":\"HasMany\",\"model\":\"shopifyFulfillmentLineItem\"},\"fulfillments\":{\"type\":\"HasMany\",\"model\":\"shopifyFulfillment\"},\"orderLineItems\":{\"type\":\"HasMany\",\"model\":\"shopifyOrderLineItem\"},\"orderTransactions\":{\"type\":\"HasMany\",\"model\":\"shopifyOrderTransaction\"}},\"shopifyLocation\":{\"retailOrders\":{\"type\":\"HasMany\",\"model\":\"shopifyOrder\"},\"orders\":{\"type\":\"HasMany\",\"model\":\"shopifyOrder\"},\"shop\":{\"type\":\"BelongsTo\",\"model\":\"shopifyShop\"},\"fulfillments\":{\"type\":\"HasMany\",\"model\":\"shopifyFulfillment\"},\"orderLineItems\":{\"type\":\"HasMany\",\"model\":\"shopifyOrderLineItem\"},\"orderTransactions\":{\"type\":\"HasMany\",\"model\":\"shopifyOrderTransaction\"}},\"shopifyFulfillment\":{\"fulfillmentEvents\":{\"type\":\"HasMany\",\"model\":\"shopifyFulfillmentEvent\"},\"fulfillmentLineItems\":{\"type\":\"HasMany\",\"model\":\"shopifyFulfillmentLineItem\"},\"location\":{\"type\":\"BelongsTo\",\"model\":\"shopifyLocation\"},\"order\":{\"type\":\"BelongsTo\",\"model\":\"shopifyOrder\"},\"shop\":{\"type\":\"BelongsTo\",\"model\":\"shopifyShop\"}},\"shopifyFulfillmentEvent\":{\"fulfillment\":{\"type\":\"BelongsTo\",\"model\":\"shopifyFulfillment\"},\"order\":{\"type\":\"BelongsTo\",\"model\":\"shopifyOrder\"},\"shop\":{\"type\":\"BelongsTo\",\"model\":\"shopifyShop\"}},\"shopifyFulfillmentLineItem\":{\"fulfillment\":{\"type\":\"BelongsTo\",\"model\":\"shopifyFulfillment\"},\"orderLineItem\":{\"type\":\"BelongsTo\",\"model\":\"shopifyOrderLineItem\"},\"shop\":{\"type\":\"BelongsTo\",\"model\":\"shopifyShop\"}},\"shopifyOrderLineItem\":{\"fulfillmentLineItems\":{\"type\":\"HasMany\",\"model\":\"shopifyFulfillmentLineItem\"},\"originLocation\":{\"type\":\"BelongsTo\",\"model\":\"shopifyLocation\"},\"order\":{\"type\":\"BelongsTo\",\"model\":\"shopifyOrder\"},\"product\":{\"type\":\"BelongsTo\",\"model\":\"shopifyProduct\"},\"variant\":{\"type\":\"BelongsTo\",\"model\":\"shopifyProductVariant\"},\"shop\":{\"type\":\"BelongsTo\",\"model\":\"shopifyShop\"}},\"shopifyOrderTransaction\":{\"children\":{\"type\":\"HasMany\",\"model\":\"shopifyOrderTransaction\"},\"location\":{\"type\":\"BelongsTo\",\"model\":\"shopifyLocation\"},\"order\":{\"type\":\"BelongsTo\",\"model\":\"shopifyOrder\"},\"parent\":{\"type\":\"BelongsTo\",\"model\":\"shopifyOrderTransaction\"},\"shop\":{\"type\":\"BelongsTo\",\"model\":\"shopifyShop\"}}};\n\n  /** Legacy export under the `Client` name for backwards compatibility. */\n  export const Client: typeof AdminActionBlockClient = AdminActionBlockClient;\n  export type Client = InstanceType<typeof AdminActionBlockClient>;", "import { Client } from '@gadget-client/admin-action-block';\r\n\r\nconst isProduction = process.env.NODE_ENV === 'production';\r\n\r\nexport const gadgetApi = new Client({\r\n  authenticationMode: { browserSession: true },\r\n  environment: isProduction ? 'production' : 'development',\r\n});\r\n", "import { gadgetApi } from './gadgetApi';\r\n\r\ntype Templates = {\r\n  id: string;\r\n  smsText: string;\r\n  title: string;\r\n}[];\r\n\r\nexport const fetchSmsTemplates = async (): Promise<Templates> => {\r\n  try {\r\n    const result: Templates = await gadgetApi.smsTemplates.findMany();\r\n    return result;\r\n  } catch (err) {\r\n    console.error('Failed to fetch smsTemplates:', JSON.stringify(err));\r\n    throw new Error(`Failed to fetch smsTemplates: ${JSON.stringify(err)}`);\r\n  }\r\n};\r\n"],
  "mappings": "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",
  "names": ["require_react_production_min", "__commonJSMin", "exports", "l", "n", "p", "q", "r", "t", "u", "v", "w", "x", "y", "z", "A", "a", "B", "C", "D", "E", "b", "e", "F", "G", "H", "I", "J", "K", "L", "M", "d", "c", "k", "h", "g", "f", "m", "N", "O", "escape", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "require_react", "__commonJSMin", "exports", "module", "require_scheduler_production_min", "__commonJSMin", "exports", "f", "a", "b", "c", "d", "e", "g", "h", "k", "w", "m", "C", "n", "x", "l", "p", "q", "r", "t", "u", "v", "y", "z", "A", "B", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "require_scheduler", "__commonJSMin", "exports", "module", "require_react_reconciler_production_min", "__commonJSMin", "exports", "module", "$$$hostConfig", "aa", "ba", "ca", "m", "a", "b", "c", "da", "ea", "fa", "ha", "ia", "ja", "ka", "la", "ma", "na", "oa", "pa", "qa", "ra", "sa", "ta", "ua", "va", "wa", "xa", "ya", "d", "e", "f", "g", "h", "Aa", "Ba", "Ca", "Da", "Ea", "Fa", "Ga", "Ha", "Ia", "Ja", "Ka", "La", "Ma", "Na", "Oa", "Pa", "Qa", "Ra", "Sa", "Ta", "Ua", "Va", "Wa", "Xa", "Ya", "Za", "$a", "ab", "bb", "cb", "db", "eb", "fb", "gb", "hb", "ib", "jb", "kb", "lb", "mb", "nb", "ob", "pb", "qb", "rb", "sb", "tb", "ub", "vb", "wb", "xb", "yb", "zb", "Ab", "Bb", "Cb", "Eb", "Fb", "Gb", "Hb", "Ib", "Jb", "Kb", "Lb", "Mb", "Nb", "Ob", "Pb", "Qb", "Rb", "Sb", "Tb", "Ub", "Vb", "Wb", "Xb", "Yb", "Zb", "$b", "ac", "bc", "cc", "dc", "ec", "l", "k", "fc", "gc", "hc", "ic", "q", "v", "jc", "x", "z", "kc", "lc", "A", "mc", "nc", "oc", "pc", "rc", "tc", "sc", "uc", "vc", "wc", "xc", "yc", "zc", "Ac", "Bc", "Cc", "Dc", "Ec", "Fc", "Gc", "Hc", "C", "Ic", "Jc", "Kc", "Lc", "Mc", "D", "Nc", "Oc", "Pc", "Qc", "Rc", "Sc", "Tc", "Uc", "Vc", "Wc", "Xc", "Yc", "Zc", "$c", "ad", "bd", "cd", "dd", "ed", "fd", "gd", "hd", "id", "jd", "kd", "ld", "md", "nd", "od", "pd", "F", "qd", "rd", "sd", "td", "ud", "vd", "wd", "xd", "yd", "zd", "Ad", "Bd", "Cd", "Dd", "Ed", "Fd", "Gd", "Hd", "Id", "Jd", "Kd", "Ld", "Md", "Nd", "Od", "G", "Pd", "Qd", "Rd", "Sd", "Td", "Ud", "Vd", "Wd", "Xd", "Yd", "H", "Zd", "$d", "ae", "n", "t", "p", "B", "w", "Z", "be", "ce", "de", "ee", "he", "I", "fe", "ge", "ie", "je", "ke", "le", "me", "ne", "oe", "pe", "qe", "re", "se", "te", "ue", "r", "u", "E", "y", "za", "ve", "we", "xe", "ye", "ze", "Ae", "Be", "Ce", "De", "Ee", "Fe", "J", "Ge", "He", "Ie", "Je", "Ke", "Le", "K", "L", "M", "Me", "Ne", "Oe", "Pe", "N", "Qe", "Re", "Se", "Te", "Ue", "Ve", "We", "Xe", "Ye", "Ze", "$e", "af", "bf", "cf", "df", "ef", "ff", "gf", "O", "hf", "jf", "kf", "lf", "mf", "nf", "of", "pf", "qf", "rf", "sf", "tf", "uf", "vf", "wf", "xf", "yf", "zf", "Af", "Bf", "Cf", "Df", "Ef", "Ff", "Gf", "Hf", "If", "Jf", "Kf", "Lf", "Mf", "Nf", "Of", "Pf", "Qf", "Rf", "Sf", "P", "Tf", "Uf", "Vf", "Wf", "Xf", "Yf", "Zf", "$f", "ag", "bg", "cg", "dg", "eg", "fg", "gg", "hg", "ig", "jg", "kg", "lg", "mg", "ng", "og", "pg", "qg", "rg", "sg", "tg", "ug", "vg", "wg", "xg", "yg", "zg", "Ag", "Bg", "Q", "Cg", "Dg", "R", "Eg", "Fg", "Gg", "Hg", "S", "Ig", "T", "Jg", "U", "Kg", "Lg", "Mg", "Ng", "Og", "Pg", "Qg", "Rg", "Sg", "Tg", "Ug", "V", "Vg", "Wg", "Xg", "Yg", "Zg", "$g", "ah", "bh", "ch", "dh", "eh", "fh", "gh", "hh", "ih", "jh", "kh", "lh", "mh", "nh", "oh", "ph", "qh", "rh", "sh", "th", "uh", "vh", "W", "X", "Y", "wh", "xh", "yh", "zh", "Ah", "Bh", "Ch", "Dh", "Eh", "Fh", "Gh", "Hh", "Ih", "Jh", "Kh", "Lh", "Mh", "Nh", "Oh", "Ph", "Qh", "Rh", "Sh", "Th", "Uh", "Vh", "Wh", "Xh", "Yh", "Db", "Zh", "qc", "$h", "ai", "bi", "ci", "di", "ei", "fi", "gi", "hi", "ii", "ji", "ki", "li", "mi", "ni", "oi", "require_react_reconciler", "__commonJSMin", "exports", "module", "require_react_jsx_runtime_production_min", "__commonJSMin", "exports", "f", "k", "l", "m", "n", "p", "q", "c", "a", "g", "b", "d", "e", "h", "require_jsx_runtime", "__commonJSMin", "exports", "module", "require_browser_ponyfill", "__commonJSMin", "exports", "module", "__global__", "__globalThis__", "F", "globalThis", "irrelevant", "global", "support", "e", "isDataView", "obj", "viewClasses", "isArrayBufferView", "normalizeName", "name", "normalizeValue", "value", "iteratorFor", "items", "iterator", "Headers", "headers", "header", "oldValue", "callback", "thisArg", "consumed", "body", "fileReaderReady", "reader", "resolve", "reject", "readBlobAsArrayBuffer", "blob", "promise", "readBlobAsText", "readArrayBufferAsText", "buf", "view", "chars", "i", "bufferClone", "Body", "rejected", "isConsumed", "decode", "methods", "normalizeMethod", "method", "upcased", "Request", "input", "options", "reParamSearch", "reQueryString", "form", "bytes", "split", "parseHeaders", "rawHeaders", "preProcessedHeaders", "line", "parts", "key", "Response", "bodyInit", "response", "redirectStatuses", "url", "status", "err", "message", "error", "fetch", "init", "request", "xhr", "abortXhr", "fixUrl", "ctx", "init_lcs", "__esmMin", "init_diff", "__esmMin", "init_lcs", "patch", "params", "context", "process", "_a", "steps", "nested_collectChildrenPatchFilter", "array_collectChildrenPatchFilter", "trivial_patchFilter", "nested_patchFilter", "array_patchFilter", "step", "childrenContext", "child", "length", "index", "name", "index1", "delta", "array", "toRemove", "toInsert", "toModify", "ARRAY_MOVE", "compare", "indexDiff", "removedValue", "toInsertLength", "insertion", "toModifyLength", "modification", "init_patch", "__esmMin", "a", "b", "init_esm", "__esmMin", "init_diff", "init_patch", "swallow", "value", "NOOP", "consumeExecution", "r", "err", "execution", "createIteration", "done", "Done", "Rejected", "stop", "Stopped", "finish", "push", "next", "reject", "MAX_QUEUE_LENGTH", "RepeaterOverflowError", "valueP", "nextP", "resolve", "floating", "unhandled", "onfulfilled", "onrejected", "createStop", "stop1", "stopP", "execute", "Started", "push1", "Initial", "records", "Repeater", "init_repeater", "__esmMin", "message", "executor", "buffer", "result", "createApplyLiveQueryPatch", "init_createApplyLiveQueryPatch", "__esmMin", "init_repeater", "applyPatch", "source", "Repeater", "push", "stop", "__async", "iterator", "_a", "mutableData", "lastRevision", "next", "valueToPublish", "__spreadValues", "withHandlers", "source", "onReturn", "onThrow", "stream", "__asyncGenerator", "__yieldStar", "originalReturn", "args", "originalThrow", "err", "createDeferred", "d", "resolve", "reject", "makePushPullAsyncIterableIterator", "state", "next", "values", "pushValue", "value", "__await", "error", "applyAsyncIterableIteratorToSink", "asyncIterableIterator", "sink", "__async", "iter", "__forAwait", "more", "temp", "_a", "makeAsyncIterableIteratorFromSink", "init_push_pull_async_iterable_iterator", "__esmMin", "make", "dispose", "returnValue", "graphql_live_query_utils_exports", "__export", "applyAsyncIterableIteratorToSink", "applyJSONDiffPatch", "applyLiveQueryJSONDiffPatch", "makeAsyncIterableIteratorFromSink", "init_graphql_live_query_utils", "__esmMin", "init_esm", "init_createApplyLiveQueryPatch", "init_push_pull_async_iterable_iterator", "left", "delta", "patch", "createApplyLiveQueryPatch", "import_react", "isBasicObject", "value", "prototype", "isRemoteFragment", "object", "FUNCTION_CURRENT_IMPLEMENTATION_KEY", "EMPTY_OBJECT", "EMPTY_ARRAY", "createRemoteRoot", "channel", "strict", "components", "currentId", "rootInternals", "remoteRoot", "type", "rest", "initialProps", "initialChildren", "moreChildren", "normalizedInitialProps", "normalizedInitialChildren", "normalizedInternalProps", "key", "makeValueHotSwappable", "serializeProp", "child", "normalizeChild", "id", "internals", "component", "__spreadValues", "remove", "newProps", "updateProps", "children", "append", "appendChild", "removeChild", "replaceChildren", "before", "insertBefore", "makePartOfTree", "makeRemote", "moveNodeToContainer", "content", "update", "newText", "updateText", "text", "fragment", "serializeChild", "connected", "element", "tops", "_tops$get", "allDescendants", "withEach", "recurse", "perform", "remote", "local", "mounted", "IGNORE", "currentProps", "currentExternalProps", "normalizedNewProps", "hotSwapFunctions", "hasRemoteChange", "currentExternalValue", "newExternalValue", "currentValue", "newValue", "value", "hotSwaps", "tryHotSwappingValues", "isRemoteFragment", "removeNodeFromContainer", "mergedExternalProps", "hotSwappable", "seen", "tryHotSwappingArrayValues", "isBasicObject", "tryHotSwappingObjectValues", "seenValue", "result", "nested", "wrappedFunction", "args", "collectNestedHotSwappableValues", "all", "_child$parent", "container", "_currentParent$childr", "nodes", "currentParent", "existingIndex", "newChildren", "currentInternals", "getCurrentInternals", "currentChildren", "_currentParent$childr2", "beforeIndex", "root", "node", "parents", "newTop", "moveFragmentToContainer", "descendant", "props", "prop", "removeFragmentFromContainer", "serializeFragment", "_collectNestedHotSwap", "hasChanged", "normalizedNewValue", "currentObjectValue", "nestedHotSwappables", "newObjectValue", "updatedValue", "elementHotSwaps", "_collectNestedHotSwap2", "newLength", "currentLength", "maxLength", "i", "currentArrayValue", "newArrayValue", "createExtensionRegistrationFunction", "target", "implementation", "_shopify", "extension", "args", "__async", "channel", "components", "api", "root", "createRemoteRoot", "renderResult", "extension", "createExtensionRegistrationFunction", "Badge", "BlockStack", "Button", "InlineStack", "Link", "ProgressIndicator", "Text", "import_react", "import_react_reconciler", "createReconciler", "options", "_options$primary", "reactReconciler", "scheduleMicrotask", "context", "text", "root", "type", "allProps", "_a", "_children", "props", "__objRest", "_oldText", "newText", "_instance", "_type", "oldProps", "newProps", "updateProps", "needsUpdate", "key", "has", "instance", "payload", "remoteRoot", "child", "beforeChild", "parent", "newChild", "callback", "handleErrorInNextTick", "error", "hasOwnProperty", "object", "property", "import_react", "RenderContext", "import_jsx_runtime", "cache", "LEGACY_ROOT", "defaultReconciler", "createReconciler", "render", "element", "root", "callback", "reconciler", "defaultReconciler", "cached", "cache", "_version$split", "value", "LEGACY_ROOT", "container", "renderContext", "RenderContext", "import_react", "import_jsx_runtime", "import_react", "useRender", "render", "RenderContext", "createRemoteReactComponent", "componentType", "fragmentProps", "wrapper", "createComponentWrapper", "Component", "_a", "_b", "externalChildren", "externalProps", "__objRest", "fragments", "root", "reconciler", "useRender", "props", "children", "portals", "key", "element", "currentFragment", "fragment", "isRemoteFragment", "args", "type", "portal", "__spreadProps", "__spreadValues", "import_react", "ExtensionApiContext", "import_jsx_runtime", "reactExtension", "target", "render$1", "extension", "root", "api", "__async", "element", "resolve", "reject", "render", "ExtensionApiContext", "error", "Badge", "createRemoteReactComponent", "BlockStack", "createRemoteReactComponent", "Button", "createRemoteReactComponent", "InlineStack", "createRemoteReactComponent", "Link", "createRemoteReactComponent", "ProgressIndicator", "createRemoteReactComponent", "Text", "createRemoteReactComponent", "import_react", "AdminUIExtensionError", "args", "useApi", "_target", "api", "ExtensionApiContext", "AdminUIExtensionError", "makeGraphQLQuery", "query", "variables", "__async", "res", "getOrderInfo", "orderId", "__async", "query", "data", "makeGraphQLQuery", "tags", "name", "email", "phone", "currentSubtotalPriceSet", "customer", "clientIp", "shippingAddress", "paymentMethod", "novaposhtaRecepientWarehouse", "novaposhtaDeclarationNumber", "novaposhtaDeclarationRef", "lineItems", "zip", "error", "addOrderNote", "_0", "__async", "orderId", "note", "_a", "_b", "_c", "_d", "updatedNote", "makeIPMessage", "mutation", "data", "errors", "makeGraphQLQuery", "errorMessages", "e", "userErrorMessages", "makeIPMessage", "__async", "data", "replacePlaceholders", "template", "data", "result", "key", "placeholder", "SHOPIFY_APP_URL", "validateAndFormatPhoneNumber", "phone", "cleaned", "sendSmsMessage", "receiverNumber", "messageText", "__async", "formattedNumber", "validateAndFormatPhoneNumber", "response", "SHOPIFY_APP_URL", "errorData", "data", "error", "$modelRelationships", "teardownPlaceholder", "e", "start", "push", "asyncIteratorSymbol", "identity", "e", "filter", "r", "t", "a", "e", "map", "push", "mergeMap", "f", "n", "s", "start", "i", "l", "u", "o", "mergeAll", "identity", "merge", "onEnd", "onPush", "onStart", "share", "r", "t", "e", "a", "n", "s", "l", "u", "start", "f", "switchMap", "r", "t", "a", "e", "f", "n", "s", "l", "u", "start", "take", "r", "t", "a", "e", "f", "n", "start", "takeUntil", "r", "t", "a", "e", "f", "n", "start", "takeWhile", "lazy", "e", "fromAsyncIterable", "t", "asyncIteratorSymbol", "i", "a", "f", "n", "start", "__async", "push", "fromIterable", "r", "fromValue", "make", "makeSubject", "share", "teardownPlaceholder", "fromPromise", "e", "make", "teardownPlaceholder", "subscribe", "r", "t", "a", "publish", "e", "subscribe", "t", "toAsyncIterable", "r", "i", "a", "f", "n", "s", "l", "__async", "asyncIteratorSymbol", "toPromise", "r", "t", "e", "a", "pipe", "e", "t", "i", "Kind", "NAME", "DOCUMENT", "OPERATION_DEFINITION", "VARIABLE_DEFINITION", "SELECTION_SET", "FIELD", "ARGUMENT", "FRAGMENT_SPREAD", "INLINE_FRAGMENT", "FRAGMENT_DEFINITION", "VARIABLE", "INT", "FLOAT", "STRING", "BOOLEAN", "NULL", "ENUM", "LIST", "OBJECT", "OBJECT_FIELD", "DIRECTIVE", "NAMED_TYPE", "LIST_TYPE", "NON_NULL_TYPE", "GraphQLError", "Error", "constructor", "message", "nodes", "source", "positions", "path", "originalError", "extensions", "super", "this", "name", "Array", "isArray", "_extensions", "originalExtensions", "toJSON", "__spreadProps", "__spreadValues", "toString", "Symbol", "toStringTag", "input", "idx", "error", "kind", "advance", "pattern", "lastIndex", "test", "slice", "leadingRe", "blockString", "string", "lines", "split", "out", "commonIndent", "firstNonEmptyLine", "lastNonEmptyLine", "length", "i", "replace", "ignored", "char", "charCodeAt", "nameRe", "valueRe", "RegExp", "ValueGroup", "complexStringRe", "value", "constant", "match", "exec", "values", "push", "fields", "Const", "Var", "Int", "floatPart", "Float", "BlockString", "block", "String", "JSON", "parse", "Enum", "arguments_", "args", "_name", "directives", "arguments", "type", "lists", "selectionRe", "SelectionGroup", "selectionSet", "selections", "Spread", "_directives", "typeCondition", "Name", "_alias", "_arguments", "_selectionSet", "alias", "fragmentDefinition", "_condition", "definitionRe", "operationDefinition", "operation", "_variableDefinitions", "variableDefinitions", "vars", "_type", "_defaultValue", "variable", "defaultValue", "_options", "body", "document", "definition", "definitions", "mapJoin", "value", "joiner", "mapper", "out", "index", "length", "printString", "string", "JSON", "stringify", "printBlockString", "replace", "LF", "nodes", "OperationDefinition", "node", "operation", "name", "variableDefinitions", "VariableDefinition", "directives", "Directive", "SelectionSet", "selectionSet", "Variable", "variable", "_print", "type", "defaultValue", "Field", "alias", "arguments", "args", "Argument", "slice", "StringValue", "block", "BooleanValue", "NullValue", "_node", "IntValue", "FloatValue", "EnumValue", "Name", "ListValue", "values", "ObjectValue", "fields", "ObjectField", "Document", "definitions", "selections", "FragmentSpread", "InlineFragment", "typeCondition", "FragmentDefinition", "NamedType", "ListType", "NonNullType", "kind", "print", "rehydrateGraphQlError", "error", "message", "extensions", "name", "GraphQLError", "nodes", "source", "positions", "path", "CombinedError", "Error", "constructor", "input", "normalizedGraphQLErrors", "graphQLErrors", "map", "generateErrorMessage", "networkErr", "graphQlErrs", "err", "networkError", "super", "this", "response", "toString", "phash", "x", "seed", "h", "i", "l", "length", "charCodeAt", "seen", "Set", "cache", "WeakMap", "stringify", "has", "JSON", "toJSON", "Array", "isArray", "out", "value", "FileConstructor", "NoopConstructor", "BlobConstructor", "keys", "Object", "sort", "getPrototypeOf", "prototype", "key", "get", "Math", "random", "slice", "set", "__key", "add", "delete", "extract", "stringifyVariables", "clear", "File", "Blob", "GRAPHQL_STRING_RE", "REPLACE_CHAR_RE", "replaceOutsideStrings", "str", "idx", "replace", "sanitizeDocument", "node", "split", "join", "trim", "prints", "Map", "docs", "stringifyDocument", "printed", "loc", "body", "print", "start", "end", "locationOffset", "line", "column", "hashDocument", "definitions", "operationName", "getOperationName", "keyDocument", "query", "parse", "noLocation", "createRequest", "_query", "_variables", "variables", "printedVars", "kind", "Kind", "OPERATION_DEFINITION", "makeResult", "operation", "result", "response", "Array", "isArray", "errors", "Error", "defaultHasNext", "kind", "data", "error", "CombinedError", "graphQLErrors", "extensions", "__spreadValues", "hasNext", "stale", "deepMerge", "target", "source", "constructor", "Object", "key", "keys", "mergeResultPatch", "prevResult", "nextResult", "pending", "hasExtensions", "payload", "incremental", "withData", "_loop", "patch", "push", "assign", "prop", "part", "path", "res", "find", "pendingRes", "id", "subPath", "i", "l", "length", "items", "startIndex", "makeErrorResult", "networkError", "makeFetchBody", "request", "body", "query", "documentId", "operationName", "getOperationName", "variables", "definitions", "persistedQuery", "miss", "stringifyDocument", "makeFetchURL", "useGETMethod", "context", "preferGetMethod", "url", "urlParts", "splitOutSearchParams", "value", "set", "stringifyVariables", "finalUrl", "join", "start", "indexOf", "slice", "URLSearchParams", "serializeBody", "json", "files", "x", "map", "Map", "FileConstructor", "NoopConstructor", "BlobConstructor", "seen", "clear", "extract", "size", "form", "FormData", "append", "index", "file", "values", "makeFetchOptions", "headers", "accept", "extraOptions", "fetchOptions", "forEach", "toLowerCase", "serializedBody", "__spreadProps", "method", "decoder", "TextDecoder", "boundaryHeaderRe", "eventStreamRe", "toString", "input", "name", "decode", "async", "streamBody", "Symbol", "asyncIterator", "iter", "__forAwait", "more", "temp", "__await", "chunk", "reader", "getReader", "read", "done", "cancel", "split", "chunks", "boundary", "buffer", "boundaryIndex", "fetchOperation", "networkMode", "Promise", "resolve", "contentType", "fetch", "get", "results", "test", "boundaryHeader", "match", "isPreamble", "preambleIndex", "JSON", "parse", "text", "e", "status", "statusText", "makeFetchSource", "abortController", "AbortController", "signal", "onEnd", "abort", "filter", "fromAsyncIterable", "collectTypes", "obj", "types", "Array", "isArray", "item", "key", "add", "formatNode", "node", "definitions", "definition", "newDefinition", "push", "__spreadProps", "__spreadValues", "directives", "length", "_directives", "directive", "name", "value", "slice", "selections", "hasTypename", "kind", "Kind", "OPERATION_DEFINITION", "selectionSet", "selection", "FIELD", "alias", "newSelection", "NAME", "_generated", "formattedDocs", "Map", "formatDocument", "query", "keyDocument", "result", "get", "__key", "set", "Object", "defineProperty", "enumerable", "maskTypename", "data", "isRoot", "map", "d", "acc", "__typename", "withPromise", "_source$", "source$", "sink", "toPromise", "take", "filter", "stale", "hasNext", "then", "onResolve", "onReject", "subscribe", "onResult", "makeOperation", "request", "context", "noop", "shouldSkip", "kind", "mapTypeNames", "operation", "query", "formatDocument", "formattedOperation", "makeOperation", "cacheExchange", "forward", "client", "dispatchDebug", "resultCache", "Map", "operationCache", "isOperationCached", "context", "requestPolicy", "has", "key", "ops$", "cachedOps$", "map", "cachedResult", "get", "result", "makeResult", "data", "__spreadProps", "__spreadValues", "stale", "reexecuteOperation", "filter", "op", "forwardedOps$", "tap", "response", "typenames", "additionalTypenames", "collectTypes", "Set", "concat", "pendingOperations", "i", "length", "typeName", "operations", "set", "values", "add", "clear", "delete", "merge", "subscriptionExchange", "forwardSubscription", "enableAllOperations", "isSubscriptionOperation", "client", "forward", "isSubscriptionOperationFn", "operation", "kind", "ops$", "subscriptionResults$", "mergeMap", "key", "teardown$", "filter", "op", "takeUntil", "observableish", "makeFetchBody", "make", "observer", "isComplete", "sub", "result", "nextResult", "value", "next", "mergeResultPatch", "makeResult", "Promise", "resolve", "then", "subscribe", "error", "Array", "isArray", "errors", "makeErrorResult", "complete", "reexecuteOperation", "makeOperation", "context", "hasNext", "unsubscribe", "forward$", "merge", "fetchExchange", "forward", "dispatchDebug", "ops$", "fetchResults$", "mergeMap", "operation", "body", "makeFetchBody", "url", "makeFetchURL", "fetchOptions", "makeFetchOptions", "source", "takeUntil", "filter", "op", "kind", "key", "makeFetchSource", "context", "fetchSubscriptions", "forward$", "merge", "composeExchanges", "exchanges", "client", "reduceRight", "exchange", "forwarded", "operations$", "share", "event", "mapExchange", "onOperation", "onResult", "onError", "result", "error", "newResult", "fromPromise", "fromValue", "newOperation", "fallbackExchange", "_x", "Client", "opts", "ids", "replays", "Map", "active", "dispatched", "Set", "queue", "baseOpts", "fetch", "preferGetMethod", "requestPolicy", "operations", "makeSubject", "nextOperation", "has", "delete", "add", "next", "isOperationBatchActive", "dispatchOperation", "shift", "makeResultSource", "result$", "res", "_instance", "results$", "maskTypename", "map", "__spreadProps", "__spreadValues", "data", "takeWhile", "hasNext", "switchMap", "value$", "stale", "take", "onEnd", "i", "length", "splice", "makeOperation", "onPush", "set", "onStart", "instance", "this", "Object", "create", "prototype", "assign", "suspense", "reexecuteOperation", "queued", "push", "Promise", "resolve", "then", "createRequestOperation", "request", "requestOperationType", "executeRequestOperation", "withPromise", "lazy", "get", "replay", "executeQuery", "query", "executeSubscription", "executeMutation", "readQuery", "variables", "subscribe", "unsubscribe", "createRequest", "subscription", "mutation", "noop", "composedExchange", "publish", "compileFieldSelection", "fields", "field", "value", "FieldCall", "args", "signatures", "_", "name", "Variable", "_a", "line", "extractVariables", "variables", "nextName", "count", "_field", "compileVariables", "operation", "variable", "subselection", "type", "Call", "Var", "options", "compile", "signature", "directives", "compileWithVariableValues", "acc", "Hydrators", "value", "DataHydrator", "plan", "source", "object", "hydrated", "__spreadValues", "key", "hydrator", "klona", "x", "k", "tmp", "str", "val", "key", "ChangeTracking", "kFields", "kInstantiatedFields", "kPersistedFields", "kFieldKeys", "kTouched", "GadgetRecord_", "data", "_a", "_b", "_c", "_d", "_e", "_f", "klona", "_g", "self", "handler", "obj", "prop", "val", "value", "key", "trackingKey", "current", "previous", "currentDate", "previousDate", "isEqual", "tracking", "diffFields", "apiIdentifier", "changed", "diff", "persistedKeys", "toPrimitiveObject", "__spreadValues", "GadgetRecord", "GadgetInternalError", "GadgetClientError", "GadgetOperationError", "incomingMessage", "code", "GadgetUnexpectedCloseError", "event", "message", "isCloseEvent", "GadgetWebsocketConnectionTimeoutError", "GadgetTooManyRequestsError", "InvalidRecordError", "validationErrors", "modelApiIdentifier", "record", "firstErrors", "extraErrorMessage", "apiIdentifier", "GadgetNonUniqueDataError", "GadgetNotFoundError", "GadgetErrorGroup", "errors", "results", "error", "_a", "assert", "value", "message", "get", "object", "path", "length", "index", "isCloseEvent", "event", "capitalizeIdentifier", "str", "capitalizeFirstCharacter", "camelize", "result", "term", "uppercaseFirstLetter", "a", "_match", "b", "_idx", "_string", "namespacedGraphQLTypeName", "modelApiIdentifier", "givenNamespaces", "segment", "sortTypeName", "namespace", "filterTypeName", "getNonUniqueDataError", "fieldName", "fieldValue", "assertOperationSuccess", "response", "dataPath", "throwOnEmptyData", "CombinedError", "_a", "error", "result", "get", "edges", "dataArray", "GadgetInternalError", "GadgetNotFoundError", "assertNullableOperationSuccess", "gadgetErrorFor", "InvalidRecordError", "GadgetNonUniqueDataError", "GadgetOperationError", "assertMutationSuccess", "operationResponse", "assertResponseSuccess", "firstErrorBlob", "getHydrator", "_b", "DataHydrator", "_d", "_c", "hydrateRecord", "record", "hydrator", "GadgetRecord", "hydrateRecordArray", "records", "hydrateConnection", "connection", "nodes", "edge", "objObjType", "stringObjType", "toPrimitiveObject", "value", "arr", "v", "obj", "key", "parsed", "key", "storageAvailable", "type", "storage", "e", "toString", "getPrototypeOf", "getOwnProperties", "c", "checkEquality", "a", "b", "refs", "aType", "bType", "aElements", "bElements", "element", "objObjType", "stringObjType", "isEqual", "disambiguateActionVariables", "action", "variables", "_a", "newVariables", "shouldExtractId", "_b", "value", "_c", "disambiguateBulkActionVariables", "inputs", "input", "setVariableOptionValues", "variableOptions", "values", "result", "variable", "__spreadProps", "__spreadValues", "namespaceDataPath", "dataPath", "namespace", "hydrationSelection", "modelApiIdentifier", "fullyQualifiedIdentifier", "Call", "namespacify", "fields", "ErrorsSelection", "GadgetRecordList", "_GadgetRecordList", "modelManager", "records", "pagination", "list", "GadgetOperationError", "record", "__async", "GadgetClientError", "_a", "first", "last", "_before", "options", "__objRest", "__spreadProps", "__spreadValues", "_after", "fieldSelectionToQueryCompilerFields", "selection", "includeTypename", "output", "__spreadValues", "directivesForOptions", "options", "findOneOperation", "operation", "id", "defaultSelection", "modelApiIdentifier", "namespace", "variables", "Var", "fields", "Call", "namespacify", "compileWithVariableValues", "hydrationSelection", "findOneByFieldOperation", "fieldName", "fieldValue", "findManyOperation", "__spreadProps", "sortTypeName", "filterTypeName", "variableOptionsToVariables", "name", "actionResultFieldSelection", "modelSelectionField", "isBulkAction", "hasReturnType", "depth", "fieldSelection", "ErrorsSelection", "selectionField", "returnTypeSelection", "actionOperation", "backgroundActionResultOperation", "action", "resultType", "backgroundAction", "operationName", "camelize", "globalActionFieldSelection", "actionResultOperation", "capitalizeIdentifier", "globalActionFieldSelection", "__spreadProps", "__spreadValues", "ErrorsSelection", "globalActionOperation", "operation", "variables", "namespace", "options", "fields", "Call", "variableOptionsToVariables", "namespacify", "compileWithVariableValues", "directivesForOptions", "graphqlizeBackgroundOptions", "obj", "key", "enqueueActionOperation", "isBulk", "Var", "camelize", "mapAsyncIterable", "source", "mapper", "iter", "__async", "done", "value", "_a", "maybeLiveStream", "$result", "options", "toAsyncIterable", "pipe", "filter", "result", "take", "toPromise", "findOneRunner", "modelManager", "operation", "id", "defaultSelection", "modelApiIdentifier", "throwOnEmptyData", "namespace", "plan", "findOneOperation", "$results", "response", "assertSuccess", "assertOperationSuccess", "assertNullableOperationSuccess", "dataPath", "namespaceDataPath", "record", "hydrateRecord", "findOneByFieldRunner", "fieldName", "fieldValue", "findOneByFieldOperation", "connectionObject", "records", "hydrateConnection", "getNonUniqueDataError", "GadgetNotFoundError", "findManyRunner", "findManyOperation", "GadgetRecordList", "actionRunner", "modelSelectionField", "isBulkAction", "variables", "hasReturnType", "actionOperation", "mutationTriple", "get", "results", "processBulkActionResponse", "errors", "error", "gadgetErrorFor", "GadgetErrorGroup", "assertMutationSuccess", "processActionResponse", "returnTypeField", "innerHasReturnType", "returnTypeForResult", "returnTypeForRecord", "hydrateRecordArray", "innerReturnType", "innerReturnTypeForTypename", "globalActionRunner", "connection", "globalActionOperation", "enqueueActionRunner", "_0", "_1", "_2", "action", "normalizedVariableValues", "disambiguateBulkActionVariables", "disambiguateActionVariables", "variableOptions", "setVariableOptionValues", "enqueueActionOperation", "BackgroundActionHandle", "backgroundActionResultRunner", "backgroundActionResultOperation", "subscription", "_b", "backgroundAction", "assertResponseSuccess", "BackgroundActionHandle", "connection", "action", "id", "options", "__async", "backgroundActionResultRunner", "BrowserSessionStorageType", "extendedTypeof", "val", "isObject", "areGraphQLErrors", "obj", "ob", "limitCloseReason", "reason", "whenTooLong", "GRAPHQL_TRANSPORT_WS_PROTOCOL", "CloseCode", "MessageType", "validateMessage", "val", "isObject", "extendedTypeof", "areGraphQLErrors", "parseMessage", "data", "reviver", "validateMessage", "stringifyMessage", "msg", "replacer", "__await", "v", "__asyncGenerator", "thisArg", "_arguments", "generator", "g", "i", "q", "verb", "n", "a", "b", "resume", "step", "e", "settle", "r", "fulfill", "reject", "value", "f", "createClient", "options", "url", "connectionParams", "lazy", "onNonLazyError", "lazyCloseTimeoutMs", "keepAlive", "disablePong", "connectionAckWaitTimeout", "retryAttempts", "retryWait", "retries", "__async", "retryDelay", "resolve", "shouldRetry", "isLikeCloseEvent", "isFatalConnectionProblem", "on", "webSocketImpl", "generateID", "c", "replacer", "reviver", "ws", "isWebSocket", "WebSocketImpl", "emitter", "message", "listeners", "id", "listener", "_a", "event", "l", "args", "errorOrClosed", "cb", "listening", "err", "unlisten", "connecting", "locks", "lazyCloseTimeout", "retrying", "disposed", "connect", "socket", "throwOnClose", "connected", "denied", "GRAPHQL_TRANSPORT_WS_PROTOCOL", "connectionAckTimeout", "queuedPing", "enqueuePing", "stringifyMessage", "MessageType", "errOrEvent", "TerminatedCloseEvent", "payload", "CloseCode", "limitCloseReason", "acknowledged", "data", "parseMessage", "_", "release", "released", "complete", "shouldRetryConnectOrThrow", "errOrCloseEvent", "isFatalInternalCloseCode", "subscribe", "sink", "done", "errored", "releaser", "waitForReleaseOrThrowOnClose", "request", "pending", "deferred", "dispose", "val", "iterator", "isObject", "code", "ws", "browser_default", "TransactionRolledBack", "GadgetTransaction", "client", "subscriptionClient", "__async", "assertOperationSuccess", "InMemoryStorage", "key", "value", "liveQueryExchange", "forward", "executed", "getOperationId", "op", "operations$", "notLive", "pipe", "filter", "isLiveQueryOperationDefinitionNode", "live", "opId", "onPush", "merge", "graphqlDocumentName", "doc", "lastDefinition", "definition", "node", "operationNameExchange", "mapExchange", "operation", "_a", "_b", "addUrlParams", "url", "paramsToAdd", "start", "params", "paramsObj", "key", "value", "urlParamExchange", "mapExchange", "operation", "error", "GadgetGraphQLCloseCode", "DEFAULT_CONN_ATTEMPTS", "DEFAULT_CONN_ACK_TIMEOUT", "DEFAULT_CONN_GLOBAL_TIMEOUT", "RETRYABLE_CLOSE_CODES", "CloseCode", "$transaction", "$gadgetConnection", "sessionStorageKey", "base64", "str", "AuthenticationMode", "objectForGlobals", "GadgetConnection", "options", "optionsOrRun", "maybeRun", "__async", "run", "subscriptionClient", "transaction", "__spreadProps", "__spreadValues", "errorOrCloseEvent", "client", "C", "operationNameExchange", "subscriptionExchange", "request", "input", "sink", "GadgetTransaction", "result", "error", "rollbackError", "TransactionRolledBack", "isCloseEvent", "GadgetUnexpectedCloseError", "_0", "_1", "init", "processMaybeRelativeInput", "_a", "requestHeaders", "response", "headerValue", "sessionToken", "args", "fetch", "_b", "browser_default", "_c", "_d", "_e", "_f", "createClient", "implementation", "desiredMode", "BrowserSessionStorageType", "sessionTokenStore", "storageAvailable", "InMemoryStorage", "requestUrl", "isRelativeUrl", "host", "exchanges", "urlParamExchange", "cacheExchange", "liveQueryExchange", "definition", "isLiveQueryOperationDefinitionNode", "unsubscribe", "loadAndSubscribe", "applyAsyncIterableIteratorToSink", "applyLiveQueryJSONDiffPatch", "makeAsyncIterableIteratorFromSink", "fetchExchange", "overrides", "url", "addUrlParams", "activeSocket", "timedOut", "connectionParams", "authToken", "socket", "payload", "browserSession", "received", "headers", "sessionId", "val", "unsubscribes", "attempts", "globalTimeout", "clearListeners", "fn", "resolve", "reject", "timeout", "wrappedReject", "GadgetWebsocketConnectionTimeoutError", "retryOnClose", "event", "GadgetTooManyRequestsError", "resetListeners", "err", "wrappedResolve", "maybePromise", "endpoint", "getLiveDirectiveNode", "d", "internalFindOneQuery", "apiIdentifier", "id", "namespace", "select", "capitalizedApiIdentifier", "capitalizeIdentifier", "compileWithVariableValues", "__spreadValues", "namespacify", "Call", "Var", "formatInternalSelectVariable", "hydrationSelection", "internalFindListVariables", "options", "sortTypeName", "filterTypeName", "internalFindFirstQuery", "defaultVariables", "__spreadProps", "internalFindManyQuery", "internalInputTypeName", "namespacedGraphQLTypeName", "internalCreateMutation", "record", "ErrorsSelection", "internalBulkCreateMutation", "pluralApiIdentifier", "records", "capitalizedPluralApiIdentifier", "internalUpdateMutation", "internalUpsertMutation", "on", "internalDeleteMutation", "internalDeleteManyMutation", "InternalModelManager", "connection", "camelize", "key", "functionName", "recordData", "GadgetOperationError", "throwOnEmptyData", "__async", "plan", "response", "result", "assertOperationSuccess", "assertNullableOperationSuccess", "hydrateRecord", "hydrateConnection", "GadgetRecordList", "dataPath", "assertMutationSuccess", "_a", "GadgetClientError", "hydrateRecordArray", "assert", "__objRest", "namespaceDataPath", "value", "variableOptionsToVariables", "variables", "name", "options", "Var", "computedViewOperation", "gqlFieldName", "variablesOptions", "namespace", "fields", "Call", "variableOptionsToVariables", "namespacify", "compileWithVariableValues", "compile", "computedViewRunner", "connection", "__async", "query", "variables", "response", "dataPath", "namespaceDataPath", "assertOperationSuccess", "inlineComputedViewOperation", "vars", "Var", "inlineComputedViewRunner", "viewQuery", "buildModelManager", "apiIdentifier", "pluralApiIdentifier", "defaultSelection", "operationGroup", "modelManagerClass", "connection", "operation", "throwOnRecordNotFound", "value", "options", "findOneByFieldRunner", "fieldName", "fieldValue", "findOneByFieldOperation", "id", "response", "findOneRunner", "forEachMaybeLiveResponse", "record", "findOneOperation", "findManyRunner", "findManyOperation", "__spreadProps", "__spreadValues", "list", "_a", "bulkInvokedByIDOnly", "inputs", "__async", "variables", "input", "disambiguateActionParams", "actionRunner", "actionOperation", "hasId", "hasOthers", "key", "args", "actionArgs", "_args", "sendDevHarnessStubbedActionEvent", "isInlineComputedView", "buildInlineModelComputedView", "buildModelComputedView", "buildStubbedComputedView", "buildGlobalAction", "client", "_0", "resultVariables", "name", "variable", "globalActionRunner", "operationName", "namespace", "globalActionOperation", "buildModelComputedView", "operation", "f", "__async", "variables", "resultVariables", "name", "variable", "__spreadValues", "computedViewRunner", "computedViewOperation", "buildInlineComputedView", "client", "query", "inlineComputedViewRunner", "buildInlineModelComputedView", "isInlineComputedView", "disambiguateActionParams", "action", "idValue", "_a", "_b", "key", "newVariables", "idVariable", "value", "actionArgs", "hasId", "hasOthers", "args", "id", "params", "options", "unambiguousParams", "forEachMaybeLiveResponse", "response", "transform", "__asyncGenerator", "iter", "__forAwait", "more", "temp", "error", "__await", "item", "sendDevHarnessStubbedActionEvent", "event", "DefaultSessionSelection", "modelApiIdentifier", "pluralModelApiIdentifier", "SessionManager", "buildModelManager", "DefaultSessionSelection", "modelApiIdentifier", "pluralModelApiIdentifier", "CurrentSessionManager", "buildModelManager", "DefaultShopifyGdprRequestSelection", "modelApiIdentifier", "pluralModelApiIdentifier", "ShopifyGdprRequestManager", "buildModelManager", "DefaultShopifySyncSelection", "modelApiIdentifier", "pluralModelApiIdentifier", "ShopifySyncManager", "buildModelManager", "DefaultSmsTemplatesSelection", "modelApiIdentifier", "pluralModelApiIdentifier", "SmsTemplatesManager", "buildModelManager", "DefaultAllowedTagSelection", "modelApiIdentifier", "pluralModelApiIdentifier", "AllowedTagManager", "buildModelManager", "DefaultShopifyCustomerSelection", "modelApiIdentifier", "pluralModelApiIdentifier", "ShopifyCustomerManager", "buildModelManager", "DefaultShopifyCustomerAddressSelection", "modelApiIdentifier", "pluralModelApiIdentifier", "ShopifyCustomerAddressManager", "buildModelManager", "DefaultShopifyOrderSelection", "modelApiIdentifier", "pluralModelApiIdentifier", "ShopifyOrderManager", "buildModelManager", "DefaultShopifyProductSelection", "modelApiIdentifier", "pluralModelApiIdentifier", "ShopifyProductManager", "buildModelManager", "DefaultShopifyFileSelection", "modelApiIdentifier", "pluralModelApiIdentifier", "ShopifyFileManager", "buildModelManager", "DefaultShopifyBulkOperationSelection", "modelApiIdentifier", "pluralModelApiIdentifier", "ShopifyBulkOperationManager", "buildModelManager", "DefaultShopifyCustomerMergeableSelection", "modelApiIdentifier", "pluralModelApiIdentifier", "ShopifyCustomerMergeableManager", "buildModelManager", "DefaultShopifyProductImageSelection", "modelApiIdentifier", "pluralModelApiIdentifier", "ShopifyProductImageManager", "buildModelManager", "DefaultShopifyProductMediaSelection", "modelApiIdentifier", "pluralModelApiIdentifier", "ShopifyProductMediaManager", "buildModelManager", "DefaultShopifyProductOptionSelection", "modelApiIdentifier", "pluralModelApiIdentifier", "ShopifyProductOptionManager", "buildModelManager", "DefaultShopifyProductVariantSelection", "modelApiIdentifier", "pluralModelApiIdentifier", "ShopifyProductVariantManager", "buildModelManager", "DefaultShopifyProductVariantMediaSelection", "modelApiIdentifier", "pluralModelApiIdentifier", "ShopifyProductVariantMediaManager", "buildModelManager", "DefaultLastSKUSelection", "modelApiIdentifier", "pluralModelApiIdentifier", "LastSKUManager", "buildModelManager", "DefaultBrainSessionSelection", "modelApiIdentifier", "pluralModelApiIdentifier", "BrainSessionManager", "buildModelManager", "DefaultBrainCategoriesSelection", "modelApiIdentifier", "pluralModelApiIdentifier", "BrainCategoriesManager", "buildModelManager", "DefaultChatLogSelection", "modelApiIdentifier", "pluralModelApiIdentifier", "ChatLogManager", "buildModelManager", "DefaultRecommendedProductSelection", "modelApiIdentifier", "pluralModelApiIdentifier", "RecommendedProductManager", "buildModelManager", "DefaultWarehouseSelection", "modelApiIdentifier", "pluralModelApiIdentifier", "WarehouseManager", "buildModelManager", "DefaultShopifyCompanySelection", "modelApiIdentifier", "pluralModelApiIdentifier", "ShopifyCompanyManager", "buildModelManager", "DefaultShopifyCompanyAddressSelection", "modelApiIdentifier", "pluralModelApiIdentifier", "ShopifyCompanyAddressManager", "buildModelManager", "DefaultShopifyCompanyContactSelection", "modelApiIdentifier", "pluralModelApiIdentifier", "ShopifyCompanyContactManager", "buildModelManager", "DefaultShopifyCompanyContactRoleSelection", "modelApiIdentifier", "pluralModelApiIdentifier", "ShopifyCompanyContactRoleManager", "buildModelManager", "DefaultShopifyCompanyContactRoleAssignmentSelection", "modelApiIdentifier", "pluralModelApiIdentifier", "ShopifyCompanyContactRoleAssignmentManager", "buildModelManager", "DefaultShopifyCompanyLocationSelection", "modelApiIdentifier", "pluralModelApiIdentifier", "ShopifyCompanyLocationManager", "buildModelManager", "DefaultShopifyShopSelection", "modelApiIdentifier", "pluralModelApiIdentifier", "ShopifyShopManager", "buildModelManager", "DefaultShopifyLocationSelection", "modelApiIdentifier", "pluralModelApiIdentifier", "ShopifyLocationManager", "buildModelManager", "DefaultShopifyFulfillmentSelection", "modelApiIdentifier", "pluralModelApiIdentifier", "ShopifyFulfillmentManager", "buildModelManager", "DefaultShopifyFulfillmentEventSelection", "modelApiIdentifier", "pluralModelApiIdentifier", "ShopifyFulfillmentEventManager", "buildModelManager", "DefaultShopifyFulfillmentLineItemSelection", "modelApiIdentifier", "pluralModelApiIdentifier", "ShopifyFulfillmentLineItemManager", "buildModelManager", "DefaultShopifyOrderLineItemSelection", "modelApiIdentifier", "pluralModelApiIdentifier", "ShopifyOrderLineItemManager", "buildModelManager", "DefaultShopifyOrderTransactionSelection", "modelApiIdentifier", "pluralModelApiIdentifier", "ShopifyOrderTransactionManager", "buildModelManager", "import_meta", "productionEnv", "fallbackEnv", "availableAuthenticationModes", "maybeGetAuthenticationModeOptionsFromClientOptions", "options", "topLevelAuthModes", "key", "GadgetClientError", "getImplicitEnv", "error", "AdminActionBlockClient", "_AdminActionBlockClient", "_a", "_b", "_c", "_d", "_e", "_f", "buildGlobalAction", "buildInlineComputedView", "callback", "__async", "inSSRContext", "import_meta", "api", "apiRoot", "exchanges", "__spreadValues", "devHarnessExchange", "forward", "operations$", "operationResult$", "pipe", "map", "result", "event", "connectionOptions", "__spreadProps", "authenticationMode", "GadgetConnection", "AuthenticationMode", "_g", "_input", "init", "headers", "idToken", "value", "params", "SessionManager", "CurrentSessionManager", "ShopifyGdprRequestManager", "ShopifySyncManager", "SmsTemplatesManager", "AllowedTagManager", "ShopifyCustomerManager", "ShopifyCustomerAddressManager", "ShopifyOrderManager", "ShopifyProductManager", "ShopifyFileManager", "ShopifyBulkOperationManager", "ShopifyCustomerMergeableManager", "ShopifyProductImageManager", "ShopifyProductMediaManager", "ShopifyProductOptionManager", "ShopifyProductVariantManager", "ShopifyProductVariantMediaManager", "LastSKUManager", "BrainSessionManager", "BrainCategoriesManager", "ChatLogManager", "RecommendedProductManager", "WarehouseManager", "ShopifyCompanyManager", "ShopifyCompanyAddressManager", "ShopifyCompanyContactManager", "ShopifyCompanyContactRoleManager", "ShopifyCompanyContactRoleAssignmentManager", "ShopifyCompanyLocationManager", "ShopifyShopManager", "ShopifyLocationManager", "ShopifyFulfillmentManager", "ShopifyFulfillmentEventManager", "ShopifyFulfillmentLineItemManager", "ShopifyOrderLineItemManager", "ShopifyOrderTransactionManager", "InternalModelManager", "assert", "graphQL", "variables", "data", "_0", "input", "action", "inputOrOptions", "maybeOptions", "enqueueActionRunner", "id", "BackgroundActionHandle", "Client", "isProduction", "gadgetApi", "Client", "fetchSmsTemplates", "__async", "gadgetApi", "err", "import_jsx_runtime", "TARGET", "SmsCenter_default", "reactExtension", "App", "_a", "data", "useApi", "status", "setStatus", "smsTemplates", "setSmsTemplates", "loading", "setLoading", "customerPhone", "setCustomerPhone", "orderDetails", "setOrderDetails", "orderId", "__async", "orderInfo", "getOrderInfo", "resultsProcessed", "fetchSmsTemplates", "res", "__spreadProps", "__spreadValues", "replacePlaceholders", "err", "handleSendSms", "smsText", "response", "sendSmsMessage", "note", "addOrderNote", "error", "generateContextMessage", "_b", "productName", "BlockStack", "Text", "InlineStack", "Link", "template", "Button", "ProgressIndicator", "Badge"]
}
